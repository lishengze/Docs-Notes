/////////////////////////////////////////////////////////////////////////
///@system 执行引擎系统
///@company 上海期货信息技术有限公司
///@file BaseDataStruct.cpp
///@brief实现了内存数据库用的基本数据结构类，以及iterator、trigger的基类
///@history 
///20060128	王肇东		创建该文件
///20081203	王肇东		为了NT-0058的需要，增加了读入CSV时自动识别双引号的功能
/////////////////////////////////////////////////////////////////////////

#include "BaseDataStruct.h"
#include "databaseFactories.h"

int compare(const char *s1, const char *s2)
{
	int result=strcmp(s1,s2);
	if (result>0)
		return 1;
	else if (result<0)
		return -1;
	return 0;
}

int compare(const int v1,const int v2)
{
	if (v1>v2)
		return 1;
	if (v1<v2)
		return -1;
	return 0;
}

int compare(const QWORD v1,const QWORD v2)
{
	if (v1>v2)
		return 1;
	if (v1<v2)
		return -1;
	return 0;
}

int compare(const double v1,const double v2)
{
	if (v1>v2+SMALL_DOUBLE)
		return 1;
	if (v1<v2-SMALL_DOUBLE)
		return -1;
	return 0;
}

char *getNextToken(char *buffer)
{
	static char *last;
	char *from, *to;
	
	if (buffer==NULL)
	{
		from=last;
		if (from==NULL)
		{
			return NULL;
		}
	}
	else
	{
		from=buffer;
	}
	
	bool hasQuote=false;
	if (*from=='"')
	{
		from++;
		hasQuote=true;
	}
	to=from;
	while ((*to!='\0')&&(*to!=',')&&(*to!='\n'))
	{
		if (hasQuote && (*to=='"'))
		{
			to++;
			break;
		}
		to++;
	}
	if (*to!=',')
	{
		last=NULL;
	}
	else
	{
		last=to+1;
	}
	if (!hasQuote)
	{
		*to='\0';
	}
	else
	{
		*(to-1)='\0';
	}
	return from;
}


void CWriteableSysInvalidateOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"OrderSysID,OrderLocalID,ActionDate,ActionTime,ErrorMsg,ParticipantID,UserID,ClientID,InstrumentID,Direction,CombOffsetFlag,CombHedgeFlag,LimitPrice,VolumeTotalOriginal,TimeCondition,VolumeCondition,MinVolume\n");
}
	
void CWriteableSysInvalidateOrder::init(void)
{
	OrderSysID.clear();
	OrderLocalID.clear();
	ActionDate.clear();
	ActionTime.clear();
	ErrorMsg.clear();
	ParticipantID.clear();
	UserID.clear();
	ClientID.clear();
	InstrumentID.clear();
	Direction.clear();
	CombOffsetFlag.clear();
	CombHedgeFlag.clear();
	LimitPrice.clear();
	VolumeTotalOriginal.clear();
	TimeCondition.clear();
	VolumeCondition.clear();
	MinVolume.clear();
}

int CWriteableSysInvalidateOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysInvalidateOrder),input)!=sizeof(CWriteableSysInvalidateOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableSysInvalidateOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ErrorMsg=token;
		}
		else
		{
			ErrorMsg="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOffsetFlag=token;
		}
		else
		{
			CombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombHedgeFlag=token;
		}
		else
		{
			CombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotalOriginal=token;
		}
		else
		{
			VolumeTotalOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeCondition=token;
		}
		else
		{
			TimeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeCondition=token;
		}
		else
		{
			VolumeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinVolume=token;
		}
		else
		{
			MinVolume="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ErrorMsg"))
			{
				ErrorMsg=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"CombOffsetFlag"))
			{
				CombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"CombHedgeFlag"))
			{
				CombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeTotalOriginal"))
			{
				VolumeTotalOriginal=token;
			}
			else if (!strcmp(fieldName,"TimeCondition"))
			{
				TimeCondition=token;
			}
			else if (!strcmp(fieldName,"VolumeCondition"))
			{
				VolumeCondition=token;
			}
			else if (!strcmp(fieldName,"MinVolume"))
			{
				MinVolume=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysInvalidateOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysInvalidateOrder),output)!=sizeof(CWriteableSysInvalidateOrder))
		return 0;
	else
		return 1;
}

int CWriteableSysInvalidateOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ErrorMsg.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotalOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysInvalidateOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysInvalidateOrder%s = {\n", index_buf);
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [插入日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [插入时间]\n",buf);	
	ErrorMsg.getString(buf);
	fprintf(fp,"\t\tErrorMsg = %s    [错误信息]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);	
	MinVolume.getString(buf);
	fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysInvalidateOrder::dumpDiff(FILE *fp, const CWriteableSysInvalidateOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysInvalidateOrder = {\n");
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [插入日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [插入日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [插入时间]\n",buf);
	}
	ErrorMsg.getString(buf);
	if (compare(ErrorMsg.getValue(),pOriginal->ErrorMsg.getValue())!=0)
	{
		pOriginal->ErrorMsg.getString(bufOriginal);
		fprintf(fp,"\t\tErrorMsg = %s -> %s    [错误信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tErrorMsg = %s    [错误信息]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	CombOffsetFlag.getString(buf);
	if (compare(CombOffsetFlag.getValue(),pOriginal->CombOffsetFlag.getValue())!=0)
	{
		pOriginal->CombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombOffsetFlag = %s -> %s    [组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);
	}
	CombHedgeFlag.getString(buf);
	if (compare(CombHedgeFlag.getValue(),pOriginal->CombHedgeFlag.getValue())!=0)
	{
		pOriginal->CombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombHedgeFlag = %s -> %s    [组合投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeTotalOriginal.getString(buf);
	if (compare(VolumeTotalOriginal.getValue(),pOriginal->VolumeTotalOriginal.getValue())!=0)
	{
		pOriginal->VolumeTotalOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotalOriginal = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);
	}
	TimeCondition.getString(buf);
	if (compare(TimeCondition.getValue(),pOriginal->TimeCondition.getValue())!=0)
	{
		pOriginal->TimeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tTimeCondition = %s -> %s    [有效期类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);
	}
	VolumeCondition.getString(buf);
	if (compare(VolumeCondition.getValue(),pOriginal->VolumeCondition.getValue())!=0)
	{
		pOriginal->VolumeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeCondition = %s -> %s    [成交量类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);
	}
	MinVolume.getString(buf);
	if (compare(MinVolume.getValue(),pOriginal->MinVolume.getValue())!=0)
	{
		pOriginal->MinVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinVolume = %s -> %s    [最小成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysInvalidateOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ErrorMsg.getString(buf);
	fprintf(fp,",ErrorMsg,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,",CombOffsetFlag,%s",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,",CombHedgeFlag,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,",VolumeTotalOriginal,%s",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,",TimeCondition,%s",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,",VolumeCondition,%s",buf);	
	MinVolume.getString(buf);
	fprintf(fp,",MinVolume,%s",buf);	
}

void CWriteableSysInvalidateOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ErrorMsg.getString(buf);
	sprintf(p,"ErrorMsg=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	CombOffsetFlag.getString(buf);
	sprintf(p,"CombOffsetFlag=%s,",buf);
	p+=strlen(p);
	CombHedgeFlag.getString(buf);
	sprintf(p,"CombHedgeFlag=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeTotalOriginal.getString(buf);
	sprintf(p,"VolumeTotalOriginal=%s,",buf);
	p+=strlen(p);
	TimeCondition.getString(buf);
	sprintf(p,"TimeCondition=%s,",buf);
	p+=strlen(p);
	VolumeCondition.getString(buf);
	sprintf(p,"VolumeCondition=%s,",buf);
	p+=strlen(p);
	MinVolume.getString(buf);
	sprintf(p,"MinVolume=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysInvalidateOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysInvalidateOrder");
	pLogger->output(indent,0,"{");
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 插入日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 插入时间",buf);
	ErrorMsg.getString(buf);
	pLogger->output(indent+1,0,"ErrorMsg=%s 错误信息",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	CombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"CombOffsetFlag=%s 组合开平标志",buf);
	CombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"CombHedgeFlag=%s 组合投机套保标志",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeTotalOriginal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotalOriginal=%s 数量",buf);
	TimeCondition.getString(buf);
	pLogger->output(indent+1,0,"TimeCondition=%s 有效期类型",buf);
	VolumeCondition.getString(buf);
	pLogger->output(indent+1,0,"VolumeCondition=%s 成交量类型",buf);
	MinVolume.getString(buf);
	pLogger->output(indent+1,0,"MinVolume=%s 最小成交量",buf);
	pLogger->output(indent,0,"}");
}

CSysInvalidateOrderIterator::~CSysInvalidateOrderIterator(void)
{
}


void CSysInvalidateOrderIterator::dump(FILE *output)
{
	CSysInvalidateOrder *pSysInvalidateOrder;
	
	while ((pSysInvalidateOrder=next())!=NULL)
	{
		pSysInvalidateOrder->dump(output);
	}
}



void CWriteableSysOrderStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,OrderSysID,OrderLocalID,InsertDate,InsertTime,OrderStatus,ParticipantID,UserID,ClientID,InstrumentID,Direction,CombOffsetFlag,CombHedgeFlag,LimitPrice,VolumeTotalOriginal,TimeCondition,VolumeCondition,MinVolume\n");
}
	
void CWriteableSysOrderStatus::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	OrderSysID.clear();
	OrderLocalID.clear();
	InsertDate.clear();
	InsertTime.clear();
	OrderStatus.clear();
	ParticipantID.clear();
	UserID.clear();
	ClientID.clear();
	InstrumentID.clear();
	Direction.clear();
	CombOffsetFlag.clear();
	CombHedgeFlag.clear();
	LimitPrice.clear();
	VolumeTotalOriginal.clear();
	TimeCondition.clear();
	VolumeCondition.clear();
	MinVolume.clear();
}

int CWriteableSysOrderStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysOrderStatus),input)!=sizeof(CWriteableSysOrderStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableSysOrderStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertDate=token;
		}
		else
		{
			InsertDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderStatus=token;
		}
		else
		{
			OrderStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOffsetFlag=token;
		}
		else
		{
			CombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombHedgeFlag=token;
		}
		else
		{
			CombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotalOriginal=token;
		}
		else
		{
			VolumeTotalOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeCondition=token;
		}
		else
		{
			TimeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeCondition=token;
		}
		else
		{
			VolumeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinVolume=token;
		}
		else
		{
			MinVolume="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"InsertDate"))
			{
				InsertDate=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"OrderStatus"))
			{
				OrderStatus=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"CombOffsetFlag"))
			{
				CombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"CombHedgeFlag"))
			{
				CombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeTotalOriginal"))
			{
				VolumeTotalOriginal=token;
			}
			else if (!strcmp(fieldName,"TimeCondition"))
			{
				TimeCondition=token;
			}
			else if (!strcmp(fieldName,"VolumeCondition"))
			{
				VolumeCondition=token;
			}
			else if (!strcmp(fieldName,"MinVolume"))
			{
				MinVolume=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysOrderStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysOrderStatus),output)!=sizeof(CWriteableSysOrderStatus))
		return 0;
	else
		return 1;
}

int CWriteableSysOrderStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotalOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysOrderStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysOrderStatus%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	InsertDate.getString(buf);
	fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);	
	MinVolume.getString(buf);
	fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysOrderStatus::dumpDiff(FILE *fp, const CWriteableSysOrderStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysOrderStatus = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	InsertDate.getString(buf);
	if (compare(InsertDate.getValue(),pOriginal->InsertDate.getValue())!=0)
	{
		pOriginal->InsertDate.getString(bufOriginal);
		fprintf(fp,"\t\tInsertDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	OrderStatus.getString(buf);
	if (compare(OrderStatus.getValue(),pOriginal->OrderStatus.getValue())!=0)
	{
		pOriginal->OrderStatus.getString(bufOriginal);
		fprintf(fp,"\t\tOrderStatus = %s -> %s    [报单状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	CombOffsetFlag.getString(buf);
	if (compare(CombOffsetFlag.getValue(),pOriginal->CombOffsetFlag.getValue())!=0)
	{
		pOriginal->CombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombOffsetFlag = %s -> %s    [组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);
	}
	CombHedgeFlag.getString(buf);
	if (compare(CombHedgeFlag.getValue(),pOriginal->CombHedgeFlag.getValue())!=0)
	{
		pOriginal->CombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombHedgeFlag = %s -> %s    [组合投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeTotalOriginal.getString(buf);
	if (compare(VolumeTotalOriginal.getValue(),pOriginal->VolumeTotalOriginal.getValue())!=0)
	{
		pOriginal->VolumeTotalOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotalOriginal = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);
	}
	TimeCondition.getString(buf);
	if (compare(TimeCondition.getValue(),pOriginal->TimeCondition.getValue())!=0)
	{
		pOriginal->TimeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tTimeCondition = %s -> %s    [有效期类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);
	}
	VolumeCondition.getString(buf);
	if (compare(VolumeCondition.getValue(),pOriginal->VolumeCondition.getValue())!=0)
	{
		pOriginal->VolumeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeCondition = %s -> %s    [成交量类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);
	}
	MinVolume.getString(buf);
	if (compare(MinVolume.getValue(),pOriginal->MinVolume.getValue())!=0)
	{
		pOriginal->MinVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinVolume = %s -> %s    [最小成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysOrderStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	InsertDate.getString(buf);
	fprintf(fp,",InsertDate,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,",OrderStatus,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,",CombOffsetFlag,%s",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,",CombHedgeFlag,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,",VolumeTotalOriginal,%s",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,",TimeCondition,%s",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,",VolumeCondition,%s",buf);	
	MinVolume.getString(buf);
	fprintf(fp,",MinVolume,%s",buf);	
}

void CWriteableSysOrderStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	InsertDate.getString(buf);
	sprintf(p,"InsertDate=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	OrderStatus.getString(buf);
	sprintf(p,"OrderStatus=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	CombOffsetFlag.getString(buf);
	sprintf(p,"CombOffsetFlag=%s,",buf);
	p+=strlen(p);
	CombHedgeFlag.getString(buf);
	sprintf(p,"CombHedgeFlag=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeTotalOriginal.getString(buf);
	sprintf(p,"VolumeTotalOriginal=%s,",buf);
	p+=strlen(p);
	TimeCondition.getString(buf);
	sprintf(p,"TimeCondition=%s,",buf);
	p+=strlen(p);
	VolumeCondition.getString(buf);
	sprintf(p,"VolumeCondition=%s,",buf);
	p+=strlen(p);
	MinVolume.getString(buf);
	sprintf(p,"MinVolume=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysOrderStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysOrderStatus");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	InsertDate.getString(buf);
	pLogger->output(indent+1,0,"InsertDate=%s 报单日期",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	OrderStatus.getString(buf);
	pLogger->output(indent+1,0,"OrderStatus=%s 报单状态",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	CombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"CombOffsetFlag=%s 组合开平标志",buf);
	CombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"CombHedgeFlag=%s 组合投机套保标志",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeTotalOriginal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotalOriginal=%s 数量",buf);
	TimeCondition.getString(buf);
	pLogger->output(indent+1,0,"TimeCondition=%s 有效期类型",buf);
	VolumeCondition.getString(buf);
	pLogger->output(indent+1,0,"VolumeCondition=%s 成交量类型",buf);
	MinVolume.getString(buf);
	pLogger->output(indent+1,0,"MinVolume=%s 最小成交量",buf);
	pLogger->output(indent,0,"}");
}

CSysOrderStatusIterator::~CSysOrderStatusIterator(void)
{
}


void CSysOrderStatusIterator::dump(FILE *output)
{
	CSysOrderStatus *pSysOrderStatus;
	
	while ((pSysOrderStatus=next())!=NULL)
	{
		pSysOrderStatus->dump(output);
	}
}



void CWriteableSysBargainOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,TradeID,OrderSysID,InstrumentID,Price,Volume,ParticipantID,UserID,ClientID\n");
}
	
void CWriteableSysBargainOrder::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	TradeID.clear();
	OrderSysID.clear();
	InstrumentID.clear();
	Price.clear();
	Volume.clear();
	ParticipantID.clear();
	UserID.clear();
	ClientID.clear();
}

int CWriteableSysBargainOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysBargainOrder),input)!=sizeof(CWriteableSysBargainOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableSysBargainOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeID=token;
		}
		else
		{
			TradeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Price=token;
		}
		else
		{
			Price="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"TradeID"))
			{
				TradeID=token;
			}
			else if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"Price"))
			{
				Price=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysBargainOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysBargainOrder),output)!=sizeof(CWriteableSysBargainOrder))
		return 0;
	else
		return 1;
}

int CWriteableSysBargainOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Price.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysBargainOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysBargainOrder%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [成交日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [成交时间]\n",buf);	
	TradeID.getString(buf);
	fprintf(fp,"\t\tTradeID = %s    [成交编号]\n",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	Price.getString(buf);
	fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysBargainOrder::dumpDiff(FILE *fp, const CWriteableSysBargainOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysBargainOrder = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [成交日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [成交日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [成交时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [成交时间]\n",buf);
	}
	TradeID.getString(buf);
	if (compare(TradeID.getValue(),pOriginal->TradeID.getValue())!=0)
	{
		pOriginal->TradeID.getString(bufOriginal);
		fprintf(fp,"\t\tTradeID = %s -> %s    [成交编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeID = %s    [成交编号]\n",buf);
	}
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	Price.getString(buf);
	if (compare(Price.getValue(),pOriginal->Price.getValue())!=0)
	{
		pOriginal->Price.getString(bufOriginal);
		fprintf(fp,"\t\tPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysBargainOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	TradeID.getString(buf);
	fprintf(fp,",TradeID,%s",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	Price.getString(buf);
	fprintf(fp,",Price,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableSysBargainOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	TradeID.getString(buf);
	sprintf(p,"TradeID=%s,",buf);
	p+=strlen(p);
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	Price.getString(buf);
	sprintf(p,"Price=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysBargainOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysBargainOrder");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 成交日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 成交时间",buf);
	TradeID.getString(buf);
	pLogger->output(indent+1,0,"TradeID=%s 成交编号",buf);
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	Price.getString(buf);
	pLogger->output(indent+1,0,"Price=%s 价格",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}

CSysBargainOrderIterator::~CSysBargainOrderIterator(void)
{
}


void CSysBargainOrderIterator::dump(FILE *output)
{
	CSysBargainOrder *pSysBargainOrder;
	
	while ((pSysBargainOrder=next())!=NULL)
	{
		pSysBargainOrder->dump(output);
	}
}



void CWriteableSysInstProperty::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,SettlementGroupID,UnderlyingInstrID,ProductClass,PositionType,VolumeMultiple,UnderlyingMultiple,InstLifePhase,OpenDate,ExpireDate,StartDelivDate,EndDelivDate,BasisPrice,MaxMarketOrderVolume,MinMarketOrderVolume,MaxLimitOrderVolume,MinLimitOrderVolume,PriceTick,AllowDelivPersonOpen\n");
}
	
void CWriteableSysInstProperty::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	SettlementGroupID.clear();
	UnderlyingInstrID.clear();
	ProductClass.clear();
	PositionType.clear();
	VolumeMultiple.clear();
	UnderlyingMultiple.clear();
	InstLifePhase.clear();
	OpenDate.clear();
	ExpireDate.clear();
	StartDelivDate.clear();
	EndDelivDate.clear();
	BasisPrice.clear();
	MaxMarketOrderVolume.clear();
	MinMarketOrderVolume.clear();
	MaxLimitOrderVolume.clear();
	MinLimitOrderVolume.clear();
	PriceTick.clear();
	AllowDelivPersonOpen.clear();
}

int CWriteableSysInstProperty::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysInstProperty),input)!=sizeof(CWriteableSysInstProperty))
		return 0;
	else
		return 1;
}
	
int CWriteableSysInstProperty::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UnderlyingInstrID=token;
		}
		else
		{
			UnderlyingInstrID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductClass=token;
		}
		else
		{
			ProductClass="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PositionType=token;
		}
		else
		{
			PositionType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeMultiple=token;
		}
		else
		{
			VolumeMultiple="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UnderlyingMultiple=token;
		}
		else
		{
			UnderlyingMultiple="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstLifePhase=token;
		}
		else
		{
			InstLifePhase="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenDate=token;
		}
		else
		{
			OpenDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExpireDate=token;
		}
		else
		{
			ExpireDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartDelivDate=token;
		}
		else
		{
			StartDelivDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndDelivDate=token;
		}
		else
		{
			EndDelivDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BasisPrice=token;
		}
		else
		{
			BasisPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxMarketOrderVolume=token;
		}
		else
		{
			MaxMarketOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinMarketOrderVolume=token;
		}
		else
		{
			MinMarketOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxLimitOrderVolume=token;
		}
		else
		{
			MaxLimitOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinLimitOrderVolume=token;
		}
		else
		{
			MinLimitOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceTick=token;
		}
		else
		{
			PriceTick="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AllowDelivPersonOpen=token;
		}
		else
		{
			AllowDelivPersonOpen="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"UnderlyingInstrID"))
			{
				UnderlyingInstrID=token;
			}
			else if (!strcmp(fieldName,"ProductClass"))
			{
				ProductClass=token;
			}
			else if (!strcmp(fieldName,"PositionType"))
			{
				PositionType=token;
			}
			else if (!strcmp(fieldName,"VolumeMultiple"))
			{
				VolumeMultiple=token;
			}
			else if (!strcmp(fieldName,"UnderlyingMultiple"))
			{
				UnderlyingMultiple=token;
			}
			else if (!strcmp(fieldName,"InstLifePhase"))
			{
				InstLifePhase=token;
			}
			else if (!strcmp(fieldName,"OpenDate"))
			{
				OpenDate=token;
			}
			else if (!strcmp(fieldName,"ExpireDate"))
			{
				ExpireDate=token;
			}
			else if (!strcmp(fieldName,"StartDelivDate"))
			{
				StartDelivDate=token;
			}
			else if (!strcmp(fieldName,"EndDelivDate"))
			{
				EndDelivDate=token;
			}
			else if (!strcmp(fieldName,"BasisPrice"))
			{
				BasisPrice=token;
			}
			else if (!strcmp(fieldName,"MaxMarketOrderVolume"))
			{
				MaxMarketOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MinMarketOrderVolume"))
			{
				MinMarketOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MaxLimitOrderVolume"))
			{
				MaxLimitOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MinLimitOrderVolume"))
			{
				MinLimitOrderVolume=token;
			}
			else if (!strcmp(fieldName,"PriceTick"))
			{
				PriceTick=token;
			}
			else if (!strcmp(fieldName,"AllowDelivPersonOpen"))
			{
				AllowDelivPersonOpen=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysInstProperty::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysInstProperty),output)!=sizeof(CWriteableSysInstProperty))
		return 0;
	else
		return 1;
}

int CWriteableSysInstProperty::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UnderlyingInstrID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductClass.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PositionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeMultiple.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UnderlyingMultiple.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstLifePhase.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExpireDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartDelivDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndDelivDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BasisPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxMarketOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinMarketOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxLimitOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinLimitOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceTick.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AllowDelivPersonOpen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysInstProperty::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysInstProperty%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	UnderlyingInstrID.getString(buf);
	fprintf(fp,"\t\tUnderlyingInstrID = %s    [基础商品代码]\n",buf);	
	ProductClass.getString(buf);
	fprintf(fp,"\t\tProductClass = %s    [产品类型]\n",buf);	
	PositionType.getString(buf);
	fprintf(fp,"\t\tPositionType = %s    [持仓类型]\n",buf);	
	VolumeMultiple.getString(buf);
	fprintf(fp,"\t\tVolumeMultiple = %s    [合约数量乘数]\n",buf);	
	UnderlyingMultiple.getString(buf);
	fprintf(fp,"\t\tUnderlyingMultiple = %s    [合约基础商品乘数]\n",buf);	
	InstLifePhase.getString(buf);
	fprintf(fp,"\t\tInstLifePhase = %s    [合约生命周期状态]\n",buf);	
	OpenDate.getString(buf);
	fprintf(fp,"\t\tOpenDate = %s    [上市日]\n",buf);	
	ExpireDate.getString(buf);
	fprintf(fp,"\t\tExpireDate = %s    [到期日]\n",buf);	
	StartDelivDate.getString(buf);
	fprintf(fp,"\t\tStartDelivDate = %s    [开始交割日]\n",buf);	
	EndDelivDate.getString(buf);
	fprintf(fp,"\t\tEndDelivDate = %s    [最后交割日]\n",buf);	
	BasisPrice.getString(buf);
	fprintf(fp,"\t\tBasisPrice = %s    [挂牌基准价]\n",buf);	
	MaxMarketOrderVolume.getString(buf);
	fprintf(fp,"\t\tMaxMarketOrderVolume = %s    [市价单最大下单量]\n",buf);	
	MinMarketOrderVolume.getString(buf);
	fprintf(fp,"\t\tMinMarketOrderVolume = %s    [市价单最小下单量]\n",buf);	
	MaxLimitOrderVolume.getString(buf);
	fprintf(fp,"\t\tMaxLimitOrderVolume = %s    [限价单最大下单量]\n",buf);	
	MinLimitOrderVolume.getString(buf);
	fprintf(fp,"\t\tMinLimitOrderVolume = %s    [限价单最小下单量]\n",buf);	
	PriceTick.getString(buf);
	fprintf(fp,"\t\tPriceTick = %s    [最小变动价位]\n",buf);	
	AllowDelivPersonOpen.getString(buf);
	fprintf(fp,"\t\tAllowDelivPersonOpen = %s    [交割月自然人开仓]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysInstProperty::dumpDiff(FILE *fp, const CWriteableSysInstProperty *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysInstProperty = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	UnderlyingInstrID.getString(buf);
	if (compare(UnderlyingInstrID.getValue(),pOriginal->UnderlyingInstrID.getValue())!=0)
	{
		pOriginal->UnderlyingInstrID.getString(bufOriginal);
		fprintf(fp,"\t\tUnderlyingInstrID = %s -> %s    [基础商品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnderlyingInstrID = %s    [基础商品代码]\n",buf);
	}
	ProductClass.getString(buf);
	if (compare(ProductClass.getValue(),pOriginal->ProductClass.getValue())!=0)
	{
		pOriginal->ProductClass.getString(bufOriginal);
		fprintf(fp,"\t\tProductClass = %s -> %s    [产品类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductClass = %s    [产品类型]\n",buf);
	}
	PositionType.getString(buf);
	if (compare(PositionType.getValue(),pOriginal->PositionType.getValue())!=0)
	{
		pOriginal->PositionType.getString(bufOriginal);
		fprintf(fp,"\t\tPositionType = %s -> %s    [持仓类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPositionType = %s    [持仓类型]\n",buf);
	}
	VolumeMultiple.getString(buf);
	if (compare(VolumeMultiple.getValue(),pOriginal->VolumeMultiple.getValue())!=0)
	{
		pOriginal->VolumeMultiple.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeMultiple = %s -> %s    [合约数量乘数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeMultiple = %s    [合约数量乘数]\n",buf);
	}
	UnderlyingMultiple.getString(buf);
	if (compare(UnderlyingMultiple.getValue(),pOriginal->UnderlyingMultiple.getValue())!=0)
	{
		pOriginal->UnderlyingMultiple.getString(bufOriginal);
		fprintf(fp,"\t\tUnderlyingMultiple = %s -> %s    [合约基础商品乘数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnderlyingMultiple = %s    [合约基础商品乘数]\n",buf);
	}
	InstLifePhase.getString(buf);
	if (compare(InstLifePhase.getValue(),pOriginal->InstLifePhase.getValue())!=0)
	{
		pOriginal->InstLifePhase.getString(bufOriginal);
		fprintf(fp,"\t\tInstLifePhase = %s -> %s    [合约生命周期状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstLifePhase = %s    [合约生命周期状态]\n",buf);
	}
	OpenDate.getString(buf);
	if (compare(OpenDate.getValue(),pOriginal->OpenDate.getValue())!=0)
	{
		pOriginal->OpenDate.getString(bufOriginal);
		fprintf(fp,"\t\tOpenDate = %s -> %s    [上市日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenDate = %s    [上市日]\n",buf);
	}
	ExpireDate.getString(buf);
	if (compare(ExpireDate.getValue(),pOriginal->ExpireDate.getValue())!=0)
	{
		pOriginal->ExpireDate.getString(bufOriginal);
		fprintf(fp,"\t\tExpireDate = %s -> %s    [到期日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExpireDate = %s    [到期日]\n",buf);
	}
	StartDelivDate.getString(buf);
	if (compare(StartDelivDate.getValue(),pOriginal->StartDelivDate.getValue())!=0)
	{
		pOriginal->StartDelivDate.getString(bufOriginal);
		fprintf(fp,"\t\tStartDelivDate = %s -> %s    [开始交割日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartDelivDate = %s    [开始交割日]\n",buf);
	}
	EndDelivDate.getString(buf);
	if (compare(EndDelivDate.getValue(),pOriginal->EndDelivDate.getValue())!=0)
	{
		pOriginal->EndDelivDate.getString(bufOriginal);
		fprintf(fp,"\t\tEndDelivDate = %s -> %s    [最后交割日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndDelivDate = %s    [最后交割日]\n",buf);
	}
	BasisPrice.getString(buf);
	if (compare(BasisPrice.getValue(),pOriginal->BasisPrice.getValue())!=0)
	{
		pOriginal->BasisPrice.getString(bufOriginal);
		fprintf(fp,"\t\tBasisPrice = %s -> %s    [挂牌基准价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBasisPrice = %s    [挂牌基准价]\n",buf);
	}
	MaxMarketOrderVolume.getString(buf);
	if (compare(MaxMarketOrderVolume.getValue(),pOriginal->MaxMarketOrderVolume.getValue())!=0)
	{
		pOriginal->MaxMarketOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMaxMarketOrderVolume = %s -> %s    [市价单最大下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxMarketOrderVolume = %s    [市价单最大下单量]\n",buf);
	}
	MinMarketOrderVolume.getString(buf);
	if (compare(MinMarketOrderVolume.getValue(),pOriginal->MinMarketOrderVolume.getValue())!=0)
	{
		pOriginal->MinMarketOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinMarketOrderVolume = %s -> %s    [市价单最小下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinMarketOrderVolume = %s    [市价单最小下单量]\n",buf);
	}
	MaxLimitOrderVolume.getString(buf);
	if (compare(MaxLimitOrderVolume.getValue(),pOriginal->MaxLimitOrderVolume.getValue())!=0)
	{
		pOriginal->MaxLimitOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMaxLimitOrderVolume = %s -> %s    [限价单最大下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxLimitOrderVolume = %s    [限价单最大下单量]\n",buf);
	}
	MinLimitOrderVolume.getString(buf);
	if (compare(MinLimitOrderVolume.getValue(),pOriginal->MinLimitOrderVolume.getValue())!=0)
	{
		pOriginal->MinLimitOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinLimitOrderVolume = %s -> %s    [限价单最小下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinLimitOrderVolume = %s    [限价单最小下单量]\n",buf);
	}
	PriceTick.getString(buf);
	if (compare(PriceTick.getValue(),pOriginal->PriceTick.getValue())!=0)
	{
		pOriginal->PriceTick.getString(bufOriginal);
		fprintf(fp,"\t\tPriceTick = %s -> %s    [最小变动价位]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceTick = %s    [最小变动价位]\n",buf);
	}
	AllowDelivPersonOpen.getString(buf);
	if (compare(AllowDelivPersonOpen.getValue(),pOriginal->AllowDelivPersonOpen.getValue())!=0)
	{
		pOriginal->AllowDelivPersonOpen.getString(bufOriginal);
		fprintf(fp,"\t\tAllowDelivPersonOpen = %s -> %s    [交割月自然人开仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAllowDelivPersonOpen = %s    [交割月自然人开仓]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysInstProperty::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	UnderlyingInstrID.getString(buf);
	fprintf(fp,",UnderlyingInstrID,%s",buf);	
	ProductClass.getString(buf);
	fprintf(fp,",ProductClass,%s",buf);	
	PositionType.getString(buf);
	fprintf(fp,",PositionType,%s",buf);	
	VolumeMultiple.getString(buf);
	fprintf(fp,",VolumeMultiple,%s",buf);	
	UnderlyingMultiple.getString(buf);
	fprintf(fp,",UnderlyingMultiple,%s",buf);	
	InstLifePhase.getString(buf);
	fprintf(fp,",InstLifePhase,%s",buf);	
	OpenDate.getString(buf);
	fprintf(fp,",OpenDate,%s",buf);	
	ExpireDate.getString(buf);
	fprintf(fp,",ExpireDate,%s",buf);	
	StartDelivDate.getString(buf);
	fprintf(fp,",StartDelivDate,%s",buf);	
	EndDelivDate.getString(buf);
	fprintf(fp,",EndDelivDate,%s",buf);	
	BasisPrice.getString(buf);
	fprintf(fp,",BasisPrice,%s",buf);	
	MaxMarketOrderVolume.getString(buf);
	fprintf(fp,",MaxMarketOrderVolume,%s",buf);	
	MinMarketOrderVolume.getString(buf);
	fprintf(fp,",MinMarketOrderVolume,%s",buf);	
	MaxLimitOrderVolume.getString(buf);
	fprintf(fp,",MaxLimitOrderVolume,%s",buf);	
	MinLimitOrderVolume.getString(buf);
	fprintf(fp,",MinLimitOrderVolume,%s",buf);	
	PriceTick.getString(buf);
	fprintf(fp,",PriceTick,%s",buf);	
	AllowDelivPersonOpen.getString(buf);
	fprintf(fp,",AllowDelivPersonOpen,%s",buf);	
}

void CWriteableSysInstProperty::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	UnderlyingInstrID.getString(buf);
	sprintf(p,"UnderlyingInstrID=%s,",buf);
	p+=strlen(p);
	ProductClass.getString(buf);
	sprintf(p,"ProductClass=%s,",buf);
	p+=strlen(p);
	PositionType.getString(buf);
	sprintf(p,"PositionType=%s,",buf);
	p+=strlen(p);
	VolumeMultiple.getString(buf);
	sprintf(p,"VolumeMultiple=%s,",buf);
	p+=strlen(p);
	UnderlyingMultiple.getString(buf);
	sprintf(p,"UnderlyingMultiple=%s,",buf);
	p+=strlen(p);
	InstLifePhase.getString(buf);
	sprintf(p,"InstLifePhase=%s,",buf);
	p+=strlen(p);
	OpenDate.getString(buf);
	sprintf(p,"OpenDate=%s,",buf);
	p+=strlen(p);
	ExpireDate.getString(buf);
	sprintf(p,"ExpireDate=%s,",buf);
	p+=strlen(p);
	StartDelivDate.getString(buf);
	sprintf(p,"StartDelivDate=%s,",buf);
	p+=strlen(p);
	EndDelivDate.getString(buf);
	sprintf(p,"EndDelivDate=%s,",buf);
	p+=strlen(p);
	BasisPrice.getString(buf);
	sprintf(p,"BasisPrice=%s,",buf);
	p+=strlen(p);
	MaxMarketOrderVolume.getString(buf);
	sprintf(p,"MaxMarketOrderVolume=%s,",buf);
	p+=strlen(p);
	MinMarketOrderVolume.getString(buf);
	sprintf(p,"MinMarketOrderVolume=%s,",buf);
	p+=strlen(p);
	MaxLimitOrderVolume.getString(buf);
	sprintf(p,"MaxLimitOrderVolume=%s,",buf);
	p+=strlen(p);
	MinLimitOrderVolume.getString(buf);
	sprintf(p,"MinLimitOrderVolume=%s,",buf);
	p+=strlen(p);
	PriceTick.getString(buf);
	sprintf(p,"PriceTick=%s,",buf);
	p+=strlen(p);
	AllowDelivPersonOpen.getString(buf);
	sprintf(p,"AllowDelivPersonOpen=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysInstProperty::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysInstProperty");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	UnderlyingInstrID.getString(buf);
	pLogger->output(indent+1,0,"UnderlyingInstrID=%s 基础商品代码",buf);
	ProductClass.getString(buf);
	pLogger->output(indent+1,0,"ProductClass=%s 产品类型",buf);
	PositionType.getString(buf);
	pLogger->output(indent+1,0,"PositionType=%s 持仓类型",buf);
	VolumeMultiple.getString(buf);
	pLogger->output(indent+1,0,"VolumeMultiple=%s 合约数量乘数",buf);
	UnderlyingMultiple.getString(buf);
	pLogger->output(indent+1,0,"UnderlyingMultiple=%s 合约基础商品乘数",buf);
	InstLifePhase.getString(buf);
	pLogger->output(indent+1,0,"InstLifePhase=%s 合约生命周期状态",buf);
	OpenDate.getString(buf);
	pLogger->output(indent+1,0,"OpenDate=%s 上市日",buf);
	ExpireDate.getString(buf);
	pLogger->output(indent+1,0,"ExpireDate=%s 到期日",buf);
	StartDelivDate.getString(buf);
	pLogger->output(indent+1,0,"StartDelivDate=%s 开始交割日",buf);
	EndDelivDate.getString(buf);
	pLogger->output(indent+1,0,"EndDelivDate=%s 最后交割日",buf);
	BasisPrice.getString(buf);
	pLogger->output(indent+1,0,"BasisPrice=%s 挂牌基准价",buf);
	MaxMarketOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MaxMarketOrderVolume=%s 市价单最大下单量",buf);
	MinMarketOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MinMarketOrderVolume=%s 市价单最小下单量",buf);
	MaxLimitOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MaxLimitOrderVolume=%s 限价单最大下单量",buf);
	MinLimitOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MinLimitOrderVolume=%s 限价单最小下单量",buf);
	PriceTick.getString(buf);
	pLogger->output(indent+1,0,"PriceTick=%s 最小变动价位",buf);
	AllowDelivPersonOpen.getString(buf);
	pLogger->output(indent+1,0,"AllowDelivPersonOpen=%s 交割月自然人开仓",buf);
	pLogger->output(indent,0,"}");
}

CSysInstPropertyIterator::~CSysInstPropertyIterator(void)
{
}


void CSysInstPropertyIterator::dump(FILE *output)
{
	CSysInstProperty *pSysInstProperty;
	
	while ((pSysInstProperty=next())!=NULL)
	{
		pSysInstProperty->dump(output);
	}
}



void CWriteableSysMarginRate::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ParticipantID,TradingRole,HedgeFlag,ValueMode,LongMarginRatio,ShortMarginRatio\n");
}
	
void CWriteableSysMarginRate::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
	HedgeFlag.clear();
	ValueMode.clear();
	LongMarginRatio.clear();
	ShortMarginRatio.clear();
}

int CWriteableSysMarginRate::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMarginRate),input)!=sizeof(CWriteableSysMarginRate))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMarginRate::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongMarginRatio=token;
		}
		else
		{
			LongMarginRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortMarginRatio=token;
		}
		else
		{
			ShortMarginRatio="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongMarginRatio"))
			{
				LongMarginRatio=token;
			}
			else if (!strcmp(fieldName,"ShortMarginRatio"))
			{
				ShortMarginRatio=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMarginRate::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMarginRate),output)!=sizeof(CWriteableSysMarginRate))
		return 0;
	else
		return 1;
}

int CWriteableSysMarginRate::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMarginRate::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMarginRate%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMarginRate::dumpDiff(FILE *fp, const CWriteableSysMarginRate *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMarginRate = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongMarginRatio.getString(buf);
	if (compare(LongMarginRatio.getValue(),pOriginal->LongMarginRatio.getValue())!=0)
	{
		pOriginal->LongMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tLongMarginRatio = %s -> %s    [多头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);
	}
	ShortMarginRatio.getString(buf);
	if (compare(ShortMarginRatio.getValue(),pOriginal->ShortMarginRatio.getValue())!=0)
	{
		pOriginal->ShortMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tShortMarginRatio = %s -> %s    [空头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMarginRate::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,",LongMarginRatio,%s",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,",ShortMarginRatio,%s",buf);	
}

void CWriteableSysMarginRate::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongMarginRatio.getString(buf);
	sprintf(p,"LongMarginRatio=%s,",buf);
	p+=strlen(p);
	ShortMarginRatio.getString(buf);
	sprintf(p,"ShortMarginRatio=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMarginRate::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMarginRate");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"LongMarginRatio=%s 多头保证金率",buf);
	ShortMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"ShortMarginRatio=%s 空头保证金率",buf);
	pLogger->output(indent,0,"}");
}

CSysMarginRateIterator::~CSysMarginRateIterator(void)
{
}


void CSysMarginRateIterator::dump(FILE *output)
{
	CSysMarginRate *pSysMarginRate;
	
	while ((pSysMarginRate=next())!=NULL)
	{
		pSysMarginRate->dump(output);
	}
}



void CWriteableSysPriceLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ValueMode,RoundingMode,UpperLimitPrice,LowerLimitPrice\n");
}
	
void CWriteableSysPriceLimit::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ValueMode.clear();
	RoundingMode.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
}

int CWriteableSysPriceLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysPriceLimit),input)!=sizeof(CWriteableSysPriceLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysPriceLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RoundingMode=token;
		}
		else
		{
			RoundingMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"RoundingMode"))
			{
				RoundingMode=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysPriceLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysPriceLimit),output)!=sizeof(CWriteableSysPriceLimit))
		return 0;
	else
		return 1;
}

int CWriteableSysPriceLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RoundingMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysPriceLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysPriceLimit%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysPriceLimit::dumpDiff(FILE *fp, const CWriteableSysPriceLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysPriceLimit = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	RoundingMode.getString(buf);
	if (compare(RoundingMode.getValue(),pOriginal->RoundingMode.getValue())!=0)
	{
		pOriginal->RoundingMode.getString(bufOriginal);
		fprintf(fp,"\t\tRoundingMode = %s -> %s    [舍入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysPriceLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,",RoundingMode,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
}

void CWriteableSysPriceLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	RoundingMode.getString(buf);
	sprintf(p,"RoundingMode=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysPriceLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysPriceLimit");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	RoundingMode.getString(buf);
	pLogger->output(indent+1,0,"RoundingMode=%s 舍入方式",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	pLogger->output(indent,0,"}");
}

CSysPriceLimitIterator::~CSysPriceLimitIterator(void)
{
}


void CSysPriceLimitIterator::dump(FILE *output)
{
	CSysPriceLimit *pSysPriceLimit;
	
	while ((pSysPriceLimit=next())!=NULL)
	{
		pSysPriceLimit->dump(output);
	}
}



void CWriteableSysPartPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ParticipantID,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,UpperLimitPrice,LowerLimitPrice\n");
}
	
void CWriteableSysPartPosiLimit::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
}

int CWriteableSysPartPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysPartPosiLimit),input)!=sizeof(CWriteableSysPartPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysPartPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysPartPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysPartPosiLimit),output)!=sizeof(CWriteableSysPartPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableSysPartPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysPartPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysPartPosiLimit%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartPosiLimit::dumpDiff(FILE *fp, const CWriteableSysPartPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysPartPosiLimit = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
}

void CWriteableSysPartPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysPartPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysPartPosiLimit");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	pLogger->output(indent,0,"}");
}

CSysPartPosiLimitIterator::~CSysPartPosiLimitIterator(void)
{
}


void CSysPartPosiLimitIterator::dump(FILE *output)
{
	CSysPartPosiLimit *pSysPartPosiLimit;
	
	while ((pSysPartPosiLimit=next())!=NULL)
	{
		pSysPartPosiLimit->dump(output);
	}
}



void CWriteableSysClientPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ClientType,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,UpperLimitPrice,LowerLimitPrice\n");
}
	
void CWriteableSysClientPosiLimit::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ClientType.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
}

int CWriteableSysClientPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysClientPosiLimit),input)!=sizeof(CWriteableSysClientPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysClientPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysClientPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysClientPosiLimit),output)!=sizeof(CWriteableSysClientPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableSysClientPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysClientPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysClientPosiLimit%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientPosiLimit::dumpDiff(FILE *fp, const CWriteableSysClientPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysClientPosiLimit = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
}

void CWriteableSysClientPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysClientPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysClientPosiLimit");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	pLogger->output(indent,0,"}");
}

CSysClientPosiLimitIterator::~CSysClientPosiLimitIterator(void)
{
}


void CSysClientPosiLimitIterator::dump(FILE *output)
{
	CSysClientPosiLimit *pSysClientPosiLimit;
	
	while ((pSysClientPosiLimit=next())!=NULL)
	{
		pSysClientPosiLimit->dump(output);
	}
}



void CWriteableSysSpecialPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ClientID,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,UpperLimitPrice,LowerLimitPrice\n");
}
	
void CWriteableSysSpecialPosiLimit::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ClientID.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
}

int CWriteableSysSpecialPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysSpecialPosiLimit),input)!=sizeof(CWriteableSysSpecialPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysSpecialPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysSpecialPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysSpecialPosiLimit),output)!=sizeof(CWriteableSysSpecialPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableSysSpecialPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysSpecialPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysSpecialPosiLimit%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysSpecialPosiLimit::dumpDiff(FILE *fp, const CWriteableSysSpecialPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysSpecialPosiLimit = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysSpecialPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
}

void CWriteableSysSpecialPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysSpecialPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysSpecialPosiLimit");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	pLogger->output(indent,0,"}");
}

CSysSpecialPosiLimitIterator::~CSysSpecialPosiLimitIterator(void)
{
}


void CSysSpecialPosiLimitIterator::dump(FILE *output)
{
	CSysSpecialPosiLimit *pSysSpecialPosiLimit;
	
	while ((pSysSpecialPosiLimit=next())!=NULL)
	{
		pSysSpecialPosiLimit->dump(output);
	}
}



void CWriteableSysTransactionChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,BillSN,ParticipantAccount,ParticipantID,Amount\n");
}
	
void CWriteableSysTransactionChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	BillSN.clear();
	ParticipantAccount.clear();
	ParticipantID.clear();
	Amount.clear();
}

int CWriteableSysTransactionChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysTransactionChg),input)!=sizeof(CWriteableSysTransactionChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysTransactionChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BillSN=token;
		}
		else
		{
			BillSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantAccount=token;
		}
		else
		{
			ParticipantAccount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Amount=token;
		}
		else
		{
			Amount="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"BillSN"))
			{
				BillSN=token;
			}
			else if (!strcmp(fieldName,"ParticipantAccount"))
			{
				ParticipantAccount=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"Amount"))
			{
				Amount=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysTransactionChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysTransactionChg),output)!=sizeof(CWriteableSysTransactionChg))
		return 0;
	else
		return 1;
}

int CWriteableSysTransactionChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BillSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantAccount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Amount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysTransactionChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysTransactionChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	BillSN.getString(buf);
	fprintf(fp,"\t\tBillSN = %s    [帐户往来流水号]\n",buf);	
	ParticipantAccount.getString(buf);
	fprintf(fp,"\t\tParticipantAccount = %s    [资金账户]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	Amount.getString(buf);
	fprintf(fp,"\t\tAmount = %s    [发生额]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysTransactionChg::dumpDiff(FILE *fp, const CWriteableSysTransactionChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysTransactionChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	BillSN.getString(buf);
	if (compare(BillSN.getValue(),pOriginal->BillSN.getValue())!=0)
	{
		pOriginal->BillSN.getString(bufOriginal);
		fprintf(fp,"\t\tBillSN = %s -> %s    [帐户往来流水号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBillSN = %s    [帐户往来流水号]\n",buf);
	}
	ParticipantAccount.getString(buf);
	if (compare(ParticipantAccount.getValue(),pOriginal->ParticipantAccount.getValue())!=0)
	{
		pOriginal->ParticipantAccount.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantAccount = %s -> %s    [资金账户]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantAccount = %s    [资金账户]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	Amount.getString(buf);
	if (compare(Amount.getValue(),pOriginal->Amount.getValue())!=0)
	{
		pOriginal->Amount.getString(bufOriginal);
		fprintf(fp,"\t\tAmount = %s -> %s    [发生额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAmount = %s    [发生额]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysTransactionChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	BillSN.getString(buf);
	fprintf(fp,",BillSN,%s",buf);	
	ParticipantAccount.getString(buf);
	fprintf(fp,",ParticipantAccount,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	Amount.getString(buf);
	fprintf(fp,",Amount,%s",buf);	
}

void CWriteableSysTransactionChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	BillSN.getString(buf);
	sprintf(p,"BillSN=%s,",buf);
	p+=strlen(p);
	ParticipantAccount.getString(buf);
	sprintf(p,"ParticipantAccount=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	Amount.getString(buf);
	sprintf(p,"Amount=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysTransactionChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysTransactionChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	BillSN.getString(buf);
	pLogger->output(indent+1,0,"BillSN=%s 帐户往来流水号",buf);
	ParticipantAccount.getString(buf);
	pLogger->output(indent+1,0,"ParticipantAccount=%s 资金账户",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	Amount.getString(buf);
	pLogger->output(indent+1,0,"Amount=%s 发生额",buf);
	pLogger->output(indent,0,"}");
}

CSysTransactionChgIterator::~CSysTransactionChgIterator(void)
{
}


void CSysTransactionChgIterator::dump(FILE *output)
{
	CSysTransactionChg *pSysTransactionChg;
	
	while ((pSysTransactionChg=next())!=NULL)
	{
		pSysTransactionChg->dump(output);
	}
}



void CWriteableSysClientChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,ClientID,ClientName,ClientType,IsActive,IdentifiedCardType,IdentifiedCardNo,OperationType\n");
}
	
void CWriteableSysClientChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	ClientID.clear();
	ClientName.clear();
	ClientType.clear();
	IsActive.clear();
	IdentifiedCardType.clear();
	IdentifiedCardNo.clear();
	OperationType.clear();
}

int CWriteableSysClientChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysClientChg),input)!=sizeof(CWriteableSysClientChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysClientChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientName=token;
		}
		else
		{
			ClientName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardType=token;
		}
		else
		{
			IdentifiedCardType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardNo=token;
		}
		else
		{
			IdentifiedCardNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"ClientName"))
			{
				ClientName=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardType"))
			{
				IdentifiedCardType=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardNo"))
			{
				IdentifiedCardNo=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysClientChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysClientChg),output)!=sizeof(CWriteableSysClientChg))
		return 0;
	else
		return 1;
}

int CWriteableSysClientChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysClientChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysClientChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	ClientName.getString(buf);
	fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientChg::dumpDiff(FILE *fp, const CWriteableSysClientChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysClientChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	ClientName.getString(buf);
	if (compare(ClientName.getValue(),pOriginal->ClientName.getValue())!=0)
	{
		pOriginal->ClientName.getString(bufOriginal);
		fprintf(fp,"\t\tClientName = %s -> %s    [客户名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	IdentifiedCardType.getString(buf);
	if (compare(IdentifiedCardType.getValue(),pOriginal->IdentifiedCardType.getValue())!=0)
	{
		pOriginal->IdentifiedCardType.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardType = %s -> %s    [证件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);
	}
	IdentifiedCardNo.getString(buf);
	if (compare(IdentifiedCardNo.getValue(),pOriginal->IdentifiedCardNo.getValue())!=0)
	{
		pOriginal->IdentifiedCardNo.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardNo = %s -> %s    [证件号码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	ClientName.getString(buf);
	fprintf(fp,",ClientName,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,",IdentifiedCardType,%s",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,",IdentifiedCardNo,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysClientChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	ClientName.getString(buf);
	sprintf(p,"ClientName=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	IdentifiedCardType.getString(buf);
	sprintf(p,"IdentifiedCardType=%s,",buf);
	p+=strlen(p);
	IdentifiedCardNo.getString(buf);
	sprintf(p,"IdentifiedCardNo=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysClientChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysClientChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	ClientName.getString(buf);
	pLogger->output(indent+1,0,"ClientName=%s 客户名称",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	IdentifiedCardType.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardType=%s 证件类型",buf);
	IdentifiedCardNo.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardNo=%s 证件号码",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysClientChgIterator::~CSysClientChgIterator(void)
{
}


void CSysClientChgIterator::dump(FILE *output)
{
	CSysClientChg *pSysClientChg;
	
	while ((pSysClientChg=next())!=NULL)
	{
		pSysClientChg->dump(output);
	}
}



void CWriteableSysPartClientChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,ClientID,ParticipantID,OperationType\n");
}
	
void CWriteableSysPartClientChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	ClientID.clear();
	ParticipantID.clear();
	OperationType.clear();
}

int CWriteableSysPartClientChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysPartClientChg),input)!=sizeof(CWriteableSysPartClientChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysPartClientChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysPartClientChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysPartClientChg),output)!=sizeof(CWriteableSysPartClientChg))
		return 0;
	else
		return 1;
}

int CWriteableSysPartClientChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysPartClientChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysPartClientChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartClientChg::dumpDiff(FILE *fp, const CWriteableSysPartClientChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysPartClientChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartClientChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysPartClientChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysPartClientChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysPartClientChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysPartClientChgIterator::~CSysPartClientChgIterator(void)
{
}


void CSysPartClientChgIterator::dump(FILE *output)
{
	CSysPartClientChg *pSysPartClientChg;
	
	while ((pSysPartClientChg=next())!=NULL)
	{
		pSysPartClientChg->dump(output);
	}
}



void CWriteableSysPosiLimitChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ParticipantID,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,OperationType\n");
}
	
void CWriteableSysPosiLimitChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	OperationType.clear();
}

int CWriteableSysPosiLimitChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysPosiLimitChg),input)!=sizeof(CWriteableSysPosiLimitChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysPosiLimitChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysPosiLimitChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysPosiLimitChg),output)!=sizeof(CWriteableSysPosiLimitChg))
		return 0;
	else
		return 1;
}

int CWriteableSysPosiLimitChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysPosiLimitChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysPosiLimitChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysPosiLimitChg::dumpDiff(FILE *fp, const CWriteableSysPosiLimitChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysPosiLimitChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysPosiLimitChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysPosiLimitChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysPosiLimitChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysPosiLimitChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysPosiLimitChgIterator::~CSysPosiLimitChgIterator(void)
{
}


void CSysPosiLimitChgIterator::dump(FILE *output)
{
	CSysPosiLimitChg *pSysPosiLimitChg;
	
	while ((pSysPosiLimitChg=next())!=NULL)
	{
		pSysPosiLimitChg->dump(output);
	}
}



void CWriteableSysClientPosiLimitChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ClientType,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,OperationType\n");
}
	
void CWriteableSysClientPosiLimitChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ClientType.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	OperationType.clear();
}

int CWriteableSysClientPosiLimitChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysClientPosiLimitChg),input)!=sizeof(CWriteableSysClientPosiLimitChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysClientPosiLimitChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysClientPosiLimitChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysClientPosiLimitChg),output)!=sizeof(CWriteableSysClientPosiLimitChg))
		return 0;
	else
		return 1;
}

int CWriteableSysClientPosiLimitChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysClientPosiLimitChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysClientPosiLimitChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientPosiLimitChg::dumpDiff(FILE *fp, const CWriteableSysClientPosiLimitChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysClientPosiLimitChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientPosiLimitChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysClientPosiLimitChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysClientPosiLimitChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysClientPosiLimitChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysClientPosiLimitChgIterator::~CSysClientPosiLimitChgIterator(void)
{
}


void CSysClientPosiLimitChgIterator::dump(FILE *output)
{
	CSysClientPosiLimitChg *pSysClientPosiLimitChg;
	
	while ((pSysClientPosiLimitChg=next())!=NULL)
	{
		pSysClientPosiLimitChg->dump(output);
	}
}



void CWriteableSysSpecPosiLimitChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ClientID,TradingRole,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,OperationType\n");
}
	
void CWriteableSysSpecPosiLimitChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ClientID.clear();
	TradingRole.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	OperationType.clear();
}

int CWriteableSysSpecPosiLimitChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysSpecPosiLimitChg),input)!=sizeof(CWriteableSysSpecPosiLimitChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysSpecPosiLimitChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysSpecPosiLimitChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysSpecPosiLimitChg),output)!=sizeof(CWriteableSysSpecPosiLimitChg))
		return 0;
	else
		return 1;
}

int CWriteableSysSpecPosiLimitChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysSpecPosiLimitChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysSpecPosiLimitChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysSpecPosiLimitChg::dumpDiff(FILE *fp, const CWriteableSysSpecPosiLimitChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysSpecPosiLimitChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysSpecPosiLimitChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysSpecPosiLimitChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysSpecPosiLimitChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysSpecPosiLimitChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysSpecPosiLimitChgIterator::~CSysSpecPosiLimitChgIterator(void)
{
}


void CSysSpecPosiLimitChgIterator::dump(FILE *output)
{
	CSysSpecPosiLimitChg *pSysSpecPosiLimitChg;
	
	while ((pSysSpecPosiLimitChg=next())!=NULL)
	{
		pSysSpecPosiLimitChg->dump(output);
	}
}



void CWriteableSysHedgeDetailChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,ParticipantID,ClientID,OperatorID,Time,InstrumentID,PosiDirection,TradingVolume,HedgeQuota,OperationType\n");
}
	
void CWriteableSysHedgeDetailChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	ParticipantID.clear();
	ClientID.clear();
	OperatorID.clear();
	Time.clear();
	InstrumentID.clear();
	PosiDirection.clear();
	TradingVolume.clear();
	HedgeQuota.clear();
	OperationType.clear();
}

int CWriteableSysHedgeDetailChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysHedgeDetailChg),input)!=sizeof(CWriteableSysHedgeDetailChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysHedgeDetailChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperatorID=token;
		}
		else
		{
			OperatorID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Time=token;
		}
		else
		{
			Time="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingVolume=token;
		}
		else
		{
			TradingVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeQuota=token;
		}
		else
		{
			HedgeQuota="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"OperatorID"))
			{
				OperatorID=token;
			}
			else if (!strcmp(fieldName,"Time"))
			{
				Time=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"TradingVolume"))
			{
				TradingVolume=token;
			}
			else if (!strcmp(fieldName,"HedgeQuota"))
			{
				HedgeQuota=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysHedgeDetailChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysHedgeDetailChg),output)!=sizeof(CWriteableSysHedgeDetailChg))
		return 0;
	else
		return 1;
}

int CWriteableSysHedgeDetailChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperatorID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Time.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeQuota.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysHedgeDetailChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysHedgeDetailChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	OperatorID.getString(buf);
	fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);	
	Time.getString(buf);
	fprintf(fp,"\t\tTime = %s    [时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	TradingVolume.getString(buf);
	fprintf(fp,"\t\tTradingVolume = %s    [发生额]\n",buf);	
	HedgeQuota.getString(buf);
	fprintf(fp,"\t\tHedgeQuota = %s    [保值额度]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysHedgeDetailChg::dumpDiff(FILE *fp, const CWriteableSysHedgeDetailChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysHedgeDetailChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	OperatorID.getString(buf);
	if (compare(OperatorID.getValue(),pOriginal->OperatorID.getValue())!=0)
	{
		pOriginal->OperatorID.getString(bufOriginal);
		fprintf(fp,"\t\tOperatorID = %s -> %s    [用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);
	}
	Time.getString(buf);
	if (compare(Time.getValue(),pOriginal->Time.getValue())!=0)
	{
		pOriginal->Time.getString(bufOriginal);
		fprintf(fp,"\t\tTime = %s -> %s    [时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTime = %s    [时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	TradingVolume.getString(buf);
	if (compare(TradingVolume.getValue(),pOriginal->TradingVolume.getValue())!=0)
	{
		pOriginal->TradingVolume.getString(bufOriginal);
		fprintf(fp,"\t\tTradingVolume = %s -> %s    [发生额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingVolume = %s    [发生额]\n",buf);
	}
	HedgeQuota.getString(buf);
	if (compare(HedgeQuota.getValue(),pOriginal->HedgeQuota.getValue())!=0)
	{
		pOriginal->HedgeQuota.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeQuota = %s -> %s    [保值额度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeQuota = %s    [保值额度]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysHedgeDetailChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	OperatorID.getString(buf);
	fprintf(fp,",OperatorID,%s",buf);	
	Time.getString(buf);
	fprintf(fp,",Time,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	TradingVolume.getString(buf);
	fprintf(fp,",TradingVolume,%s",buf);	
	HedgeQuota.getString(buf);
	fprintf(fp,",HedgeQuota,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysHedgeDetailChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	OperatorID.getString(buf);
	sprintf(p,"OperatorID=%s,",buf);
	p+=strlen(p);
	Time.getString(buf);
	sprintf(p,"Time=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	TradingVolume.getString(buf);
	sprintf(p,"TradingVolume=%s,",buf);
	p+=strlen(p);
	HedgeQuota.getString(buf);
	sprintf(p,"HedgeQuota=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysHedgeDetailChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysHedgeDetailChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	OperatorID.getString(buf);
	pLogger->output(indent+1,0,"OperatorID=%s 用户代码",buf);
	Time.getString(buf);
	pLogger->output(indent+1,0,"Time=%s 时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	TradingVolume.getString(buf);
	pLogger->output(indent+1,0,"TradingVolume=%s 发生额",buf);
	HedgeQuota.getString(buf);
	pLogger->output(indent+1,0,"HedgeQuota=%s 保值额度",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysHedgeDetailChgIterator::~CSysHedgeDetailChgIterator(void)
{
}


void CSysHedgeDetailChgIterator::dump(FILE *output)
{
	CSysHedgeDetailChg *pSysHedgeDetailChg;
	
	while ((pSysHedgeDetailChg=next())!=NULL)
	{
		pSysHedgeDetailChg->dump(output);
	}
}



void CWriteableSysParticipantChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,ParticipantID,ParticipantName,ParticipantAbbr,MemberType,IsActive,OperationType\n");
}
	
void CWriteableSysParticipantChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	ParticipantID.clear();
	ParticipantName.clear();
	ParticipantAbbr.clear();
	MemberType.clear();
	IsActive.clear();
	OperationType.clear();
}

int CWriteableSysParticipantChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysParticipantChg),input)!=sizeof(CWriteableSysParticipantChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysParticipantChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantName=token;
		}
		else
		{
			ParticipantName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantAbbr=token;
		}
		else
		{
			ParticipantAbbr="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemberType=token;
		}
		else
		{
			MemberType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ParticipantName"))
			{
				ParticipantName=token;
			}
			else if (!strcmp(fieldName,"ParticipantAbbr"))
			{
				ParticipantAbbr=token;
			}
			else if (!strcmp(fieldName,"MemberType"))
			{
				MemberType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysParticipantChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysParticipantChg),output)!=sizeof(CWriteableSysParticipantChg))
		return 0;
	else
		return 1;
}

int CWriteableSysParticipantChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantAbbr.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemberType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysParticipantChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysParticipantChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);	
	MemberType.getString(buf);
	fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticipantChg::dumpDiff(FILE *fp, const CWriteableSysParticipantChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysParticipantChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ParticipantName.getString(buf);
	if (compare(ParticipantName.getValue(),pOriginal->ParticipantName.getValue())!=0)
	{
		pOriginal->ParticipantName.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantName = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);
	}
	ParticipantAbbr.getString(buf);
	if (compare(ParticipantAbbr.getValue(),pOriginal->ParticipantAbbr.getValue())!=0)
	{
		pOriginal->ParticipantAbbr.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantAbbr = %s -> %s    [会员简称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);
	}
	MemberType.getString(buf);
	if (compare(MemberType.getValue(),pOriginal->MemberType.getValue())!=0)
	{
		pOriginal->MemberType.getString(bufOriginal);
		fprintf(fp,"\t\tMemberType = %s -> %s    [会员类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticipantChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,",ParticipantName,%s",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,",ParticipantAbbr,%s",buf);	
	MemberType.getString(buf);
	fprintf(fp,",MemberType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysParticipantChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ParticipantName.getString(buf);
	sprintf(p,"ParticipantName=%s,",buf);
	p+=strlen(p);
	ParticipantAbbr.getString(buf);
	sprintf(p,"ParticipantAbbr=%s,",buf);
	p+=strlen(p);
	MemberType.getString(buf);
	sprintf(p,"MemberType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysParticipantChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysParticipantChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ParticipantName.getString(buf);
	pLogger->output(indent+1,0,"ParticipantName=%s 会员名称",buf);
	ParticipantAbbr.getString(buf);
	pLogger->output(indent+1,0,"ParticipantAbbr=%s 会员简称",buf);
	MemberType.getString(buf);
	pLogger->output(indent+1,0,"MemberType=%s 会员类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysParticipantChgIterator::~CSysParticipantChgIterator(void)
{
}


void CSysParticipantChgIterator::dump(FILE *output)
{
	CSysParticipantChg *pSysParticipantChg;
	
	while ((pSysParticipantChg=next())!=NULL)
	{
		pSysParticipantChg->dump(output);
	}
}



void CWriteableSysMarginRateChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ParticipantID,TradingRole,HedgeFlag,ValueMode,LongMarginRatio,ShortMarginRatio,OperationType\n");
}
	
void CWriteableSysMarginRateChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
	HedgeFlag.clear();
	ValueMode.clear();
	LongMarginRatio.clear();
	ShortMarginRatio.clear();
	OperationType.clear();
}

int CWriteableSysMarginRateChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMarginRateChg),input)!=sizeof(CWriteableSysMarginRateChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMarginRateChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongMarginRatio=token;
		}
		else
		{
			LongMarginRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortMarginRatio=token;
		}
		else
		{
			ShortMarginRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongMarginRatio"))
			{
				LongMarginRatio=token;
			}
			else if (!strcmp(fieldName,"ShortMarginRatio"))
			{
				ShortMarginRatio=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMarginRateChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMarginRateChg),output)!=sizeof(CWriteableSysMarginRateChg))
		return 0;
	else
		return 1;
}

int CWriteableSysMarginRateChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMarginRateChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMarginRateChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMarginRateChg::dumpDiff(FILE *fp, const CWriteableSysMarginRateChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMarginRateChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongMarginRatio.getString(buf);
	if (compare(LongMarginRatio.getValue(),pOriginal->LongMarginRatio.getValue())!=0)
	{
		pOriginal->LongMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tLongMarginRatio = %s -> %s    [多头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);
	}
	ShortMarginRatio.getString(buf);
	if (compare(ShortMarginRatio.getValue(),pOriginal->ShortMarginRatio.getValue())!=0)
	{
		pOriginal->ShortMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tShortMarginRatio = %s -> %s    [空头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMarginRateChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,",LongMarginRatio,%s",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,",ShortMarginRatio,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysMarginRateChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongMarginRatio.getString(buf);
	sprintf(p,"LongMarginRatio=%s,",buf);
	p+=strlen(p);
	ShortMarginRatio.getString(buf);
	sprintf(p,"ShortMarginRatio=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMarginRateChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMarginRateChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"LongMarginRatio=%s 多头保证金率",buf);
	ShortMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"ShortMarginRatio=%s 空头保证金率",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysMarginRateChgIterator::~CSysMarginRateChgIterator(void)
{
}


void CSysMarginRateChgIterator::dump(FILE *output)
{
	CSysMarginRateChg *pSysMarginRateChg;
	
	while ((pSysMarginRateChg=next())!=NULL)
	{
		pSysMarginRateChg->dump(output);
	}
}



void CWriteableSysUserIpChg::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,UserID,IPAddress,IPMask,OperationType\n");
}
	
void CWriteableSysUserIpChg::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	UserID.clear();
	IPAddress.clear();
	IPMask.clear();
	OperationType.clear();
}

int CWriteableSysUserIpChg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysUserIpChg),input)!=sizeof(CWriteableSysUserIpChg))
		return 0;
	else
		return 1;
}
	
int CWriteableSysUserIpChg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPMask=token;
		}
		else
		{
			IPMask="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"IPMask"))
			{
				IPMask=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysUserIpChg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysUserIpChg),output)!=sizeof(CWriteableSysUserIpChg))
		return 0;
	else
		return 1;
}

int CWriteableSysUserIpChg::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPMask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysUserIpChg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysUserIpChg%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	IPMask.getString(buf);
	fprintf(fp,"\t\tIPMask = %s    [IP地址掩码]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserIpChg::dumpDiff(FILE *fp, const CWriteableSysUserIpChg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysUserIpChg = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	IPMask.getString(buf);
	if (compare(IPMask.getValue(),pOriginal->IPMask.getValue())!=0)
	{
		pOriginal->IPMask.getString(bufOriginal);
		fprintf(fp,"\t\tIPMask = %s -> %s    [IP地址掩码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPMask = %s    [IP地址掩码]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserIpChg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	IPMask.getString(buf);
	fprintf(fp,",IPMask,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysUserIpChg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	IPMask.getString(buf);
	sprintf(p,"IPMask=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysUserIpChg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysUserIpChg");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	IPMask.getString(buf);
	pLogger->output(indent+1,0,"IPMask=%s IP地址掩码",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysUserIpChgIterator::~CSysUserIpChgIterator(void)
{
}


void CSysUserIpChgIterator::dump(FILE *output)
{
	CSysUserIpChg *pSysUserIpChg;
	
	while ((pSysUserIpChg=next())!=NULL)
	{
		pSysUserIpChg->dump(output);
	}
}



void CWriteableSysPartTrade::writeCSVHead(FILE *output)
{
	fprintf(output,"ActionDate,ActionTime,InstrumentID,ParticipantID,TotalPositiveOrder,TotalNegativeOrder,TotalPositiveTrade,TotalNegativeTrade,TotalPositivePosi,TotalNegativePosi,OperationType\n");
}
	
void CWriteableSysPartTrade::init(void)
{
	ActionDate.clear();
	ActionTime.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TotalPositiveOrder.clear();
	TotalNegativeOrder.clear();
	TotalPositiveTrade.clear();
	TotalNegativeTrade.clear();
	TotalPositivePosi.clear();
	TotalNegativePosi.clear();
	OperationType.clear();
}

int CWriteableSysPartTrade::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysPartTrade),input)!=sizeof(CWriteableSysPartTrade))
		return 0;
	else
		return 1;
}
	
int CWriteableSysPartTrade::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalPositiveOrder=token;
		}
		else
		{
			TotalPositiveOrder="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalNegativeOrder=token;
		}
		else
		{
			TotalNegativeOrder="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalPositiveTrade=token;
		}
		else
		{
			TotalPositiveTrade="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalNegativeTrade=token;
		}
		else
		{
			TotalNegativeTrade="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalPositivePosi=token;
		}
		else
		{
			TotalPositivePosi="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TotalNegativePosi=token;
		}
		else
		{
			TotalNegativePosi="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TotalPositiveOrder"))
			{
				TotalPositiveOrder=token;
			}
			else if (!strcmp(fieldName,"TotalNegativeOrder"))
			{
				TotalNegativeOrder=token;
			}
			else if (!strcmp(fieldName,"TotalPositiveTrade"))
			{
				TotalPositiveTrade=token;
			}
			else if (!strcmp(fieldName,"TotalNegativeTrade"))
			{
				TotalNegativeTrade=token;
			}
			else if (!strcmp(fieldName,"TotalPositivePosi"))
			{
				TotalPositivePosi=token;
			}
			else if (!strcmp(fieldName,"TotalNegativePosi"))
			{
				TotalNegativePosi=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysPartTrade::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysPartTrade),output)!=sizeof(CWriteableSysPartTrade))
		return 0;
	else
		return 1;
}

int CWriteableSysPartTrade::writeCSV(FILE *output) const
{
	char buffer[1025];
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalPositiveOrder.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalNegativeOrder.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalPositiveTrade.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalNegativeTrade.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalPositivePosi.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TotalNegativePosi.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysPartTrade::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysPartTrade%s = {\n", index_buf);
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TotalPositiveOrder.getString(buf);
	fprintf(fp,"\t\tTotalPositiveOrder = %s    [总报买单量]\n",buf);	
	TotalNegativeOrder.getString(buf);
	fprintf(fp,"\t\tTotalNegativeOrder = %s    [总报单卖量]\n",buf);	
	TotalPositiveTrade.getString(buf);
	fprintf(fp,"\t\tTotalPositiveTrade = %s    [买单总成交量]\n",buf);	
	TotalNegativeTrade.getString(buf);
	fprintf(fp,"\t\tTotalNegativeTrade = %s    [卖单总成交量]\n",buf);	
	TotalPositivePosi.getString(buf);
	fprintf(fp,"\t\tTotalPositivePosi = %s    [总多头持仓量]\n",buf);	
	TotalNegativePosi.getString(buf);
	fprintf(fp,"\t\tTotalNegativePosi = %s    [总空头持仓量]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartTrade::dumpDiff(FILE *fp, const CWriteableSysPartTrade *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysPartTrade = {\n");
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [操作日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [操作日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [操作时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [操作时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TotalPositiveOrder.getString(buf);
	if (compare(TotalPositiveOrder.getValue(),pOriginal->TotalPositiveOrder.getValue())!=0)
	{
		pOriginal->TotalPositiveOrder.getString(bufOriginal);
		fprintf(fp,"\t\tTotalPositiveOrder = %s -> %s    [总报买单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalPositiveOrder = %s    [总报买单量]\n",buf);
	}
	TotalNegativeOrder.getString(buf);
	if (compare(TotalNegativeOrder.getValue(),pOriginal->TotalNegativeOrder.getValue())!=0)
	{
		pOriginal->TotalNegativeOrder.getString(bufOriginal);
		fprintf(fp,"\t\tTotalNegativeOrder = %s -> %s    [总报单卖量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalNegativeOrder = %s    [总报单卖量]\n",buf);
	}
	TotalPositiveTrade.getString(buf);
	if (compare(TotalPositiveTrade.getValue(),pOriginal->TotalPositiveTrade.getValue())!=0)
	{
		pOriginal->TotalPositiveTrade.getString(bufOriginal);
		fprintf(fp,"\t\tTotalPositiveTrade = %s -> %s    [买单总成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalPositiveTrade = %s    [买单总成交量]\n",buf);
	}
	TotalNegativeTrade.getString(buf);
	if (compare(TotalNegativeTrade.getValue(),pOriginal->TotalNegativeTrade.getValue())!=0)
	{
		pOriginal->TotalNegativeTrade.getString(bufOriginal);
		fprintf(fp,"\t\tTotalNegativeTrade = %s -> %s    [卖单总成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalNegativeTrade = %s    [卖单总成交量]\n",buf);
	}
	TotalPositivePosi.getString(buf);
	if (compare(TotalPositivePosi.getValue(),pOriginal->TotalPositivePosi.getValue())!=0)
	{
		pOriginal->TotalPositivePosi.getString(bufOriginal);
		fprintf(fp,"\t\tTotalPositivePosi = %s -> %s    [总多头持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalPositivePosi = %s    [总多头持仓量]\n",buf);
	}
	TotalNegativePosi.getString(buf);
	if (compare(TotalNegativePosi.getValue(),pOriginal->TotalNegativePosi.getValue())!=0)
	{
		pOriginal->TotalNegativePosi.getString(bufOriginal);
		fprintf(fp,"\t\tTotalNegativePosi = %s -> %s    [总空头持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTotalNegativePosi = %s    [总空头持仓量]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysPartTrade::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TotalPositiveOrder.getString(buf);
	fprintf(fp,",TotalPositiveOrder,%s",buf);	
	TotalNegativeOrder.getString(buf);
	fprintf(fp,",TotalNegativeOrder,%s",buf);	
	TotalPositiveTrade.getString(buf);
	fprintf(fp,",TotalPositiveTrade,%s",buf);	
	TotalNegativeTrade.getString(buf);
	fprintf(fp,",TotalNegativeTrade,%s",buf);	
	TotalPositivePosi.getString(buf);
	fprintf(fp,",TotalPositivePosi,%s",buf);	
	TotalNegativePosi.getString(buf);
	fprintf(fp,",TotalNegativePosi,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysPartTrade::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TotalPositiveOrder.getString(buf);
	sprintf(p,"TotalPositiveOrder=%s,",buf);
	p+=strlen(p);
	TotalNegativeOrder.getString(buf);
	sprintf(p,"TotalNegativeOrder=%s,",buf);
	p+=strlen(p);
	TotalPositiveTrade.getString(buf);
	sprintf(p,"TotalPositiveTrade=%s,",buf);
	p+=strlen(p);
	TotalNegativeTrade.getString(buf);
	sprintf(p,"TotalNegativeTrade=%s,",buf);
	p+=strlen(p);
	TotalPositivePosi.getString(buf);
	sprintf(p,"TotalPositivePosi=%s,",buf);
	p+=strlen(p);
	TotalNegativePosi.getString(buf);
	sprintf(p,"TotalNegativePosi=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysPartTrade::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysPartTrade");
	pLogger->output(indent,0,"{");
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 操作日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 操作时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TotalPositiveOrder.getString(buf);
	pLogger->output(indent+1,0,"TotalPositiveOrder=%s 总报买单量",buf);
	TotalNegativeOrder.getString(buf);
	pLogger->output(indent+1,0,"TotalNegativeOrder=%s 总报单卖量",buf);
	TotalPositiveTrade.getString(buf);
	pLogger->output(indent+1,0,"TotalPositiveTrade=%s 买单总成交量",buf);
	TotalNegativeTrade.getString(buf);
	pLogger->output(indent+1,0,"TotalNegativeTrade=%s 卖单总成交量",buf);
	TotalPositivePosi.getString(buf);
	pLogger->output(indent+1,0,"TotalPositivePosi=%s 总多头持仓量",buf);
	TotalNegativePosi.getString(buf);
	pLogger->output(indent+1,0,"TotalNegativePosi=%s 总空头持仓量",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysPartTradeIterator::~CSysPartTradeIterator(void)
{
}


void CSysPartTradeIterator::dump(FILE *output)
{
	CSysPartTrade *pSysPartTrade;
	
	while ((pSysPartTrade=next())!=NULL)
	{
		pSysPartTrade->dump(output);
	}
}



void CWriteableSysMdbObjectAttr::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,ObjectID,AttrType,MonDate,MonTime,ValueType,AttrValue\n");
}
	
void CWriteableSysMdbObjectAttr::init(void)
{
	SubcriberID.clear();
	ObjectID.clear();
	AttrType.clear();
	MonDate.clear();
	MonTime.clear();
	ValueType.clear();
	AttrValue.clear();
}

int CWriteableSysMdbObjectAttr::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbObjectAttr),input)!=sizeof(CWriteableSysMdbObjectAttr))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbObjectAttr::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType=token;
		}
		else
		{
			AttrType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueType=token;
		}
		else
		{
			ValueType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrValue=token;
		}
		else
		{
			AttrValue="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"AttrType"))
			{
				AttrType=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"ValueType"))
			{
				ValueType=token;
			}
			else if (!strcmp(fieldName,"AttrValue"))
			{
				AttrValue=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbObjectAttr::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbObjectAttr),output)!=sizeof(CWriteableSysMdbObjectAttr))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbObjectAttr::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbObjectAttr::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbObjectAttr%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [定义对象ID]\n",buf);	
	AttrType.getString(buf);
	fprintf(fp,"\t\tAttrType = %s    [监控指标类型ID]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	ValueType.getString(buf);
	fprintf(fp,"\t\tValueType = %s    [监控指标的值类型]\n",buf);	
	AttrValue.getString(buf);
	fprintf(fp,"\t\tAttrValue = %s    [监控指标的具体值]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbObjectAttr::dumpDiff(FILE *fp, const CWriteableSysMdbObjectAttr *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbObjectAttr = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [定义对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [定义对象ID]\n",buf);
	}
	AttrType.getString(buf);
	if (compare(AttrType.getValue(),pOriginal->AttrType.getValue())!=0)
	{
		pOriginal->AttrType.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType = %s -> %s    [监控指标类型ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType = %s    [监控指标类型ID]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	ValueType.getString(buf);
	if (compare(ValueType.getValue(),pOriginal->ValueType.getValue())!=0)
	{
		pOriginal->ValueType.getString(bufOriginal);
		fprintf(fp,"\t\tValueType = %s -> %s    [监控指标的值类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueType = %s    [监控指标的值类型]\n",buf);
	}
	AttrValue.getString(buf);
	if (compare(AttrValue.getValue(),pOriginal->AttrValue.getValue())!=0)
	{
		pOriginal->AttrValue.getString(bufOriginal);
		fprintf(fp,"\t\tAttrValue = %s -> %s    [监控指标的具体值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrValue = %s    [监控指标的具体值]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbObjectAttr::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	AttrType.getString(buf);
	fprintf(fp,",AttrType,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	ValueType.getString(buf);
	fprintf(fp,",ValueType,%s",buf);	
	AttrValue.getString(buf);
	fprintf(fp,",AttrValue,%s",buf);	
}

void CWriteableSysMdbObjectAttr::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	AttrType.getString(buf);
	sprintf(p,"AttrType=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	ValueType.getString(buf);
	sprintf(p,"ValueType=%s,",buf);
	p+=strlen(p);
	AttrValue.getString(buf);
	sprintf(p,"AttrValue=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbObjectAttr::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbObjectAttr");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 定义对象ID",buf);
	AttrType.getString(buf);
	pLogger->output(indent+1,0,"AttrType=%s 监控指标类型ID",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	ValueType.getString(buf);
	pLogger->output(indent+1,0,"ValueType=%s 监控指标的值类型",buf);
	AttrValue.getString(buf);
	pLogger->output(indent+1,0,"AttrValue=%s 监控指标的具体值",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbObjectAttrIterator::~CSysMdbObjectAttrIterator(void)
{
}


void CSysMdbObjectAttrIterator::dump(FILE *output)
{
	CSysMdbObjectAttr *pSysMdbObjectAttr;
	
	while ((pSysMdbObjectAttr=next())!=NULL)
	{
		pSysMdbObjectAttr->dump(output);
	}
}



void CWriteableSysMdbSyslogInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"MonDate,MonTime,ObjectID,AttrType,ContLen,FileContent\n");
}
	
void CWriteableSysMdbSyslogInfo::init(void)
{
	MonDate.clear();
	MonTime.clear();
	ObjectID.clear();
	AttrType.clear();
	ContLen.clear();
	FileContent.clear();
}

int CWriteableSysMdbSyslogInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbSyslogInfo),input)!=sizeof(CWriteableSysMdbSyslogInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbSyslogInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType=token;
		}
		else
		{
			AttrType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ContLen=token;
		}
		else
		{
			ContLen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FileContent=token;
		}
		else
		{
			FileContent="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"AttrType"))
			{
				AttrType=token;
			}
			else if (!strcmp(fieldName,"ContLen"))
			{
				ContLen=token;
			}
			else if (!strcmp(fieldName,"FileContent"))
			{
				FileContent=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbSyslogInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbSyslogInfo),output)!=sizeof(CWriteableSysMdbSyslogInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbSyslogInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ContLen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FileContent.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbSyslogInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbSyslogInfo%s = {\n", index_buf);
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [定义对象ID]\n",buf);	
	AttrType.getString(buf);
	fprintf(fp,"\t\tAttrType = %s    [监控指标类型ID]\n",buf);	
	ContLen.getString(buf);
	fprintf(fp,"\t\tContLen = %s    [文件内容长度]\n",buf);	
	FileContent.getString(buf);
	fprintf(fp,"\t\tFileContent = %s    [文件内容]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbSyslogInfo::dumpDiff(FILE *fp, const CWriteableSysMdbSyslogInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbSyslogInfo = {\n");
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [定义对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [定义对象ID]\n",buf);
	}
	AttrType.getString(buf);
	if (compare(AttrType.getValue(),pOriginal->AttrType.getValue())!=0)
	{
		pOriginal->AttrType.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType = %s -> %s    [监控指标类型ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType = %s    [监控指标类型ID]\n",buf);
	}
	ContLen.getString(buf);
	if (compare(ContLen.getValue(),pOriginal->ContLen.getValue())!=0)
	{
		pOriginal->ContLen.getString(bufOriginal);
		fprintf(fp,"\t\tContLen = %s -> %s    [文件内容长度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContLen = %s    [文件内容长度]\n",buf);
	}
	FileContent.getString(buf);
	if (compare(FileContent.getValue(),pOriginal->FileContent.getValue())!=0)
	{
		pOriginal->FileContent.getString(bufOriginal);
		fprintf(fp,"\t\tFileContent = %s -> %s    [文件内容]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFileContent = %s    [文件内容]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbSyslogInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	AttrType.getString(buf);
	fprintf(fp,",AttrType,%s",buf);	
	ContLen.getString(buf);
	fprintf(fp,",ContLen,%s",buf);	
	FileContent.getString(buf);
	fprintf(fp,",FileContent,%s",buf);	
}

void CWriteableSysMdbSyslogInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	AttrType.getString(buf);
	sprintf(p,"AttrType=%s,",buf);
	p+=strlen(p);
	ContLen.getString(buf);
	sprintf(p,"ContLen=%s,",buf);
	p+=strlen(p);
	FileContent.getString(buf);
	sprintf(p,"FileContent=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbSyslogInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbSyslogInfo");
	pLogger->output(indent,0,"{");
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 定义对象ID",buf);
	AttrType.getString(buf);
	pLogger->output(indent+1,0,"AttrType=%s 监控指标类型ID",buf);
	ContLen.getString(buf);
	pLogger->output(indent+1,0,"ContLen=%s 文件内容长度",buf);
	FileContent.getString(buf);
	pLogger->output(indent+1,0,"FileContent=%s 文件内容",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbSyslogInfoIterator::~CSysMdbSyslogInfoIterator(void)
{
}


void CSysMdbSyslogInfoIterator::dump(FILE *output)
{
	CSysMdbSyslogInfo *pSysMdbSyslogInfo;
	
	while ((pSysMdbSyslogInfo=next())!=NULL)
	{
		pSysMdbSyslogInfo->dump(output);
	}
}



void CWriteableSysUserInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"USERNAME,USERID,GROUPNAME,GROUPID,HOMEPATH,SHELL,ObjectID,MonTime,MonDate\n");
}
	
void CWriteableSysUserInfo::init(void)
{
	USERNAME.clear();
	USERID.clear();
	GROUPNAME.clear();
	GROUPID.clear();
	HOMEPATH.clear();
	SHELL.clear();
	ObjectID.clear();
	MonTime.clear();
	MonDate.clear();
}

int CWriteableSysUserInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysUserInfo),input)!=sizeof(CWriteableSysUserInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysUserInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			USERNAME=token;
		}
		else
		{
			USERNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			USERID=token;
		}
		else
		{
			USERID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GROUPNAME=token;
		}
		else
		{
			GROUPNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GROUPID=token;
		}
		else
		{
			GROUPID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HOMEPATH=token;
		}
		else
		{
			HOMEPATH="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SHELL=token;
		}
		else
		{
			SHELL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"USERNAME"))
			{
				USERNAME=token;
			}
			else if (!strcmp(fieldName,"USERID"))
			{
				USERID=token;
			}
			else if (!strcmp(fieldName,"GROUPNAME"))
			{
				GROUPNAME=token;
			}
			else if (!strcmp(fieldName,"GROUPID"))
			{
				GROUPID=token;
			}
			else if (!strcmp(fieldName,"HOMEPATH"))
			{
				HOMEPATH=token;
			}
			else if (!strcmp(fieldName,"SHELL"))
			{
				SHELL=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysUserInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysUserInfo),output)!=sizeof(CWriteableSysUserInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysUserInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	USERNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	USERID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GROUPNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GROUPID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HOMEPATH.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SHELL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysUserInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysUserInfo%s = {\n", index_buf);
	USERNAME.getString(buf);
	fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);	
	USERID.getString(buf);
	fprintf(fp,"\t\tUSERID = %s    [用户ID]\n",buf);	
	GROUPNAME.getString(buf);
	fprintf(fp,"\t\tGROUPNAME = %s    [用户组名]\n",buf);	
	GROUPID.getString(buf);
	fprintf(fp,"\t\tGROUPID = %s    [用户组ID]\n",buf);	
	HOMEPATH.getString(buf);
	fprintf(fp,"\t\tHOMEPATH = %s    [HOME路径]\n",buf);	
	SHELL.getString(buf);
	fprintf(fp,"\t\tSHELL = %s    [用户使用SHELL环境]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [定义对象名]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserInfo::dumpDiff(FILE *fp, const CWriteableSysUserInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysUserInfo = {\n");
	USERNAME.getString(buf);
	if (compare(USERNAME.getValue(),pOriginal->USERNAME.getValue())!=0)
	{
		pOriginal->USERNAME.getString(bufOriginal);
		fprintf(fp,"\t\tUSERNAME = %s -> %s    [用户名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);
	}
	USERID.getString(buf);
	if (compare(USERID.getValue(),pOriginal->USERID.getValue())!=0)
	{
		pOriginal->USERID.getString(bufOriginal);
		fprintf(fp,"\t\tUSERID = %s -> %s    [用户ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSERID = %s    [用户ID]\n",buf);
	}
	GROUPNAME.getString(buf);
	if (compare(GROUPNAME.getValue(),pOriginal->GROUPNAME.getValue())!=0)
	{
		pOriginal->GROUPNAME.getString(bufOriginal);
		fprintf(fp,"\t\tGROUPNAME = %s -> %s    [用户组名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGROUPNAME = %s    [用户组名]\n",buf);
	}
	GROUPID.getString(buf);
	if (compare(GROUPID.getValue(),pOriginal->GROUPID.getValue())!=0)
	{
		pOriginal->GROUPID.getString(bufOriginal);
		fprintf(fp,"\t\tGROUPID = %s -> %s    [用户组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGROUPID = %s    [用户组ID]\n",buf);
	}
	HOMEPATH.getString(buf);
	if (compare(HOMEPATH.getValue(),pOriginal->HOMEPATH.getValue())!=0)
	{
		pOriginal->HOMEPATH.getString(bufOriginal);
		fprintf(fp,"\t\tHOMEPATH = %s -> %s    [HOME路径]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHOMEPATH = %s    [HOME路径]\n",buf);
	}
	SHELL.getString(buf);
	if (compare(SHELL.getValue(),pOriginal->SHELL.getValue())!=0)
	{
		pOriginal->SHELL.getString(bufOriginal);
		fprintf(fp,"\t\tSHELL = %s -> %s    [用户使用SHELL环境]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSHELL = %s    [用户使用SHELL环境]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [定义对象名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [定义对象名]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	USERNAME.getString(buf);
	fprintf(fp,",USERNAME,%s",buf);	
	USERID.getString(buf);
	fprintf(fp,",USERID,%s",buf);	
	GROUPNAME.getString(buf);
	fprintf(fp,",GROUPNAME,%s",buf);	
	GROUPID.getString(buf);
	fprintf(fp,",GROUPID,%s",buf);	
	HOMEPATH.getString(buf);
	fprintf(fp,",HOMEPATH,%s",buf);	
	SHELL.getString(buf);
	fprintf(fp,",SHELL,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
}

void CWriteableSysUserInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	USERNAME.getString(buf);
	sprintf(p,"USERNAME=%s,",buf);
	p+=strlen(p);
	USERID.getString(buf);
	sprintf(p,"USERID=%s,",buf);
	p+=strlen(p);
	GROUPNAME.getString(buf);
	sprintf(p,"GROUPNAME=%s,",buf);
	p+=strlen(p);
	GROUPID.getString(buf);
	sprintf(p,"GROUPID=%s,",buf);
	p+=strlen(p);
	HOMEPATH.getString(buf);
	sprintf(p,"HOMEPATH=%s,",buf);
	p+=strlen(p);
	SHELL.getString(buf);
	sprintf(p,"SHELL=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysUserInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysUserInfo");
	pLogger->output(indent,0,"{");
	USERNAME.getString(buf);
	pLogger->output(indent+1,0,"USERNAME=%s 用户名",buf);
	USERID.getString(buf);
	pLogger->output(indent+1,0,"USERID=%s 用户ID",buf);
	GROUPNAME.getString(buf);
	pLogger->output(indent+1,0,"GROUPNAME=%s 用户组名",buf);
	GROUPID.getString(buf);
	pLogger->output(indent+1,0,"GROUPID=%s 用户组ID",buf);
	HOMEPATH.getString(buf);
	pLogger->output(indent+1,0,"HOMEPATH=%s HOME路径",buf);
	SHELL.getString(buf);
	pLogger->output(indent+1,0,"SHELL=%s 用户使用SHELL环境",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 定义对象名",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	pLogger->output(indent,0,"}");
}

CSysUserInfoIterator::~CSysUserInfoIterator(void)
{
}


void CSysUserInfoIterator::dump(FILE *output)
{
	CSysUserInfo *pSysUserInfo;
	
	while ((pSysUserInfo=next())!=NULL)
	{
		pSysUserInfo->dump(output);
	}
}



void CWriteableSysOnlineUserInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"USERNAME,TIME,TTY,IP,CONNECTIME,PID,ObjectID,MonTime,MonDate\n");
}
	
void CWriteableSysOnlineUserInfo::init(void)
{
	USERNAME.clear();
	TIME.clear();
	TTY.clear();
	IP.clear();
	CONNECTIME.clear();
	PID.clear();
	ObjectID.clear();
	MonTime.clear();
	MonDate.clear();
}

int CWriteableSysOnlineUserInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysOnlineUserInfo),input)!=sizeof(CWriteableSysOnlineUserInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysOnlineUserInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			USERNAME=token;
		}
		else
		{
			USERNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TIME=token;
		}
		else
		{
			TIME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TTY=token;
		}
		else
		{
			TTY="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP=token;
		}
		else
		{
			IP="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONNECTIME=token;
		}
		else
		{
			CONNECTIME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PID=token;
		}
		else
		{
			PID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"USERNAME"))
			{
				USERNAME=token;
			}
			else if (!strcmp(fieldName,"TIME"))
			{
				TIME=token;
			}
			else if (!strcmp(fieldName,"TTY"))
			{
				TTY=token;
			}
			else if (!strcmp(fieldName,"IP"))
			{
				IP=token;
			}
			else if (!strcmp(fieldName,"CONNECTIME"))
			{
				CONNECTIME=token;
			}
			else if (!strcmp(fieldName,"PID"))
			{
				PID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysOnlineUserInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysOnlineUserInfo),output)!=sizeof(CWriteableSysOnlineUserInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysOnlineUserInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	USERNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TIME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TTY.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONNECTIME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysOnlineUserInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysOnlineUserInfo%s = {\n", index_buf);
	USERNAME.getString(buf);
	fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);	
	TIME.getString(buf);
	fprintf(fp,"\t\tTIME = %s    [登录时间]\n",buf);	
	TTY.getString(buf);
	fprintf(fp,"\t\tTTY = %s    [终端类型]\n",buf);	
	IP.getString(buf);
	fprintf(fp,"\t\tIP = %s    [IP地址]\n",buf);	
	CONNECTIME.getString(buf);
	fprintf(fp,"\t\tCONNECTIME = %s    [连接时间]\n",buf);	
	PID.getString(buf);
	fprintf(fp,"\t\tPID = %s    [进程ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [定义对象名]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysOnlineUserInfo::dumpDiff(FILE *fp, const CWriteableSysOnlineUserInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysOnlineUserInfo = {\n");
	USERNAME.getString(buf);
	if (compare(USERNAME.getValue(),pOriginal->USERNAME.getValue())!=0)
	{
		pOriginal->USERNAME.getString(bufOriginal);
		fprintf(fp,"\t\tUSERNAME = %s -> %s    [用户名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);
	}
	TIME.getString(buf);
	if (compare(TIME.getValue(),pOriginal->TIME.getValue())!=0)
	{
		pOriginal->TIME.getString(bufOriginal);
		fprintf(fp,"\t\tTIME = %s -> %s    [登录时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTIME = %s    [登录时间]\n",buf);
	}
	TTY.getString(buf);
	if (compare(TTY.getValue(),pOriginal->TTY.getValue())!=0)
	{
		pOriginal->TTY.getString(bufOriginal);
		fprintf(fp,"\t\tTTY = %s -> %s    [终端类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTTY = %s    [终端类型]\n",buf);
	}
	IP.getString(buf);
	if (compare(IP.getValue(),pOriginal->IP.getValue())!=0)
	{
		pOriginal->IP.getString(bufOriginal);
		fprintf(fp,"\t\tIP = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP = %s    [IP地址]\n",buf);
	}
	CONNECTIME.getString(buf);
	if (compare(CONNECTIME.getValue(),pOriginal->CONNECTIME.getValue())!=0)
	{
		pOriginal->CONNECTIME.getString(bufOriginal);
		fprintf(fp,"\t\tCONNECTIME = %s -> %s    [连接时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONNECTIME = %s    [连接时间]\n",buf);
	}
	PID.getString(buf);
	if (compare(PID.getValue(),pOriginal->PID.getValue())!=0)
	{
		pOriginal->PID.getString(bufOriginal);
		fprintf(fp,"\t\tPID = %s -> %s    [进程ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPID = %s    [进程ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [定义对象名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [定义对象名]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysOnlineUserInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	USERNAME.getString(buf);
	fprintf(fp,",USERNAME,%s",buf);	
	TIME.getString(buf);
	fprintf(fp,",TIME,%s",buf);	
	TTY.getString(buf);
	fprintf(fp,",TTY,%s",buf);	
	IP.getString(buf);
	fprintf(fp,",IP,%s",buf);	
	CONNECTIME.getString(buf);
	fprintf(fp,",CONNECTIME,%s",buf);	
	PID.getString(buf);
	fprintf(fp,",PID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
}

void CWriteableSysOnlineUserInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	USERNAME.getString(buf);
	sprintf(p,"USERNAME=%s,",buf);
	p+=strlen(p);
	TIME.getString(buf);
	sprintf(p,"TIME=%s,",buf);
	p+=strlen(p);
	TTY.getString(buf);
	sprintf(p,"TTY=%s,",buf);
	p+=strlen(p);
	IP.getString(buf);
	sprintf(p,"IP=%s,",buf);
	p+=strlen(p);
	CONNECTIME.getString(buf);
	sprintf(p,"CONNECTIME=%s,",buf);
	p+=strlen(p);
	PID.getString(buf);
	sprintf(p,"PID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysOnlineUserInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysOnlineUserInfo");
	pLogger->output(indent,0,"{");
	USERNAME.getString(buf);
	pLogger->output(indent+1,0,"USERNAME=%s 用户名",buf);
	TIME.getString(buf);
	pLogger->output(indent+1,0,"TIME=%s 登录时间",buf);
	TTY.getString(buf);
	pLogger->output(indent+1,0,"TTY=%s 终端类型",buf);
	IP.getString(buf);
	pLogger->output(indent+1,0,"IP=%s IP地址",buf);
	CONNECTIME.getString(buf);
	pLogger->output(indent+1,0,"CONNECTIME=%s 连接时间",buf);
	PID.getString(buf);
	pLogger->output(indent+1,0,"PID=%s 进程ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 定义对象名",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	pLogger->output(indent,0,"}");
}

CSysOnlineUserInfoIterator::~CSysOnlineUserInfoIterator(void)
{
}


void CSysOnlineUserInfoIterator::dump(FILE *output)
{
	CSysOnlineUserInfo *pSysOnlineUserInfo;
	
	while ((pSysOnlineUserInfo=next())!=NULL)
	{
		pSysOnlineUserInfo->dump(output);
	}
}



void CWriteableSysWarningEvent::writeCSVHead(FILE *output)
{
	fprintf(output,"MonDate,MonTime,OccurDate,OccurTime,EvendID,ObjectID,IPAddress,EventName,EventNum,EventType,EventDes,ProcessFlag,WarningLevel,EventDealDes,FullEventName\n");
}
	
void CWriteableSysWarningEvent::init(void)
{
	MonDate.clear();
	MonTime.clear();
	OccurDate.clear();
	OccurTime.clear();
	EvendID.clear();
	ObjectID.clear();
	IPAddress.clear();
	EventName.clear();
	EventNum.clear();
	EventType.clear();
	EventDes.clear();
	ProcessFlag.clear();
	WarningLevel.clear();
	EventDealDes.clear();
	FullEventName.clear();
}

int CWriteableSysWarningEvent::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysWarningEvent),input)!=sizeof(CWriteableSysWarningEvent))
		return 0;
	else
		return 1;
}
	
int CWriteableSysWarningEvent::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OccurDate=token;
		}
		else
		{
			OccurDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OccurTime=token;
		}
		else
		{
			OccurTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EvendID=token;
		}
		else
		{
			EvendID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventName=token;
		}
		else
		{
			EventName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventNum=token;
		}
		else
		{
			EventNum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventType=token;
		}
		else
		{
			EventType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventDes=token;
		}
		else
		{
			EventDes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProcessFlag=token;
		}
		else
		{
			ProcessFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WarningLevel=token;
		}
		else
		{
			WarningLevel="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventDealDes=token;
		}
		else
		{
			EventDealDes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FullEventName=token;
		}
		else
		{
			FullEventName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"OccurDate"))
			{
				OccurDate=token;
			}
			else if (!strcmp(fieldName,"OccurTime"))
			{
				OccurTime=token;
			}
			else if (!strcmp(fieldName,"EvendID"))
			{
				EvendID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"EventName"))
			{
				EventName=token;
			}
			else if (!strcmp(fieldName,"EventNum"))
			{
				EventNum=token;
			}
			else if (!strcmp(fieldName,"EventType"))
			{
				EventType=token;
			}
			else if (!strcmp(fieldName,"EventDes"))
			{
				EventDes=token;
			}
			else if (!strcmp(fieldName,"ProcessFlag"))
			{
				ProcessFlag=token;
			}
			else if (!strcmp(fieldName,"WarningLevel"))
			{
				WarningLevel=token;
			}
			else if (!strcmp(fieldName,"EventDealDes"))
			{
				EventDealDes=token;
			}
			else if (!strcmp(fieldName,"FullEventName"))
			{
				FullEventName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysWarningEvent::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysWarningEvent),output)!=sizeof(CWriteableSysWarningEvent))
		return 0;
	else
		return 1;
}

int CWriteableSysWarningEvent::writeCSV(FILE *output) const
{
	char buffer[1025];
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OccurDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OccurTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EvendID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventDes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProcessFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WarningLevel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventDealDes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FullEventName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysWarningEvent::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysWarningEvent%s = {\n", index_buf);
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	OccurDate.getString(buf);
	fprintf(fp,"\t\tOccurDate = %s    [事件发生日期]\n",buf);	
	OccurTime.getString(buf);
	fprintf(fp,"\t\tOccurTime = %s    [事件发生时间]\n",buf);	
	EvendID.getString(buf);
	fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [发生事件的对象ID指标]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	EventName.getString(buf);
	fprintf(fp,"\t\tEventName = %s    [事件名]\n",buf);	
	EventNum.getString(buf);
	fprintf(fp,"\t\tEventNum = %s    [事件标签]\n",buf);	
	EventType.getString(buf);
	fprintf(fp,"\t\tEventType = %s    [事件类型]\n",buf);	
	EventDes.getString(buf);
	fprintf(fp,"\t\tEventDes = %s    [事件描述]\n",buf);	
	ProcessFlag.getString(buf);
	fprintf(fp,"\t\tProcessFlag = %s    [清除标记]\n",buf);	
	WarningLevel.getString(buf);
	fprintf(fp,"\t\tWarningLevel = %s    [警告级别]\n",buf);	
	EventDealDes.getString(buf);
	fprintf(fp,"\t\tEventDealDes = %s    [事件处理描述]\n",buf);	
	FullEventName.getString(buf);
	fprintf(fp,"\t\tFullEventName = %s    [事件全名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysWarningEvent::dumpDiff(FILE *fp, const CWriteableSysWarningEvent *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysWarningEvent = {\n");
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	OccurDate.getString(buf);
	if (compare(OccurDate.getValue(),pOriginal->OccurDate.getValue())!=0)
	{
		pOriginal->OccurDate.getString(bufOriginal);
		fprintf(fp,"\t\tOccurDate = %s -> %s    [事件发生日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOccurDate = %s    [事件发生日期]\n",buf);
	}
	OccurTime.getString(buf);
	if (compare(OccurTime.getValue(),pOriginal->OccurTime.getValue())!=0)
	{
		pOriginal->OccurTime.getString(bufOriginal);
		fprintf(fp,"\t\tOccurTime = %s -> %s    [事件发生时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOccurTime = %s    [事件发生时间]\n",buf);
	}
	EvendID.getString(buf);
	if (compare(EvendID.getValue(),pOriginal->EvendID.getValue())!=0)
	{
		pOriginal->EvendID.getString(bufOriginal);
		fprintf(fp,"\t\tEvendID = %s -> %s    [事件ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [发生事件的对象ID指标]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [发生事件的对象ID指标]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	EventName.getString(buf);
	if (compare(EventName.getValue(),pOriginal->EventName.getValue())!=0)
	{
		pOriginal->EventName.getString(bufOriginal);
		fprintf(fp,"\t\tEventName = %s -> %s    [事件名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventName = %s    [事件名]\n",buf);
	}
	EventNum.getString(buf);
	if (compare(EventNum.getValue(),pOriginal->EventNum.getValue())!=0)
	{
		pOriginal->EventNum.getString(bufOriginal);
		fprintf(fp,"\t\tEventNum = %s -> %s    [事件标签]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventNum = %s    [事件标签]\n",buf);
	}
	EventType.getString(buf);
	if (compare(EventType.getValue(),pOriginal->EventType.getValue())!=0)
	{
		pOriginal->EventType.getString(bufOriginal);
		fprintf(fp,"\t\tEventType = %s -> %s    [事件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventType = %s    [事件类型]\n",buf);
	}
	EventDes.getString(buf);
	if (compare(EventDes.getValue(),pOriginal->EventDes.getValue())!=0)
	{
		pOriginal->EventDes.getString(bufOriginal);
		fprintf(fp,"\t\tEventDes = %s -> %s    [事件描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDes = %s    [事件描述]\n",buf);
	}
	ProcessFlag.getString(buf);
	if (compare(ProcessFlag.getValue(),pOriginal->ProcessFlag.getValue())!=0)
	{
		pOriginal->ProcessFlag.getString(bufOriginal);
		fprintf(fp,"\t\tProcessFlag = %s -> %s    [清除标记]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcessFlag = %s    [清除标记]\n",buf);
	}
	WarningLevel.getString(buf);
	if (compare(WarningLevel.getValue(),pOriginal->WarningLevel.getValue())!=0)
	{
		pOriginal->WarningLevel.getString(bufOriginal);
		fprintf(fp,"\t\tWarningLevel = %s -> %s    [警告级别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWarningLevel = %s    [警告级别]\n",buf);
	}
	EventDealDes.getString(buf);
	if (compare(EventDealDes.getValue(),pOriginal->EventDealDes.getValue())!=0)
	{
		pOriginal->EventDealDes.getString(bufOriginal);
		fprintf(fp,"\t\tEventDealDes = %s -> %s    [事件处理描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDealDes = %s    [事件处理描述]\n",buf);
	}
	FullEventName.getString(buf);
	if (compare(FullEventName.getValue(),pOriginal->FullEventName.getValue())!=0)
	{
		pOriginal->FullEventName.getString(bufOriginal);
		fprintf(fp,"\t\tFullEventName = %s -> %s    [事件全名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFullEventName = %s    [事件全名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysWarningEvent::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	OccurDate.getString(buf);
	fprintf(fp,",OccurDate,%s",buf);	
	OccurTime.getString(buf);
	fprintf(fp,",OccurTime,%s",buf);	
	EvendID.getString(buf);
	fprintf(fp,",EvendID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	EventName.getString(buf);
	fprintf(fp,",EventName,%s",buf);	
	EventNum.getString(buf);
	fprintf(fp,",EventNum,%s",buf);	
	EventType.getString(buf);
	fprintf(fp,",EventType,%s",buf);	
	EventDes.getString(buf);
	fprintf(fp,",EventDes,%s",buf);	
	ProcessFlag.getString(buf);
	fprintf(fp,",ProcessFlag,%s",buf);	
	WarningLevel.getString(buf);
	fprintf(fp,",WarningLevel,%s",buf);	
	EventDealDes.getString(buf);
	fprintf(fp,",EventDealDes,%s",buf);	
	FullEventName.getString(buf);
	fprintf(fp,",FullEventName,%s",buf);	
}

void CWriteableSysWarningEvent::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	OccurDate.getString(buf);
	sprintf(p,"OccurDate=%s,",buf);
	p+=strlen(p);
	OccurTime.getString(buf);
	sprintf(p,"OccurTime=%s,",buf);
	p+=strlen(p);
	EvendID.getString(buf);
	sprintf(p,"EvendID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	EventName.getString(buf);
	sprintf(p,"EventName=%s,",buf);
	p+=strlen(p);
	EventNum.getString(buf);
	sprintf(p,"EventNum=%s,",buf);
	p+=strlen(p);
	EventType.getString(buf);
	sprintf(p,"EventType=%s,",buf);
	p+=strlen(p);
	EventDes.getString(buf);
	sprintf(p,"EventDes=%s,",buf);
	p+=strlen(p);
	ProcessFlag.getString(buf);
	sprintf(p,"ProcessFlag=%s,",buf);
	p+=strlen(p);
	WarningLevel.getString(buf);
	sprintf(p,"WarningLevel=%s,",buf);
	p+=strlen(p);
	EventDealDes.getString(buf);
	sprintf(p,"EventDealDes=%s,",buf);
	p+=strlen(p);
	FullEventName.getString(buf);
	sprintf(p,"FullEventName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysWarningEvent::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysWarningEvent");
	pLogger->output(indent,0,"{");
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	OccurDate.getString(buf);
	pLogger->output(indent+1,0,"OccurDate=%s 事件发生日期",buf);
	OccurTime.getString(buf);
	pLogger->output(indent+1,0,"OccurTime=%s 事件发生时间",buf);
	EvendID.getString(buf);
	pLogger->output(indent+1,0,"EvendID=%s 事件ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 发生事件的对象ID指标",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	EventName.getString(buf);
	pLogger->output(indent+1,0,"EventName=%s 事件名",buf);
	EventNum.getString(buf);
	pLogger->output(indent+1,0,"EventNum=%s 事件标签",buf);
	EventType.getString(buf);
	pLogger->output(indent+1,0,"EventType=%s 事件类型",buf);
	EventDes.getString(buf);
	pLogger->output(indent+1,0,"EventDes=%s 事件描述",buf);
	ProcessFlag.getString(buf);
	pLogger->output(indent+1,0,"ProcessFlag=%s 清除标记",buf);
	WarningLevel.getString(buf);
	pLogger->output(indent+1,0,"WarningLevel=%s 警告级别",buf);
	EventDealDes.getString(buf);
	pLogger->output(indent+1,0,"EventDealDes=%s 事件处理描述",buf);
	FullEventName.getString(buf);
	pLogger->output(indent+1,0,"FullEventName=%s 事件全名",buf);
	pLogger->output(indent,0,"}");
}

CSysWarningEventIterator::~CSysWarningEventIterator(void)
{
}


void CSysWarningEventIterator::dump(FILE *output)
{
	CSysWarningEvent *pSysWarningEvent;
	
	while ((pSysWarningEvent=next())!=NULL)
	{
		pSysWarningEvent->dump(output);
	}
}



void CWriteableSysWarningQuery::writeCSVHead(FILE *output)
{
	fprintf(output,"MonDate,MonTime,EvendID,DBQueryResult\n");
}
	
void CWriteableSysWarningQuery::init(void)
{
	MonDate.clear();
	MonTime.clear();
	EvendID.clear();
	DBQueryResult.clear();
}

int CWriteableSysWarningQuery::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysWarningQuery),input)!=sizeof(CWriteableSysWarningQuery))
		return 0;
	else
		return 1;
}
	
int CWriteableSysWarningQuery::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EvendID=token;
		}
		else
		{
			EvendID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DBQueryResult=token;
		}
		else
		{
			DBQueryResult="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"EvendID"))
			{
				EvendID=token;
			}
			else if (!strcmp(fieldName,"DBQueryResult"))
			{
				DBQueryResult=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysWarningQuery::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysWarningQuery),output)!=sizeof(CWriteableSysWarningQuery))
		return 0;
	else
		return 1;
}

int CWriteableSysWarningQuery::writeCSV(FILE *output) const
{
	char buffer[1025];
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EvendID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DBQueryResult.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysWarningQuery::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysWarningQuery%s = {\n", index_buf);
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	EvendID.getString(buf);
	fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);	
	DBQueryResult.getString(buf);
	fprintf(fp,"\t\tDBQueryResult = %s    [数据库查询结果]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysWarningQuery::dumpDiff(FILE *fp, const CWriteableSysWarningQuery *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysWarningQuery = {\n");
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	EvendID.getString(buf);
	if (compare(EvendID.getValue(),pOriginal->EvendID.getValue())!=0)
	{
		pOriginal->EvendID.getString(bufOriginal);
		fprintf(fp,"\t\tEvendID = %s -> %s    [事件ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);
	}
	DBQueryResult.getString(buf);
	if (compare(DBQueryResult.getValue(),pOriginal->DBQueryResult.getValue())!=0)
	{
		pOriginal->DBQueryResult.getString(bufOriginal);
		fprintf(fp,"\t\tDBQueryResult = %s -> %s    [数据库查询结果]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDBQueryResult = %s    [数据库查询结果]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysWarningQuery::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	EvendID.getString(buf);
	fprintf(fp,",EvendID,%s",buf);	
	DBQueryResult.getString(buf);
	fprintf(fp,",DBQueryResult,%s",buf);	
}

void CWriteableSysWarningQuery::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	EvendID.getString(buf);
	sprintf(p,"EvendID=%s,",buf);
	p+=strlen(p);
	DBQueryResult.getString(buf);
	sprintf(p,"DBQueryResult=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysWarningQuery::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysWarningQuery");
	pLogger->output(indent,0,"{");
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	EvendID.getString(buf);
	pLogger->output(indent+1,0,"EvendID=%s 事件ID",buf);
	DBQueryResult.getString(buf);
	pLogger->output(indent+1,0,"DBQueryResult=%s 数据库查询结果",buf);
	pLogger->output(indent,0,"}");
}

CSysWarningQueryIterator::~CSysWarningQueryIterator(void)
{
}


void CSysWarningQueryIterator::dump(FILE *output)
{
	CSysWarningQuery *pSysWarningQuery;
	
	while ((pSysWarningQuery=next())!=NULL)
	{
		pSysWarningQuery->dump(output);
	}
}



void CWriteableSyslogEvent::writeCSVHead(FILE *output)
{
	fprintf(output,"MonDate,MonTime,OccurDate,OccurTime,EvendID,ObjectID,IPAddress,EventName,EventNum,EventType,EventDes,ProcessFlag,WarningLevel,EventDealDes,FullEventName\n");
}
	
void CWriteableSyslogEvent::init(void)
{
	MonDate.clear();
	MonTime.clear();
	OccurDate.clear();
	OccurTime.clear();
	EvendID.clear();
	ObjectID.clear();
	IPAddress.clear();
	EventName.clear();
	EventNum.clear();
	EventType.clear();
	EventDes.clear();
	ProcessFlag.clear();
	WarningLevel.clear();
	EventDealDes.clear();
	FullEventName.clear();
}

int CWriteableSyslogEvent::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSyslogEvent),input)!=sizeof(CWriteableSyslogEvent))
		return 0;
	else
		return 1;
}
	
int CWriteableSyslogEvent::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OccurDate=token;
		}
		else
		{
			OccurDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OccurTime=token;
		}
		else
		{
			OccurTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EvendID=token;
		}
		else
		{
			EvendID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventName=token;
		}
		else
		{
			EventName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventNum=token;
		}
		else
		{
			EventNum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventType=token;
		}
		else
		{
			EventType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventDes=token;
		}
		else
		{
			EventDes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProcessFlag=token;
		}
		else
		{
			ProcessFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WarningLevel=token;
		}
		else
		{
			WarningLevel="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventDealDes=token;
		}
		else
		{
			EventDealDes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FullEventName=token;
		}
		else
		{
			FullEventName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"OccurDate"))
			{
				OccurDate=token;
			}
			else if (!strcmp(fieldName,"OccurTime"))
			{
				OccurTime=token;
			}
			else if (!strcmp(fieldName,"EvendID"))
			{
				EvendID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"EventName"))
			{
				EventName=token;
			}
			else if (!strcmp(fieldName,"EventNum"))
			{
				EventNum=token;
			}
			else if (!strcmp(fieldName,"EventType"))
			{
				EventType=token;
			}
			else if (!strcmp(fieldName,"EventDes"))
			{
				EventDes=token;
			}
			else if (!strcmp(fieldName,"ProcessFlag"))
			{
				ProcessFlag=token;
			}
			else if (!strcmp(fieldName,"WarningLevel"))
			{
				WarningLevel=token;
			}
			else if (!strcmp(fieldName,"EventDealDes"))
			{
				EventDealDes=token;
			}
			else if (!strcmp(fieldName,"FullEventName"))
			{
				FullEventName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSyslogEvent::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSyslogEvent),output)!=sizeof(CWriteableSyslogEvent))
		return 0;
	else
		return 1;
}

int CWriteableSyslogEvent::writeCSV(FILE *output) const
{
	char buffer[1025];
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OccurDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OccurTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EvendID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventDes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProcessFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WarningLevel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventDealDes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FullEventName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSyslogEvent::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSyslogEvent%s = {\n", index_buf);
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	OccurDate.getString(buf);
	fprintf(fp,"\t\tOccurDate = %s    [事件发生日期]\n",buf);	
	OccurTime.getString(buf);
	fprintf(fp,"\t\tOccurTime = %s    [事件发生时间]\n",buf);	
	EvendID.getString(buf);
	fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [发生事件的对象ID指标]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	EventName.getString(buf);
	fprintf(fp,"\t\tEventName = %s    [事件名]\n",buf);	
	EventNum.getString(buf);
	fprintf(fp,"\t\tEventNum = %s    [事件标签]\n",buf);	
	EventType.getString(buf);
	fprintf(fp,"\t\tEventType = %s    [事件类型]\n",buf);	
	EventDes.getString(buf);
	fprintf(fp,"\t\tEventDes = %s    [事件描述]\n",buf);	
	ProcessFlag.getString(buf);
	fprintf(fp,"\t\tProcessFlag = %s    [清除标记]\n",buf);	
	WarningLevel.getString(buf);
	fprintf(fp,"\t\tWarningLevel = %s    [警告级别]\n",buf);	
	EventDealDes.getString(buf);
	fprintf(fp,"\t\tEventDealDes = %s    [事件处理描述]\n",buf);	
	FullEventName.getString(buf);
	fprintf(fp,"\t\tFullEventName = %s    [事件全名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSyslogEvent::dumpDiff(FILE *fp, const CWriteableSyslogEvent *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSyslogEvent = {\n");
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	OccurDate.getString(buf);
	if (compare(OccurDate.getValue(),pOriginal->OccurDate.getValue())!=0)
	{
		pOriginal->OccurDate.getString(bufOriginal);
		fprintf(fp,"\t\tOccurDate = %s -> %s    [事件发生日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOccurDate = %s    [事件发生日期]\n",buf);
	}
	OccurTime.getString(buf);
	if (compare(OccurTime.getValue(),pOriginal->OccurTime.getValue())!=0)
	{
		pOriginal->OccurTime.getString(bufOriginal);
		fprintf(fp,"\t\tOccurTime = %s -> %s    [事件发生时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOccurTime = %s    [事件发生时间]\n",buf);
	}
	EvendID.getString(buf);
	if (compare(EvendID.getValue(),pOriginal->EvendID.getValue())!=0)
	{
		pOriginal->EvendID.getString(bufOriginal);
		fprintf(fp,"\t\tEvendID = %s -> %s    [事件ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEvendID = %s    [事件ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [发生事件的对象ID指标]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [发生事件的对象ID指标]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	EventName.getString(buf);
	if (compare(EventName.getValue(),pOriginal->EventName.getValue())!=0)
	{
		pOriginal->EventName.getString(bufOriginal);
		fprintf(fp,"\t\tEventName = %s -> %s    [事件名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventName = %s    [事件名]\n",buf);
	}
	EventNum.getString(buf);
	if (compare(EventNum.getValue(),pOriginal->EventNum.getValue())!=0)
	{
		pOriginal->EventNum.getString(bufOriginal);
		fprintf(fp,"\t\tEventNum = %s -> %s    [事件标签]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventNum = %s    [事件标签]\n",buf);
	}
	EventType.getString(buf);
	if (compare(EventType.getValue(),pOriginal->EventType.getValue())!=0)
	{
		pOriginal->EventType.getString(bufOriginal);
		fprintf(fp,"\t\tEventType = %s -> %s    [事件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventType = %s    [事件类型]\n",buf);
	}
	EventDes.getString(buf);
	if (compare(EventDes.getValue(),pOriginal->EventDes.getValue())!=0)
	{
		pOriginal->EventDes.getString(bufOriginal);
		fprintf(fp,"\t\tEventDes = %s -> %s    [事件描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDes = %s    [事件描述]\n",buf);
	}
	ProcessFlag.getString(buf);
	if (compare(ProcessFlag.getValue(),pOriginal->ProcessFlag.getValue())!=0)
	{
		pOriginal->ProcessFlag.getString(bufOriginal);
		fprintf(fp,"\t\tProcessFlag = %s -> %s    [清除标记]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcessFlag = %s    [清除标记]\n",buf);
	}
	WarningLevel.getString(buf);
	if (compare(WarningLevel.getValue(),pOriginal->WarningLevel.getValue())!=0)
	{
		pOriginal->WarningLevel.getString(bufOriginal);
		fprintf(fp,"\t\tWarningLevel = %s -> %s    [警告级别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWarningLevel = %s    [警告级别]\n",buf);
	}
	EventDealDes.getString(buf);
	if (compare(EventDealDes.getValue(),pOriginal->EventDealDes.getValue())!=0)
	{
		pOriginal->EventDealDes.getString(bufOriginal);
		fprintf(fp,"\t\tEventDealDes = %s -> %s    [事件处理描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDealDes = %s    [事件处理描述]\n",buf);
	}
	FullEventName.getString(buf);
	if (compare(FullEventName.getValue(),pOriginal->FullEventName.getValue())!=0)
	{
		pOriginal->FullEventName.getString(bufOriginal);
		fprintf(fp,"\t\tFullEventName = %s -> %s    [事件全名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFullEventName = %s    [事件全名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSyslogEvent::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	OccurDate.getString(buf);
	fprintf(fp,",OccurDate,%s",buf);	
	OccurTime.getString(buf);
	fprintf(fp,",OccurTime,%s",buf);	
	EvendID.getString(buf);
	fprintf(fp,",EvendID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	EventName.getString(buf);
	fprintf(fp,",EventName,%s",buf);	
	EventNum.getString(buf);
	fprintf(fp,",EventNum,%s",buf);	
	EventType.getString(buf);
	fprintf(fp,",EventType,%s",buf);	
	EventDes.getString(buf);
	fprintf(fp,",EventDes,%s",buf);	
	ProcessFlag.getString(buf);
	fprintf(fp,",ProcessFlag,%s",buf);	
	WarningLevel.getString(buf);
	fprintf(fp,",WarningLevel,%s",buf);	
	EventDealDes.getString(buf);
	fprintf(fp,",EventDealDes,%s",buf);	
	FullEventName.getString(buf);
	fprintf(fp,",FullEventName,%s",buf);	
}

void CWriteableSyslogEvent::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	OccurDate.getString(buf);
	sprintf(p,"OccurDate=%s,",buf);
	p+=strlen(p);
	OccurTime.getString(buf);
	sprintf(p,"OccurTime=%s,",buf);
	p+=strlen(p);
	EvendID.getString(buf);
	sprintf(p,"EvendID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	EventName.getString(buf);
	sprintf(p,"EventName=%s,",buf);
	p+=strlen(p);
	EventNum.getString(buf);
	sprintf(p,"EventNum=%s,",buf);
	p+=strlen(p);
	EventType.getString(buf);
	sprintf(p,"EventType=%s,",buf);
	p+=strlen(p);
	EventDes.getString(buf);
	sprintf(p,"EventDes=%s,",buf);
	p+=strlen(p);
	ProcessFlag.getString(buf);
	sprintf(p,"ProcessFlag=%s,",buf);
	p+=strlen(p);
	WarningLevel.getString(buf);
	sprintf(p,"WarningLevel=%s,",buf);
	p+=strlen(p);
	EventDealDes.getString(buf);
	sprintf(p,"EventDealDes=%s,",buf);
	p+=strlen(p);
	FullEventName.getString(buf);
	sprintf(p,"FullEventName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSyslogEvent::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSyslogEvent");
	pLogger->output(indent,0,"{");
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	OccurDate.getString(buf);
	pLogger->output(indent+1,0,"OccurDate=%s 事件发生日期",buf);
	OccurTime.getString(buf);
	pLogger->output(indent+1,0,"OccurTime=%s 事件发生时间",buf);
	EvendID.getString(buf);
	pLogger->output(indent+1,0,"EvendID=%s 事件ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 发生事件的对象ID指标",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	EventName.getString(buf);
	pLogger->output(indent+1,0,"EventName=%s 事件名",buf);
	EventNum.getString(buf);
	pLogger->output(indent+1,0,"EventNum=%s 事件标签",buf);
	EventType.getString(buf);
	pLogger->output(indent+1,0,"EventType=%s 事件类型",buf);
	EventDes.getString(buf);
	pLogger->output(indent+1,0,"EventDes=%s 事件描述",buf);
	ProcessFlag.getString(buf);
	pLogger->output(indent+1,0,"ProcessFlag=%s 清除标记",buf);
	WarningLevel.getString(buf);
	pLogger->output(indent+1,0,"WarningLevel=%s 警告级别",buf);
	EventDealDes.getString(buf);
	pLogger->output(indent+1,0,"EventDealDes=%s 事件处理描述",buf);
	FullEventName.getString(buf);
	pLogger->output(indent+1,0,"FullEventName=%s 事件全名",buf);
	pLogger->output(indent,0,"}");
}

CSyslogEventIterator::~CSyslogEventIterator(void)
{
}


void CSyslogEventIterator::dump(FILE *output)
{
	CSyslogEvent *pSyslogEvent;
	
	while ((pSyslogEvent=next())!=NULL)
	{
		pSyslogEvent->dump(output);
	}
}



void CWriteableSysEventDescrip::writeCSVHead(FILE *output)
{
	fprintf(output,"EventDesID,UserName,MonDate,MonTime,EventDes\n");
}
	
void CWriteableSysEventDescrip::init(void)
{
	EventDesID.clear();
	UserName.clear();
	MonDate.clear();
	MonTime.clear();
	EventDes.clear();
}

int CWriteableSysEventDescrip::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysEventDescrip),input)!=sizeof(CWriteableSysEventDescrip))
		return 0;
	else
		return 1;
}
	
int CWriteableSysEventDescrip::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			EventDesID=token;
		}
		else
		{
			EventDesID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserName=token;
		}
		else
		{
			UserName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventDes=token;
		}
		else
		{
			EventDes="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"EventDesID"))
			{
				EventDesID=token;
			}
			else if (!strcmp(fieldName,"UserName"))
			{
				UserName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"EventDes"))
			{
				EventDes=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysEventDescrip::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysEventDescrip),output)!=sizeof(CWriteableSysEventDescrip))
		return 0;
	else
		return 1;
}

int CWriteableSysEventDescrip::writeCSV(FILE *output) const
{
	char buffer[1025];
	EventDesID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventDes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysEventDescrip::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysEventDescrip%s = {\n", index_buf);
	EventDesID.getString(buf);
	fprintf(fp,"\t\tEventDesID = %s    [处理ID号]\n",buf);	
	UserName.getString(buf);
	fprintf(fp,"\t\tUserName = %s    [事件处理人]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [事件处理日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [事件处理时间]\n",buf);	
	EventDes.getString(buf);
	fprintf(fp,"\t\tEventDes = %s    [处理描述]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysEventDescrip::dumpDiff(FILE *fp, const CWriteableSysEventDescrip *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysEventDescrip = {\n");
	EventDesID.getString(buf);
	if (compare(EventDesID.getValue(),pOriginal->EventDesID.getValue())!=0)
	{
		pOriginal->EventDesID.getString(bufOriginal);
		fprintf(fp,"\t\tEventDesID = %s -> %s    [处理ID号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDesID = %s    [处理ID号]\n",buf);
	}
	UserName.getString(buf);
	if (compare(UserName.getValue(),pOriginal->UserName.getValue())!=0)
	{
		pOriginal->UserName.getString(bufOriginal);
		fprintf(fp,"\t\tUserName = %s -> %s    [事件处理人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserName = %s    [事件处理人]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [事件处理日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [事件处理日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [事件处理时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [事件处理时间]\n",buf);
	}
	EventDes.getString(buf);
	if (compare(EventDes.getValue(),pOriginal->EventDes.getValue())!=0)
	{
		pOriginal->EventDes.getString(bufOriginal);
		fprintf(fp,"\t\tEventDes = %s -> %s    [处理描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventDes = %s    [处理描述]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysEventDescrip::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	EventDesID.getString(buf);
	fprintf(fp,",EventDesID,%s",buf);	
	UserName.getString(buf);
	fprintf(fp,",UserName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	EventDes.getString(buf);
	fprintf(fp,",EventDes,%s",buf);	
}

void CWriteableSysEventDescrip::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	EventDesID.getString(buf);
	sprintf(p,"EventDesID=%s,",buf);
	p+=strlen(p);
	UserName.getString(buf);
	sprintf(p,"UserName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	EventDes.getString(buf);
	sprintf(p,"EventDes=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysEventDescrip::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysEventDescrip");
	pLogger->output(indent,0,"{");
	EventDesID.getString(buf);
	pLogger->output(indent+1,0,"EventDesID=%s 处理ID号",buf);
	UserName.getString(buf);
	pLogger->output(indent+1,0,"UserName=%s 事件处理人",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 事件处理日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 事件处理时间",buf);
	EventDes.getString(buf);
	pLogger->output(indent+1,0,"EventDes=%s 处理描述",buf);
	pLogger->output(indent,0,"}");
}

CSysEventDescripIterator::~CSysEventDescripIterator(void)
{
}


void CSysEventDescripIterator::dump(FILE *output)
{
	CSysEventDescrip *pSysEventDescrip;
	
	while ((pSysEventDescrip=next())!=NULL)
	{
		pSysEventDescrip->dump(output);
	}
}



void CWriteableRspQryHostEnvCommon::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,HostModel,MainMemory,CPUVendor,CPUModel,CPUMHz,CPUCache,CPUCores,Processors,OsMode\n");
}
	
void CWriteableRspQryHostEnvCommon::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	HostModel.clear();
	MainMemory.clear();
	CPUVendor.clear();
	CPUModel.clear();
	CPUMHz.clear();
	CPUCache.clear();
	CPUCores.clear();
	Processors.clear();
	OsMode.clear();
}

int CWriteableRspQryHostEnvCommon::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvCommon),input)!=sizeof(CWriteableRspQryHostEnvCommon))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvCommon::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HostModel=token;
		}
		else
		{
			HostModel="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MainMemory=token;
		}
		else
		{
			MainMemory="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUVendor=token;
		}
		else
		{
			CPUVendor="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUModel=token;
		}
		else
		{
			CPUModel="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUMHz=token;
		}
		else
		{
			CPUMHz="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUCache=token;
		}
		else
		{
			CPUCache="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUCores=token;
		}
		else
		{
			CPUCores="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Processors=token;
		}
		else
		{
			Processors="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OsMode=token;
		}
		else
		{
			OsMode="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"HostModel"))
			{
				HostModel=token;
			}
			else if (!strcmp(fieldName,"MainMemory"))
			{
				MainMemory=token;
			}
			else if (!strcmp(fieldName,"CPUVendor"))
			{
				CPUVendor=token;
			}
			else if (!strcmp(fieldName,"CPUModel"))
			{
				CPUModel=token;
			}
			else if (!strcmp(fieldName,"CPUMHz"))
			{
				CPUMHz=token;
			}
			else if (!strcmp(fieldName,"CPUCache"))
			{
				CPUCache=token;
			}
			else if (!strcmp(fieldName,"CPUCores"))
			{
				CPUCores=token;
			}
			else if (!strcmp(fieldName,"Processors"))
			{
				Processors=token;
			}
			else if (!strcmp(fieldName,"OsMode"))
			{
				OsMode=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvCommon::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvCommon),output)!=sizeof(CWriteableRspQryHostEnvCommon))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvCommon::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HostModel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MainMemory.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUVendor.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUModel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUMHz.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUCache.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUCores.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Processors.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OsMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvCommon::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvCommon%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	HostModel.getString(buf);
	fprintf(fp,"\t\tHostModel = %s    [主机型号]\n",buf);	
	MainMemory.getString(buf);
	fprintf(fp,"\t\tMainMemory = %s    [内存大小(K)]\n",buf);	
	CPUVendor.getString(buf);
	fprintf(fp,"\t\tCPUVendor = %s    [CPU厂商]\n",buf);	
	CPUModel.getString(buf);
	fprintf(fp,"\t\tCPUModel = %s    [CPU型号]\n",buf);	
	CPUMHz.getString(buf);
	fprintf(fp,"\t\tCPUMHz = %s    [CPU主频]\n",buf);	
	CPUCache.getString(buf);
	fprintf(fp,"\t\tCPUCache = %s    [CPU缓存]\n",buf);	
	CPUCores.getString(buf);
	fprintf(fp,"\t\tCPUCores = %s    [CPU内核数]\n",buf);	
	Processors.getString(buf);
	fprintf(fp,"\t\tProcessors = %s    [CPU个数]\n",buf);	
	OsMode.getString(buf);
	fprintf(fp,"\t\tOsMode = %s    [32位还是64位操作系统]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvCommon::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvCommon *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvCommon = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	HostModel.getString(buf);
	if (compare(HostModel.getValue(),pOriginal->HostModel.getValue())!=0)
	{
		pOriginal->HostModel.getString(bufOriginal);
		fprintf(fp,"\t\tHostModel = %s -> %s    [主机型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostModel = %s    [主机型号]\n",buf);
	}
	MainMemory.getString(buf);
	if (compare(MainMemory.getValue(),pOriginal->MainMemory.getValue())!=0)
	{
		pOriginal->MainMemory.getString(bufOriginal);
		fprintf(fp,"\t\tMainMemory = %s -> %s    [内存大小(K)]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMainMemory = %s    [内存大小(K)]\n",buf);
	}
	CPUVendor.getString(buf);
	if (compare(CPUVendor.getValue(),pOriginal->CPUVendor.getValue())!=0)
	{
		pOriginal->CPUVendor.getString(bufOriginal);
		fprintf(fp,"\t\tCPUVendor = %s -> %s    [CPU厂商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUVendor = %s    [CPU厂商]\n",buf);
	}
	CPUModel.getString(buf);
	if (compare(CPUModel.getValue(),pOriginal->CPUModel.getValue())!=0)
	{
		pOriginal->CPUModel.getString(bufOriginal);
		fprintf(fp,"\t\tCPUModel = %s -> %s    [CPU型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUModel = %s    [CPU型号]\n",buf);
	}
	CPUMHz.getString(buf);
	if (compare(CPUMHz.getValue(),pOriginal->CPUMHz.getValue())!=0)
	{
		pOriginal->CPUMHz.getString(bufOriginal);
		fprintf(fp,"\t\tCPUMHz = %s -> %s    [CPU主频]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUMHz = %s    [CPU主频]\n",buf);
	}
	CPUCache.getString(buf);
	if (compare(CPUCache.getValue(),pOriginal->CPUCache.getValue())!=0)
	{
		pOriginal->CPUCache.getString(bufOriginal);
		fprintf(fp,"\t\tCPUCache = %s -> %s    [CPU缓存]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUCache = %s    [CPU缓存]\n",buf);
	}
	CPUCores.getString(buf);
	if (compare(CPUCores.getValue(),pOriginal->CPUCores.getValue())!=0)
	{
		pOriginal->CPUCores.getString(bufOriginal);
		fprintf(fp,"\t\tCPUCores = %s -> %s    [CPU内核数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUCores = %s    [CPU内核数]\n",buf);
	}
	Processors.getString(buf);
	if (compare(Processors.getValue(),pOriginal->Processors.getValue())!=0)
	{
		pOriginal->Processors.getString(bufOriginal);
		fprintf(fp,"\t\tProcessors = %s -> %s    [CPU个数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcessors = %s    [CPU个数]\n",buf);
	}
	OsMode.getString(buf);
	if (compare(OsMode.getValue(),pOriginal->OsMode.getValue())!=0)
	{
		pOriginal->OsMode.getString(bufOriginal);
		fprintf(fp,"\t\tOsMode = %s -> %s    [32位还是64位操作系统]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOsMode = %s    [32位还是64位操作系统]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvCommon::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	HostModel.getString(buf);
	fprintf(fp,",HostModel,%s",buf);	
	MainMemory.getString(buf);
	fprintf(fp,",MainMemory,%s",buf);	
	CPUVendor.getString(buf);
	fprintf(fp,",CPUVendor,%s",buf);	
	CPUModel.getString(buf);
	fprintf(fp,",CPUModel,%s",buf);	
	CPUMHz.getString(buf);
	fprintf(fp,",CPUMHz,%s",buf);	
	CPUCache.getString(buf);
	fprintf(fp,",CPUCache,%s",buf);	
	CPUCores.getString(buf);
	fprintf(fp,",CPUCores,%s",buf);	
	Processors.getString(buf);
	fprintf(fp,",Processors,%s",buf);	
	OsMode.getString(buf);
	fprintf(fp,",OsMode,%s",buf);	
}

void CWriteableRspQryHostEnvCommon::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	HostModel.getString(buf);
	sprintf(p,"HostModel=%s,",buf);
	p+=strlen(p);
	MainMemory.getString(buf);
	sprintf(p,"MainMemory=%s,",buf);
	p+=strlen(p);
	CPUVendor.getString(buf);
	sprintf(p,"CPUVendor=%s,",buf);
	p+=strlen(p);
	CPUModel.getString(buf);
	sprintf(p,"CPUModel=%s,",buf);
	p+=strlen(p);
	CPUMHz.getString(buf);
	sprintf(p,"CPUMHz=%s,",buf);
	p+=strlen(p);
	CPUCache.getString(buf);
	sprintf(p,"CPUCache=%s,",buf);
	p+=strlen(p);
	CPUCores.getString(buf);
	sprintf(p,"CPUCores=%s,",buf);
	p+=strlen(p);
	Processors.getString(buf);
	sprintf(p,"Processors=%s,",buf);
	p+=strlen(p);
	OsMode.getString(buf);
	sprintf(p,"OsMode=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvCommon::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvCommon");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	HostModel.getString(buf);
	pLogger->output(indent+1,0,"HostModel=%s 主机型号",buf);
	MainMemory.getString(buf);
	pLogger->output(indent+1,0,"MainMemory=%s 内存大小(K)",buf);
	CPUVendor.getString(buf);
	pLogger->output(indent+1,0,"CPUVendor=%s CPU厂商",buf);
	CPUModel.getString(buf);
	pLogger->output(indent+1,0,"CPUModel=%s CPU型号",buf);
	CPUMHz.getString(buf);
	pLogger->output(indent+1,0,"CPUMHz=%s CPU主频",buf);
	CPUCache.getString(buf);
	pLogger->output(indent+1,0,"CPUCache=%s CPU缓存",buf);
	CPUCores.getString(buf);
	pLogger->output(indent+1,0,"CPUCores=%s CPU内核数",buf);
	Processors.getString(buf);
	pLogger->output(indent+1,0,"Processors=%s CPU个数",buf);
	OsMode.getString(buf);
	pLogger->output(indent+1,0,"OsMode=%s 32位还是64位操作系统",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvCommonIterator::~CRspQryHostEnvCommonIterator(void)
{
}


void CRspQryHostEnvCommonIterator::dump(FILE *output)
{
	CRspQryHostEnvCommon *pRspQryHostEnvCommon;
	
	while ((pRspQryHostEnvCommon=next())!=NULL)
	{
		pRspQryHostEnvCommon->dump(output);
	}
}



void CWriteableRspQryHostEnvLan::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,LanHardwareID,LanHardwareValue\n");
}
	
void CWriteableRspQryHostEnvLan::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	LanHardwareID.clear();
	LanHardwareValue.clear();
}

int CWriteableRspQryHostEnvLan::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvLan),input)!=sizeof(CWriteableRspQryHostEnvLan))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvLan::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LanHardwareID=token;
		}
		else
		{
			LanHardwareID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LanHardwareValue=token;
		}
		else
		{
			LanHardwareValue="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"LanHardwareID"))
			{
				LanHardwareID=token;
			}
			else if (!strcmp(fieldName,"LanHardwareValue"))
			{
				LanHardwareValue=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvLan::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvLan),output)!=sizeof(CWriteableRspQryHostEnvLan))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvLan::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LanHardwareID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LanHardwareValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvLan::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvLan%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	LanHardwareID.getString(buf);
	fprintf(fp,"\t\tLanHardwareID = %s    [LanID]\n",buf);	
	LanHardwareValue.getString(buf);
	fprintf(fp,"\t\tLanHardwareValue = %s    [Mac地址]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvLan::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvLan *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvLan = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	LanHardwareID.getString(buf);
	if (compare(LanHardwareID.getValue(),pOriginal->LanHardwareID.getValue())!=0)
	{
		pOriginal->LanHardwareID.getString(bufOriginal);
		fprintf(fp,"\t\tLanHardwareID = %s -> %s    [LanID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLanHardwareID = %s    [LanID]\n",buf);
	}
	LanHardwareValue.getString(buf);
	if (compare(LanHardwareValue.getValue(),pOriginal->LanHardwareValue.getValue())!=0)
	{
		pOriginal->LanHardwareValue.getString(bufOriginal);
		fprintf(fp,"\t\tLanHardwareValue = %s -> %s    [Mac地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLanHardwareValue = %s    [Mac地址]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvLan::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	LanHardwareID.getString(buf);
	fprintf(fp,",LanHardwareID,%s",buf);	
	LanHardwareValue.getString(buf);
	fprintf(fp,",LanHardwareValue,%s",buf);	
}

void CWriteableRspQryHostEnvLan::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	LanHardwareID.getString(buf);
	sprintf(p,"LanHardwareID=%s,",buf);
	p+=strlen(p);
	LanHardwareValue.getString(buf);
	sprintf(p,"LanHardwareValue=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvLan::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvLan");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	LanHardwareID.getString(buf);
	pLogger->output(indent+1,0,"LanHardwareID=%s LanID",buf);
	LanHardwareValue.getString(buf);
	pLogger->output(indent+1,0,"LanHardwareValue=%s Mac地址",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvLanIterator::~CRspQryHostEnvLanIterator(void)
{
}


void CRspQryHostEnvLanIterator::dump(FILE *output)
{
	CRspQryHostEnvLan *pRspQryHostEnvLan;
	
	while ((pRspQryHostEnvLan=next())!=NULL)
	{
		pRspQryHostEnvLan->dump(output);
	}
}



void CWriteableRspQryHostEnvStorage::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,StorageDev,HWPath,Interface\n");
}
	
void CWriteableRspQryHostEnvStorage::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	StorageDev.clear();
	HWPath.clear();
	Interface.clear();
}

int CWriteableRspQryHostEnvStorage::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvStorage),input)!=sizeof(CWriteableRspQryHostEnvStorage))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvStorage::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StorageDev=token;
		}
		else
		{
			StorageDev="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HWPath=token;
		}
		else
		{
			HWPath="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"StorageDev"))
			{
				StorageDev=token;
			}
			else if (!strcmp(fieldName,"HWPath"))
			{
				HWPath=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvStorage::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvStorage),output)!=sizeof(CWriteableRspQryHostEnvStorage))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvStorage::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StorageDev.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HWPath.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvStorage::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvStorage%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	StorageDev.getString(buf);
	fprintf(fp,"\t\tStorageDev = %s    [Storage Devices]\n",buf);	
	HWPath.getString(buf);
	fprintf(fp,"\t\tHWPath = %s    [HW Path]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [Interface]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvStorage::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvStorage *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvStorage = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	StorageDev.getString(buf);
	if (compare(StorageDev.getValue(),pOriginal->StorageDev.getValue())!=0)
	{
		pOriginal->StorageDev.getString(bufOriginal);
		fprintf(fp,"\t\tStorageDev = %s -> %s    [Storage Devices]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStorageDev = %s    [Storage Devices]\n",buf);
	}
	HWPath.getString(buf);
	if (compare(HWPath.getValue(),pOriginal->HWPath.getValue())!=0)
	{
		pOriginal->HWPath.getString(bufOriginal);
		fprintf(fp,"\t\tHWPath = %s -> %s    [HW Path]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHWPath = %s    [HW Path]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [Interface]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [Interface]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvStorage::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	StorageDev.getString(buf);
	fprintf(fp,",StorageDev,%s",buf);	
	HWPath.getString(buf);
	fprintf(fp,",HWPath,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
}

void CWriteableRspQryHostEnvStorage::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	StorageDev.getString(buf);
	sprintf(p,"StorageDev=%s,",buf);
	p+=strlen(p);
	HWPath.getString(buf);
	sprintf(p,"HWPath=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvStorage::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvStorage");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	StorageDev.getString(buf);
	pLogger->output(indent+1,0,"StorageDev=%s Storage Devices",buf);
	HWPath.getString(buf);
	pLogger->output(indent+1,0,"HWPath=%s HW Path",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s Interface",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvStorageIterator::~CRspQryHostEnvStorageIterator(void)
{
}


void CRspQryHostEnvStorageIterator::dump(FILE *output)
{
	CRspQryHostEnvStorage *pRspQryHostEnvStorage;
	
	while ((pRspQryHostEnvStorage=next())!=NULL)
	{
		pRspQryHostEnvStorage->dump(output);
	}
}



void CWriteableRspQryHostEnvIO::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,IoClass,H_WPath,IoDriver,IoDescription\n");
}
	
void CWriteableRspQryHostEnvIO::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	IoClass.clear();
	H_WPath.clear();
	IoDriver.clear();
	IoDescription.clear();
}

int CWriteableRspQryHostEnvIO::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvIO),input)!=sizeof(CWriteableRspQryHostEnvIO))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvIO::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IoClass=token;
		}
		else
		{
			IoClass="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			H_WPath=token;
		}
		else
		{
			H_WPath="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IoDriver=token;
		}
		else
		{
			IoDriver="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IoDescription=token;
		}
		else
		{
			IoDescription="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"IoClass"))
			{
				IoClass=token;
			}
			else if (!strcmp(fieldName,"H_WPath"))
			{
				H_WPath=token;
			}
			else if (!strcmp(fieldName,"IoDriver"))
			{
				IoDriver=token;
			}
			else if (!strcmp(fieldName,"IoDescription"))
			{
				IoDescription=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvIO::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvIO),output)!=sizeof(CWriteableRspQryHostEnvIO))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvIO::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IoClass.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	H_WPath.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IoDriver.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IoDescription.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvIO::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvIO%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	IoClass.getString(buf);
	fprintf(fp,"\t\tIoClass = %s    [IO Class]\n",buf);	
	H_WPath.getString(buf);
	fprintf(fp,"\t\tH_WPath = %s    [H/W Path]\n",buf);	
	IoDriver.getString(buf);
	fprintf(fp,"\t\tIoDriver = %s    [Driver]\n",buf);	
	IoDescription.getString(buf);
	fprintf(fp,"\t\tIoDescription = %s    [Description]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvIO::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvIO *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvIO = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	IoClass.getString(buf);
	if (compare(IoClass.getValue(),pOriginal->IoClass.getValue())!=0)
	{
		pOriginal->IoClass.getString(bufOriginal);
		fprintf(fp,"\t\tIoClass = %s -> %s    [IO Class]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIoClass = %s    [IO Class]\n",buf);
	}
	H_WPath.getString(buf);
	if (compare(H_WPath.getValue(),pOriginal->H_WPath.getValue())!=0)
	{
		pOriginal->H_WPath.getString(bufOriginal);
		fprintf(fp,"\t\tH_WPath = %s -> %s    [H/W Path]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tH_WPath = %s    [H/W Path]\n",buf);
	}
	IoDriver.getString(buf);
	if (compare(IoDriver.getValue(),pOriginal->IoDriver.getValue())!=0)
	{
		pOriginal->IoDriver.getString(bufOriginal);
		fprintf(fp,"\t\tIoDriver = %s -> %s    [Driver]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIoDriver = %s    [Driver]\n",buf);
	}
	IoDescription.getString(buf);
	if (compare(IoDescription.getValue(),pOriginal->IoDescription.getValue())!=0)
	{
		pOriginal->IoDescription.getString(bufOriginal);
		fprintf(fp,"\t\tIoDescription = %s -> %s    [Description]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIoDescription = %s    [Description]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvIO::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	IoClass.getString(buf);
	fprintf(fp,",IoClass,%s",buf);	
	H_WPath.getString(buf);
	fprintf(fp,",H_WPath,%s",buf);	
	IoDriver.getString(buf);
	fprintf(fp,",IoDriver,%s",buf);	
	IoDescription.getString(buf);
	fprintf(fp,",IoDescription,%s",buf);	
}

void CWriteableRspQryHostEnvIO::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	IoClass.getString(buf);
	sprintf(p,"IoClass=%s,",buf);
	p+=strlen(p);
	H_WPath.getString(buf);
	sprintf(p,"H_WPath=%s,",buf);
	p+=strlen(p);
	IoDriver.getString(buf);
	sprintf(p,"IoDriver=%s,",buf);
	p+=strlen(p);
	IoDescription.getString(buf);
	sprintf(p,"IoDescription=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvIO::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvIO");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	IoClass.getString(buf);
	pLogger->output(indent+1,0,"IoClass=%s IO Class",buf);
	H_WPath.getString(buf);
	pLogger->output(indent+1,0,"H_WPath=%s H/W Path",buf);
	IoDriver.getString(buf);
	pLogger->output(indent+1,0,"IoDriver=%s Driver",buf);
	IoDescription.getString(buf);
	pLogger->output(indent+1,0,"IoDescription=%s Description",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvIOIterator::~CRspQryHostEnvIOIterator(void)
{
}


void CRspQryHostEnvIOIterator::dump(FILE *output)
{
	CRspQryHostEnvIO *pRspQryHostEnvIO;
	
	while ((pRspQryHostEnvIO=next())!=NULL)
	{
		pRspQryHostEnvIO->dump(output);
	}
}



void CWriteableRspQryHostEnvFS::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,LVMDeviceFile,MountPoint,FSsize,FSType\n");
}
	
void CWriteableRspQryHostEnvFS::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	LVMDeviceFile.clear();
	MountPoint.clear();
	FSsize.clear();
	FSType.clear();
}

int CWriteableRspQryHostEnvFS::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvFS),input)!=sizeof(CWriteableRspQryHostEnvFS))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvFS::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LVMDeviceFile=token;
		}
		else
		{
			LVMDeviceFile="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MountPoint=token;
		}
		else
		{
			MountPoint="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FSsize=token;
		}
		else
		{
			FSsize="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FSType=token;
		}
		else
		{
			FSType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"LVMDeviceFile"))
			{
				LVMDeviceFile=token;
			}
			else if (!strcmp(fieldName,"MountPoint"))
			{
				MountPoint=token;
			}
			else if (!strcmp(fieldName,"FSsize"))
			{
				FSsize=token;
			}
			else if (!strcmp(fieldName,"FSType"))
			{
				FSType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvFS::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvFS),output)!=sizeof(CWriteableRspQryHostEnvFS))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvFS::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LVMDeviceFile.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MountPoint.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FSsize.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FSType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvFS::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvFS%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	LVMDeviceFile.getString(buf);
	fprintf(fp,"\t\tLVMDeviceFile = %s    [LVM Device file]\n",buf);	
	MountPoint.getString(buf);
	fprintf(fp,"\t\tMountPoint = %s    [mount point]\n",buf);	
	FSsize.getString(buf);
	fprintf(fp,"\t\tFSsize = %s    [size]\n",buf);	
	FSType.getString(buf);
	fprintf(fp,"\t\tFSType = %s    [fs type]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvFS::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvFS *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvFS = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	LVMDeviceFile.getString(buf);
	if (compare(LVMDeviceFile.getValue(),pOriginal->LVMDeviceFile.getValue())!=0)
	{
		pOriginal->LVMDeviceFile.getString(bufOriginal);
		fprintf(fp,"\t\tLVMDeviceFile = %s -> %s    [LVM Device file]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLVMDeviceFile = %s    [LVM Device file]\n",buf);
	}
	MountPoint.getString(buf);
	if (compare(MountPoint.getValue(),pOriginal->MountPoint.getValue())!=0)
	{
		pOriginal->MountPoint.getString(bufOriginal);
		fprintf(fp,"\t\tMountPoint = %s -> %s    [mount point]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMountPoint = %s    [mount point]\n",buf);
	}
	FSsize.getString(buf);
	if (compare(FSsize.getValue(),pOriginal->FSsize.getValue())!=0)
	{
		pOriginal->FSsize.getString(bufOriginal);
		fprintf(fp,"\t\tFSsize = %s -> %s    [size]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFSsize = %s    [size]\n",buf);
	}
	FSType.getString(buf);
	if (compare(FSType.getValue(),pOriginal->FSType.getValue())!=0)
	{
		pOriginal->FSType.getString(bufOriginal);
		fprintf(fp,"\t\tFSType = %s -> %s    [fs type]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFSType = %s    [fs type]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvFS::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	LVMDeviceFile.getString(buf);
	fprintf(fp,",LVMDeviceFile,%s",buf);	
	MountPoint.getString(buf);
	fprintf(fp,",MountPoint,%s",buf);	
	FSsize.getString(buf);
	fprintf(fp,",FSsize,%s",buf);	
	FSType.getString(buf);
	fprintf(fp,",FSType,%s",buf);	
}

void CWriteableRspQryHostEnvFS::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	LVMDeviceFile.getString(buf);
	sprintf(p,"LVMDeviceFile=%s,",buf);
	p+=strlen(p);
	MountPoint.getString(buf);
	sprintf(p,"MountPoint=%s,",buf);
	p+=strlen(p);
	FSsize.getString(buf);
	sprintf(p,"FSsize=%s,",buf);
	p+=strlen(p);
	FSType.getString(buf);
	sprintf(p,"FSType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvFS::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvFS");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	LVMDeviceFile.getString(buf);
	pLogger->output(indent+1,0,"LVMDeviceFile=%s LVM Device file",buf);
	MountPoint.getString(buf);
	pLogger->output(indent+1,0,"MountPoint=%s mount point",buf);
	FSsize.getString(buf);
	pLogger->output(indent+1,0,"FSsize=%s size",buf);
	FSType.getString(buf);
	pLogger->output(indent+1,0,"FSType=%s fs type",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvFSIterator::~CRspQryHostEnvFSIterator(void)
{
}


void CRspQryHostEnvFSIterator::dump(FILE *output)
{
	CRspQryHostEnvFS *pRspQryHostEnvFS;
	
	while ((pRspQryHostEnvFS=next())!=NULL)
	{
		pRspQryHostEnvFS->dump(output);
	}
}



void CWriteableRspQryHostEnvSwap::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,type,size,priority,location\n");
}
	
void CWriteableRspQryHostEnvSwap::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	type.clear();
	size.clear();
	priority.clear();
	location.clear();
}

int CWriteableRspQryHostEnvSwap::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvSwap),input)!=sizeof(CWriteableRspQryHostEnvSwap))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvSwap::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			type=token;
		}
		else
		{
			type="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			size=token;
		}
		else
		{
			size="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			priority=token;
		}
		else
		{
			priority="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			location=token;
		}
		else
		{
			location="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"type"))
			{
				type=token;
			}
			else if (!strcmp(fieldName,"size"))
			{
				size=token;
			}
			else if (!strcmp(fieldName,"priority"))
			{
				priority=token;
			}
			else if (!strcmp(fieldName,"location"))
			{
				location=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvSwap::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvSwap),output)!=sizeof(CWriteableRspQryHostEnvSwap))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvSwap::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	type.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	size.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	priority.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	location.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvSwap::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvSwap%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	type.getString(buf);
	fprintf(fp,"\t\ttype = %s    [type]\n",buf);	
	size.getString(buf);
	fprintf(fp,"\t\tsize = %s    [size]\n",buf);	
	priority.getString(buf);
	fprintf(fp,"\t\tpriority = %s    [priority]\n",buf);	
	location.getString(buf);
	fprintf(fp,"\t\tlocation = %s    [device location]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvSwap::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvSwap *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvSwap = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	type.getString(buf);
	if (compare(type.getValue(),pOriginal->type.getValue())!=0)
	{
		pOriginal->type.getString(bufOriginal);
		fprintf(fp,"\t\ttype = %s -> %s    [type]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\ttype = %s    [type]\n",buf);
	}
	size.getString(buf);
	if (compare(size.getValue(),pOriginal->size.getValue())!=0)
	{
		pOriginal->size.getString(bufOriginal);
		fprintf(fp,"\t\tsize = %s -> %s    [size]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tsize = %s    [size]\n",buf);
	}
	priority.getString(buf);
	if (compare(priority.getValue(),pOriginal->priority.getValue())!=0)
	{
		pOriginal->priority.getString(bufOriginal);
		fprintf(fp,"\t\tpriority = %s -> %s    [priority]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tpriority = %s    [priority]\n",buf);
	}
	location.getString(buf);
	if (compare(location.getValue(),pOriginal->location.getValue())!=0)
	{
		pOriginal->location.getString(bufOriginal);
		fprintf(fp,"\t\tlocation = %s -> %s    [device location]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tlocation = %s    [device location]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvSwap::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	type.getString(buf);
	fprintf(fp,",type,%s",buf);	
	size.getString(buf);
	fprintf(fp,",size,%s",buf);	
	priority.getString(buf);
	fprintf(fp,",priority,%s",buf);	
	location.getString(buf);
	fprintf(fp,",location,%s",buf);	
}

void CWriteableRspQryHostEnvSwap::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	type.getString(buf);
	sprintf(p,"type=%s,",buf);
	p+=strlen(p);
	size.getString(buf);
	sprintf(p,"size=%s,",buf);
	p+=strlen(p);
	priority.getString(buf);
	sprintf(p,"priority=%s,",buf);
	p+=strlen(p);
	location.getString(buf);
	sprintf(p,"location=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvSwap::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvSwap");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	type.getString(buf);
	pLogger->output(indent+1,0,"type=%s type",buf);
	size.getString(buf);
	pLogger->output(indent+1,0,"size=%s size",buf);
	priority.getString(buf);
	pLogger->output(indent+1,0,"priority=%s priority",buf);
	location.getString(buf);
	pLogger->output(indent+1,0,"location=%s device location",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvSwapIterator::~CRspQryHostEnvSwapIterator(void)
{
}


void CRspQryHostEnvSwapIterator::dump(FILE *output)
{
	CRspQryHostEnvSwap *pRspQryHostEnvSwap;
	
	while ((pRspQryHostEnvSwap=next())!=NULL)
	{
		pRspQryHostEnvSwap->dump(output);
	}
}



void CWriteableRspQryHostEnvLanCfg::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,LanName,IpAddress,IpMask\n");
}
	
void CWriteableRspQryHostEnvLanCfg::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	LanName.clear();
	IpAddress.clear();
	IpMask.clear();
}

int CWriteableRspQryHostEnvLanCfg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRspQryHostEnvLanCfg),input)!=sizeof(CWriteableRspQryHostEnvLanCfg))
		return 0;
	else
		return 1;
}
	
int CWriteableRspQryHostEnvLanCfg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LanName=token;
		}
		else
		{
			LanName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IpAddress=token;
		}
		else
		{
			IpAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IpMask=token;
		}
		else
		{
			IpMask="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"LanName"))
			{
				LanName=token;
			}
			else if (!strcmp(fieldName,"IpAddress"))
			{
				IpAddress=token;
			}
			else if (!strcmp(fieldName,"IpMask"))
			{
				IpMask=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRspQryHostEnvLanCfg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRspQryHostEnvLanCfg),output)!=sizeof(CWriteableRspQryHostEnvLanCfg))
		return 0;
	else
		return 1;
}

int CWriteableRspQryHostEnvLanCfg::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LanName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IpAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IpMask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRspQryHostEnvLanCfg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRspQryHostEnvLanCfg%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	LanName.getString(buf);
	fprintf(fp,"\t\tLanName = %s    []\n",buf);	
	IpAddress.getString(buf);
	fprintf(fp,"\t\tIpAddress = %s    []\n",buf);	
	IpMask.getString(buf);
	fprintf(fp,"\t\tIpMask = %s    []\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvLanCfg::dumpDiff(FILE *fp, const CWriteableRspQryHostEnvLanCfg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRspQryHostEnvLanCfg = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	LanName.getString(buf);
	if (compare(LanName.getValue(),pOriginal->LanName.getValue())!=0)
	{
		pOriginal->LanName.getString(bufOriginal);
		fprintf(fp,"\t\tLanName = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLanName = %s    []\n",buf);
	}
	IpAddress.getString(buf);
	if (compare(IpAddress.getValue(),pOriginal->IpAddress.getValue())!=0)
	{
		pOriginal->IpAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIpAddress = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIpAddress = %s    []\n",buf);
	}
	IpMask.getString(buf);
	if (compare(IpMask.getValue(),pOriginal->IpMask.getValue())!=0)
	{
		pOriginal->IpMask.getString(bufOriginal);
		fprintf(fp,"\t\tIpMask = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIpMask = %s    []\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRspQryHostEnvLanCfg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	LanName.getString(buf);
	fprintf(fp,",LanName,%s",buf);	
	IpAddress.getString(buf);
	fprintf(fp,",IpAddress,%s",buf);	
	IpMask.getString(buf);
	fprintf(fp,",IpMask,%s",buf);	
}

void CWriteableRspQryHostEnvLanCfg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	LanName.getString(buf);
	sprintf(p,"LanName=%s,",buf);
	p+=strlen(p);
	IpAddress.getString(buf);
	sprintf(p,"IpAddress=%s,",buf);
	p+=strlen(p);
	IpMask.getString(buf);
	sprintf(p,"IpMask=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRspQryHostEnvLanCfg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRspQryHostEnvLanCfg");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	LanName.getString(buf);
	pLogger->output(indent+1,0,"LanName=%s ",buf);
	IpAddress.getString(buf);
	pLogger->output(indent+1,0,"IpAddress=%s ",buf);
	IpMask.getString(buf);
	pLogger->output(indent+1,0,"IpMask=%s ",buf);
	pLogger->output(indent,0,"}");
}

CRspQryHostEnvLanCfgIterator::~CRspQryHostEnvLanCfgIterator(void)
{
}


void CRspQryHostEnvLanCfgIterator::dump(FILE *output)
{
	CRspQryHostEnvLanCfg *pRspQryHostEnvLanCfg;
	
	while ((pRspQryHostEnvLanCfg=next())!=NULL)
	{
		pRspQryHostEnvLanCfg->dump(output);
	}
}



void CWriteableSysMdbTopCpuInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,CPU,LOAD,USER,NICE,SYS,IDLE,BLOCK,SWAIT,INTR,SSYS\n");
}
	
void CWriteableSysMdbTopCpuInfo::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	CPU.clear();
	LOAD.clear();
	USER.clear();
	NICE.clear();
	SYS.clear();
	IDLE.clear();
	BLOCK.clear();
	SWAIT.clear();
	INTR.clear();
	SSYS.clear();
}

int CWriteableSysMdbTopCpuInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbTopCpuInfo),input)!=sizeof(CWriteableSysMdbTopCpuInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbTopCpuInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPU=token;
		}
		else
		{
			CPU="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LOAD=token;
		}
		else
		{
			LOAD="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			USER=token;
		}
		else
		{
			USER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NICE=token;
		}
		else
		{
			NICE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SYS=token;
		}
		else
		{
			SYS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IDLE=token;
		}
		else
		{
			IDLE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BLOCK=token;
		}
		else
		{
			BLOCK="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SWAIT=token;
		}
		else
		{
			SWAIT="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			INTR=token;
		}
		else
		{
			INTR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SSYS=token;
		}
		else
		{
			SSYS="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"CPU"))
			{
				CPU=token;
			}
			else if (!strcmp(fieldName,"LOAD"))
			{
				LOAD=token;
			}
			else if (!strcmp(fieldName,"USER"))
			{
				USER=token;
			}
			else if (!strcmp(fieldName,"NICE"))
			{
				NICE=token;
			}
			else if (!strcmp(fieldName,"SYS"))
			{
				SYS=token;
			}
			else if (!strcmp(fieldName,"IDLE"))
			{
				IDLE=token;
			}
			else if (!strcmp(fieldName,"BLOCK"))
			{
				BLOCK=token;
			}
			else if (!strcmp(fieldName,"SWAIT"))
			{
				SWAIT=token;
			}
			else if (!strcmp(fieldName,"INTR"))
			{
				INTR=token;
			}
			else if (!strcmp(fieldName,"SSYS"))
			{
				SSYS=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbTopCpuInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbTopCpuInfo),output)!=sizeof(CWriteableSysMdbTopCpuInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbTopCpuInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPU.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LOAD.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	USER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NICE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SYS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IDLE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BLOCK.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SWAIT.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	INTR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SSYS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbTopCpuInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbTopCpuInfo%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	CPU.getString(buf);
	fprintf(fp,"\t\tCPU = %s    [CPU的编号]\n",buf);	
	LOAD.getString(buf);
	fprintf(fp,"\t\tLOAD = %s    []\n",buf);	
	USER.getString(buf);
	fprintf(fp,"\t\tUSER = %s    []\n",buf);	
	NICE.getString(buf);
	fprintf(fp,"\t\tNICE = %s    []\n",buf);	
	SYS.getString(buf);
	fprintf(fp,"\t\tSYS = %s    []\n",buf);	
	IDLE.getString(buf);
	fprintf(fp,"\t\tIDLE = %s    []\n",buf);	
	BLOCK.getString(buf);
	fprintf(fp,"\t\tBLOCK = %s    []\n",buf);	
	SWAIT.getString(buf);
	fprintf(fp,"\t\tSWAIT = %s    []\n",buf);	
	INTR.getString(buf);
	fprintf(fp,"\t\tINTR = %s    []\n",buf);	
	SSYS.getString(buf);
	fprintf(fp,"\t\tSSYS = %s    []\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopCpuInfo::dumpDiff(FILE *fp, const CWriteableSysMdbTopCpuInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbTopCpuInfo = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	CPU.getString(buf);
	if (compare(CPU.getValue(),pOriginal->CPU.getValue())!=0)
	{
		pOriginal->CPU.getString(bufOriginal);
		fprintf(fp,"\t\tCPU = %s -> %s    [CPU的编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPU = %s    [CPU的编号]\n",buf);
	}
	LOAD.getString(buf);
	if (compare(LOAD.getValue(),pOriginal->LOAD.getValue())!=0)
	{
		pOriginal->LOAD.getString(bufOriginal);
		fprintf(fp,"\t\tLOAD = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLOAD = %s    []\n",buf);
	}
	USER.getString(buf);
	if (compare(USER.getValue(),pOriginal->USER.getValue())!=0)
	{
		pOriginal->USER.getString(bufOriginal);
		fprintf(fp,"\t\tUSER = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSER = %s    []\n",buf);
	}
	NICE.getString(buf);
	if (compare(NICE.getValue(),pOriginal->NICE.getValue())!=0)
	{
		pOriginal->NICE.getString(bufOriginal);
		fprintf(fp,"\t\tNICE = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNICE = %s    []\n",buf);
	}
	SYS.getString(buf);
	if (compare(SYS.getValue(),pOriginal->SYS.getValue())!=0)
	{
		pOriginal->SYS.getString(bufOriginal);
		fprintf(fp,"\t\tSYS = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSYS = %s    []\n",buf);
	}
	IDLE.getString(buf);
	if (compare(IDLE.getValue(),pOriginal->IDLE.getValue())!=0)
	{
		pOriginal->IDLE.getString(bufOriginal);
		fprintf(fp,"\t\tIDLE = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIDLE = %s    []\n",buf);
	}
	BLOCK.getString(buf);
	if (compare(BLOCK.getValue(),pOriginal->BLOCK.getValue())!=0)
	{
		pOriginal->BLOCK.getString(bufOriginal);
		fprintf(fp,"\t\tBLOCK = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBLOCK = %s    []\n",buf);
	}
	SWAIT.getString(buf);
	if (compare(SWAIT.getValue(),pOriginal->SWAIT.getValue())!=0)
	{
		pOriginal->SWAIT.getString(bufOriginal);
		fprintf(fp,"\t\tSWAIT = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSWAIT = %s    []\n",buf);
	}
	INTR.getString(buf);
	if (compare(INTR.getValue(),pOriginal->INTR.getValue())!=0)
	{
		pOriginal->INTR.getString(bufOriginal);
		fprintf(fp,"\t\tINTR = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tINTR = %s    []\n",buf);
	}
	SSYS.getString(buf);
	if (compare(SSYS.getValue(),pOriginal->SSYS.getValue())!=0)
	{
		pOriginal->SSYS.getString(bufOriginal);
		fprintf(fp,"\t\tSSYS = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSSYS = %s    []\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopCpuInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	CPU.getString(buf);
	fprintf(fp,",CPU,%s",buf);	
	LOAD.getString(buf);
	fprintf(fp,",LOAD,%s",buf);	
	USER.getString(buf);
	fprintf(fp,",USER,%s",buf);	
	NICE.getString(buf);
	fprintf(fp,",NICE,%s",buf);	
	SYS.getString(buf);
	fprintf(fp,",SYS,%s",buf);	
	IDLE.getString(buf);
	fprintf(fp,",IDLE,%s",buf);	
	BLOCK.getString(buf);
	fprintf(fp,",BLOCK,%s",buf);	
	SWAIT.getString(buf);
	fprintf(fp,",SWAIT,%s",buf);	
	INTR.getString(buf);
	fprintf(fp,",INTR,%s",buf);	
	SSYS.getString(buf);
	fprintf(fp,",SSYS,%s",buf);	
}

void CWriteableSysMdbTopCpuInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	CPU.getString(buf);
	sprintf(p,"CPU=%s,",buf);
	p+=strlen(p);
	LOAD.getString(buf);
	sprintf(p,"LOAD=%s,",buf);
	p+=strlen(p);
	USER.getString(buf);
	sprintf(p,"USER=%s,",buf);
	p+=strlen(p);
	NICE.getString(buf);
	sprintf(p,"NICE=%s,",buf);
	p+=strlen(p);
	SYS.getString(buf);
	sprintf(p,"SYS=%s,",buf);
	p+=strlen(p);
	IDLE.getString(buf);
	sprintf(p,"IDLE=%s,",buf);
	p+=strlen(p);
	BLOCK.getString(buf);
	sprintf(p,"BLOCK=%s,",buf);
	p+=strlen(p);
	SWAIT.getString(buf);
	sprintf(p,"SWAIT=%s,",buf);
	p+=strlen(p);
	INTR.getString(buf);
	sprintf(p,"INTR=%s,",buf);
	p+=strlen(p);
	SSYS.getString(buf);
	sprintf(p,"SSYS=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbTopCpuInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbTopCpuInfo");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	CPU.getString(buf);
	pLogger->output(indent+1,0,"CPU=%s CPU的编号",buf);
	LOAD.getString(buf);
	pLogger->output(indent+1,0,"LOAD=%s ",buf);
	USER.getString(buf);
	pLogger->output(indent+1,0,"USER=%s ",buf);
	NICE.getString(buf);
	pLogger->output(indent+1,0,"NICE=%s ",buf);
	SYS.getString(buf);
	pLogger->output(indent+1,0,"SYS=%s ",buf);
	IDLE.getString(buf);
	pLogger->output(indent+1,0,"IDLE=%s ",buf);
	BLOCK.getString(buf);
	pLogger->output(indent+1,0,"BLOCK=%s ",buf);
	SWAIT.getString(buf);
	pLogger->output(indent+1,0,"SWAIT=%s ",buf);
	INTR.getString(buf);
	pLogger->output(indent+1,0,"INTR=%s ",buf);
	SSYS.getString(buf);
	pLogger->output(indent+1,0,"SSYS=%s ",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbTopCpuInfoIterator::~CSysMdbTopCpuInfoIterator(void)
{
}


void CSysMdbTopCpuInfoIterator::dump(FILE *output)
{
	CSysMdbTopCpuInfo *pSysMdbTopCpuInfo;
	
	while ((pSysMdbTopCpuInfo=next())!=NULL)
	{
		pSysMdbTopCpuInfo->dump(output);
	}
}



void CWriteableSysMdbTopMemInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,TOTALREAL,ACTIVEREAL,TOTALVIRTUAL,ACTIVEVIRTUAL,FREE\n");
}
	
void CWriteableSysMdbTopMemInfo::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	TOTALREAL.clear();
	ACTIVEREAL.clear();
	TOTALVIRTUAL.clear();
	ACTIVEVIRTUAL.clear();
	FREE.clear();
}

int CWriteableSysMdbTopMemInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbTopMemInfo),input)!=sizeof(CWriteableSysMdbTopMemInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbTopMemInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TOTALREAL=token;
		}
		else
		{
			TOTALREAL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ACTIVEREAL=token;
		}
		else
		{
			ACTIVEREAL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TOTALVIRTUAL=token;
		}
		else
		{
			TOTALVIRTUAL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ACTIVEVIRTUAL=token;
		}
		else
		{
			ACTIVEVIRTUAL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FREE=token;
		}
		else
		{
			FREE="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"TOTALREAL"))
			{
				TOTALREAL=token;
			}
			else if (!strcmp(fieldName,"ACTIVEREAL"))
			{
				ACTIVEREAL=token;
			}
			else if (!strcmp(fieldName,"TOTALVIRTUAL"))
			{
				TOTALVIRTUAL=token;
			}
			else if (!strcmp(fieldName,"ACTIVEVIRTUAL"))
			{
				ACTIVEVIRTUAL=token;
			}
			else if (!strcmp(fieldName,"FREE"))
			{
				FREE=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbTopMemInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbTopMemInfo),output)!=sizeof(CWriteableSysMdbTopMemInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbTopMemInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TOTALREAL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ACTIVEREAL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TOTALVIRTUAL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ACTIVEVIRTUAL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FREE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbTopMemInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbTopMemInfo%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	TOTALREAL.getString(buf);
	fprintf(fp,"\t\tTOTALREAL = %s    [Total Real Memory]\n",buf);	
	ACTIVEREAL.getString(buf);
	fprintf(fp,"\t\tACTIVEREAL = %s    [Active Real Memory]\n",buf);	
	TOTALVIRTUAL.getString(buf);
	fprintf(fp,"\t\tTOTALVIRTUAL = %s    [Total Virtual Memory]\n",buf);	
	ACTIVEVIRTUAL.getString(buf);
	fprintf(fp,"\t\tACTIVEVIRTUAL = %s    [Active Virtual Memory]\n",buf);	
	FREE.getString(buf);
	fprintf(fp,"\t\tFREE = %s    [Free Memory]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopMemInfo::dumpDiff(FILE *fp, const CWriteableSysMdbTopMemInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbTopMemInfo = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	TOTALREAL.getString(buf);
	if (compare(TOTALREAL.getValue(),pOriginal->TOTALREAL.getValue())!=0)
	{
		pOriginal->TOTALREAL.getString(bufOriginal);
		fprintf(fp,"\t\tTOTALREAL = %s -> %s    [Total Real Memory]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTOTALREAL = %s    [Total Real Memory]\n",buf);
	}
	ACTIVEREAL.getString(buf);
	if (compare(ACTIVEREAL.getValue(),pOriginal->ACTIVEREAL.getValue())!=0)
	{
		pOriginal->ACTIVEREAL.getString(bufOriginal);
		fprintf(fp,"\t\tACTIVEREAL = %s -> %s    [Active Real Memory]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tACTIVEREAL = %s    [Active Real Memory]\n",buf);
	}
	TOTALVIRTUAL.getString(buf);
	if (compare(TOTALVIRTUAL.getValue(),pOriginal->TOTALVIRTUAL.getValue())!=0)
	{
		pOriginal->TOTALVIRTUAL.getString(bufOriginal);
		fprintf(fp,"\t\tTOTALVIRTUAL = %s -> %s    [Total Virtual Memory]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTOTALVIRTUAL = %s    [Total Virtual Memory]\n",buf);
	}
	ACTIVEVIRTUAL.getString(buf);
	if (compare(ACTIVEVIRTUAL.getValue(),pOriginal->ACTIVEVIRTUAL.getValue())!=0)
	{
		pOriginal->ACTIVEVIRTUAL.getString(bufOriginal);
		fprintf(fp,"\t\tACTIVEVIRTUAL = %s -> %s    [Active Virtual Memory]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tACTIVEVIRTUAL = %s    [Active Virtual Memory]\n",buf);
	}
	FREE.getString(buf);
	if (compare(FREE.getValue(),pOriginal->FREE.getValue())!=0)
	{
		pOriginal->FREE.getString(bufOriginal);
		fprintf(fp,"\t\tFREE = %s -> %s    [Free Memory]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFREE = %s    [Free Memory]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopMemInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	TOTALREAL.getString(buf);
	fprintf(fp,",TOTALREAL,%s",buf);	
	ACTIVEREAL.getString(buf);
	fprintf(fp,",ACTIVEREAL,%s",buf);	
	TOTALVIRTUAL.getString(buf);
	fprintf(fp,",TOTALVIRTUAL,%s",buf);	
	ACTIVEVIRTUAL.getString(buf);
	fprintf(fp,",ACTIVEVIRTUAL,%s",buf);	
	FREE.getString(buf);
	fprintf(fp,",FREE,%s",buf);	
}

void CWriteableSysMdbTopMemInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	TOTALREAL.getString(buf);
	sprintf(p,"TOTALREAL=%s,",buf);
	p+=strlen(p);
	ACTIVEREAL.getString(buf);
	sprintf(p,"ACTIVEREAL=%s,",buf);
	p+=strlen(p);
	TOTALVIRTUAL.getString(buf);
	sprintf(p,"TOTALVIRTUAL=%s,",buf);
	p+=strlen(p);
	ACTIVEVIRTUAL.getString(buf);
	sprintf(p,"ACTIVEVIRTUAL=%s,",buf);
	p+=strlen(p);
	FREE.getString(buf);
	sprintf(p,"FREE=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbTopMemInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbTopMemInfo");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	TOTALREAL.getString(buf);
	pLogger->output(indent+1,0,"TOTALREAL=%s Total Real Memory",buf);
	ACTIVEREAL.getString(buf);
	pLogger->output(indent+1,0,"ACTIVEREAL=%s Active Real Memory",buf);
	TOTALVIRTUAL.getString(buf);
	pLogger->output(indent+1,0,"TOTALVIRTUAL=%s Total Virtual Memory",buf);
	ACTIVEVIRTUAL.getString(buf);
	pLogger->output(indent+1,0,"ACTIVEVIRTUAL=%s Active Virtual Memory",buf);
	FREE.getString(buf);
	pLogger->output(indent+1,0,"FREE=%s Free Memory",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbTopMemInfoIterator::~CSysMdbTopMemInfoIterator(void)
{
}


void CSysMdbTopMemInfoIterator::dump(FILE *output)
{
	CSysMdbTopMemInfo *pSysMdbTopMemInfo;
	
	while ((pSysMdbTopMemInfo=next())!=NULL)
	{
		pSysMdbTopMemInfo->dump(output);
	}
}



void CWriteableSysMdbTopProcessInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,CPU,TTY,PID,USERNAME,PRI,NI,SIZE,RES,STATE,TIME,pWCPU,pCPU,COMMAND\n");
}
	
void CWriteableSysMdbTopProcessInfo::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	CPU.clear();
	TTY.clear();
	PID.clear();
	USERNAME.clear();
	PRI.clear();
	NI.clear();
	SIZE.clear();
	RES.clear();
	STATE.clear();
	TIME.clear();
	pWCPU.clear();
	pCPU.clear();
	COMMAND.clear();
}

int CWriteableSysMdbTopProcessInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbTopProcessInfo),input)!=sizeof(CWriteableSysMdbTopProcessInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbTopProcessInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPU=token;
		}
		else
		{
			CPU="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TTY=token;
		}
		else
		{
			TTY="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PID=token;
		}
		else
		{
			PID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			USERNAME=token;
		}
		else
		{
			USERNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PRI=token;
		}
		else
		{
			PRI="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NI=token;
		}
		else
		{
			NI="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SIZE=token;
		}
		else
		{
			SIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RES=token;
		}
		else
		{
			RES="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			STATE=token;
		}
		else
		{
			STATE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TIME=token;
		}
		else
		{
			TIME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			pWCPU=token;
		}
		else
		{
			pWCPU="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			pCPU=token;
		}
		else
		{
			pCPU="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			COMMAND=token;
		}
		else
		{
			COMMAND="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"CPU"))
			{
				CPU=token;
			}
			else if (!strcmp(fieldName,"TTY"))
			{
				TTY=token;
			}
			else if (!strcmp(fieldName,"PID"))
			{
				PID=token;
			}
			else if (!strcmp(fieldName,"USERNAME"))
			{
				USERNAME=token;
			}
			else if (!strcmp(fieldName,"PRI"))
			{
				PRI=token;
			}
			else if (!strcmp(fieldName,"NI"))
			{
				NI=token;
			}
			else if (!strcmp(fieldName,"SIZE"))
			{
				SIZE=token;
			}
			else if (!strcmp(fieldName,"RES"))
			{
				RES=token;
			}
			else if (!strcmp(fieldName,"STATE"))
			{
				STATE=token;
			}
			else if (!strcmp(fieldName,"TIME"))
			{
				TIME=token;
			}
			else if (!strcmp(fieldName,"pWCPU"))
			{
				pWCPU=token;
			}
			else if (!strcmp(fieldName,"pCPU"))
			{
				pCPU=token;
			}
			else if (!strcmp(fieldName,"COMMAND"))
			{
				COMMAND=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbTopProcessInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbTopProcessInfo),output)!=sizeof(CWriteableSysMdbTopProcessInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbTopProcessInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPU.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TTY.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	USERNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PRI.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NI.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RES.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	STATE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TIME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	pWCPU.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	pCPU.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	COMMAND.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbTopProcessInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbTopProcessInfo%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	CPU.getString(buf);
	fprintf(fp,"\t\tCPU = %s    [处理器号]\n",buf);	
	TTY.getString(buf);
	fprintf(fp,"\t\tTTY = %s    [终端名]\n",buf);	
	PID.getString(buf);
	fprintf(fp,"\t\tPID = %s    [进程号]\n",buf);	
	USERNAME.getString(buf);
	fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);	
	PRI.getString(buf);
	fprintf(fp,"\t\tPRI = %s    [任务的优先级]\n",buf);	
	NI.getString(buf);
	fprintf(fp,"\t\tNI = %s    [任务的nice值]\n",buf);	
	SIZE.getString(buf);
	fprintf(fp,"\t\tSIZE = %s    [任务的代码加上数据再加上栈空间的大小]\n",buf);	
	RES.getString(buf);
	fprintf(fp,"\t\tRES = %s    [任务使用的物理内存的总数量]\n",buf);	
	STATE.getString(buf);
	fprintf(fp,"\t\tSTATE = %s    [任务的状态]\n",buf);	
	TIME.getString(buf);
	fprintf(fp,"\t\tTIME = %s    [自任务开始时使用的总CPU时间]\n",buf);	
	pWCPU.getString(buf);
	fprintf(fp,"\t\tpWCPU = %s    [进程的CPU利用率权重百分比]\n",buf);	
	pCPU.getString(buf);
	fprintf(fp,"\t\tpCPU = %s    [进程的原始的CPU利用率百分比]\n",buf);	
	COMMAND.getString(buf);
	fprintf(fp,"\t\tCOMMAND = %s    [启动进程的命令名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopProcessInfo::dumpDiff(FILE *fp, const CWriteableSysMdbTopProcessInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbTopProcessInfo = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	CPU.getString(buf);
	if (compare(CPU.getValue(),pOriginal->CPU.getValue())!=0)
	{
		pOriginal->CPU.getString(bufOriginal);
		fprintf(fp,"\t\tCPU = %s -> %s    [处理器号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPU = %s    [处理器号]\n",buf);
	}
	TTY.getString(buf);
	if (compare(TTY.getValue(),pOriginal->TTY.getValue())!=0)
	{
		pOriginal->TTY.getString(bufOriginal);
		fprintf(fp,"\t\tTTY = %s -> %s    [终端名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTTY = %s    [终端名]\n",buf);
	}
	PID.getString(buf);
	if (compare(PID.getValue(),pOriginal->PID.getValue())!=0)
	{
		pOriginal->PID.getString(bufOriginal);
		fprintf(fp,"\t\tPID = %s -> %s    [进程号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPID = %s    [进程号]\n",buf);
	}
	USERNAME.getString(buf);
	if (compare(USERNAME.getValue(),pOriginal->USERNAME.getValue())!=0)
	{
		pOriginal->USERNAME.getString(bufOriginal);
		fprintf(fp,"\t\tUSERNAME = %s -> %s    [用户名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSERNAME = %s    [用户名]\n",buf);
	}
	PRI.getString(buf);
	if (compare(PRI.getValue(),pOriginal->PRI.getValue())!=0)
	{
		pOriginal->PRI.getString(bufOriginal);
		fprintf(fp,"\t\tPRI = %s -> %s    [任务的优先级]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPRI = %s    [任务的优先级]\n",buf);
	}
	NI.getString(buf);
	if (compare(NI.getValue(),pOriginal->NI.getValue())!=0)
	{
		pOriginal->NI.getString(bufOriginal);
		fprintf(fp,"\t\tNI = %s -> %s    [任务的nice值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNI = %s    [任务的nice值]\n",buf);
	}
	SIZE.getString(buf);
	if (compare(SIZE.getValue(),pOriginal->SIZE.getValue())!=0)
	{
		pOriginal->SIZE.getString(bufOriginal);
		fprintf(fp,"\t\tSIZE = %s -> %s    [任务的代码加上数据再加上栈空间的大小]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSIZE = %s    [任务的代码加上数据再加上栈空间的大小]\n",buf);
	}
	RES.getString(buf);
	if (compare(RES.getValue(),pOriginal->RES.getValue())!=0)
	{
		pOriginal->RES.getString(bufOriginal);
		fprintf(fp,"\t\tRES = %s -> %s    [任务使用的物理内存的总数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRES = %s    [任务使用的物理内存的总数量]\n",buf);
	}
	STATE.getString(buf);
	if (compare(STATE.getValue(),pOriginal->STATE.getValue())!=0)
	{
		pOriginal->STATE.getString(bufOriginal);
		fprintf(fp,"\t\tSTATE = %s -> %s    [任务的状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSTATE = %s    [任务的状态]\n",buf);
	}
	TIME.getString(buf);
	if (compare(TIME.getValue(),pOriginal->TIME.getValue())!=0)
	{
		pOriginal->TIME.getString(bufOriginal);
		fprintf(fp,"\t\tTIME = %s -> %s    [自任务开始时使用的总CPU时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTIME = %s    [自任务开始时使用的总CPU时间]\n",buf);
	}
	pWCPU.getString(buf);
	if (compare(pWCPU.getValue(),pOriginal->pWCPU.getValue())!=0)
	{
		pOriginal->pWCPU.getString(bufOriginal);
		fprintf(fp,"\t\tpWCPU = %s -> %s    [进程的CPU利用率权重百分比]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tpWCPU = %s    [进程的CPU利用率权重百分比]\n",buf);
	}
	pCPU.getString(buf);
	if (compare(pCPU.getValue(),pOriginal->pCPU.getValue())!=0)
	{
		pOriginal->pCPU.getString(bufOriginal);
		fprintf(fp,"\t\tpCPU = %s -> %s    [进程的原始的CPU利用率百分比]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tpCPU = %s    [进程的原始的CPU利用率百分比]\n",buf);
	}
	COMMAND.getString(buf);
	if (compare(COMMAND.getValue(),pOriginal->COMMAND.getValue())!=0)
	{
		pOriginal->COMMAND.getString(bufOriginal);
		fprintf(fp,"\t\tCOMMAND = %s -> %s    [启动进程的命令名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCOMMAND = %s    [启动进程的命令名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTopProcessInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	CPU.getString(buf);
	fprintf(fp,",CPU,%s",buf);	
	TTY.getString(buf);
	fprintf(fp,",TTY,%s",buf);	
	PID.getString(buf);
	fprintf(fp,",PID,%s",buf);	
	USERNAME.getString(buf);
	fprintf(fp,",USERNAME,%s",buf);	
	PRI.getString(buf);
	fprintf(fp,",PRI,%s",buf);	
	NI.getString(buf);
	fprintf(fp,",NI,%s",buf);	
	SIZE.getString(buf);
	fprintf(fp,",SIZE,%s",buf);	
	RES.getString(buf);
	fprintf(fp,",RES,%s",buf);	
	STATE.getString(buf);
	fprintf(fp,",STATE,%s",buf);	
	TIME.getString(buf);
	fprintf(fp,",TIME,%s",buf);	
	pWCPU.getString(buf);
	fprintf(fp,",pWCPU,%s",buf);	
	pCPU.getString(buf);
	fprintf(fp,",pCPU,%s",buf);	
	COMMAND.getString(buf);
	fprintf(fp,",COMMAND,%s",buf);	
}

void CWriteableSysMdbTopProcessInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	CPU.getString(buf);
	sprintf(p,"CPU=%s,",buf);
	p+=strlen(p);
	TTY.getString(buf);
	sprintf(p,"TTY=%s,",buf);
	p+=strlen(p);
	PID.getString(buf);
	sprintf(p,"PID=%s,",buf);
	p+=strlen(p);
	USERNAME.getString(buf);
	sprintf(p,"USERNAME=%s,",buf);
	p+=strlen(p);
	PRI.getString(buf);
	sprintf(p,"PRI=%s,",buf);
	p+=strlen(p);
	NI.getString(buf);
	sprintf(p,"NI=%s,",buf);
	p+=strlen(p);
	SIZE.getString(buf);
	sprintf(p,"SIZE=%s,",buf);
	p+=strlen(p);
	RES.getString(buf);
	sprintf(p,"RES=%s,",buf);
	p+=strlen(p);
	STATE.getString(buf);
	sprintf(p,"STATE=%s,",buf);
	p+=strlen(p);
	TIME.getString(buf);
	sprintf(p,"TIME=%s,",buf);
	p+=strlen(p);
	pWCPU.getString(buf);
	sprintf(p,"pWCPU=%s,",buf);
	p+=strlen(p);
	pCPU.getString(buf);
	sprintf(p,"pCPU=%s,",buf);
	p+=strlen(p);
	COMMAND.getString(buf);
	sprintf(p,"COMMAND=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbTopProcessInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbTopProcessInfo");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	CPU.getString(buf);
	pLogger->output(indent+1,0,"CPU=%s 处理器号",buf);
	TTY.getString(buf);
	pLogger->output(indent+1,0,"TTY=%s 终端名",buf);
	PID.getString(buf);
	pLogger->output(indent+1,0,"PID=%s 进程号",buf);
	USERNAME.getString(buf);
	pLogger->output(indent+1,0,"USERNAME=%s 用户名",buf);
	PRI.getString(buf);
	pLogger->output(indent+1,0,"PRI=%s 任务的优先级",buf);
	NI.getString(buf);
	pLogger->output(indent+1,0,"NI=%s 任务的nice值",buf);
	SIZE.getString(buf);
	pLogger->output(indent+1,0,"SIZE=%s 任务的代码加上数据再加上栈空间的大小",buf);
	RES.getString(buf);
	pLogger->output(indent+1,0,"RES=%s 任务使用的物理内存的总数量",buf);
	STATE.getString(buf);
	pLogger->output(indent+1,0,"STATE=%s 任务的状态",buf);
	TIME.getString(buf);
	pLogger->output(indent+1,0,"TIME=%s 自任务开始时使用的总CPU时间",buf);
	pWCPU.getString(buf);
	pLogger->output(indent+1,0,"pWCPU=%s 进程的CPU利用率权重百分比",buf);
	pCPU.getString(buf);
	pLogger->output(indent+1,0,"pCPU=%s 进程的原始的CPU利用率百分比",buf);
	COMMAND.getString(buf);
	pLogger->output(indent+1,0,"COMMAND=%s 启动进程的命令名",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbTopProcessInfoIterator::~CSysMdbTopProcessInfoIterator(void)
{
}


void CSysMdbTopProcessInfoIterator::dump(FILE *output)
{
	CSysMdbTopProcessInfo *pSysMdbTopProcessInfo;
	
	while ((pSysMdbTopProcessInfo=next())!=NULL)
	{
		pSysMdbTopProcessInfo->dump(output);
	}
}



void CWriteableSysMdbFileSystemInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"HostName,MonDate,MonTime,FILESYSTEM,SIZE,USED,AVAIL,pUSERD,ISIZE,IUSED,IFREE,pIUSED,MountedOn\n");
}
	
void CWriteableSysMdbFileSystemInfo::init(void)
{
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	FILESYSTEM.clear();
	SIZE.clear();
	USED.clear();
	AVAIL.clear();
	pUSERD.clear();
	ISIZE.clear();
	IUSED.clear();
	IFREE.clear();
	pIUSED.clear();
	MountedOn.clear();
}

int CWriteableSysMdbFileSystemInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbFileSystemInfo),input)!=sizeof(CWriteableSysMdbFileSystemInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbFileSystemInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FILESYSTEM=token;
		}
		else
		{
			FILESYSTEM="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SIZE=token;
		}
		else
		{
			SIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			USED=token;
		}
		else
		{
			USED="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AVAIL=token;
		}
		else
		{
			AVAIL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			pUSERD=token;
		}
		else
		{
			pUSERD="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ISIZE=token;
		}
		else
		{
			ISIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IUSED=token;
		}
		else
		{
			IUSED="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IFREE=token;
		}
		else
		{
			IFREE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			pIUSED=token;
		}
		else
		{
			pIUSED="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MountedOn=token;
		}
		else
		{
			MountedOn="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"FILESYSTEM"))
			{
				FILESYSTEM=token;
			}
			else if (!strcmp(fieldName,"SIZE"))
			{
				SIZE=token;
			}
			else if (!strcmp(fieldName,"USED"))
			{
				USED=token;
			}
			else if (!strcmp(fieldName,"AVAIL"))
			{
				AVAIL=token;
			}
			else if (!strcmp(fieldName,"pUSERD"))
			{
				pUSERD=token;
			}
			else if (!strcmp(fieldName,"ISIZE"))
			{
				ISIZE=token;
			}
			else if (!strcmp(fieldName,"IUSED"))
			{
				IUSED=token;
			}
			else if (!strcmp(fieldName,"IFREE"))
			{
				IFREE=token;
			}
			else if (!strcmp(fieldName,"pIUSED"))
			{
				pIUSED=token;
			}
			else if (!strcmp(fieldName,"MountedOn"))
			{
				MountedOn=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbFileSystemInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbFileSystemInfo),output)!=sizeof(CWriteableSysMdbFileSystemInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbFileSystemInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FILESYSTEM.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	USED.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AVAIL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	pUSERD.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ISIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IUSED.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IFREE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	pIUSED.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MountedOn.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbFileSystemInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbFileSystemInfo%s = {\n", index_buf);
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	FILESYSTEM.getString(buf);
	fprintf(fp,"\t\tFILESYSTEM = %s    [文件系统物理名]\n",buf);	
	SIZE.getString(buf);
	fprintf(fp,"\t\tSIZE = %s    [空间总数]\n",buf);	
	USED.getString(buf);
	fprintf(fp,"\t\tUSED = %s    [已用空间大小]\n",buf);	
	AVAIL.getString(buf);
	fprintf(fp,"\t\tAVAIL = %s    [可用空间大小]\n",buf);	
	pUSERD.getString(buf);
	fprintf(fp,"\t\tpUSERD = %s    [已用的百分比]\n",buf);	
	ISIZE.getString(buf);
	fprintf(fp,"\t\tISIZE = %s    [inode总数]\n",buf);	
	IUSED.getString(buf);
	fprintf(fp,"\t\tIUSED = %s    [已用inode大小]\n",buf);	
	IFREE.getString(buf);
	fprintf(fp,"\t\tIFREE = %s    [可用inode大小]\n",buf);	
	pIUSED.getString(buf);
	fprintf(fp,"\t\tpIUSED = %s    [已用的百分比]\n",buf);	
	MountedOn.getString(buf);
	fprintf(fp,"\t\tMountedOn = %s    [加载位置]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbFileSystemInfo::dumpDiff(FILE *fp, const CWriteableSysMdbFileSystemInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbFileSystemInfo = {\n");
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	FILESYSTEM.getString(buf);
	if (compare(FILESYSTEM.getValue(),pOriginal->FILESYSTEM.getValue())!=0)
	{
		pOriginal->FILESYSTEM.getString(bufOriginal);
		fprintf(fp,"\t\tFILESYSTEM = %s -> %s    [文件系统物理名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFILESYSTEM = %s    [文件系统物理名]\n",buf);
	}
	SIZE.getString(buf);
	if (compare(SIZE.getValue(),pOriginal->SIZE.getValue())!=0)
	{
		pOriginal->SIZE.getString(bufOriginal);
		fprintf(fp,"\t\tSIZE = %s -> %s    [空间总数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSIZE = %s    [空间总数]\n",buf);
	}
	USED.getString(buf);
	if (compare(USED.getValue(),pOriginal->USED.getValue())!=0)
	{
		pOriginal->USED.getString(bufOriginal);
		fprintf(fp,"\t\tUSED = %s -> %s    [已用空间大小]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSED = %s    [已用空间大小]\n",buf);
	}
	AVAIL.getString(buf);
	if (compare(AVAIL.getValue(),pOriginal->AVAIL.getValue())!=0)
	{
		pOriginal->AVAIL.getString(bufOriginal);
		fprintf(fp,"\t\tAVAIL = %s -> %s    [可用空间大小]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAVAIL = %s    [可用空间大小]\n",buf);
	}
	pUSERD.getString(buf);
	if (compare(pUSERD.getValue(),pOriginal->pUSERD.getValue())!=0)
	{
		pOriginal->pUSERD.getString(bufOriginal);
		fprintf(fp,"\t\tpUSERD = %s -> %s    [已用的百分比]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tpUSERD = %s    [已用的百分比]\n",buf);
	}
	ISIZE.getString(buf);
	if (compare(ISIZE.getValue(),pOriginal->ISIZE.getValue())!=0)
	{
		pOriginal->ISIZE.getString(bufOriginal);
		fprintf(fp,"\t\tISIZE = %s -> %s    [inode总数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tISIZE = %s    [inode总数]\n",buf);
	}
	IUSED.getString(buf);
	if (compare(IUSED.getValue(),pOriginal->IUSED.getValue())!=0)
	{
		pOriginal->IUSED.getString(bufOriginal);
		fprintf(fp,"\t\tIUSED = %s -> %s    [已用inode大小]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIUSED = %s    [已用inode大小]\n",buf);
	}
	IFREE.getString(buf);
	if (compare(IFREE.getValue(),pOriginal->IFREE.getValue())!=0)
	{
		pOriginal->IFREE.getString(bufOriginal);
		fprintf(fp,"\t\tIFREE = %s -> %s    [可用inode大小]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIFREE = %s    [可用inode大小]\n",buf);
	}
	pIUSED.getString(buf);
	if (compare(pIUSED.getValue(),pOriginal->pIUSED.getValue())!=0)
	{
		pOriginal->pIUSED.getString(bufOriginal);
		fprintf(fp,"\t\tpIUSED = %s -> %s    [已用的百分比]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tpIUSED = %s    [已用的百分比]\n",buf);
	}
	MountedOn.getString(buf);
	if (compare(MountedOn.getValue(),pOriginal->MountedOn.getValue())!=0)
	{
		pOriginal->MountedOn.getString(bufOriginal);
		fprintf(fp,"\t\tMountedOn = %s -> %s    [加载位置]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMountedOn = %s    [加载位置]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbFileSystemInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	FILESYSTEM.getString(buf);
	fprintf(fp,",FILESYSTEM,%s",buf);	
	SIZE.getString(buf);
	fprintf(fp,",SIZE,%s",buf);	
	USED.getString(buf);
	fprintf(fp,",USED,%s",buf);	
	AVAIL.getString(buf);
	fprintf(fp,",AVAIL,%s",buf);	
	pUSERD.getString(buf);
	fprintf(fp,",pUSERD,%s",buf);	
	ISIZE.getString(buf);
	fprintf(fp,",ISIZE,%s",buf);	
	IUSED.getString(buf);
	fprintf(fp,",IUSED,%s",buf);	
	IFREE.getString(buf);
	fprintf(fp,",IFREE,%s",buf);	
	pIUSED.getString(buf);
	fprintf(fp,",pIUSED,%s",buf);	
	MountedOn.getString(buf);
	fprintf(fp,",MountedOn,%s",buf);	
}

void CWriteableSysMdbFileSystemInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	FILESYSTEM.getString(buf);
	sprintf(p,"FILESYSTEM=%s,",buf);
	p+=strlen(p);
	SIZE.getString(buf);
	sprintf(p,"SIZE=%s,",buf);
	p+=strlen(p);
	USED.getString(buf);
	sprintf(p,"USED=%s,",buf);
	p+=strlen(p);
	AVAIL.getString(buf);
	sprintf(p,"AVAIL=%s,",buf);
	p+=strlen(p);
	pUSERD.getString(buf);
	sprintf(p,"pUSERD=%s,",buf);
	p+=strlen(p);
	ISIZE.getString(buf);
	sprintf(p,"ISIZE=%s,",buf);
	p+=strlen(p);
	IUSED.getString(buf);
	sprintf(p,"IUSED=%s,",buf);
	p+=strlen(p);
	IFREE.getString(buf);
	sprintf(p,"IFREE=%s,",buf);
	p+=strlen(p);
	pIUSED.getString(buf);
	sprintf(p,"pIUSED=%s,",buf);
	p+=strlen(p);
	MountedOn.getString(buf);
	sprintf(p,"MountedOn=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbFileSystemInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbFileSystemInfo");
	pLogger->output(indent,0,"{");
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	FILESYSTEM.getString(buf);
	pLogger->output(indent+1,0,"FILESYSTEM=%s 文件系统物理名",buf);
	SIZE.getString(buf);
	pLogger->output(indent+1,0,"SIZE=%s 空间总数",buf);
	USED.getString(buf);
	pLogger->output(indent+1,0,"USED=%s 已用空间大小",buf);
	AVAIL.getString(buf);
	pLogger->output(indent+1,0,"AVAIL=%s 可用空间大小",buf);
	pUSERD.getString(buf);
	pLogger->output(indent+1,0,"pUSERD=%s 已用的百分比",buf);
	ISIZE.getString(buf);
	pLogger->output(indent+1,0,"ISIZE=%s inode总数",buf);
	IUSED.getString(buf);
	pLogger->output(indent+1,0,"IUSED=%s 已用inode大小",buf);
	IFREE.getString(buf);
	pLogger->output(indent+1,0,"IFREE=%s 可用inode大小",buf);
	pIUSED.getString(buf);
	pLogger->output(indent+1,0,"pIUSED=%s 已用的百分比",buf);
	MountedOn.getString(buf);
	pLogger->output(indent+1,0,"MountedOn=%s 加载位置",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbFileSystemInfoIterator::~CSysMdbFileSystemInfoIterator(void)
{
}


void CSysMdbFileSystemInfoIterator::dump(FILE *output)
{
	CSysMdbFileSystemInfo *pSysMdbFileSystemInfo;
	
	while ((pSysMdbFileSystemInfo=next())!=NULL)
	{
		pSysMdbFileSystemInfo->dump(output);
	}
}



void CWriteableSysMdbNetworkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,HostName,MonDate,MonTime,LANNAME,LANSTATUS,IPADDRESS,RECVBYTES,RECVPACKETS,RECVERRORPACKETS,RECVDROPPACKETS,SENDBYTES,SENDPACKETS,SENDERRORPACKETS,SENDDROPPACKETS\n");
}
	
void CWriteableSysMdbNetworkInfo::init(void)
{
	SubcriberID.clear();
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	LANNAME.clear();
	LANSTATUS.clear();
	IPADDRESS.clear();
	RECVBYTES.clear();
	RECVPACKETS.clear();
	RECVERRORPACKETS.clear();
	RECVDROPPACKETS.clear();
	SENDBYTES.clear();
	SENDPACKETS.clear();
	SENDERRORPACKETS.clear();
	SENDDROPPACKETS.clear();
}

int CWriteableSysMdbNetworkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbNetworkInfo),input)!=sizeof(CWriteableSysMdbNetworkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbNetworkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LANNAME=token;
		}
		else
		{
			LANNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LANSTATUS=token;
		}
		else
		{
			LANSTATUS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDRESS=token;
		}
		else
		{
			IPADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RECVBYTES=token;
		}
		else
		{
			RECVBYTES="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RECVPACKETS=token;
		}
		else
		{
			RECVPACKETS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RECVERRORPACKETS=token;
		}
		else
		{
			RECVERRORPACKETS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RECVDROPPACKETS=token;
		}
		else
		{
			RECVDROPPACKETS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SENDBYTES=token;
		}
		else
		{
			SENDBYTES="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SENDPACKETS=token;
		}
		else
		{
			SENDPACKETS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SENDERRORPACKETS=token;
		}
		else
		{
			SENDERRORPACKETS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SENDDROPPACKETS=token;
		}
		else
		{
			SENDDROPPACKETS="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"LANNAME"))
			{
				LANNAME=token;
			}
			else if (!strcmp(fieldName,"LANSTATUS"))
			{
				LANSTATUS=token;
			}
			else if (!strcmp(fieldName,"IPADDRESS"))
			{
				IPADDRESS=token;
			}
			else if (!strcmp(fieldName,"RECVBYTES"))
			{
				RECVBYTES=token;
			}
			else if (!strcmp(fieldName,"RECVPACKETS"))
			{
				RECVPACKETS=token;
			}
			else if (!strcmp(fieldName,"RECVERRORPACKETS"))
			{
				RECVERRORPACKETS=token;
			}
			else if (!strcmp(fieldName,"RECVDROPPACKETS"))
			{
				RECVDROPPACKETS=token;
			}
			else if (!strcmp(fieldName,"SENDBYTES"))
			{
				SENDBYTES=token;
			}
			else if (!strcmp(fieldName,"SENDPACKETS"))
			{
				SENDPACKETS=token;
			}
			else if (!strcmp(fieldName,"SENDERRORPACKETS"))
			{
				SENDERRORPACKETS=token;
			}
			else if (!strcmp(fieldName,"SENDDROPPACKETS"))
			{
				SENDDROPPACKETS=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbNetworkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbNetworkInfo),output)!=sizeof(CWriteableSysMdbNetworkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbNetworkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LANNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LANSTATUS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RECVBYTES.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RECVPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RECVERRORPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RECVDROPPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SENDBYTES.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SENDPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SENDERRORPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SENDDROPPACKETS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbNetworkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbNetworkInfo%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	LANNAME.getString(buf);
	fprintf(fp,"\t\tLANNAME = %s    [网卡名]\n",buf);	
	LANSTATUS.getString(buf);
	fprintf(fp,"\t\tLANSTATUS = %s    [网卡的up或down状态]\n",buf);	
	IPADDRESS.getString(buf);
	fprintf(fp,"\t\tIPADDRESS = %s    [网卡的ip地址]\n",buf);	
	RECVBYTES.getString(buf);
	fprintf(fp,"\t\tRECVBYTES = %s    [网卡接收的流量]\n",buf);	
	RECVPACKETS.getString(buf);
	fprintf(fp,"\t\tRECVPACKETS = %s    [网卡接收的数据包]\n",buf);	
	RECVERRORPACKETS.getString(buf);
	fprintf(fp,"\t\tRECVERRORPACKETS = %s    [网卡接收端错误数据包]\n",buf);	
	RECVDROPPACKETS.getString(buf);
	fprintf(fp,"\t\tRECVDROPPACKETS = %s    [网卡接收端丢失数据包]\n",buf);	
	SENDBYTES.getString(buf);
	fprintf(fp,"\t\tSENDBYTES = %s    [网卡发送的流量]\n",buf);	
	SENDPACKETS.getString(buf);
	fprintf(fp,"\t\tSENDPACKETS = %s    [网卡发送的数据包]\n",buf);	
	SENDERRORPACKETS.getString(buf);
	fprintf(fp,"\t\tSENDERRORPACKETS = %s    [网卡发送端错误数据包]\n",buf);	
	SENDDROPPACKETS.getString(buf);
	fprintf(fp,"\t\tSENDDROPPACKETS = %s    [网卡发送端丢失数据包]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbNetworkInfo::dumpDiff(FILE *fp, const CWriteableSysMdbNetworkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbNetworkInfo = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	LANNAME.getString(buf);
	if (compare(LANNAME.getValue(),pOriginal->LANNAME.getValue())!=0)
	{
		pOriginal->LANNAME.getString(bufOriginal);
		fprintf(fp,"\t\tLANNAME = %s -> %s    [网卡名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLANNAME = %s    [网卡名]\n",buf);
	}
	LANSTATUS.getString(buf);
	if (compare(LANSTATUS.getValue(),pOriginal->LANSTATUS.getValue())!=0)
	{
		pOriginal->LANSTATUS.getString(bufOriginal);
		fprintf(fp,"\t\tLANSTATUS = %s -> %s    [网卡的up或down状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLANSTATUS = %s    [网卡的up或down状态]\n",buf);
	}
	IPADDRESS.getString(buf);
	if (compare(IPADDRESS.getValue(),pOriginal->IPADDRESS.getValue())!=0)
	{
		pOriginal->IPADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDRESS = %s -> %s    [网卡的ip地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDRESS = %s    [网卡的ip地址]\n",buf);
	}
	RECVBYTES.getString(buf);
	if (compare(RECVBYTES.getValue(),pOriginal->RECVBYTES.getValue())!=0)
	{
		pOriginal->RECVBYTES.getString(bufOriginal);
		fprintf(fp,"\t\tRECVBYTES = %s -> %s    [网卡接收的流量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRECVBYTES = %s    [网卡接收的流量]\n",buf);
	}
	RECVPACKETS.getString(buf);
	if (compare(RECVPACKETS.getValue(),pOriginal->RECVPACKETS.getValue())!=0)
	{
		pOriginal->RECVPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tRECVPACKETS = %s -> %s    [网卡接收的数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRECVPACKETS = %s    [网卡接收的数据包]\n",buf);
	}
	RECVERRORPACKETS.getString(buf);
	if (compare(RECVERRORPACKETS.getValue(),pOriginal->RECVERRORPACKETS.getValue())!=0)
	{
		pOriginal->RECVERRORPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tRECVERRORPACKETS = %s -> %s    [网卡接收端错误数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRECVERRORPACKETS = %s    [网卡接收端错误数据包]\n",buf);
	}
	RECVDROPPACKETS.getString(buf);
	if (compare(RECVDROPPACKETS.getValue(),pOriginal->RECVDROPPACKETS.getValue())!=0)
	{
		pOriginal->RECVDROPPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tRECVDROPPACKETS = %s -> %s    [网卡接收端丢失数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRECVDROPPACKETS = %s    [网卡接收端丢失数据包]\n",buf);
	}
	SENDBYTES.getString(buf);
	if (compare(SENDBYTES.getValue(),pOriginal->SENDBYTES.getValue())!=0)
	{
		pOriginal->SENDBYTES.getString(bufOriginal);
		fprintf(fp,"\t\tSENDBYTES = %s -> %s    [网卡发送的流量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSENDBYTES = %s    [网卡发送的流量]\n",buf);
	}
	SENDPACKETS.getString(buf);
	if (compare(SENDPACKETS.getValue(),pOriginal->SENDPACKETS.getValue())!=0)
	{
		pOriginal->SENDPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tSENDPACKETS = %s -> %s    [网卡发送的数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSENDPACKETS = %s    [网卡发送的数据包]\n",buf);
	}
	SENDERRORPACKETS.getString(buf);
	if (compare(SENDERRORPACKETS.getValue(),pOriginal->SENDERRORPACKETS.getValue())!=0)
	{
		pOriginal->SENDERRORPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tSENDERRORPACKETS = %s -> %s    [网卡发送端错误数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSENDERRORPACKETS = %s    [网卡发送端错误数据包]\n",buf);
	}
	SENDDROPPACKETS.getString(buf);
	if (compare(SENDDROPPACKETS.getValue(),pOriginal->SENDDROPPACKETS.getValue())!=0)
	{
		pOriginal->SENDDROPPACKETS.getString(bufOriginal);
		fprintf(fp,"\t\tSENDDROPPACKETS = %s -> %s    [网卡发送端丢失数据包]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSENDDROPPACKETS = %s    [网卡发送端丢失数据包]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbNetworkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	LANNAME.getString(buf);
	fprintf(fp,",LANNAME,%s",buf);	
	LANSTATUS.getString(buf);
	fprintf(fp,",LANSTATUS,%s",buf);	
	IPADDRESS.getString(buf);
	fprintf(fp,",IPADDRESS,%s",buf);	
	RECVBYTES.getString(buf);
	fprintf(fp,",RECVBYTES,%s",buf);	
	RECVPACKETS.getString(buf);
	fprintf(fp,",RECVPACKETS,%s",buf);	
	RECVERRORPACKETS.getString(buf);
	fprintf(fp,",RECVERRORPACKETS,%s",buf);	
	RECVDROPPACKETS.getString(buf);
	fprintf(fp,",RECVDROPPACKETS,%s",buf);	
	SENDBYTES.getString(buf);
	fprintf(fp,",SENDBYTES,%s",buf);	
	SENDPACKETS.getString(buf);
	fprintf(fp,",SENDPACKETS,%s",buf);	
	SENDERRORPACKETS.getString(buf);
	fprintf(fp,",SENDERRORPACKETS,%s",buf);	
	SENDDROPPACKETS.getString(buf);
	fprintf(fp,",SENDDROPPACKETS,%s",buf);	
}

void CWriteableSysMdbNetworkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	LANNAME.getString(buf);
	sprintf(p,"LANNAME=%s,",buf);
	p+=strlen(p);
	LANSTATUS.getString(buf);
	sprintf(p,"LANSTATUS=%s,",buf);
	p+=strlen(p);
	IPADDRESS.getString(buf);
	sprintf(p,"IPADDRESS=%s,",buf);
	p+=strlen(p);
	RECVBYTES.getString(buf);
	sprintf(p,"RECVBYTES=%s,",buf);
	p+=strlen(p);
	RECVPACKETS.getString(buf);
	sprintf(p,"RECVPACKETS=%s,",buf);
	p+=strlen(p);
	RECVERRORPACKETS.getString(buf);
	sprintf(p,"RECVERRORPACKETS=%s,",buf);
	p+=strlen(p);
	RECVDROPPACKETS.getString(buf);
	sprintf(p,"RECVDROPPACKETS=%s,",buf);
	p+=strlen(p);
	SENDBYTES.getString(buf);
	sprintf(p,"SENDBYTES=%s,",buf);
	p+=strlen(p);
	SENDPACKETS.getString(buf);
	sprintf(p,"SENDPACKETS=%s,",buf);
	p+=strlen(p);
	SENDERRORPACKETS.getString(buf);
	sprintf(p,"SENDERRORPACKETS=%s,",buf);
	p+=strlen(p);
	SENDDROPPACKETS.getString(buf);
	sprintf(p,"SENDDROPPACKETS=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbNetworkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbNetworkInfo");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	LANNAME.getString(buf);
	pLogger->output(indent+1,0,"LANNAME=%s 网卡名",buf);
	LANSTATUS.getString(buf);
	pLogger->output(indent+1,0,"LANSTATUS=%s 网卡的up或down状态",buf);
	IPADDRESS.getString(buf);
	pLogger->output(indent+1,0,"IPADDRESS=%s 网卡的ip地址",buf);
	RECVBYTES.getString(buf);
	pLogger->output(indent+1,0,"RECVBYTES=%s 网卡接收的流量",buf);
	RECVPACKETS.getString(buf);
	pLogger->output(indent+1,0,"RECVPACKETS=%s 网卡接收的数据包",buf);
	RECVERRORPACKETS.getString(buf);
	pLogger->output(indent+1,0,"RECVERRORPACKETS=%s 网卡接收端错误数据包",buf);
	RECVDROPPACKETS.getString(buf);
	pLogger->output(indent+1,0,"RECVDROPPACKETS=%s 网卡接收端丢失数据包",buf);
	SENDBYTES.getString(buf);
	pLogger->output(indent+1,0,"SENDBYTES=%s 网卡发送的流量",buf);
	SENDPACKETS.getString(buf);
	pLogger->output(indent+1,0,"SENDPACKETS=%s 网卡发送的数据包",buf);
	SENDERRORPACKETS.getString(buf);
	pLogger->output(indent+1,0,"SENDERRORPACKETS=%s 网卡发送端错误数据包",buf);
	SENDDROPPACKETS.getString(buf);
	pLogger->output(indent+1,0,"SENDDROPPACKETS=%s 网卡发送端丢失数据包",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbNetworkInfoIterator::~CSysMdbNetworkInfoIterator(void)
{
}


void CSysMdbNetworkInfoIterator::dump(FILE *output)
{
	CSysMdbNetworkInfo *pSysMdbNetworkInfo;
	
	while ((pSysMdbNetworkInfo=next())!=NULL)
	{
		pSysMdbNetworkInfo->dump(output);
	}
}



void CWriteableSysParticipantInit::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,ParticipantName,ParticipantAbbr,MemberType,IsActive,OperationType\n");
}
	
void CWriteableSysParticipantInit::init(void)
{
	ParticipantID.clear();
	ParticipantName.clear();
	ParticipantAbbr.clear();
	MemberType.clear();
	IsActive.clear();
	OperationType.clear();
}

int CWriteableSysParticipantInit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysParticipantInit),input)!=sizeof(CWriteableSysParticipantInit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysParticipantInit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantName=token;
		}
		else
		{
			ParticipantName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantAbbr=token;
		}
		else
		{
			ParticipantAbbr="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemberType=token;
		}
		else
		{
			MemberType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ParticipantName"))
			{
				ParticipantName=token;
			}
			else if (!strcmp(fieldName,"ParticipantAbbr"))
			{
				ParticipantAbbr=token;
			}
			else if (!strcmp(fieldName,"MemberType"))
			{
				MemberType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysParticipantInit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysParticipantInit),output)!=sizeof(CWriteableSysParticipantInit))
		return 0;
	else
		return 1;
}

int CWriteableSysParticipantInit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantAbbr.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemberType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysParticipantInit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysParticipantInit%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);	
	MemberType.getString(buf);
	fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticipantInit::dumpDiff(FILE *fp, const CWriteableSysParticipantInit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysParticipantInit = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ParticipantName.getString(buf);
	if (compare(ParticipantName.getValue(),pOriginal->ParticipantName.getValue())!=0)
	{
		pOriginal->ParticipantName.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantName = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);
	}
	ParticipantAbbr.getString(buf);
	if (compare(ParticipantAbbr.getValue(),pOriginal->ParticipantAbbr.getValue())!=0)
	{
		pOriginal->ParticipantAbbr.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantAbbr = %s -> %s    [会员简称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);
	}
	MemberType.getString(buf);
	if (compare(MemberType.getValue(),pOriginal->MemberType.getValue())!=0)
	{
		pOriginal->MemberType.getString(bufOriginal);
		fprintf(fp,"\t\tMemberType = %s -> %s    [会员类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticipantInit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,",ParticipantName,%s",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,",ParticipantAbbr,%s",buf);	
	MemberType.getString(buf);
	fprintf(fp,",MemberType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysParticipantInit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ParticipantName.getString(buf);
	sprintf(p,"ParticipantName=%s,",buf);
	p+=strlen(p);
	ParticipantAbbr.getString(buf);
	sprintf(p,"ParticipantAbbr=%s,",buf);
	p+=strlen(p);
	MemberType.getString(buf);
	sprintf(p,"MemberType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysParticipantInit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysParticipantInit");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ParticipantName.getString(buf);
	pLogger->output(indent+1,0,"ParticipantName=%s 会员名称",buf);
	ParticipantAbbr.getString(buf);
	pLogger->output(indent+1,0,"ParticipantAbbr=%s 会员简称",buf);
	MemberType.getString(buf);
	pLogger->output(indent+1,0,"MemberType=%s 会员类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysParticipantInitIterator::~CSysParticipantInitIterator(void)
{
}


void CSysParticipantInitIterator::dump(FILE *output)
{
	CSysParticipantInit *pSysParticipantInit;
	
	while ((pSysParticipantInit=next())!=NULL)
	{
		pSysParticipantInit->dump(output);
	}
}



void CWriteableSysUserInit::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,UserID,UserType,Password,IsActive,OperationType\n");
}
	
void CWriteableSysUserInit::init(void)
{
	ParticipantID.clear();
	UserID.clear();
	UserType.clear();
	Password.clear();
	IsActive.clear();
	OperationType.clear();
}

int CWriteableSysUserInit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysUserInit),input)!=sizeof(CWriteableSysUserInit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysUserInit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserType=token;
		}
		else
		{
			UserType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Password=token;
		}
		else
		{
			Password="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"UserType"))
			{
				UserType=token;
			}
			else if (!strcmp(fieldName,"Password"))
			{
				Password=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysUserInit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysUserInit),output)!=sizeof(CWriteableSysUserInit))
		return 0;
	else
		return 1;
}

int CWriteableSysUserInit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Password.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysUserInit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysUserInit%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	UserType.getString(buf);
	fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);	
	Password.getString(buf);
	fprintf(fp,"\t\tPassword = %s    [密码]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [交易员权限]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserInit::dumpDiff(FILE *fp, const CWriteableSysUserInit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysUserInit = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	UserType.getString(buf);
	if (compare(UserType.getValue(),pOriginal->UserType.getValue())!=0)
	{
		pOriginal->UserType.getString(bufOriginal);
		fprintf(fp,"\t\tUserType = %s -> %s    [交易用户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);
	}
	Password.getString(buf);
	if (compare(Password.getValue(),pOriginal->Password.getValue())!=0)
	{
		pOriginal->Password.getString(bufOriginal);
		fprintf(fp,"\t\tPassword = %s -> %s    [密码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPassword = %s    [密码]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [交易员权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [交易员权限]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysUserInit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	UserType.getString(buf);
	fprintf(fp,",UserType,%s",buf);	
	Password.getString(buf);
	fprintf(fp,",Password,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysUserInit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	UserType.getString(buf);
	sprintf(p,"UserType=%s,",buf);
	p+=strlen(p);
	Password.getString(buf);
	sprintf(p,"Password=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysUserInit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysUserInit");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	UserType.getString(buf);
	pLogger->output(indent+1,0,"UserType=%s 交易用户类型",buf);
	Password.getString(buf);
	pLogger->output(indent+1,0,"Password=%s 密码",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 交易员权限",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysUserInitIterator::~CSysUserInitIterator(void)
{
}


void CSysUserInitIterator::dump(FILE *output)
{
	CSysUserInit *pSysUserInit;
	
	while ((pSysUserInit=next())!=NULL)
	{
		pSysUserInit->dump(output);
	}
}



void CWriteableSysClientInit::writeCSVHead(FILE *output)
{
	fprintf(output,"ClientID,ClientName,IdentifiedCardType,IdentifiedCardNo,TradingRole,ClientType,IsActive,OperationType\n");
}
	
void CWriteableSysClientInit::init(void)
{
	ClientID.clear();
	ClientName.clear();
	IdentifiedCardType.clear();
	IdentifiedCardNo.clear();
	TradingRole.clear();
	ClientType.clear();
	IsActive.clear();
	OperationType.clear();
}

int CWriteableSysClientInit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysClientInit),input)!=sizeof(CWriteableSysClientInit))
		return 0;
	else
		return 1;
}
	
int CWriteableSysClientInit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientName=token;
		}
		else
		{
			ClientName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardType=token;
		}
		else
		{
			IdentifiedCardType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardNo=token;
		}
		else
		{
			IdentifiedCardNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperationType=token;
		}
		else
		{
			OperationType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"ClientName"))
			{
				ClientName=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardType"))
			{
				IdentifiedCardType=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardNo"))
			{
				IdentifiedCardNo=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			else if (!strcmp(fieldName,"OperationType"))
			{
				OperationType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysClientInit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysClientInit),output)!=sizeof(CWriteableSysClientInit))
		return 0;
	else
		return 1;
}

int CWriteableSysClientInit::writeCSV(FILE *output) const
{
	char buffer[1025];
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperationType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysClientInit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysClientInit%s = {\n", index_buf);
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	ClientName.getString(buf);
	fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	OperationType.getString(buf);
	fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientInit::dumpDiff(FILE *fp, const CWriteableSysClientInit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysClientInit = {\n");
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	ClientName.getString(buf);
	if (compare(ClientName.getValue(),pOriginal->ClientName.getValue())!=0)
	{
		pOriginal->ClientName.getString(bufOriginal);
		fprintf(fp,"\t\tClientName = %s -> %s    [客户名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);
	}
	IdentifiedCardType.getString(buf);
	if (compare(IdentifiedCardType.getValue(),pOriginal->IdentifiedCardType.getValue())!=0)
	{
		pOriginal->IdentifiedCardType.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardType = %s -> %s    [证件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);
	}
	IdentifiedCardNo.getString(buf);
	if (compare(IdentifiedCardNo.getValue(),pOriginal->IdentifiedCardNo.getValue())!=0)
	{
		pOriginal->IdentifiedCardNo.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardNo = %s -> %s    [证件号码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	OperationType.getString(buf);
	if (compare(OperationType.getValue(),pOriginal->OperationType.getValue())!=0)
	{
		pOriginal->OperationType.getString(bufOriginal);
		fprintf(fp,"\t\tOperationType = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperationType = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysClientInit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	ClientName.getString(buf);
	fprintf(fp,",ClientName,%s",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,",IdentifiedCardType,%s",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,",IdentifiedCardNo,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
	OperationType.getString(buf);
	fprintf(fp,",OperationType,%s",buf);	
}

void CWriteableSysClientInit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	ClientName.getString(buf);
	sprintf(p,"ClientName=%s,",buf);
	p+=strlen(p);
	IdentifiedCardType.getString(buf);
	sprintf(p,"IdentifiedCardType=%s,",buf);
	p+=strlen(p);
	IdentifiedCardNo.getString(buf);
	sprintf(p,"IdentifiedCardNo=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	OperationType.getString(buf);
	sprintf(p,"OperationType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysClientInit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysClientInit");
	pLogger->output(indent,0,"{");
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	ClientName.getString(buf);
	pLogger->output(indent+1,0,"ClientName=%s 客户名称",buf);
	IdentifiedCardType.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardType=%s 证件类型",buf);
	IdentifiedCardNo.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardNo=%s 证件号码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	OperationType.getString(buf);
	pLogger->output(indent+1,0,"OperationType=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysClientInitIterator::~CSysClientInitIterator(void)
{
}


void CSysClientInitIterator::dump(FILE *output)
{
	CSysClientInit *pSysClientInit;
	
	while ((pSysClientInit=next())!=NULL)
	{
		pSysClientInit->dump(output);
	}
}



void CWriteableSysTradeUserLoginInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ObjectID,UserID,ParticipantID,ProtocolInfo,IPAddress,FrontID,UserType,AccessType,ActionDate,ActionTime,ActionFlag,DataCenter\n");
}
	
void CWriteableSysTradeUserLoginInfo::init(void)
{
	ObjectID.clear();
	UserID.clear();
	ParticipantID.clear();
	ProtocolInfo.clear();
	IPAddress.clear();
	FrontID.clear();
	UserType.clear();
	AccessType.clear();
	ActionDate.clear();
	ActionTime.clear();
	ActionFlag.clear();
	DataCenter.clear();
}

int CWriteableSysTradeUserLoginInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysTradeUserLoginInfo),input)!=sizeof(CWriteableSysTradeUserLoginInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysTradeUserLoginInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProtocolInfo=token;
		}
		else
		{
			ProtocolInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrontID=token;
		}
		else
		{
			FrontID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserType=token;
		}
		else
		{
			UserType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccessType=token;
		}
		else
		{
			AccessType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionDate=token;
		}
		else
		{
			ActionDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionTime=token;
		}
		else
		{
			ActionTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionFlag=token;
		}
		else
		{
			ActionFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DataCenter=token;
		}
		else
		{
			DataCenter="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ProtocolInfo"))
			{
				ProtocolInfo=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"FrontID"))
			{
				FrontID=token;
			}
			else if (!strcmp(fieldName,"UserType"))
			{
				UserType=token;
			}
			else if (!strcmp(fieldName,"AccessType"))
			{
				AccessType=token;
			}
			else if (!strcmp(fieldName,"ActionDate"))
			{
				ActionDate=token;
			}
			else if (!strcmp(fieldName,"ActionTime"))
			{
				ActionTime=token;
			}
			else if (!strcmp(fieldName,"ActionFlag"))
			{
				ActionFlag=token;
			}
			else if (!strcmp(fieldName,"DataCenter"))
			{
				DataCenter=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysTradeUserLoginInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysTradeUserLoginInfo),output)!=sizeof(CWriteableSysTradeUserLoginInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysTradeUserLoginInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProtocolInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrontID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccessType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DataCenter.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysTradeUserLoginInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysTradeUserLoginInfo%s = {\n", index_buf);
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [对象ID]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	FrontID.getString(buf);
	fprintf(fp,"\t\tFrontID = %s    [前置机编号]\n",buf);	
	UserType.getString(buf);
	fprintf(fp,"\t\tUserType = %s    [用户类别]\n",buf);	
	AccessType.getString(buf);
	fprintf(fp,"\t\tAccessType = %s    [ 接入方式]\n",buf);	
	ActionDate.getString(buf);
	fprintf(fp,"\t\tActionDate = %s    [登录或登出日期]\n",buf);	
	ActionTime.getString(buf);
	fprintf(fp,"\t\tActionTime = %s    [登录或登出时间]\n",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,"\t\tActionFlag = %s    [登录或登出标记]\n",buf);	
	DataCenter.getString(buf);
	fprintf(fp,"\t\tDataCenter = %s    [数据中心名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysTradeUserLoginInfo::dumpDiff(FILE *fp, const CWriteableSysTradeUserLoginInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysTradeUserLoginInfo = {\n");
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [对象ID]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ProtocolInfo.getString(buf);
	if (compare(ProtocolInfo.getValue(),pOriginal->ProtocolInfo.getValue())!=0)
	{
		pOriginal->ProtocolInfo.getString(bufOriginal);
		fprintf(fp,"\t\tProtocolInfo = %s -> %s    [协议信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	FrontID.getString(buf);
	if (compare(FrontID.getValue(),pOriginal->FrontID.getValue())!=0)
	{
		pOriginal->FrontID.getString(bufOriginal);
		fprintf(fp,"\t\tFrontID = %s -> %s    [前置机编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrontID = %s    [前置机编号]\n",buf);
	}
	UserType.getString(buf);
	if (compare(UserType.getValue(),pOriginal->UserType.getValue())!=0)
	{
		pOriginal->UserType.getString(bufOriginal);
		fprintf(fp,"\t\tUserType = %s -> %s    [用户类别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserType = %s    [用户类别]\n",buf);
	}
	AccessType.getString(buf);
	if (compare(AccessType.getValue(),pOriginal->AccessType.getValue())!=0)
	{
		pOriginal->AccessType.getString(bufOriginal);
		fprintf(fp,"\t\tAccessType = %s -> %s    [ 接入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccessType = %s    [ 接入方式]\n",buf);
	}
	ActionDate.getString(buf);
	if (compare(ActionDate.getValue(),pOriginal->ActionDate.getValue())!=0)
	{
		pOriginal->ActionDate.getString(bufOriginal);
		fprintf(fp,"\t\tActionDate = %s -> %s    [登录或登出日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionDate = %s    [登录或登出日期]\n",buf);
	}
	ActionTime.getString(buf);
	if (compare(ActionTime.getValue(),pOriginal->ActionTime.getValue())!=0)
	{
		pOriginal->ActionTime.getString(bufOriginal);
		fprintf(fp,"\t\tActionTime = %s -> %s    [登录或登出时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionTime = %s    [登录或登出时间]\n",buf);
	}
	ActionFlag.getString(buf);
	if (compare(ActionFlag.getValue(),pOriginal->ActionFlag.getValue())!=0)
	{
		pOriginal->ActionFlag.getString(bufOriginal);
		fprintf(fp,"\t\tActionFlag = %s -> %s    [登录或登出标记]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionFlag = %s    [登录或登出标记]\n",buf);
	}
	DataCenter.getString(buf);
	if (compare(DataCenter.getValue(),pOriginal->DataCenter.getValue())!=0)
	{
		pOriginal->DataCenter.getString(bufOriginal);
		fprintf(fp,"\t\tDataCenter = %s -> %s    [数据中心名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDataCenter = %s    [数据中心名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysTradeUserLoginInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,",ProtocolInfo,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	FrontID.getString(buf);
	fprintf(fp,",FrontID,%s",buf);	
	UserType.getString(buf);
	fprintf(fp,",UserType,%s",buf);	
	AccessType.getString(buf);
	fprintf(fp,",AccessType,%s",buf);	
	ActionDate.getString(buf);
	fprintf(fp,",ActionDate,%s",buf);	
	ActionTime.getString(buf);
	fprintf(fp,",ActionTime,%s",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,",ActionFlag,%s",buf);	
	DataCenter.getString(buf);
	fprintf(fp,",DataCenter,%s",buf);	
}

void CWriteableSysTradeUserLoginInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ProtocolInfo.getString(buf);
	sprintf(p,"ProtocolInfo=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	FrontID.getString(buf);
	sprintf(p,"FrontID=%s,",buf);
	p+=strlen(p);
	UserType.getString(buf);
	sprintf(p,"UserType=%s,",buf);
	p+=strlen(p);
	AccessType.getString(buf);
	sprintf(p,"AccessType=%s,",buf);
	p+=strlen(p);
	ActionDate.getString(buf);
	sprintf(p,"ActionDate=%s,",buf);
	p+=strlen(p);
	ActionTime.getString(buf);
	sprintf(p,"ActionTime=%s,",buf);
	p+=strlen(p);
	ActionFlag.getString(buf);
	sprintf(p,"ActionFlag=%s,",buf);
	p+=strlen(p);
	DataCenter.getString(buf);
	sprintf(p,"DataCenter=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysTradeUserLoginInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysTradeUserLoginInfo");
	pLogger->output(indent,0,"{");
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 对象ID",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ProtocolInfo.getString(buf);
	pLogger->output(indent+1,0,"ProtocolInfo=%s 协议信息",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	FrontID.getString(buf);
	pLogger->output(indent+1,0,"FrontID=%s 前置机编号",buf);
	UserType.getString(buf);
	pLogger->output(indent+1,0,"UserType=%s 用户类别",buf);
	AccessType.getString(buf);
	pLogger->output(indent+1,0,"AccessType=%s  接入方式",buf);
	ActionDate.getString(buf);
	pLogger->output(indent+1,0,"ActionDate=%s 登录或登出日期",buf);
	ActionTime.getString(buf);
	pLogger->output(indent+1,0,"ActionTime=%s 登录或登出时间",buf);
	ActionFlag.getString(buf);
	pLogger->output(indent+1,0,"ActionFlag=%s 登录或登出标记",buf);
	DataCenter.getString(buf);
	pLogger->output(indent+1,0,"DataCenter=%s 数据中心名",buf);
	pLogger->output(indent,0,"}");
}

CSysTradeUserLoginInfoIterator::~CSysTradeUserLoginInfoIterator(void)
{
}


void CSysTradeUserLoginInfoIterator::dump(FILE *output)
{
	CSysTradeUserLoginInfo *pSysTradeUserLoginInfo;
	
	while ((pSysTradeUserLoginInfo=next())!=NULL)
	{
		pSysTradeUserLoginInfo->dump(output);
	}
}



void CWriteableSysMdbWebAppInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ObjectID,MonDate,MonTime,AppName,Status,Desc,StartTime,ServletNum,ProcessTime,RequestNum,ErrorNum,SessionSize,TimeOut,JDBCUsage,JSPNum\n");
}
	
void CWriteableSysMdbWebAppInfo::init(void)
{
	ObjectID.clear();
	MonDate.clear();
	MonTime.clear();
	AppName.clear();
	Status.clear();
	Desc.clear();
	StartTime.clear();
	ServletNum.clear();
	ProcessTime.clear();
	RequestNum.clear();
	ErrorNum.clear();
	SessionSize.clear();
	TimeOut.clear();
	JDBCUsage.clear();
	JSPNum.clear();
}

int CWriteableSysMdbWebAppInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbWebAppInfo),input)!=sizeof(CWriteableSysMdbWebAppInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbWebAppInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AppName=token;
		}
		else
		{
			AppName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Status=token;
		}
		else
		{
			Status="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Desc=token;
		}
		else
		{
			Desc="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTime=token;
		}
		else
		{
			StartTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ServletNum=token;
		}
		else
		{
			ServletNum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProcessTime=token;
		}
		else
		{
			ProcessTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RequestNum=token;
		}
		else
		{
			RequestNum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ErrorNum=token;
		}
		else
		{
			ErrorNum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionSize=token;
		}
		else
		{
			SessionSize="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeOut=token;
		}
		else
		{
			TimeOut="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			JDBCUsage=token;
		}
		else
		{
			JDBCUsage="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			JSPNum=token;
		}
		else
		{
			JSPNum="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"AppName"))
			{
				AppName=token;
			}
			else if (!strcmp(fieldName,"Status"))
			{
				Status=token;
			}
			else if (!strcmp(fieldName,"Desc"))
			{
				Desc=token;
			}
			else if (!strcmp(fieldName,"StartTime"))
			{
				StartTime=token;
			}
			else if (!strcmp(fieldName,"ServletNum"))
			{
				ServletNum=token;
			}
			else if (!strcmp(fieldName,"ProcessTime"))
			{
				ProcessTime=token;
			}
			else if (!strcmp(fieldName,"RequestNum"))
			{
				RequestNum=token;
			}
			else if (!strcmp(fieldName,"ErrorNum"))
			{
				ErrorNum=token;
			}
			else if (!strcmp(fieldName,"SessionSize"))
			{
				SessionSize=token;
			}
			else if (!strcmp(fieldName,"TimeOut"))
			{
				TimeOut=token;
			}
			else if (!strcmp(fieldName,"JDBCUsage"))
			{
				JDBCUsage=token;
			}
			else if (!strcmp(fieldName,"JSPNum"))
			{
				JSPNum=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbWebAppInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbWebAppInfo),output)!=sizeof(CWriteableSysMdbWebAppInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbWebAppInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AppName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Status.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Desc.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ServletNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProcessTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RequestNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ErrorNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionSize.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeOut.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	JDBCUsage.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	JSPNum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbWebAppInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbWebAppInfo%s = {\n", index_buf);
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);	
	AppName.getString(buf);
	fprintf(fp,"\t\tAppName = %s    [Web应用名称]\n",buf);	
	Status.getString(buf);
	fprintf(fp,"\t\tStatus = %s    [应用运行状态]\n",buf);	
	Desc.getString(buf);
	fprintf(fp,"\t\tDesc = %s    [应用描述信息]\n",buf);	
	StartTime.getString(buf);
	fprintf(fp,"\t\tStartTime = %s    [应用启动时间]\n",buf);	
	ServletNum.getString(buf);
	fprintf(fp,"\t\tServletNum = %s    [应用servlet数量]\n",buf);	
	ProcessTime.getString(buf);
	fprintf(fp,"\t\tProcessTime = %s    [应用处理总时长]\n",buf);	
	RequestNum.getString(buf);
	fprintf(fp,"\t\tRequestNum = %s    [应用累计接收请求数]\n",buf);	
	ErrorNum.getString(buf);
	fprintf(fp,"\t\tErrorNum = %s    [应用累计错误数]\n",buf);	
	SessionSize.getString(buf);
	fprintf(fp,"\t\tSessionSize = %s    [应用当前会话数]\n",buf);	
	TimeOut.getString(buf);
	fprintf(fp,"\t\tTimeOut = %s    [会话超时时长(秒)]\n",buf);	
	JDBCUsage.getString(buf);
	fprintf(fp,"\t\tJDBCUsage = %s    [应用JDBC连接使用率]\n",buf);	
	JSPNum.getString(buf);
	fprintf(fp,"\t\tJSPNum = %s    [应用JSP文件数量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbWebAppInfo::dumpDiff(FILE *fp, const CWriteableSysMdbWebAppInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbWebAppInfo = {\n");
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [监控日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [监控时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);
	}
	AppName.getString(buf);
	if (compare(AppName.getValue(),pOriginal->AppName.getValue())!=0)
	{
		pOriginal->AppName.getString(bufOriginal);
		fprintf(fp,"\t\tAppName = %s -> %s    [Web应用名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAppName = %s    [Web应用名称]\n",buf);
	}
	Status.getString(buf);
	if (compare(Status.getValue(),pOriginal->Status.getValue())!=0)
	{
		pOriginal->Status.getString(bufOriginal);
		fprintf(fp,"\t\tStatus = %s -> %s    [应用运行状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStatus = %s    [应用运行状态]\n",buf);
	}
	Desc.getString(buf);
	if (compare(Desc.getValue(),pOriginal->Desc.getValue())!=0)
	{
		pOriginal->Desc.getString(bufOriginal);
		fprintf(fp,"\t\tDesc = %s -> %s    [应用描述信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDesc = %s    [应用描述信息]\n",buf);
	}
	StartTime.getString(buf);
	if (compare(StartTime.getValue(),pOriginal->StartTime.getValue())!=0)
	{
		pOriginal->StartTime.getString(bufOriginal);
		fprintf(fp,"\t\tStartTime = %s -> %s    [应用启动时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTime = %s    [应用启动时间]\n",buf);
	}
	ServletNum.getString(buf);
	if (compare(ServletNum.getValue(),pOriginal->ServletNum.getValue())!=0)
	{
		pOriginal->ServletNum.getString(bufOriginal);
		fprintf(fp,"\t\tServletNum = %s -> %s    [应用servlet数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tServletNum = %s    [应用servlet数量]\n",buf);
	}
	ProcessTime.getString(buf);
	if (compare(ProcessTime.getValue(),pOriginal->ProcessTime.getValue())!=0)
	{
		pOriginal->ProcessTime.getString(bufOriginal);
		fprintf(fp,"\t\tProcessTime = %s -> %s    [应用处理总时长]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcessTime = %s    [应用处理总时长]\n",buf);
	}
	RequestNum.getString(buf);
	if (compare(RequestNum.getValue(),pOriginal->RequestNum.getValue())!=0)
	{
		pOriginal->RequestNum.getString(bufOriginal);
		fprintf(fp,"\t\tRequestNum = %s -> %s    [应用累计接收请求数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRequestNum = %s    [应用累计接收请求数]\n",buf);
	}
	ErrorNum.getString(buf);
	if (compare(ErrorNum.getValue(),pOriginal->ErrorNum.getValue())!=0)
	{
		pOriginal->ErrorNum.getString(bufOriginal);
		fprintf(fp,"\t\tErrorNum = %s -> %s    [应用累计错误数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tErrorNum = %s    [应用累计错误数]\n",buf);
	}
	SessionSize.getString(buf);
	if (compare(SessionSize.getValue(),pOriginal->SessionSize.getValue())!=0)
	{
		pOriginal->SessionSize.getString(bufOriginal);
		fprintf(fp,"\t\tSessionSize = %s -> %s    [应用当前会话数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionSize = %s    [应用当前会话数]\n",buf);
	}
	TimeOut.getString(buf);
	if (compare(TimeOut.getValue(),pOriginal->TimeOut.getValue())!=0)
	{
		pOriginal->TimeOut.getString(bufOriginal);
		fprintf(fp,"\t\tTimeOut = %s -> %s    [会话超时时长(秒)]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeOut = %s    [会话超时时长(秒)]\n",buf);
	}
	JDBCUsage.getString(buf);
	if (compare(JDBCUsage.getValue(),pOriginal->JDBCUsage.getValue())!=0)
	{
		pOriginal->JDBCUsage.getString(bufOriginal);
		fprintf(fp,"\t\tJDBCUsage = %s -> %s    [应用JDBC连接使用率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tJDBCUsage = %s    [应用JDBC连接使用率]\n",buf);
	}
	JSPNum.getString(buf);
	if (compare(JSPNum.getValue(),pOriginal->JSPNum.getValue())!=0)
	{
		pOriginal->JSPNum.getString(bufOriginal);
		fprintf(fp,"\t\tJSPNum = %s -> %s    [应用JSP文件数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tJSPNum = %s    [应用JSP文件数量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbWebAppInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	AppName.getString(buf);
	fprintf(fp,",AppName,%s",buf);	
	Status.getString(buf);
	fprintf(fp,",Status,%s",buf);	
	Desc.getString(buf);
	fprintf(fp,",Desc,%s",buf);	
	StartTime.getString(buf);
	fprintf(fp,",StartTime,%s",buf);	
	ServletNum.getString(buf);
	fprintf(fp,",ServletNum,%s",buf);	
	ProcessTime.getString(buf);
	fprintf(fp,",ProcessTime,%s",buf);	
	RequestNum.getString(buf);
	fprintf(fp,",RequestNum,%s",buf);	
	ErrorNum.getString(buf);
	fprintf(fp,",ErrorNum,%s",buf);	
	SessionSize.getString(buf);
	fprintf(fp,",SessionSize,%s",buf);	
	TimeOut.getString(buf);
	fprintf(fp,",TimeOut,%s",buf);	
	JDBCUsage.getString(buf);
	fprintf(fp,",JDBCUsage,%s",buf);	
	JSPNum.getString(buf);
	fprintf(fp,",JSPNum,%s",buf);	
}

void CWriteableSysMdbWebAppInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	AppName.getString(buf);
	sprintf(p,"AppName=%s,",buf);
	p+=strlen(p);
	Status.getString(buf);
	sprintf(p,"Status=%s,",buf);
	p+=strlen(p);
	Desc.getString(buf);
	sprintf(p,"Desc=%s,",buf);
	p+=strlen(p);
	StartTime.getString(buf);
	sprintf(p,"StartTime=%s,",buf);
	p+=strlen(p);
	ServletNum.getString(buf);
	sprintf(p,"ServletNum=%s,",buf);
	p+=strlen(p);
	ProcessTime.getString(buf);
	sprintf(p,"ProcessTime=%s,",buf);
	p+=strlen(p);
	RequestNum.getString(buf);
	sprintf(p,"RequestNum=%s,",buf);
	p+=strlen(p);
	ErrorNum.getString(buf);
	sprintf(p,"ErrorNum=%s,",buf);
	p+=strlen(p);
	SessionSize.getString(buf);
	sprintf(p,"SessionSize=%s,",buf);
	p+=strlen(p);
	TimeOut.getString(buf);
	sprintf(p,"TimeOut=%s,",buf);
	p+=strlen(p);
	JDBCUsage.getString(buf);
	sprintf(p,"JDBCUsage=%s,",buf);
	p+=strlen(p);
	JSPNum.getString(buf);
	sprintf(p,"JSPNum=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbWebAppInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbWebAppInfo");
	pLogger->output(indent,0,"{");
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 监控对象",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 监控日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 监控时间",buf);
	AppName.getString(buf);
	pLogger->output(indent+1,0,"AppName=%s Web应用名称",buf);
	Status.getString(buf);
	pLogger->output(indent+1,0,"Status=%s 应用运行状态",buf);
	Desc.getString(buf);
	pLogger->output(indent+1,0,"Desc=%s 应用描述信息",buf);
	StartTime.getString(buf);
	pLogger->output(indent+1,0,"StartTime=%s 应用启动时间",buf);
	ServletNum.getString(buf);
	pLogger->output(indent+1,0,"ServletNum=%s 应用servlet数量",buf);
	ProcessTime.getString(buf);
	pLogger->output(indent+1,0,"ProcessTime=%s 应用处理总时长",buf);
	RequestNum.getString(buf);
	pLogger->output(indent+1,0,"RequestNum=%s 应用累计接收请求数",buf);
	ErrorNum.getString(buf);
	pLogger->output(indent+1,0,"ErrorNum=%s 应用累计错误数",buf);
	SessionSize.getString(buf);
	pLogger->output(indent+1,0,"SessionSize=%s 应用当前会话数",buf);
	TimeOut.getString(buf);
	pLogger->output(indent+1,0,"TimeOut=%s 会话超时时长(秒)",buf);
	JDBCUsage.getString(buf);
	pLogger->output(indent+1,0,"JDBCUsage=%s 应用JDBC连接使用率",buf);
	JSPNum.getString(buf);
	pLogger->output(indent+1,0,"JSPNum=%s 应用JSP文件数量",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbWebAppInfoIterator::~CSysMdbWebAppInfoIterator(void)
{
}


void CSysMdbWebAppInfoIterator::dump(FILE *output)
{
	CSysMdbWebAppInfo *pSysMdbWebAppInfo;
	
	while ((pSysMdbWebAppInfo=next())!=NULL)
	{
		pSysMdbWebAppInfo->dump(output);
	}
}



void CWriteableSysMdbMemPoolInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ObjectID,MonDate,MonTime,PoolName,Usage,committedbytes,initbytes,maxbytes,usedbytes,Type\n");
}
	
void CWriteableSysMdbMemPoolInfo::init(void)
{
	ObjectID.clear();
	MonDate.clear();
	MonTime.clear();
	PoolName.clear();
	Usage.clear();
	committedbytes.clear();
	initbytes.clear();
	maxbytes.clear();
	usedbytes.clear();
	Type.clear();
}

int CWriteableSysMdbMemPoolInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbMemPoolInfo),input)!=sizeof(CWriteableSysMdbMemPoolInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbMemPoolInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PoolName=token;
		}
		else
		{
			PoolName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Usage=token;
		}
		else
		{
			Usage="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			committedbytes=token;
		}
		else
		{
			committedbytes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			initbytes=token;
		}
		else
		{
			initbytes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			maxbytes=token;
		}
		else
		{
			maxbytes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			usedbytes=token;
		}
		else
		{
			usedbytes="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Type=token;
		}
		else
		{
			Type="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"PoolName"))
			{
				PoolName=token;
			}
			else if (!strcmp(fieldName,"Usage"))
			{
				Usage=token;
			}
			else if (!strcmp(fieldName,"committedbytes"))
			{
				committedbytes=token;
			}
			else if (!strcmp(fieldName,"initbytes"))
			{
				initbytes=token;
			}
			else if (!strcmp(fieldName,"maxbytes"))
			{
				maxbytes=token;
			}
			else if (!strcmp(fieldName,"usedbytes"))
			{
				usedbytes=token;
			}
			else if (!strcmp(fieldName,"Type"))
			{
				Type=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbMemPoolInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbMemPoolInfo),output)!=sizeof(CWriteableSysMdbMemPoolInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbMemPoolInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PoolName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Usage.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	committedbytes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	initbytes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	maxbytes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	usedbytes.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Type.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbMemPoolInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbMemPoolInfo%s = {\n", index_buf);
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);	
	PoolName.getString(buf);
	fprintf(fp,"\t\tPoolName = %s    [系统属性名]\n",buf);	
	Usage.getString(buf);
	fprintf(fp,"\t\tUsage = %s    [系统属性名]\n",buf);	
	committedbytes.getString(buf);
	fprintf(fp,"\t\tcommittedbytes = %s    [系统属性名]\n",buf);	
	initbytes.getString(buf);
	fprintf(fp,"\t\tinitbytes = %s    [系统属性名]\n",buf);	
	maxbytes.getString(buf);
	fprintf(fp,"\t\tmaxbytes = %s    [系统属性名]\n",buf);	
	usedbytes.getString(buf);
	fprintf(fp,"\t\tusedbytes = %s    [系统属性名]\n",buf);	
	Type.getString(buf);
	fprintf(fp,"\t\tType = %s    [系统属性名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbMemPoolInfo::dumpDiff(FILE *fp, const CWriteableSysMdbMemPoolInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbMemPoolInfo = {\n");
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [监控日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [监控时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);
	}
	PoolName.getString(buf);
	if (compare(PoolName.getValue(),pOriginal->PoolName.getValue())!=0)
	{
		pOriginal->PoolName.getString(bufOriginal);
		fprintf(fp,"\t\tPoolName = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPoolName = %s    [系统属性名]\n",buf);
	}
	Usage.getString(buf);
	if (compare(Usage.getValue(),pOriginal->Usage.getValue())!=0)
	{
		pOriginal->Usage.getString(bufOriginal);
		fprintf(fp,"\t\tUsage = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUsage = %s    [系统属性名]\n",buf);
	}
	committedbytes.getString(buf);
	if (compare(committedbytes.getValue(),pOriginal->committedbytes.getValue())!=0)
	{
		pOriginal->committedbytes.getString(bufOriginal);
		fprintf(fp,"\t\tcommittedbytes = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tcommittedbytes = %s    [系统属性名]\n",buf);
	}
	initbytes.getString(buf);
	if (compare(initbytes.getValue(),pOriginal->initbytes.getValue())!=0)
	{
		pOriginal->initbytes.getString(bufOriginal);
		fprintf(fp,"\t\tinitbytes = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tinitbytes = %s    [系统属性名]\n",buf);
	}
	maxbytes.getString(buf);
	if (compare(maxbytes.getValue(),pOriginal->maxbytes.getValue())!=0)
	{
		pOriginal->maxbytes.getString(bufOriginal);
		fprintf(fp,"\t\tmaxbytes = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tmaxbytes = %s    [系统属性名]\n",buf);
	}
	usedbytes.getString(buf);
	if (compare(usedbytes.getValue(),pOriginal->usedbytes.getValue())!=0)
	{
		pOriginal->usedbytes.getString(bufOriginal);
		fprintf(fp,"\t\tusedbytes = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tusedbytes = %s    [系统属性名]\n",buf);
	}
	Type.getString(buf);
	if (compare(Type.getValue(),pOriginal->Type.getValue())!=0)
	{
		pOriginal->Type.getString(bufOriginal);
		fprintf(fp,"\t\tType = %s -> %s    [系统属性名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tType = %s    [系统属性名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbMemPoolInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	PoolName.getString(buf);
	fprintf(fp,",PoolName,%s",buf);	
	Usage.getString(buf);
	fprintf(fp,",Usage,%s",buf);	
	committedbytes.getString(buf);
	fprintf(fp,",committedbytes,%s",buf);	
	initbytes.getString(buf);
	fprintf(fp,",initbytes,%s",buf);	
	maxbytes.getString(buf);
	fprintf(fp,",maxbytes,%s",buf);	
	usedbytes.getString(buf);
	fprintf(fp,",usedbytes,%s",buf);	
	Type.getString(buf);
	fprintf(fp,",Type,%s",buf);	
}

void CWriteableSysMdbMemPoolInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	PoolName.getString(buf);
	sprintf(p,"PoolName=%s,",buf);
	p+=strlen(p);
	Usage.getString(buf);
	sprintf(p,"Usage=%s,",buf);
	p+=strlen(p);
	committedbytes.getString(buf);
	sprintf(p,"committedbytes=%s,",buf);
	p+=strlen(p);
	initbytes.getString(buf);
	sprintf(p,"initbytes=%s,",buf);
	p+=strlen(p);
	maxbytes.getString(buf);
	sprintf(p,"maxbytes=%s,",buf);
	p+=strlen(p);
	usedbytes.getString(buf);
	sprintf(p,"usedbytes=%s,",buf);
	p+=strlen(p);
	Type.getString(buf);
	sprintf(p,"Type=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbMemPoolInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbMemPoolInfo");
	pLogger->output(indent,0,"{");
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 监控对象",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 监控日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 监控时间",buf);
	PoolName.getString(buf);
	pLogger->output(indent+1,0,"PoolName=%s 系统属性名",buf);
	Usage.getString(buf);
	pLogger->output(indent+1,0,"Usage=%s 系统属性名",buf);
	committedbytes.getString(buf);
	pLogger->output(indent+1,0,"committedbytes=%s 系统属性名",buf);
	initbytes.getString(buf);
	pLogger->output(indent+1,0,"initbytes=%s 系统属性名",buf);
	maxbytes.getString(buf);
	pLogger->output(indent+1,0,"maxbytes=%s 系统属性名",buf);
	usedbytes.getString(buf);
	pLogger->output(indent+1,0,"usedbytes=%s 系统属性名",buf);
	Type.getString(buf);
	pLogger->output(indent+1,0,"Type=%s 系统属性名",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbMemPoolInfoIterator::~CSysMdbMemPoolInfoIterator(void)
{
}


void CSysMdbMemPoolInfoIterator::dump(FILE *output)
{
	CSysMdbMemPoolInfo *pSysMdbMemPoolInfo;
	
	while ((pSysMdbMemPoolInfo=next())!=NULL)
	{
		pSysMdbMemPoolInfo->dump(output);
	}
}



void CWriteableSysMdbConnectorInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ObjectID,MonDate,MonTime,Name,ThreadsCount,BusyThreadsCount,MaxThreads,MaxSpareThreads,MinSpareThreads,MaxTime,MaxProcTime,RequestCount,ErrorCount,BytesReceived,BytesSent\n");
}
	
void CWriteableSysMdbConnectorInfo::init(void)
{
	ObjectID.clear();
	MonDate.clear();
	MonTime.clear();
	Name.clear();
	ThreadsCount.clear();
	BusyThreadsCount.clear();
	MaxThreads.clear();
	MaxSpareThreads.clear();
	MinSpareThreads.clear();
	MaxTime.clear();
	MaxProcTime.clear();
	RequestCount.clear();
	ErrorCount.clear();
	BytesReceived.clear();
	BytesSent.clear();
}

int CWriteableSysMdbConnectorInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbConnectorInfo),input)!=sizeof(CWriteableSysMdbConnectorInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbConnectorInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Name=token;
		}
		else
		{
			Name="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ThreadsCount=token;
		}
		else
		{
			ThreadsCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusyThreadsCount=token;
		}
		else
		{
			BusyThreadsCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxThreads=token;
		}
		else
		{
			MaxThreads="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxSpareThreads=token;
		}
		else
		{
			MaxSpareThreads="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinSpareThreads=token;
		}
		else
		{
			MinSpareThreads="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxTime=token;
		}
		else
		{
			MaxTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxProcTime=token;
		}
		else
		{
			MaxProcTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RequestCount=token;
		}
		else
		{
			RequestCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ErrorCount=token;
		}
		else
		{
			ErrorCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BytesReceived=token;
		}
		else
		{
			BytesReceived="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BytesSent=token;
		}
		else
		{
			BytesSent="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"Name"))
			{
				Name=token;
			}
			else if (!strcmp(fieldName,"ThreadsCount"))
			{
				ThreadsCount=token;
			}
			else if (!strcmp(fieldName,"BusyThreadsCount"))
			{
				BusyThreadsCount=token;
			}
			else if (!strcmp(fieldName,"MaxThreads"))
			{
				MaxThreads=token;
			}
			else if (!strcmp(fieldName,"MaxSpareThreads"))
			{
				MaxSpareThreads=token;
			}
			else if (!strcmp(fieldName,"MinSpareThreads"))
			{
				MinSpareThreads=token;
			}
			else if (!strcmp(fieldName,"MaxTime"))
			{
				MaxTime=token;
			}
			else if (!strcmp(fieldName,"MaxProcTime"))
			{
				MaxProcTime=token;
			}
			else if (!strcmp(fieldName,"RequestCount"))
			{
				RequestCount=token;
			}
			else if (!strcmp(fieldName,"ErrorCount"))
			{
				ErrorCount=token;
			}
			else if (!strcmp(fieldName,"BytesReceived"))
			{
				BytesReceived=token;
			}
			else if (!strcmp(fieldName,"BytesSent"))
			{
				BytesSent=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbConnectorInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbConnectorInfo),output)!=sizeof(CWriteableSysMdbConnectorInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbConnectorInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Name.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ThreadsCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusyThreadsCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxThreads.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxSpareThreads.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinSpareThreads.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxProcTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RequestCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ErrorCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BytesReceived.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BytesSent.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbConnectorInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbConnectorInfo%s = {\n", index_buf);
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);	
	Name.getString(buf);
	fprintf(fp,"\t\tName = %s    [连接器名称]\n",buf);	
	ThreadsCount.getString(buf);
	fprintf(fp,"\t\tThreadsCount = %s    [当前处理线程数]\n",buf);	
	BusyThreadsCount.getString(buf);
	fprintf(fp,"\t\tBusyThreadsCount = %s    [当前繁忙线程数]\n",buf);	
	MaxThreads.getString(buf);
	fprintf(fp,"\t\tMaxThreads = %s    [最大线程数]\n",buf);	
	MaxSpareThreads.getString(buf);
	fprintf(fp,"\t\tMaxSpareThreads = %s    [最大空闲线程数]\n",buf);	
	MinSpareThreads.getString(buf);
	fprintf(fp,"\t\tMinSpareThreads = %s    [最小空闲线程数]\n",buf);	
	MaxTime.getString(buf);
	fprintf(fp,"\t\tMaxTime = %s    [最长连接时间]\n",buf);	
	MaxProcTime.getString(buf);
	fprintf(fp,"\t\tMaxProcTime = %s    [最长处理时间]\n",buf);	
	RequestCount.getString(buf);
	fprintf(fp,"\t\tRequestCount = %s    [累计接收请求数]\n",buf);	
	ErrorCount.getString(buf);
	fprintf(fp,"\t\tErrorCount = %s    [累计错误数]\n",buf);	
	BytesReceived.getString(buf);
	fprintf(fp,"\t\tBytesReceived = %s    [累计接收字节数]\n",buf);	
	BytesSent.getString(buf);
	fprintf(fp,"\t\tBytesSent = %s    [累计发送字节数]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbConnectorInfo::dumpDiff(FILE *fp, const CWriteableSysMdbConnectorInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbConnectorInfo = {\n");
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [监控日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [监控日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [监控时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [监控时间]\n",buf);
	}
	Name.getString(buf);
	if (compare(Name.getValue(),pOriginal->Name.getValue())!=0)
	{
		pOriginal->Name.getString(bufOriginal);
		fprintf(fp,"\t\tName = %s -> %s    [连接器名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tName = %s    [连接器名称]\n",buf);
	}
	ThreadsCount.getString(buf);
	if (compare(ThreadsCount.getValue(),pOriginal->ThreadsCount.getValue())!=0)
	{
		pOriginal->ThreadsCount.getString(bufOriginal);
		fprintf(fp,"\t\tThreadsCount = %s -> %s    [当前处理线程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tThreadsCount = %s    [当前处理线程数]\n",buf);
	}
	BusyThreadsCount.getString(buf);
	if (compare(BusyThreadsCount.getValue(),pOriginal->BusyThreadsCount.getValue())!=0)
	{
		pOriginal->BusyThreadsCount.getString(bufOriginal);
		fprintf(fp,"\t\tBusyThreadsCount = %s -> %s    [当前繁忙线程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusyThreadsCount = %s    [当前繁忙线程数]\n",buf);
	}
	MaxThreads.getString(buf);
	if (compare(MaxThreads.getValue(),pOriginal->MaxThreads.getValue())!=0)
	{
		pOriginal->MaxThreads.getString(bufOriginal);
		fprintf(fp,"\t\tMaxThreads = %s -> %s    [最大线程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxThreads = %s    [最大线程数]\n",buf);
	}
	MaxSpareThreads.getString(buf);
	if (compare(MaxSpareThreads.getValue(),pOriginal->MaxSpareThreads.getValue())!=0)
	{
		pOriginal->MaxSpareThreads.getString(bufOriginal);
		fprintf(fp,"\t\tMaxSpareThreads = %s -> %s    [最大空闲线程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxSpareThreads = %s    [最大空闲线程数]\n",buf);
	}
	MinSpareThreads.getString(buf);
	if (compare(MinSpareThreads.getValue(),pOriginal->MinSpareThreads.getValue())!=0)
	{
		pOriginal->MinSpareThreads.getString(bufOriginal);
		fprintf(fp,"\t\tMinSpareThreads = %s -> %s    [最小空闲线程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinSpareThreads = %s    [最小空闲线程数]\n",buf);
	}
	MaxTime.getString(buf);
	if (compare(MaxTime.getValue(),pOriginal->MaxTime.getValue())!=0)
	{
		pOriginal->MaxTime.getString(bufOriginal);
		fprintf(fp,"\t\tMaxTime = %s -> %s    [最长连接时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxTime = %s    [最长连接时间]\n",buf);
	}
	MaxProcTime.getString(buf);
	if (compare(MaxProcTime.getValue(),pOriginal->MaxProcTime.getValue())!=0)
	{
		pOriginal->MaxProcTime.getString(bufOriginal);
		fprintf(fp,"\t\tMaxProcTime = %s -> %s    [最长处理时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxProcTime = %s    [最长处理时间]\n",buf);
	}
	RequestCount.getString(buf);
	if (compare(RequestCount.getValue(),pOriginal->RequestCount.getValue())!=0)
	{
		pOriginal->RequestCount.getString(bufOriginal);
		fprintf(fp,"\t\tRequestCount = %s -> %s    [累计接收请求数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRequestCount = %s    [累计接收请求数]\n",buf);
	}
	ErrorCount.getString(buf);
	if (compare(ErrorCount.getValue(),pOriginal->ErrorCount.getValue())!=0)
	{
		pOriginal->ErrorCount.getString(bufOriginal);
		fprintf(fp,"\t\tErrorCount = %s -> %s    [累计错误数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tErrorCount = %s    [累计错误数]\n",buf);
	}
	BytesReceived.getString(buf);
	if (compare(BytesReceived.getValue(),pOriginal->BytesReceived.getValue())!=0)
	{
		pOriginal->BytesReceived.getString(bufOriginal);
		fprintf(fp,"\t\tBytesReceived = %s -> %s    [累计接收字节数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBytesReceived = %s    [累计接收字节数]\n",buf);
	}
	BytesSent.getString(buf);
	if (compare(BytesSent.getValue(),pOriginal->BytesSent.getValue())!=0)
	{
		pOriginal->BytesSent.getString(bufOriginal);
		fprintf(fp,"\t\tBytesSent = %s -> %s    [累计发送字节数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBytesSent = %s    [累计发送字节数]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbConnectorInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	Name.getString(buf);
	fprintf(fp,",Name,%s",buf);	
	ThreadsCount.getString(buf);
	fprintf(fp,",ThreadsCount,%s",buf);	
	BusyThreadsCount.getString(buf);
	fprintf(fp,",BusyThreadsCount,%s",buf);	
	MaxThreads.getString(buf);
	fprintf(fp,",MaxThreads,%s",buf);	
	MaxSpareThreads.getString(buf);
	fprintf(fp,",MaxSpareThreads,%s",buf);	
	MinSpareThreads.getString(buf);
	fprintf(fp,",MinSpareThreads,%s",buf);	
	MaxTime.getString(buf);
	fprintf(fp,",MaxTime,%s",buf);	
	MaxProcTime.getString(buf);
	fprintf(fp,",MaxProcTime,%s",buf);	
	RequestCount.getString(buf);
	fprintf(fp,",RequestCount,%s",buf);	
	ErrorCount.getString(buf);
	fprintf(fp,",ErrorCount,%s",buf);	
	BytesReceived.getString(buf);
	fprintf(fp,",BytesReceived,%s",buf);	
	BytesSent.getString(buf);
	fprintf(fp,",BytesSent,%s",buf);	
}

void CWriteableSysMdbConnectorInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	Name.getString(buf);
	sprintf(p,"Name=%s,",buf);
	p+=strlen(p);
	ThreadsCount.getString(buf);
	sprintf(p,"ThreadsCount=%s,",buf);
	p+=strlen(p);
	BusyThreadsCount.getString(buf);
	sprintf(p,"BusyThreadsCount=%s,",buf);
	p+=strlen(p);
	MaxThreads.getString(buf);
	sprintf(p,"MaxThreads=%s,",buf);
	p+=strlen(p);
	MaxSpareThreads.getString(buf);
	sprintf(p,"MaxSpareThreads=%s,",buf);
	p+=strlen(p);
	MinSpareThreads.getString(buf);
	sprintf(p,"MinSpareThreads=%s,",buf);
	p+=strlen(p);
	MaxTime.getString(buf);
	sprintf(p,"MaxTime=%s,",buf);
	p+=strlen(p);
	MaxProcTime.getString(buf);
	sprintf(p,"MaxProcTime=%s,",buf);
	p+=strlen(p);
	RequestCount.getString(buf);
	sprintf(p,"RequestCount=%s,",buf);
	p+=strlen(p);
	ErrorCount.getString(buf);
	sprintf(p,"ErrorCount=%s,",buf);
	p+=strlen(p);
	BytesReceived.getString(buf);
	sprintf(p,"BytesReceived=%s,",buf);
	p+=strlen(p);
	BytesSent.getString(buf);
	sprintf(p,"BytesSent=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbConnectorInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbConnectorInfo");
	pLogger->output(indent,0,"{");
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 监控对象",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 监控日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 监控时间",buf);
	Name.getString(buf);
	pLogger->output(indent+1,0,"Name=%s 连接器名称",buf);
	ThreadsCount.getString(buf);
	pLogger->output(indent+1,0,"ThreadsCount=%s 当前处理线程数",buf);
	BusyThreadsCount.getString(buf);
	pLogger->output(indent+1,0,"BusyThreadsCount=%s 当前繁忙线程数",buf);
	MaxThreads.getString(buf);
	pLogger->output(indent+1,0,"MaxThreads=%s 最大线程数",buf);
	MaxSpareThreads.getString(buf);
	pLogger->output(indent+1,0,"MaxSpareThreads=%s 最大空闲线程数",buf);
	MinSpareThreads.getString(buf);
	pLogger->output(indent+1,0,"MinSpareThreads=%s 最小空闲线程数",buf);
	MaxTime.getString(buf);
	pLogger->output(indent+1,0,"MaxTime=%s 最长连接时间",buf);
	MaxProcTime.getString(buf);
	pLogger->output(indent+1,0,"MaxProcTime=%s 最长处理时间",buf);
	RequestCount.getString(buf);
	pLogger->output(indent+1,0,"RequestCount=%s 累计接收请求数",buf);
	ErrorCount.getString(buf);
	pLogger->output(indent+1,0,"ErrorCount=%s 累计错误数",buf);
	BytesReceived.getString(buf);
	pLogger->output(indent+1,0,"BytesReceived=%s 累计接收字节数",buf);
	BytesSent.getString(buf);
	pLogger->output(indent+1,0,"BytesSent=%s 累计发送字节数",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbConnectorInfoIterator::~CSysMdbConnectorInfoIterator(void)
{
}


void CSysMdbConnectorInfoIterator::dump(FILE *output)
{
	CSysMdbConnectorInfo *pSysMdbConnectorInfo;
	
	while ((pSysMdbConnectorInfo=next())!=NULL)
	{
		pSysMdbConnectorInfo->dump(output);
	}
}



void CWriteableSysMdbDBQuery::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,ObjectID,AttrType,MonDate,MonTime,DBQueryResult\n");
}
	
void CWriteableSysMdbDBQuery::init(void)
{
	SubcriberID.clear();
	ObjectID.clear();
	AttrType.clear();
	MonDate.clear();
	MonTime.clear();
	DBQueryResult.clear();
}

int CWriteableSysMdbDBQuery::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbDBQuery),input)!=sizeof(CWriteableSysMdbDBQuery))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbDBQuery::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType=token;
		}
		else
		{
			AttrType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DBQueryResult=token;
		}
		else
		{
			DBQueryResult="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"AttrType"))
			{
				AttrType=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"DBQueryResult"))
			{
				DBQueryResult=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbDBQuery::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbDBQuery),output)!=sizeof(CWriteableSysMdbDBQuery))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbDBQuery::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DBQueryResult.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbDBQuery::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbDBQuery%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [数据库实例对象ID]\n",buf);	
	AttrType.getString(buf);
	fprintf(fp,"\t\tAttrType = %s    [存储过程名]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	DBQueryResult.getString(buf);
	fprintf(fp,"\t\tDBQueryResult = %s    [数据库查询结果]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbDBQuery::dumpDiff(FILE *fp, const CWriteableSysMdbDBQuery *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbDBQuery = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [数据库实例对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [数据库实例对象ID]\n",buf);
	}
	AttrType.getString(buf);
	if (compare(AttrType.getValue(),pOriginal->AttrType.getValue())!=0)
	{
		pOriginal->AttrType.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType = %s -> %s    [存储过程名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType = %s    [存储过程名]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	DBQueryResult.getString(buf);
	if (compare(DBQueryResult.getValue(),pOriginal->DBQueryResult.getValue())!=0)
	{
		pOriginal->DBQueryResult.getString(bufOriginal);
		fprintf(fp,"\t\tDBQueryResult = %s -> %s    [数据库查询结果]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDBQueryResult = %s    [数据库查询结果]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbDBQuery::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	AttrType.getString(buf);
	fprintf(fp,",AttrType,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	DBQueryResult.getString(buf);
	fprintf(fp,",DBQueryResult,%s",buf);	
}

void CWriteableSysMdbDBQuery::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	AttrType.getString(buf);
	sprintf(p,"AttrType=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	DBQueryResult.getString(buf);
	sprintf(p,"DBQueryResult=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbDBQuery::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbDBQuery");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 数据库实例对象ID",buf);
	AttrType.getString(buf);
	pLogger->output(indent+1,0,"AttrType=%s 存储过程名",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	DBQueryResult.getString(buf);
	pLogger->output(indent+1,0,"DBQueryResult=%s 数据库查询结果",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbDBQueryIterator::~CSysMdbDBQueryIterator(void)
{
}


void CSysMdbDBQueryIterator::dump(FILE *output)
{
	CSysMdbDBQuery *pSysMdbDBQuery;
	
	while ((pSysMdbDBQuery=next())!=NULL)
	{
		pSysMdbDBQuery->dump(output);
	}
}



void CWriteableSysNetArea::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetArea::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetArea::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetArea),input)!=sizeof(CWriteableSysNetArea))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetArea::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetArea::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetArea),output)!=sizeof(CWriteableSysNetArea))
		return 0;
	else
		return 1;
}

int CWriteableSysNetArea::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetArea::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetArea%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetArea::dumpDiff(FILE *fp, const CWriteableSysNetArea *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetArea = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [区域中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [区域英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetArea::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetArea::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetArea::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetArea");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 区域中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 区域英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetAreaIterator::~CSysNetAreaIterator(void)
{
}


void CSysNetAreaIterator::dump(FILE *output)
{
	CSysNetArea *pSysNetArea;
	
	while ((pSysNetArea=next())!=NULL)
	{
		pSysNetArea->dump(output);
	}
}



void CWriteableSysNetSubArea::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SysNetAreaID,CName,EName\n");
}
	
void CWriteableSysNetSubArea::init(void)
{
	ID.clear();
	SysNetAreaID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetSubArea::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetSubArea),input)!=sizeof(CWriteableSysNetSubArea))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetSubArea::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SysNetAreaID=token;
		}
		else
		{
			SysNetAreaID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SysNetAreaID"))
			{
				SysNetAreaID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetSubArea::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetSubArea),output)!=sizeof(CWriteableSysNetSubArea))
		return 0;
	else
		return 1;
}

int CWriteableSysNetSubArea::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SysNetAreaID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetSubArea::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetSubArea%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SysNetAreaID.getString(buf);
	fprintf(fp,"\t\tSysNetAreaID = %s    [SysNetArea]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubArea::dumpDiff(FILE *fp, const CWriteableSysNetSubArea *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetSubArea = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SysNetAreaID.getString(buf);
	if (compare(SysNetAreaID.getValue(),pOriginal->SysNetAreaID.getValue())!=0)
	{
		pOriginal->SysNetAreaID.getString(bufOriginal);
		fprintf(fp,"\t\tSysNetAreaID = %s -> %s    [SysNetArea]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSysNetAreaID = %s    [SysNetArea]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [区域中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [区域英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubArea::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SysNetAreaID.getString(buf);
	fprintf(fp,",SysNetAreaID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetSubArea::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SysNetAreaID.getString(buf);
	sprintf(p,"SysNetAreaID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetSubArea::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetSubArea");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SysNetAreaID.getString(buf);
	pLogger->output(indent+1,0,"SysNetAreaID=%s SysNetArea",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 区域中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 区域英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetSubAreaIterator::~CSysNetSubAreaIterator(void)
{
}


void CSysNetSubAreaIterator::dump(FILE *output)
{
	CSysNetSubArea *pSysNetSubArea;
	
	while ((pSysNetSubArea=next())!=NULL)
	{
		pSysNetSubArea->dump(output);
	}
}



void CWriteableSysNetSubAreaIP::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SysNetSubAreaID,IP,Mask\n");
}
	
void CWriteableSysNetSubAreaIP::init(void)
{
	ID.clear();
	SysNetSubAreaID.clear();
	IP.clear();
	Mask.clear();
}

int CWriteableSysNetSubAreaIP::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetSubAreaIP),input)!=sizeof(CWriteableSysNetSubAreaIP))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetSubAreaIP::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SysNetSubAreaID=token;
		}
		else
		{
			SysNetSubAreaID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP=token;
		}
		else
		{
			IP="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Mask=token;
		}
		else
		{
			Mask="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SysNetSubAreaID"))
			{
				SysNetSubAreaID=token;
			}
			else if (!strcmp(fieldName,"IP"))
			{
				IP=token;
			}
			else if (!strcmp(fieldName,"Mask"))
			{
				Mask=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetSubAreaIP::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetSubAreaIP),output)!=sizeof(CWriteableSysNetSubAreaIP))
		return 0;
	else
		return 1;
}

int CWriteableSysNetSubAreaIP::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SysNetSubAreaID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Mask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetSubAreaIP::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetSubAreaIP%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);	
	IP.getString(buf);
	fprintf(fp,"\t\tIP = %s    [ip地址]\n",buf);	
	Mask.getString(buf);
	fprintf(fp,"\t\tMask = %s    [掩码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubAreaIP::dumpDiff(FILE *fp, const CWriteableSysNetSubAreaIP *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetSubAreaIP = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SysNetSubAreaID.getString(buf);
	if (compare(SysNetSubAreaID.getValue(),pOriginal->SysNetSubAreaID.getValue())!=0)
	{
		pOriginal->SysNetSubAreaID.getString(bufOriginal);
		fprintf(fp,"\t\tSysNetSubAreaID = %s -> %s    [SysNetSubAreaID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);
	}
	IP.getString(buf);
	if (compare(IP.getValue(),pOriginal->IP.getValue())!=0)
	{
		pOriginal->IP.getString(bufOriginal);
		fprintf(fp,"\t\tIP = %s -> %s    [ip地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP = %s    [ip地址]\n",buf);
	}
	Mask.getString(buf);
	if (compare(Mask.getValue(),pOriginal->Mask.getValue())!=0)
	{
		pOriginal->Mask.getString(bufOriginal);
		fprintf(fp,"\t\tMask = %s -> %s    [掩码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMask = %s    [掩码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubAreaIP::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,",SysNetSubAreaID,%s",buf);	
	IP.getString(buf);
	fprintf(fp,",IP,%s",buf);	
	Mask.getString(buf);
	fprintf(fp,",Mask,%s",buf);	
}

void CWriteableSysNetSubAreaIP::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SysNetSubAreaID.getString(buf);
	sprintf(p,"SysNetSubAreaID=%s,",buf);
	p+=strlen(p);
	IP.getString(buf);
	sprintf(p,"IP=%s,",buf);
	p+=strlen(p);
	Mask.getString(buf);
	sprintf(p,"Mask=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetSubAreaIP::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetSubAreaIP");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SysNetSubAreaID.getString(buf);
	pLogger->output(indent+1,0,"SysNetSubAreaID=%s SysNetSubAreaID",buf);
	IP.getString(buf);
	pLogger->output(indent+1,0,"IP=%s ip地址",buf);
	Mask.getString(buf);
	pLogger->output(indent+1,0,"Mask=%s 掩码",buf);
	pLogger->output(indent,0,"}");
}

CSysNetSubAreaIPIterator::~CSysNetSubAreaIPIterator(void)
{
}


void CSysNetSubAreaIPIterator::dump(FILE *output)
{
	CSysNetSubAreaIP *pSysNetSubAreaIP;
	
	while ((pSysNetSubAreaIP=next())!=NULL)
	{
		pSysNetSubAreaIP->dump(output);
	}
}



void CWriteableSysNetFuncArea::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SysNetSubAreaID,CName,EName\n");
}
	
void CWriteableSysNetFuncArea::init(void)
{
	ID.clear();
	SysNetSubAreaID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetFuncArea::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetFuncArea),input)!=sizeof(CWriteableSysNetFuncArea))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetFuncArea::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SysNetSubAreaID=token;
		}
		else
		{
			SysNetSubAreaID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SysNetSubAreaID"))
			{
				SysNetSubAreaID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetFuncArea::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetFuncArea),output)!=sizeof(CWriteableSysNetFuncArea))
		return 0;
	else
		return 1;
}

int CWriteableSysNetFuncArea::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SysNetSubAreaID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetFuncArea::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetFuncArea%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetFuncArea::dumpDiff(FILE *fp, const CWriteableSysNetFuncArea *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetFuncArea = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SysNetSubAreaID.getString(buf);
	if (compare(SysNetSubAreaID.getValue(),pOriginal->SysNetSubAreaID.getValue())!=0)
	{
		pOriginal->SysNetSubAreaID.getString(bufOriginal);
		fprintf(fp,"\t\tSysNetSubAreaID = %s -> %s    [SysNetSubAreaID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [区域中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [区域中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [区域英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [区域英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetFuncArea::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,",SysNetSubAreaID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetFuncArea::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SysNetSubAreaID.getString(buf);
	sprintf(p,"SysNetSubAreaID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetFuncArea::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetFuncArea");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SysNetSubAreaID.getString(buf);
	pLogger->output(indent+1,0,"SysNetSubAreaID=%s SysNetSubAreaID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 区域中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 区域英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetFuncAreaIterator::~CSysNetFuncAreaIterator(void)
{
}


void CSysNetFuncAreaIterator::dump(FILE *output)
{
	CSysNetFuncArea *pSysNetFuncArea;
	
	while ((pSysNetFuncArea=next())!=NULL)
	{
		pSysNetFuncArea->dump(output);
	}
}



void CWriteableSysNetDevice::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ObjectID,MonitorType_ID,SysNetSubAreaID,CATEGORY_ID,FuctionArea,IPADDR,IPDECODE,NAME,PORTNUMBER,CONFIGFILE,RCOMMUNITY,SNMPVERSION,RAMSIZE,FLASHSIZE,NVRAMSIZE,CABINET_ID,ROOM_ID,IOSVERSION_ID,DESCRIPTION,USERNAME,PASSWD,ENPASSWD,MANUFACTORY_ID,CFGSAVETYPE,DEVICETYPE,SENDSMS,ISSNMP,SLOTNUM,ISPING,IFNUM,APPLICATION_ID\n");
}
	
void CWriteableSysNetDevice::init(void)
{
	ID.clear();
	ObjectID.clear();
	MonitorType_ID.clear();
	SysNetSubAreaID.clear();
	CATEGORY_ID.clear();
	FuctionArea.clear();
	IPADDR.clear();
	IPDECODE.clear();
	NAME.clear();
	PORTNUMBER.clear();
	CONFIGFILE.clear();
	RCOMMUNITY.clear();
	SNMPVERSION.clear();
	RAMSIZE.clear();
	FLASHSIZE.clear();
	NVRAMSIZE.clear();
	CABINET_ID.clear();
	ROOM_ID.clear();
	IOSVERSION_ID.clear();
	DESCRIPTION.clear();
	USERNAME.clear();
	PASSWD.clear();
	ENPASSWD.clear();
	MANUFACTORY_ID.clear();
	CFGSAVETYPE.clear();
	DEVICETYPE.clear();
	SENDSMS.clear();
	ISSNMP.clear();
	SLOTNUM.clear();
	ISPING.clear();
	IFNUM.clear();
	APPLICATION_ID.clear();
}

int CWriteableSysNetDevice::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDevice),input)!=sizeof(CWriteableSysNetDevice))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDevice::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType_ID=token;
		}
		else
		{
			MonitorType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SysNetSubAreaID=token;
		}
		else
		{
			SysNetSubAreaID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CATEGORY_ID=token;
		}
		else
		{
			CATEGORY_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FuctionArea=token;
		}
		else
		{
			FuctionArea="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPDECODE=token;
		}
		else
		{
			IPDECODE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NAME=token;
		}
		else
		{
			NAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PORTNUMBER=token;
		}
		else
		{
			PORTNUMBER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONFIGFILE=token;
		}
		else
		{
			CONFIGFILE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RCOMMUNITY=token;
		}
		else
		{
			RCOMMUNITY="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SNMPVERSION=token;
		}
		else
		{
			SNMPVERSION="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RAMSIZE=token;
		}
		else
		{
			RAMSIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FLASHSIZE=token;
		}
		else
		{
			FLASHSIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NVRAMSIZE=token;
		}
		else
		{
			NVRAMSIZE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CABINET_ID=token;
		}
		else
		{
			CABINET_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ROOM_ID=token;
		}
		else
		{
			ROOM_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IOSVERSION_ID=token;
		}
		else
		{
			IOSVERSION_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DESCRIPTION=token;
		}
		else
		{
			DESCRIPTION="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			USERNAME=token;
		}
		else
		{
			USERNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PASSWD=token;
		}
		else
		{
			PASSWD="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ENPASSWD=token;
		}
		else
		{
			ENPASSWD="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MANUFACTORY_ID=token;
		}
		else
		{
			MANUFACTORY_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CFGSAVETYPE=token;
		}
		else
		{
			CFGSAVETYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DEVICETYPE=token;
		}
		else
		{
			DEVICETYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SENDSMS=token;
		}
		else
		{
			SENDSMS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ISSNMP=token;
		}
		else
		{
			ISSNMP="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SLOTNUM=token;
		}
		else
		{
			SLOTNUM="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ISPING=token;
		}
		else
		{
			ISPING="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IFNUM=token;
		}
		else
		{
			IFNUM="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			APPLICATION_ID=token;
		}
		else
		{
			APPLICATION_ID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonitorType_ID"))
			{
				MonitorType_ID=token;
			}
			else if (!strcmp(fieldName,"SysNetSubAreaID"))
			{
				SysNetSubAreaID=token;
			}
			else if (!strcmp(fieldName,"CATEGORY_ID"))
			{
				CATEGORY_ID=token;
			}
			else if (!strcmp(fieldName,"FuctionArea"))
			{
				FuctionArea=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"IPDECODE"))
			{
				IPDECODE=token;
			}
			else if (!strcmp(fieldName,"NAME"))
			{
				NAME=token;
			}
			else if (!strcmp(fieldName,"PORTNUMBER"))
			{
				PORTNUMBER=token;
			}
			else if (!strcmp(fieldName,"CONFIGFILE"))
			{
				CONFIGFILE=token;
			}
			else if (!strcmp(fieldName,"RCOMMUNITY"))
			{
				RCOMMUNITY=token;
			}
			else if (!strcmp(fieldName,"SNMPVERSION"))
			{
				SNMPVERSION=token;
			}
			else if (!strcmp(fieldName,"RAMSIZE"))
			{
				RAMSIZE=token;
			}
			else if (!strcmp(fieldName,"FLASHSIZE"))
			{
				FLASHSIZE=token;
			}
			else if (!strcmp(fieldName,"NVRAMSIZE"))
			{
				NVRAMSIZE=token;
			}
			else if (!strcmp(fieldName,"CABINET_ID"))
			{
				CABINET_ID=token;
			}
			else if (!strcmp(fieldName,"ROOM_ID"))
			{
				ROOM_ID=token;
			}
			else if (!strcmp(fieldName,"IOSVERSION_ID"))
			{
				IOSVERSION_ID=token;
			}
			else if (!strcmp(fieldName,"DESCRIPTION"))
			{
				DESCRIPTION=token;
			}
			else if (!strcmp(fieldName,"USERNAME"))
			{
				USERNAME=token;
			}
			else if (!strcmp(fieldName,"PASSWD"))
			{
				PASSWD=token;
			}
			else if (!strcmp(fieldName,"ENPASSWD"))
			{
				ENPASSWD=token;
			}
			else if (!strcmp(fieldName,"MANUFACTORY_ID"))
			{
				MANUFACTORY_ID=token;
			}
			else if (!strcmp(fieldName,"CFGSAVETYPE"))
			{
				CFGSAVETYPE=token;
			}
			else if (!strcmp(fieldName,"DEVICETYPE"))
			{
				DEVICETYPE=token;
			}
			else if (!strcmp(fieldName,"SENDSMS"))
			{
				SENDSMS=token;
			}
			else if (!strcmp(fieldName,"ISSNMP"))
			{
				ISSNMP=token;
			}
			else if (!strcmp(fieldName,"SLOTNUM"))
			{
				SLOTNUM=token;
			}
			else if (!strcmp(fieldName,"ISPING"))
			{
				ISPING=token;
			}
			else if (!strcmp(fieldName,"IFNUM"))
			{
				IFNUM=token;
			}
			else if (!strcmp(fieldName,"APPLICATION_ID"))
			{
				APPLICATION_ID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDevice::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDevice),output)!=sizeof(CWriteableSysNetDevice))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDevice::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SysNetSubAreaID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CATEGORY_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FuctionArea.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPDECODE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PORTNUMBER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONFIGFILE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RCOMMUNITY.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SNMPVERSION.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RAMSIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FLASHSIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NVRAMSIZE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CABINET_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ROOM_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IOSVERSION_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DESCRIPTION.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	USERNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PASSWD.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ENPASSWD.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MANUFACTORY_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CFGSAVETYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DEVICETYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SENDSMS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ISSNMP.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SLOTNUM.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ISPING.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IFNUM.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	APPLICATION_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDevice::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDevice%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);	
	CATEGORY_ID.getString(buf);
	fprintf(fp,"\t\tCATEGORY_ID = %s    [分类ID  ]\n",buf);	
	FuctionArea.getString(buf);
	fprintf(fp,"\t\tFuctionArea = %s    [人为划分的职能区域  ]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [IP地址  ]\n",buf);	
	IPDECODE.getString(buf);
	fprintf(fp,"\t\tIPDECODE = %s    [IP码    ]\n",buf);	
	NAME.getString(buf);
	fprintf(fp,"\t\tNAME = %s    [设备名称 ]\n",buf);	
	PORTNUMBER.getString(buf);
	fprintf(fp,"\t\tPORTNUMBER = %s    [             ]\n",buf);	
	CONFIGFILE.getString(buf);
	fprintf(fp,"\t\tCONFIGFILE = %s    [          ]\n",buf);	
	RCOMMUNITY.getString(buf);
	fprintf(fp,"\t\tRCOMMUNITY = %s    [共同体名  ]\n",buf);	
	SNMPVERSION.getString(buf);
	fprintf(fp,"\t\tSNMPVERSION = %s    [snmp版本     ]\n",buf);	
	RAMSIZE.getString(buf);
	fprintf(fp,"\t\tRAMSIZE = %s    [ramsize(B)   ]\n",buf);	
	FLASHSIZE.getString(buf);
	fprintf(fp,"\t\tFLASHSIZE = %s    [falshsize(B) ]\n",buf);	
	NVRAMSIZE.getString(buf);
	fprintf(fp,"\t\tNVRAMSIZE = %s    [nvramsize(B) ]\n",buf);	
	CABINET_ID.getString(buf);
	fprintf(fp,"\t\tCABINET_ID = %s    [所属机柜]\n",buf);	
	ROOM_ID.getString(buf);
	fprintf(fp,"\t\tROOM_ID = %s    []\n",buf);	
	IOSVERSION_ID.getString(buf);
	fprintf(fp,"\t\tIOSVERSION_ID = %s    [软件版本]\n",buf);	
	DESCRIPTION.getString(buf);
	fprintf(fp,"\t\tDESCRIPTION = %s    [系统描述]\n",buf);	
	USERNAME.getString(buf);
	fprintf(fp,"\t\tUSERNAME = %s    [登录用户名]\n",buf);	
	PASSWD.getString(buf);
	fprintf(fp,"\t\tPASSWD = %s    [登录密码]\n",buf);	
	ENPASSWD.getString(buf);
	fprintf(fp,"\t\tENPASSWD = %s    [enable密码]\n",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);	
	CFGSAVETYPE.getString(buf);
	fprintf(fp,"\t\tCFGSAVETYPE = %s    [配置备份协议]\n",buf);	
	DEVICETYPE.getString(buf);
	fprintf(fp,"\t\tDEVICETYPE = %s    [设备型号]\n",buf);	
	SENDSMS.getString(buf);
	fprintf(fp,"\t\tSENDSMS = %s    [是否短信告警]\n",buf);	
	ISSNMP.getString(buf);
	fprintf(fp,"\t\tISSNMP = %s    [是否自动snmp探测]\n",buf);	
	SLOTNUM.getString(buf);
	fprintf(fp,"\t\tSLOTNUM = %s    [槽位数]\n",buf);	
	ISPING.getString(buf);
	fprintf(fp,"\t\tISPING = %s    [是否自动ping]\n",buf);	
	IFNUM.getString(buf);
	fprintf(fp,"\t\tIFNUM = %s    [端口数量]\n",buf);	
	APPLICATION_ID.getString(buf);
	fprintf(fp,"\t\tAPPLICATION_ID = %s    [巡检分区]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDevice::dumpDiff(FILE *fp, const CWriteableSysNetDevice *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDevice = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);
	}
	MonitorType_ID.getString(buf);
	if (compare(MonitorType_ID.getValue(),pOriginal->MonitorType_ID.getValue())!=0)
	{
		pOriginal->MonitorType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType_ID = %s -> %s    [监控对象类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);
	}
	SysNetSubAreaID.getString(buf);
	if (compare(SysNetSubAreaID.getValue(),pOriginal->SysNetSubAreaID.getValue())!=0)
	{
		pOriginal->SysNetSubAreaID.getString(bufOriginal);
		fprintf(fp,"\t\tSysNetSubAreaID = %s -> %s    [SysNetSubAreaID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSysNetSubAreaID = %s    [SysNetSubAreaID]\n",buf);
	}
	CATEGORY_ID.getString(buf);
	if (compare(CATEGORY_ID.getValue(),pOriginal->CATEGORY_ID.getValue())!=0)
	{
		pOriginal->CATEGORY_ID.getString(bufOriginal);
		fprintf(fp,"\t\tCATEGORY_ID = %s -> %s    [分类ID  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCATEGORY_ID = %s    [分类ID  ]\n",buf);
	}
	FuctionArea.getString(buf);
	if (compare(FuctionArea.getValue(),pOriginal->FuctionArea.getValue())!=0)
	{
		pOriginal->FuctionArea.getString(bufOriginal);
		fprintf(fp,"\t\tFuctionArea = %s -> %s    [人为划分的职能区域  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFuctionArea = %s    [人为划分的职能区域  ]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [IP地址  ]\n",buf);
	}
	IPDECODE.getString(buf);
	if (compare(IPDECODE.getValue(),pOriginal->IPDECODE.getValue())!=0)
	{
		pOriginal->IPDECODE.getString(bufOriginal);
		fprintf(fp,"\t\tIPDECODE = %s -> %s    [IP码    ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPDECODE = %s    [IP码    ]\n",buf);
	}
	NAME.getString(buf);
	if (compare(NAME.getValue(),pOriginal->NAME.getValue())!=0)
	{
		pOriginal->NAME.getString(bufOriginal);
		fprintf(fp,"\t\tNAME = %s -> %s    [设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNAME = %s    [设备名称 ]\n",buf);
	}
	PORTNUMBER.getString(buf);
	if (compare(PORTNUMBER.getValue(),pOriginal->PORTNUMBER.getValue())!=0)
	{
		pOriginal->PORTNUMBER.getString(bufOriginal);
		fprintf(fp,"\t\tPORTNUMBER = %s -> %s    [             ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPORTNUMBER = %s    [             ]\n",buf);
	}
	CONFIGFILE.getString(buf);
	if (compare(CONFIGFILE.getValue(),pOriginal->CONFIGFILE.getValue())!=0)
	{
		pOriginal->CONFIGFILE.getString(bufOriginal);
		fprintf(fp,"\t\tCONFIGFILE = %s -> %s    [          ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONFIGFILE = %s    [          ]\n",buf);
	}
	RCOMMUNITY.getString(buf);
	if (compare(RCOMMUNITY.getValue(),pOriginal->RCOMMUNITY.getValue())!=0)
	{
		pOriginal->RCOMMUNITY.getString(bufOriginal);
		fprintf(fp,"\t\tRCOMMUNITY = %s -> %s    [共同体名  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRCOMMUNITY = %s    [共同体名  ]\n",buf);
	}
	SNMPVERSION.getString(buf);
	if (compare(SNMPVERSION.getValue(),pOriginal->SNMPVERSION.getValue())!=0)
	{
		pOriginal->SNMPVERSION.getString(bufOriginal);
		fprintf(fp,"\t\tSNMPVERSION = %s -> %s    [snmp版本     ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSNMPVERSION = %s    [snmp版本     ]\n",buf);
	}
	RAMSIZE.getString(buf);
	if (compare(RAMSIZE.getValue(),pOriginal->RAMSIZE.getValue())!=0)
	{
		pOriginal->RAMSIZE.getString(bufOriginal);
		fprintf(fp,"\t\tRAMSIZE = %s -> %s    [ramsize(B)   ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRAMSIZE = %s    [ramsize(B)   ]\n",buf);
	}
	FLASHSIZE.getString(buf);
	if (compare(FLASHSIZE.getValue(),pOriginal->FLASHSIZE.getValue())!=0)
	{
		pOriginal->FLASHSIZE.getString(bufOriginal);
		fprintf(fp,"\t\tFLASHSIZE = %s -> %s    [falshsize(B) ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFLASHSIZE = %s    [falshsize(B) ]\n",buf);
	}
	NVRAMSIZE.getString(buf);
	if (compare(NVRAMSIZE.getValue(),pOriginal->NVRAMSIZE.getValue())!=0)
	{
		pOriginal->NVRAMSIZE.getString(bufOriginal);
		fprintf(fp,"\t\tNVRAMSIZE = %s -> %s    [nvramsize(B) ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNVRAMSIZE = %s    [nvramsize(B) ]\n",buf);
	}
	CABINET_ID.getString(buf);
	if (compare(CABINET_ID.getValue(),pOriginal->CABINET_ID.getValue())!=0)
	{
		pOriginal->CABINET_ID.getString(bufOriginal);
		fprintf(fp,"\t\tCABINET_ID = %s -> %s    [所属机柜]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCABINET_ID = %s    [所属机柜]\n",buf);
	}
	ROOM_ID.getString(buf);
	if (compare(ROOM_ID.getValue(),pOriginal->ROOM_ID.getValue())!=0)
	{
		pOriginal->ROOM_ID.getString(bufOriginal);
		fprintf(fp,"\t\tROOM_ID = %s -> %s    []\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tROOM_ID = %s    []\n",buf);
	}
	IOSVERSION_ID.getString(buf);
	if (compare(IOSVERSION_ID.getValue(),pOriginal->IOSVERSION_ID.getValue())!=0)
	{
		pOriginal->IOSVERSION_ID.getString(bufOriginal);
		fprintf(fp,"\t\tIOSVERSION_ID = %s -> %s    [软件版本]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIOSVERSION_ID = %s    [软件版本]\n",buf);
	}
	DESCRIPTION.getString(buf);
	if (compare(DESCRIPTION.getValue(),pOriginal->DESCRIPTION.getValue())!=0)
	{
		pOriginal->DESCRIPTION.getString(bufOriginal);
		fprintf(fp,"\t\tDESCRIPTION = %s -> %s    [系统描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDESCRIPTION = %s    [系统描述]\n",buf);
	}
	USERNAME.getString(buf);
	if (compare(USERNAME.getValue(),pOriginal->USERNAME.getValue())!=0)
	{
		pOriginal->USERNAME.getString(bufOriginal);
		fprintf(fp,"\t\tUSERNAME = %s -> %s    [登录用户名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUSERNAME = %s    [登录用户名]\n",buf);
	}
	PASSWD.getString(buf);
	if (compare(PASSWD.getValue(),pOriginal->PASSWD.getValue())!=0)
	{
		pOriginal->PASSWD.getString(bufOriginal);
		fprintf(fp,"\t\tPASSWD = %s -> %s    [登录密码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPASSWD = %s    [登录密码]\n",buf);
	}
	ENPASSWD.getString(buf);
	if (compare(ENPASSWD.getValue(),pOriginal->ENPASSWD.getValue())!=0)
	{
		pOriginal->ENPASSWD.getString(bufOriginal);
		fprintf(fp,"\t\tENPASSWD = %s -> %s    [enable密码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tENPASSWD = %s    [enable密码]\n",buf);
	}
	MANUFACTORY_ID.getString(buf);
	if (compare(MANUFACTORY_ID.getValue(),pOriginal->MANUFACTORY_ID.getValue())!=0)
	{
		pOriginal->MANUFACTORY_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMANUFACTORY_ID = %s -> %s    [厂商类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);
	}
	CFGSAVETYPE.getString(buf);
	if (compare(CFGSAVETYPE.getValue(),pOriginal->CFGSAVETYPE.getValue())!=0)
	{
		pOriginal->CFGSAVETYPE.getString(bufOriginal);
		fprintf(fp,"\t\tCFGSAVETYPE = %s -> %s    [配置备份协议]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCFGSAVETYPE = %s    [配置备份协议]\n",buf);
	}
	DEVICETYPE.getString(buf);
	if (compare(DEVICETYPE.getValue(),pOriginal->DEVICETYPE.getValue())!=0)
	{
		pOriginal->DEVICETYPE.getString(bufOriginal);
		fprintf(fp,"\t\tDEVICETYPE = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDEVICETYPE = %s    [设备型号]\n",buf);
	}
	SENDSMS.getString(buf);
	if (compare(SENDSMS.getValue(),pOriginal->SENDSMS.getValue())!=0)
	{
		pOriginal->SENDSMS.getString(bufOriginal);
		fprintf(fp,"\t\tSENDSMS = %s -> %s    [是否短信告警]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSENDSMS = %s    [是否短信告警]\n",buf);
	}
	ISSNMP.getString(buf);
	if (compare(ISSNMP.getValue(),pOriginal->ISSNMP.getValue())!=0)
	{
		pOriginal->ISSNMP.getString(bufOriginal);
		fprintf(fp,"\t\tISSNMP = %s -> %s    [是否自动snmp探测]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tISSNMP = %s    [是否自动snmp探测]\n",buf);
	}
	SLOTNUM.getString(buf);
	if (compare(SLOTNUM.getValue(),pOriginal->SLOTNUM.getValue())!=0)
	{
		pOriginal->SLOTNUM.getString(bufOriginal);
		fprintf(fp,"\t\tSLOTNUM = %s -> %s    [槽位数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSLOTNUM = %s    [槽位数]\n",buf);
	}
	ISPING.getString(buf);
	if (compare(ISPING.getValue(),pOriginal->ISPING.getValue())!=0)
	{
		pOriginal->ISPING.getString(bufOriginal);
		fprintf(fp,"\t\tISPING = %s -> %s    [是否自动ping]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tISPING = %s    [是否自动ping]\n",buf);
	}
	IFNUM.getString(buf);
	if (compare(IFNUM.getValue(),pOriginal->IFNUM.getValue())!=0)
	{
		pOriginal->IFNUM.getString(bufOriginal);
		fprintf(fp,"\t\tIFNUM = %s -> %s    [端口数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIFNUM = %s    [端口数量]\n",buf);
	}
	APPLICATION_ID.getString(buf);
	if (compare(APPLICATION_ID.getValue(),pOriginal->APPLICATION_ID.getValue())!=0)
	{
		pOriginal->APPLICATION_ID.getString(bufOriginal);
		fprintf(fp,"\t\tAPPLICATION_ID = %s -> %s    [巡检分区]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAPPLICATION_ID = %s    [巡检分区]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDevice::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,",MonitorType_ID,%s",buf);	
	SysNetSubAreaID.getString(buf);
	fprintf(fp,",SysNetSubAreaID,%s",buf);	
	CATEGORY_ID.getString(buf);
	fprintf(fp,",CATEGORY_ID,%s",buf);	
	FuctionArea.getString(buf);
	fprintf(fp,",FuctionArea,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	IPDECODE.getString(buf);
	fprintf(fp,",IPDECODE,%s",buf);	
	NAME.getString(buf);
	fprintf(fp,",NAME,%s",buf);	
	PORTNUMBER.getString(buf);
	fprintf(fp,",PORTNUMBER,%s",buf);	
	CONFIGFILE.getString(buf);
	fprintf(fp,",CONFIGFILE,%s",buf);	
	RCOMMUNITY.getString(buf);
	fprintf(fp,",RCOMMUNITY,%s",buf);	
	SNMPVERSION.getString(buf);
	fprintf(fp,",SNMPVERSION,%s",buf);	
	RAMSIZE.getString(buf);
	fprintf(fp,",RAMSIZE,%s",buf);	
	FLASHSIZE.getString(buf);
	fprintf(fp,",FLASHSIZE,%s",buf);	
	NVRAMSIZE.getString(buf);
	fprintf(fp,",NVRAMSIZE,%s",buf);	
	CABINET_ID.getString(buf);
	fprintf(fp,",CABINET_ID,%s",buf);	
	ROOM_ID.getString(buf);
	fprintf(fp,",ROOM_ID,%s",buf);	
	IOSVERSION_ID.getString(buf);
	fprintf(fp,",IOSVERSION_ID,%s",buf);	
	DESCRIPTION.getString(buf);
	fprintf(fp,",DESCRIPTION,%s",buf);	
	USERNAME.getString(buf);
	fprintf(fp,",USERNAME,%s",buf);	
	PASSWD.getString(buf);
	fprintf(fp,",PASSWD,%s",buf);	
	ENPASSWD.getString(buf);
	fprintf(fp,",ENPASSWD,%s",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,",MANUFACTORY_ID,%s",buf);	
	CFGSAVETYPE.getString(buf);
	fprintf(fp,",CFGSAVETYPE,%s",buf);	
	DEVICETYPE.getString(buf);
	fprintf(fp,",DEVICETYPE,%s",buf);	
	SENDSMS.getString(buf);
	fprintf(fp,",SENDSMS,%s",buf);	
	ISSNMP.getString(buf);
	fprintf(fp,",ISSNMP,%s",buf);	
	SLOTNUM.getString(buf);
	fprintf(fp,",SLOTNUM,%s",buf);	
	ISPING.getString(buf);
	fprintf(fp,",ISPING,%s",buf);	
	IFNUM.getString(buf);
	fprintf(fp,",IFNUM,%s",buf);	
	APPLICATION_ID.getString(buf);
	fprintf(fp,",APPLICATION_ID,%s",buf);	
}

void CWriteableSysNetDevice::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonitorType_ID.getString(buf);
	sprintf(p,"MonitorType_ID=%s,",buf);
	p+=strlen(p);
	SysNetSubAreaID.getString(buf);
	sprintf(p,"SysNetSubAreaID=%s,",buf);
	p+=strlen(p);
	CATEGORY_ID.getString(buf);
	sprintf(p,"CATEGORY_ID=%s,",buf);
	p+=strlen(p);
	FuctionArea.getString(buf);
	sprintf(p,"FuctionArea=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	IPDECODE.getString(buf);
	sprintf(p,"IPDECODE=%s,",buf);
	p+=strlen(p);
	NAME.getString(buf);
	sprintf(p,"NAME=%s,",buf);
	p+=strlen(p);
	PORTNUMBER.getString(buf);
	sprintf(p,"PORTNUMBER=%s,",buf);
	p+=strlen(p);
	CONFIGFILE.getString(buf);
	sprintf(p,"CONFIGFILE=%s,",buf);
	p+=strlen(p);
	RCOMMUNITY.getString(buf);
	sprintf(p,"RCOMMUNITY=%s,",buf);
	p+=strlen(p);
	SNMPVERSION.getString(buf);
	sprintf(p,"SNMPVERSION=%s,",buf);
	p+=strlen(p);
	RAMSIZE.getString(buf);
	sprintf(p,"RAMSIZE=%s,",buf);
	p+=strlen(p);
	FLASHSIZE.getString(buf);
	sprintf(p,"FLASHSIZE=%s,",buf);
	p+=strlen(p);
	NVRAMSIZE.getString(buf);
	sprintf(p,"NVRAMSIZE=%s,",buf);
	p+=strlen(p);
	CABINET_ID.getString(buf);
	sprintf(p,"CABINET_ID=%s,",buf);
	p+=strlen(p);
	ROOM_ID.getString(buf);
	sprintf(p,"ROOM_ID=%s,",buf);
	p+=strlen(p);
	IOSVERSION_ID.getString(buf);
	sprintf(p,"IOSVERSION_ID=%s,",buf);
	p+=strlen(p);
	DESCRIPTION.getString(buf);
	sprintf(p,"DESCRIPTION=%s,",buf);
	p+=strlen(p);
	USERNAME.getString(buf);
	sprintf(p,"USERNAME=%s,",buf);
	p+=strlen(p);
	PASSWD.getString(buf);
	sprintf(p,"PASSWD=%s,",buf);
	p+=strlen(p);
	ENPASSWD.getString(buf);
	sprintf(p,"ENPASSWD=%s,",buf);
	p+=strlen(p);
	MANUFACTORY_ID.getString(buf);
	sprintf(p,"MANUFACTORY_ID=%s,",buf);
	p+=strlen(p);
	CFGSAVETYPE.getString(buf);
	sprintf(p,"CFGSAVETYPE=%s,",buf);
	p+=strlen(p);
	DEVICETYPE.getString(buf);
	sprintf(p,"DEVICETYPE=%s,",buf);
	p+=strlen(p);
	SENDSMS.getString(buf);
	sprintf(p,"SENDSMS=%s,",buf);
	p+=strlen(p);
	ISSNMP.getString(buf);
	sprintf(p,"ISSNMP=%s,",buf);
	p+=strlen(p);
	SLOTNUM.getString(buf);
	sprintf(p,"SLOTNUM=%s,",buf);
	p+=strlen(p);
	ISPING.getString(buf);
	sprintf(p,"ISPING=%s,",buf);
	p+=strlen(p);
	IFNUM.getString(buf);
	sprintf(p,"IFNUM=%s,",buf);
	p+=strlen(p);
	APPLICATION_ID.getString(buf);
	sprintf(p,"APPLICATION_ID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDevice::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDevice");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 监控对象",buf);
	MonitorType_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorType_ID=%s 监控对象类型",buf);
	SysNetSubAreaID.getString(buf);
	pLogger->output(indent+1,0,"SysNetSubAreaID=%s SysNetSubAreaID",buf);
	CATEGORY_ID.getString(buf);
	pLogger->output(indent+1,0,"CATEGORY_ID=%s 分类ID  ",buf);
	FuctionArea.getString(buf);
	pLogger->output(indent+1,0,"FuctionArea=%s 人为划分的职能区域  ",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s IP地址  ",buf);
	IPDECODE.getString(buf);
	pLogger->output(indent+1,0,"IPDECODE=%s IP码    ",buf);
	NAME.getString(buf);
	pLogger->output(indent+1,0,"NAME=%s 设备名称 ",buf);
	PORTNUMBER.getString(buf);
	pLogger->output(indent+1,0,"PORTNUMBER=%s              ",buf);
	CONFIGFILE.getString(buf);
	pLogger->output(indent+1,0,"CONFIGFILE=%s           ",buf);
	RCOMMUNITY.getString(buf);
	pLogger->output(indent+1,0,"RCOMMUNITY=%s 共同体名  ",buf);
	SNMPVERSION.getString(buf);
	pLogger->output(indent+1,0,"SNMPVERSION=%s snmp版本     ",buf);
	RAMSIZE.getString(buf);
	pLogger->output(indent+1,0,"RAMSIZE=%s ramsize(B)   ",buf);
	FLASHSIZE.getString(buf);
	pLogger->output(indent+1,0,"FLASHSIZE=%s falshsize(B) ",buf);
	NVRAMSIZE.getString(buf);
	pLogger->output(indent+1,0,"NVRAMSIZE=%s nvramsize(B) ",buf);
	CABINET_ID.getString(buf);
	pLogger->output(indent+1,0,"CABINET_ID=%s 所属机柜",buf);
	ROOM_ID.getString(buf);
	pLogger->output(indent+1,0,"ROOM_ID=%s ",buf);
	IOSVERSION_ID.getString(buf);
	pLogger->output(indent+1,0,"IOSVERSION_ID=%s 软件版本",buf);
	DESCRIPTION.getString(buf);
	pLogger->output(indent+1,0,"DESCRIPTION=%s 系统描述",buf);
	USERNAME.getString(buf);
	pLogger->output(indent+1,0,"USERNAME=%s 登录用户名",buf);
	PASSWD.getString(buf);
	pLogger->output(indent+1,0,"PASSWD=%s 登录密码",buf);
	ENPASSWD.getString(buf);
	pLogger->output(indent+1,0,"ENPASSWD=%s enable密码",buf);
	MANUFACTORY_ID.getString(buf);
	pLogger->output(indent+1,0,"MANUFACTORY_ID=%s 厂商类型",buf);
	CFGSAVETYPE.getString(buf);
	pLogger->output(indent+1,0,"CFGSAVETYPE=%s 配置备份协议",buf);
	DEVICETYPE.getString(buf);
	pLogger->output(indent+1,0,"DEVICETYPE=%s 设备型号",buf);
	SENDSMS.getString(buf);
	pLogger->output(indent+1,0,"SENDSMS=%s 是否短信告警",buf);
	ISSNMP.getString(buf);
	pLogger->output(indent+1,0,"ISSNMP=%s 是否自动snmp探测",buf);
	SLOTNUM.getString(buf);
	pLogger->output(indent+1,0,"SLOTNUM=%s 槽位数",buf);
	ISPING.getString(buf);
	pLogger->output(indent+1,0,"ISPING=%s 是否自动ping",buf);
	IFNUM.getString(buf);
	pLogger->output(indent+1,0,"IFNUM=%s 端口数量",buf);
	APPLICATION_ID.getString(buf);
	pLogger->output(indent+1,0,"APPLICATION_ID=%s 巡检分区",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDeviceIterator::~CSysNetDeviceIterator(void)
{
}


void CSysNetDeviceIterator::dump(FILE *output)
{
	CSysNetDevice *pSysNetDevice;
	
	while ((pSysNetDevice=next())!=NULL)
	{
		pSysNetDevice->dump(output);
	}
}



void CWriteableSysNetDeviceLinked::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,NetDeviceID,NetPortID,NetObjectID,NetPortType,LinkNetDeviceID,LinkNetPortID,LinkNetObjectID,LinkNetPortType,LinkSource\n");
}
	
void CWriteableSysNetDeviceLinked::init(void)
{
	ID.clear();
	NetDeviceID.clear();
	NetPortID.clear();
	NetObjectID.clear();
	NetPortType.clear();
	LinkNetDeviceID.clear();
	LinkNetPortID.clear();
	LinkNetObjectID.clear();
	LinkNetPortType.clear();
	LinkSource.clear();
}

int CWriteableSysNetDeviceLinked::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDeviceLinked),input)!=sizeof(CWriteableSysNetDeviceLinked))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDeviceLinked::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NetDeviceID=token;
		}
		else
		{
			NetDeviceID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NetPortID=token;
		}
		else
		{
			NetPortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NetObjectID=token;
		}
		else
		{
			NetObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NetPortType=token;
		}
		else
		{
			NetPortType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LinkNetDeviceID=token;
		}
		else
		{
			LinkNetDeviceID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LinkNetPortID=token;
		}
		else
		{
			LinkNetPortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LinkNetObjectID=token;
		}
		else
		{
			LinkNetObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LinkNetPortType=token;
		}
		else
		{
			LinkNetPortType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LinkSource=token;
		}
		else
		{
			LinkSource="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"NetDeviceID"))
			{
				NetDeviceID=token;
			}
			else if (!strcmp(fieldName,"NetPortID"))
			{
				NetPortID=token;
			}
			else if (!strcmp(fieldName,"NetObjectID"))
			{
				NetObjectID=token;
			}
			else if (!strcmp(fieldName,"NetPortType"))
			{
				NetPortType=token;
			}
			else if (!strcmp(fieldName,"LinkNetDeviceID"))
			{
				LinkNetDeviceID=token;
			}
			else if (!strcmp(fieldName,"LinkNetPortID"))
			{
				LinkNetPortID=token;
			}
			else if (!strcmp(fieldName,"LinkNetObjectID"))
			{
				LinkNetObjectID=token;
			}
			else if (!strcmp(fieldName,"LinkNetPortType"))
			{
				LinkNetPortType=token;
			}
			else if (!strcmp(fieldName,"LinkSource"))
			{
				LinkSource=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDeviceLinked::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDeviceLinked),output)!=sizeof(CWriteableSysNetDeviceLinked))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDeviceLinked::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NetDeviceID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NetPortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NetObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NetPortType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LinkNetDeviceID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LinkNetPortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LinkNetObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LinkNetPortType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LinkSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDeviceLinked::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDeviceLinked%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	NetDeviceID.getString(buf);
	fprintf(fp,"\t\tNetDeviceID = %s    [设备ID]\n",buf);	
	NetPortID.getString(buf);
	fprintf(fp,"\t\tNetPortID = %s    [设备端口ID]\n",buf);	
	NetObjectID.getString(buf);
	fprintf(fp,"\t\tNetObjectID = %s    [监控对象]\n",buf);	
	NetPortType.getString(buf);
	fprintf(fp,"\t\tNetPortType = %s    [监控对象端口类型]\n",buf);	
	LinkNetDeviceID.getString(buf);
	fprintf(fp,"\t\tLinkNetDeviceID = %s    [连接设备ID]\n",buf);	
	LinkNetPortID.getString(buf);
	fprintf(fp,"\t\tLinkNetPortID = %s    [连接设备端口ID]\n",buf);	
	LinkNetObjectID.getString(buf);
	fprintf(fp,"\t\tLinkNetObjectID = %s    [连接对象]\n",buf);	
	LinkNetPortType.getString(buf);
	fprintf(fp,"\t\tLinkNetPortType = %s    [连接对象端口类型]\n",buf);	
	LinkSource.getString(buf);
	fprintf(fp,"\t\tLinkSource = %s    [链接来源]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceLinked::dumpDiff(FILE *fp, const CWriteableSysNetDeviceLinked *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDeviceLinked = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	NetDeviceID.getString(buf);
	if (compare(NetDeviceID.getValue(),pOriginal->NetDeviceID.getValue())!=0)
	{
		pOriginal->NetDeviceID.getString(bufOriginal);
		fprintf(fp,"\t\tNetDeviceID = %s -> %s    [设备ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNetDeviceID = %s    [设备ID]\n",buf);
	}
	NetPortID.getString(buf);
	if (compare(NetPortID.getValue(),pOriginal->NetPortID.getValue())!=0)
	{
		pOriginal->NetPortID.getString(bufOriginal);
		fprintf(fp,"\t\tNetPortID = %s -> %s    [设备端口ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNetPortID = %s    [设备端口ID]\n",buf);
	}
	NetObjectID.getString(buf);
	if (compare(NetObjectID.getValue(),pOriginal->NetObjectID.getValue())!=0)
	{
		pOriginal->NetObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tNetObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNetObjectID = %s    [监控对象]\n",buf);
	}
	NetPortType.getString(buf);
	if (compare(NetPortType.getValue(),pOriginal->NetPortType.getValue())!=0)
	{
		pOriginal->NetPortType.getString(bufOriginal);
		fprintf(fp,"\t\tNetPortType = %s -> %s    [监控对象端口类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNetPortType = %s    [监控对象端口类型]\n",buf);
	}
	LinkNetDeviceID.getString(buf);
	if (compare(LinkNetDeviceID.getValue(),pOriginal->LinkNetDeviceID.getValue())!=0)
	{
		pOriginal->LinkNetDeviceID.getString(bufOriginal);
		fprintf(fp,"\t\tLinkNetDeviceID = %s -> %s    [连接设备ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLinkNetDeviceID = %s    [连接设备ID]\n",buf);
	}
	LinkNetPortID.getString(buf);
	if (compare(LinkNetPortID.getValue(),pOriginal->LinkNetPortID.getValue())!=0)
	{
		pOriginal->LinkNetPortID.getString(bufOriginal);
		fprintf(fp,"\t\tLinkNetPortID = %s -> %s    [连接设备端口ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLinkNetPortID = %s    [连接设备端口ID]\n",buf);
	}
	LinkNetObjectID.getString(buf);
	if (compare(LinkNetObjectID.getValue(),pOriginal->LinkNetObjectID.getValue())!=0)
	{
		pOriginal->LinkNetObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tLinkNetObjectID = %s -> %s    [连接对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLinkNetObjectID = %s    [连接对象]\n",buf);
	}
	LinkNetPortType.getString(buf);
	if (compare(LinkNetPortType.getValue(),pOriginal->LinkNetPortType.getValue())!=0)
	{
		pOriginal->LinkNetPortType.getString(bufOriginal);
		fprintf(fp,"\t\tLinkNetPortType = %s -> %s    [连接对象端口类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLinkNetPortType = %s    [连接对象端口类型]\n",buf);
	}
	LinkSource.getString(buf);
	if (compare(LinkSource.getValue(),pOriginal->LinkSource.getValue())!=0)
	{
		pOriginal->LinkSource.getString(bufOriginal);
		fprintf(fp,"\t\tLinkSource = %s -> %s    [链接来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLinkSource = %s    [链接来源]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceLinked::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	NetDeviceID.getString(buf);
	fprintf(fp,",NetDeviceID,%s",buf);	
	NetPortID.getString(buf);
	fprintf(fp,",NetPortID,%s",buf);	
	NetObjectID.getString(buf);
	fprintf(fp,",NetObjectID,%s",buf);	
	NetPortType.getString(buf);
	fprintf(fp,",NetPortType,%s",buf);	
	LinkNetDeviceID.getString(buf);
	fprintf(fp,",LinkNetDeviceID,%s",buf);	
	LinkNetPortID.getString(buf);
	fprintf(fp,",LinkNetPortID,%s",buf);	
	LinkNetObjectID.getString(buf);
	fprintf(fp,",LinkNetObjectID,%s",buf);	
	LinkNetPortType.getString(buf);
	fprintf(fp,",LinkNetPortType,%s",buf);	
	LinkSource.getString(buf);
	fprintf(fp,",LinkSource,%s",buf);	
}

void CWriteableSysNetDeviceLinked::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	NetDeviceID.getString(buf);
	sprintf(p,"NetDeviceID=%s,",buf);
	p+=strlen(p);
	NetPortID.getString(buf);
	sprintf(p,"NetPortID=%s,",buf);
	p+=strlen(p);
	NetObjectID.getString(buf);
	sprintf(p,"NetObjectID=%s,",buf);
	p+=strlen(p);
	NetPortType.getString(buf);
	sprintf(p,"NetPortType=%s,",buf);
	p+=strlen(p);
	LinkNetDeviceID.getString(buf);
	sprintf(p,"LinkNetDeviceID=%s,",buf);
	p+=strlen(p);
	LinkNetPortID.getString(buf);
	sprintf(p,"LinkNetPortID=%s,",buf);
	p+=strlen(p);
	LinkNetObjectID.getString(buf);
	sprintf(p,"LinkNetObjectID=%s,",buf);
	p+=strlen(p);
	LinkNetPortType.getString(buf);
	sprintf(p,"LinkNetPortType=%s,",buf);
	p+=strlen(p);
	LinkSource.getString(buf);
	sprintf(p,"LinkSource=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDeviceLinked::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDeviceLinked");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	NetDeviceID.getString(buf);
	pLogger->output(indent+1,0,"NetDeviceID=%s 设备ID",buf);
	NetPortID.getString(buf);
	pLogger->output(indent+1,0,"NetPortID=%s 设备端口ID",buf);
	NetObjectID.getString(buf);
	pLogger->output(indent+1,0,"NetObjectID=%s 监控对象",buf);
	NetPortType.getString(buf);
	pLogger->output(indent+1,0,"NetPortType=%s 监控对象端口类型",buf);
	LinkNetDeviceID.getString(buf);
	pLogger->output(indent+1,0,"LinkNetDeviceID=%s 连接设备ID",buf);
	LinkNetPortID.getString(buf);
	pLogger->output(indent+1,0,"LinkNetPortID=%s 连接设备端口ID",buf);
	LinkNetObjectID.getString(buf);
	pLogger->output(indent+1,0,"LinkNetObjectID=%s 连接对象",buf);
	LinkNetPortType.getString(buf);
	pLogger->output(indent+1,0,"LinkNetPortType=%s 连接对象端口类型",buf);
	LinkSource.getString(buf);
	pLogger->output(indent+1,0,"LinkSource=%s 链接来源",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDeviceLinkedIterator::~CSysNetDeviceLinkedIterator(void)
{
}


void CSysNetDeviceLinkedIterator::dump(FILE *output)
{
	CSysNetDeviceLinked *pSysNetDeviceLinked;
	
	while ((pSysNetDeviceLinked=next())!=NULL)
	{
		pSysNetDeviceLinked->dump(output);
	}
}



void CWriteableSysNetOID::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,Manufactory,DeviceType,CName,EName,OID,Unit,isTheTable\n");
}
	
void CWriteableSysNetOID::init(void)
{
	ID.clear();
	Manufactory.clear();
	DeviceType.clear();
	CName.clear();
	EName.clear();
	OID.clear();
	Unit.clear();
	isTheTable.clear();
}

int CWriteableSysNetOID::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetOID),input)!=sizeof(CWriteableSysNetOID))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetOID::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory=token;
		}
		else
		{
			Manufactory="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceType=token;
		}
		else
		{
			DeviceType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OID=token;
		}
		else
		{
			OID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Unit=token;
		}
		else
		{
			Unit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			isTheTable=token;
		}
		else
		{
			isTheTable="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"Manufactory"))
			{
				Manufactory=token;
			}
			else if (!strcmp(fieldName,"DeviceType"))
			{
				DeviceType=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"OID"))
			{
				OID=token;
			}
			else if (!strcmp(fieldName,"Unit"))
			{
				Unit=token;
			}
			else if (!strcmp(fieldName,"isTheTable"))
			{
				isTheTable=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetOID::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetOID),output)!=sizeof(CWriteableSysNetOID))
		return 0;
	else
		return 1;
}

int CWriteableSysNetOID::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Unit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	isTheTable.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetOID::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetOID%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	Manufactory.getString(buf);
	fprintf(fp,"\t\tManufactory = %s    [生产商名]\n",buf);	
	DeviceType.getString(buf);
	fprintf(fp,"\t\tDeviceType = %s    [设备型号]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);	
	OID.getString(buf);
	fprintf(fp,"\t\tOID = %s    [OID]\n",buf);	
	Unit.getString(buf);
	fprintf(fp,"\t\tUnit = %s    [单位]\n",buf);	
	isTheTable.getString(buf);
	fprintf(fp,"\t\tisTheTable = %s    [是否标量标志]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetOID::dumpDiff(FILE *fp, const CWriteableSysNetOID *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetOID = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	Manufactory.getString(buf);
	if (compare(Manufactory.getValue(),pOriginal->Manufactory.getValue())!=0)
	{
		pOriginal->Manufactory.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory = %s -> %s    [生产商名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory = %s    [生产商名]\n",buf);
	}
	DeviceType.getString(buf);
	if (compare(DeviceType.getValue(),pOriginal->DeviceType.getValue())!=0)
	{
		pOriginal->DeviceType.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceType = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceType = %s    [设备型号]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [OID中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [OID英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);
	}
	OID.getString(buf);
	if (compare(OID.getValue(),pOriginal->OID.getValue())!=0)
	{
		pOriginal->OID.getString(bufOriginal);
		fprintf(fp,"\t\tOID = %s -> %s    [OID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOID = %s    [OID]\n",buf);
	}
	Unit.getString(buf);
	if (compare(Unit.getValue(),pOriginal->Unit.getValue())!=0)
	{
		pOriginal->Unit.getString(bufOriginal);
		fprintf(fp,"\t\tUnit = %s -> %s    [单位]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnit = %s    [单位]\n",buf);
	}
	isTheTable.getString(buf);
	if (compare(isTheTable.getValue(),pOriginal->isTheTable.getValue())!=0)
	{
		pOriginal->isTheTable.getString(bufOriginal);
		fprintf(fp,"\t\tisTheTable = %s -> %s    [是否标量标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tisTheTable = %s    [是否标量标志]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetOID::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	Manufactory.getString(buf);
	fprintf(fp,",Manufactory,%s",buf);	
	DeviceType.getString(buf);
	fprintf(fp,",DeviceType,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	OID.getString(buf);
	fprintf(fp,",OID,%s",buf);	
	Unit.getString(buf);
	fprintf(fp,",Unit,%s",buf);	
	isTheTable.getString(buf);
	fprintf(fp,",isTheTable,%s",buf);	
}

void CWriteableSysNetOID::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	Manufactory.getString(buf);
	sprintf(p,"Manufactory=%s,",buf);
	p+=strlen(p);
	DeviceType.getString(buf);
	sprintf(p,"DeviceType=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	OID.getString(buf);
	sprintf(p,"OID=%s,",buf);
	p+=strlen(p);
	Unit.getString(buf);
	sprintf(p,"Unit=%s,",buf);
	p+=strlen(p);
	isTheTable.getString(buf);
	sprintf(p,"isTheTable=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetOID::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetOID");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	Manufactory.getString(buf);
	pLogger->output(indent+1,0,"Manufactory=%s 生产商名",buf);
	DeviceType.getString(buf);
	pLogger->output(indent+1,0,"DeviceType=%s 设备型号",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s OID中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s OID英文名",buf);
	OID.getString(buf);
	pLogger->output(indent+1,0,"OID=%s OID",buf);
	Unit.getString(buf);
	pLogger->output(indent+1,0,"Unit=%s 单位",buf);
	isTheTable.getString(buf);
	pLogger->output(indent+1,0,"isTheTable=%s 是否标量标志",buf);
	pLogger->output(indent,0,"}");
}

CSysNetOIDIterator::~CSysNetOIDIterator(void)
{
}


void CSysNetOIDIterator::dump(FILE *output)
{
	CSysNetOID *pSysNetOID;
	
	while ((pSysNetOID=next())!=NULL)
	{
		pSysNetOID->dump(output);
	}
}



void CWriteableSysNetDeviceType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,Manufactory,DeviceType\n");
}
	
void CWriteableSysNetDeviceType::init(void)
{
	ID.clear();
	Manufactory.clear();
	DeviceType.clear();
}

int CWriteableSysNetDeviceType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDeviceType),input)!=sizeof(CWriteableSysNetDeviceType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDeviceType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory=token;
		}
		else
		{
			Manufactory="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceType=token;
		}
		else
		{
			DeviceType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"Manufactory"))
			{
				Manufactory=token;
			}
			else if (!strcmp(fieldName,"DeviceType"))
			{
				DeviceType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDeviceType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDeviceType),output)!=sizeof(CWriteableSysNetDeviceType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDeviceType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDeviceType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDeviceType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	Manufactory.getString(buf);
	fprintf(fp,"\t\tManufactory = %s    [生产商名]\n",buf);	
	DeviceType.getString(buf);
	fprintf(fp,"\t\tDeviceType = %s    [设备型号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceType::dumpDiff(FILE *fp, const CWriteableSysNetDeviceType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDeviceType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	Manufactory.getString(buf);
	if (compare(Manufactory.getValue(),pOriginal->Manufactory.getValue())!=0)
	{
		pOriginal->Manufactory.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory = %s -> %s    [生产商名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory = %s    [生产商名]\n",buf);
	}
	DeviceType.getString(buf);
	if (compare(DeviceType.getValue(),pOriginal->DeviceType.getValue())!=0)
	{
		pOriginal->DeviceType.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceType = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceType = %s    [设备型号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	Manufactory.getString(buf);
	fprintf(fp,",Manufactory,%s",buf);	
	DeviceType.getString(buf);
	fprintf(fp,",DeviceType,%s",buf);	
}

void CWriteableSysNetDeviceType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	Manufactory.getString(buf);
	sprintf(p,"Manufactory=%s,",buf);
	p+=strlen(p);
	DeviceType.getString(buf);
	sprintf(p,"DeviceType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDeviceType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDeviceType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	Manufactory.getString(buf);
	pLogger->output(indent+1,0,"Manufactory=%s 生产商名",buf);
	DeviceType.getString(buf);
	pLogger->output(indent+1,0,"DeviceType=%s 设备型号",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDeviceTypeIterator::~CSysNetDeviceTypeIterator(void)
{
}


void CSysNetDeviceTypeIterator::dump(FILE *output)
{
	CSysNetDeviceType *pSysNetDeviceType;
	
	while ((pSysNetDeviceType=next())!=NULL)
	{
		pSysNetDeviceType->dump(output);
	}
}



void CWriteableSysNetTimePolicy::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,PolicyType,PolicyString,TradingDay,Description,Operation\n");
}
	
void CWriteableSysNetTimePolicy::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	PolicyType.clear();
	PolicyString.clear();
	TradingDay.clear();
	Description.clear();
	Operation.clear();
}

int CWriteableSysNetTimePolicy::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetTimePolicy),input)!=sizeof(CWriteableSysNetTimePolicy))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetTimePolicy::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PolicyType=token;
		}
		else
		{
			PolicyType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PolicyString=token;
		}
		else
		{
			PolicyString="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Description=token;
		}
		else
		{
			Description="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Operation=token;
		}
		else
		{
			Operation="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"PolicyType"))
			{
				PolicyType=token;
			}
			else if (!strcmp(fieldName,"PolicyString"))
			{
				PolicyString=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"Description"))
			{
				Description=token;
			}
			else if (!strcmp(fieldName,"Operation"))
			{
				Operation=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetTimePolicy::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetTimePolicy),output)!=sizeof(CWriteableSysNetTimePolicy))
		return 0;
	else
		return 1;
}

int CWriteableSysNetTimePolicy::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PolicyType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PolicyString.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Description.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Operation.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetTimePolicy::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetTimePolicy%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [时间策略中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [时间策略英文名]\n",buf);	
	PolicyType.getString(buf);
	fprintf(fp,"\t\tPolicyType = %s    [策略类型]\n",buf);	
	PolicyString.getString(buf);
	fprintf(fp,"\t\tPolicyString = %s    [策略项配置串]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日限制]\n",buf);	
	Description.getString(buf);
	fprintf(fp,"\t\tDescription = %s    [策略项描述]\n",buf);	
	Operation.getString(buf);
	fprintf(fp,"\t\tOperation = %s    [操作类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetTimePolicy::dumpDiff(FILE *fp, const CWriteableSysNetTimePolicy *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetTimePolicy = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [时间策略中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [时间策略中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [时间策略英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [时间策略英文名]\n",buf);
	}
	PolicyType.getString(buf);
	if (compare(PolicyType.getValue(),pOriginal->PolicyType.getValue())!=0)
	{
		pOriginal->PolicyType.getString(bufOriginal);
		fprintf(fp,"\t\tPolicyType = %s -> %s    [策略类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPolicyType = %s    [策略类型]\n",buf);
	}
	PolicyString.getString(buf);
	if (compare(PolicyString.getValue(),pOriginal->PolicyString.getValue())!=0)
	{
		pOriginal->PolicyString.getString(bufOriginal);
		fprintf(fp,"\t\tPolicyString = %s -> %s    [策略项配置串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPolicyString = %s    [策略项配置串]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日限制]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日限制]\n",buf);
	}
	Description.getString(buf);
	if (compare(Description.getValue(),pOriginal->Description.getValue())!=0)
	{
		pOriginal->Description.getString(bufOriginal);
		fprintf(fp,"\t\tDescription = %s -> %s    [策略项描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDescription = %s    [策略项描述]\n",buf);
	}
	Operation.getString(buf);
	if (compare(Operation.getValue(),pOriginal->Operation.getValue())!=0)
	{
		pOriginal->Operation.getString(bufOriginal);
		fprintf(fp,"\t\tOperation = %s -> %s    [操作类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperation = %s    [操作类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetTimePolicy::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	PolicyType.getString(buf);
	fprintf(fp,",PolicyType,%s",buf);	
	PolicyString.getString(buf);
	fprintf(fp,",PolicyString,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	Description.getString(buf);
	fprintf(fp,",Description,%s",buf);	
	Operation.getString(buf);
	fprintf(fp,",Operation,%s",buf);	
}

void CWriteableSysNetTimePolicy::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	PolicyType.getString(buf);
	sprintf(p,"PolicyType=%s,",buf);
	p+=strlen(p);
	PolicyString.getString(buf);
	sprintf(p,"PolicyString=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	Description.getString(buf);
	sprintf(p,"Description=%s,",buf);
	p+=strlen(p);
	Operation.getString(buf);
	sprintf(p,"Operation=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetTimePolicy::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetTimePolicy");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 时间策略中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 时间策略英文名",buf);
	PolicyType.getString(buf);
	pLogger->output(indent+1,0,"PolicyType=%s 策略类型",buf);
	PolicyString.getString(buf);
	pLogger->output(indent+1,0,"PolicyString=%s 策略项配置串",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日限制",buf);
	Description.getString(buf);
	pLogger->output(indent+1,0,"Description=%s 策略项描述",buf);
	Operation.getString(buf);
	pLogger->output(indent+1,0,"Operation=%s 操作类型",buf);
	pLogger->output(indent,0,"}");
}

CSysNetTimePolicyIterator::~CSysNetTimePolicyIterator(void)
{
}


void CSysNetTimePolicyIterator::dump(FILE *output)
{
	CSysNetTimePolicy *pSysNetTimePolicy;
	
	while ((pSysNetTimePolicy=next())!=NULL)
	{
		pSysNetTimePolicy->dump(output);
	}
}



void CWriteableSysNetGatherTask::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ObjectID,AttrType,PolicyTypeID,DataType,TypeFlag\n");
}
	
void CWriteableSysNetGatherTask::init(void)
{
	ID.clear();
	ObjectID.clear();
	AttrType.clear();
	PolicyTypeID.clear();
	DataType.clear();
	TypeFlag.clear();
}

int CWriteableSysNetGatherTask::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetGatherTask),input)!=sizeof(CWriteableSysNetGatherTask))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetGatherTask::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType=token;
		}
		else
		{
			AttrType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PolicyTypeID=token;
		}
		else
		{
			PolicyTypeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DataType=token;
		}
		else
		{
			DataType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TypeFlag=token;
		}
		else
		{
			TypeFlag="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"AttrType"))
			{
				AttrType=token;
			}
			else if (!strcmp(fieldName,"PolicyTypeID"))
			{
				PolicyTypeID=token;
			}
			else if (!strcmp(fieldName,"DataType"))
			{
				DataType=token;
			}
			else if (!strcmp(fieldName,"TypeFlag"))
			{
				TypeFlag=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetGatherTask::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetGatherTask),output)!=sizeof(CWriteableSysNetGatherTask))
		return 0;
	else
		return 1;
}

int CWriteableSysNetGatherTask::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PolicyTypeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DataType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TypeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetGatherTask::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetGatherTask%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);	
	AttrType.getString(buf);
	fprintf(fp,"\t\tAttrType = %s    [网络监控指标类型]\n",buf);	
	PolicyTypeID.getString(buf);
	fprintf(fp,"\t\tPolicyTypeID = %s    [时间策略ID]\n",buf);	
	DataType.getString(buf);
	fprintf(fp,"\t\tDataType = %s    [返回类型]\n",buf);	
	TypeFlag.getString(buf);
	fprintf(fp,"\t\tTypeFlag = %s    [类型标识]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetGatherTask::dumpDiff(FILE *fp, const CWriteableSysNetGatherTask *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetGatherTask = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [网络监控对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);
	}
	AttrType.getString(buf);
	if (compare(AttrType.getValue(),pOriginal->AttrType.getValue())!=0)
	{
		pOriginal->AttrType.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType = %s -> %s    [网络监控指标类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType = %s    [网络监控指标类型]\n",buf);
	}
	PolicyTypeID.getString(buf);
	if (compare(PolicyTypeID.getValue(),pOriginal->PolicyTypeID.getValue())!=0)
	{
		pOriginal->PolicyTypeID.getString(bufOriginal);
		fprintf(fp,"\t\tPolicyTypeID = %s -> %s    [时间策略ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPolicyTypeID = %s    [时间策略ID]\n",buf);
	}
	DataType.getString(buf);
	if (compare(DataType.getValue(),pOriginal->DataType.getValue())!=0)
	{
		pOriginal->DataType.getString(bufOriginal);
		fprintf(fp,"\t\tDataType = %s -> %s    [返回类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDataType = %s    [返回类型]\n",buf);
	}
	TypeFlag.getString(buf);
	if (compare(TypeFlag.getValue(),pOriginal->TypeFlag.getValue())!=0)
	{
		pOriginal->TypeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tTypeFlag = %s -> %s    [类型标识]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTypeFlag = %s    [类型标识]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetGatherTask::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	AttrType.getString(buf);
	fprintf(fp,",AttrType,%s",buf);	
	PolicyTypeID.getString(buf);
	fprintf(fp,",PolicyTypeID,%s",buf);	
	DataType.getString(buf);
	fprintf(fp,",DataType,%s",buf);	
	TypeFlag.getString(buf);
	fprintf(fp,",TypeFlag,%s",buf);	
}

void CWriteableSysNetGatherTask::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	AttrType.getString(buf);
	sprintf(p,"AttrType=%s,",buf);
	p+=strlen(p);
	PolicyTypeID.getString(buf);
	sprintf(p,"PolicyTypeID=%s,",buf);
	p+=strlen(p);
	DataType.getString(buf);
	sprintf(p,"DataType=%s,",buf);
	p+=strlen(p);
	TypeFlag.getString(buf);
	sprintf(p,"TypeFlag=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetGatherTask::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetGatherTask");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 网络监控对象ID",buf);
	AttrType.getString(buf);
	pLogger->output(indent+1,0,"AttrType=%s 网络监控指标类型",buf);
	PolicyTypeID.getString(buf);
	pLogger->output(indent+1,0,"PolicyTypeID=%s 时间策略ID",buf);
	DataType.getString(buf);
	pLogger->output(indent+1,0,"DataType=%s 返回类型",buf);
	TypeFlag.getString(buf);
	pLogger->output(indent+1,0,"TypeFlag=%s 类型标识",buf);
	pLogger->output(indent,0,"}");
}

CSysNetGatherTaskIterator::~CSysNetGatherTaskIterator(void)
{
}


void CSysNetGatherTaskIterator::dump(FILE *output)
{
	CSysNetGatherTask *pSysNetGatherTask;
	
	while ((pSysNetGatherTask=next())!=NULL)
	{
		pSysNetGatherTask->dump(output);
	}
}



void CWriteableSysNetDeviceCategory::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetDeviceCategory::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetDeviceCategory::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDeviceCategory),input)!=sizeof(CWriteableSysNetDeviceCategory))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDeviceCategory::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDeviceCategory::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDeviceCategory),output)!=sizeof(CWriteableSysNetDeviceCategory))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDeviceCategory::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDeviceCategory::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDeviceCategory%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [类别中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [类别英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceCategory::dumpDiff(FILE *fp, const CWriteableSysNetDeviceCategory *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDeviceCategory = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [类别中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [类别中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [类别英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [类别英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDeviceCategory::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetDeviceCategory::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDeviceCategory::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDeviceCategory");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 类别中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 类别英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDeviceCategoryIterator::~CSysNetDeviceCategoryIterator(void)
{
}


void CSysNetDeviceCategoryIterator::dump(FILE *output)
{
	CSysNetDeviceCategory *pSysNetDeviceCategory;
	
	while ((pSysNetDeviceCategory=next())!=NULL)
	{
		pSysNetDeviceCategory->dump(output);
	}
}



void CWriteableSysNetManufactory::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetManufactory::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetManufactory::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetManufactory),input)!=sizeof(CWriteableSysNetManufactory))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetManufactory::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetManufactory::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetManufactory),output)!=sizeof(CWriteableSysNetManufactory))
		return 0;
	else
		return 1;
}

int CWriteableSysNetManufactory::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetManufactory::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetManufactory%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [厂商中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [厂商英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetManufactory::dumpDiff(FILE *fp, const CWriteableSysNetManufactory *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetManufactory = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [厂商中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [厂商中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [厂商英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [厂商英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetManufactory::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetManufactory::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetManufactory::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetManufactory");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 厂商中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 厂商英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetManufactoryIterator::~CSysNetManufactoryIterator(void)
{
}


void CSysNetManufactoryIterator::dump(FILE *output)
{
	CSysNetManufactory *pSysNetManufactory;
	
	while ((pSysNetManufactory=next())!=NULL)
	{
		pSysNetManufactory->dump(output);
	}
}



void CWriteableSysNetCommunity::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,IPADDR,COMMUNITY\n");
}
	
void CWriteableSysNetCommunity::init(void)
{
	ID.clear();
	IPADDR.clear();
	COMMUNITY.clear();
}

int CWriteableSysNetCommunity::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetCommunity),input)!=sizeof(CWriteableSysNetCommunity))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetCommunity::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			COMMUNITY=token;
		}
		else
		{
			COMMUNITY="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"COMMUNITY"))
			{
				COMMUNITY=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetCommunity::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetCommunity),output)!=sizeof(CWriteableSysNetCommunity))
		return 0;
	else
		return 1;
}

int CWriteableSysNetCommunity::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	COMMUNITY.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetCommunity::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetCommunity%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [IP地址]\n",buf);	
	COMMUNITY.getString(buf);
	fprintf(fp,"\t\tCOMMUNITY = %s    [共同体名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetCommunity::dumpDiff(FILE *fp, const CWriteableSysNetCommunity *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetCommunity = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [IP地址]\n",buf);
	}
	COMMUNITY.getString(buf);
	if (compare(COMMUNITY.getValue(),pOriginal->COMMUNITY.getValue())!=0)
	{
		pOriginal->COMMUNITY.getString(bufOriginal);
		fprintf(fp,"\t\tCOMMUNITY = %s -> %s    [共同体名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCOMMUNITY = %s    [共同体名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetCommunity::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	COMMUNITY.getString(buf);
	fprintf(fp,",COMMUNITY,%s",buf);	
}

void CWriteableSysNetCommunity::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	COMMUNITY.getString(buf);
	sprintf(p,"COMMUNITY=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetCommunity::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetCommunity");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s IP地址",buf);
	COMMUNITY.getString(buf);
	pLogger->output(indent+1,0,"COMMUNITY=%s 共同体名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetCommunityIterator::~CSysNetCommunityIterator(void)
{
}


void CSysNetCommunityIterator::dump(FILE *output)
{
	CSysNetCommunity *pSysNetCommunity;
	
	while ((pSysNetCommunity=next())!=NULL)
	{
		pSysNetCommunity->dump(output);
	}
}



void CWriteableSysNetPortType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,Description\n");
}
	
void CWriteableSysNetPortType::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	Description.clear();
}

int CWriteableSysNetPortType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetPortType),input)!=sizeof(CWriteableSysNetPortType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetPortType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Description=token;
		}
		else
		{
			Description="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"Description"))
			{
				Description=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetPortType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetPortType),output)!=sizeof(CWriteableSysNetPortType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetPortType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Description.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetPortType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetPortType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [英文名]\n",buf);	
	Description.getString(buf);
	fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPortType::dumpDiff(FILE *fp, const CWriteableSysNetPortType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetPortType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [英文名]\n",buf);
	}
	Description.getString(buf);
	if (compare(Description.getValue(),pOriginal->Description.getValue())!=0)
	{
		pOriginal->Description.getString(bufOriginal);
		fprintf(fp,"\t\tDescription = %s -> %s    [描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPortType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	Description.getString(buf);
	fprintf(fp,",Description,%s",buf);	
}

void CWriteableSysNetPortType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	Description.getString(buf);
	sprintf(p,"Description=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetPortType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetPortType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 英文名",buf);
	Description.getString(buf);
	pLogger->output(indent+1,0,"Description=%s 描述",buf);
	pLogger->output(indent,0,"}");
}

CSysNetPortTypeIterator::~CSysNetPortTypeIterator(void)
{
}


void CSysNetPortTypeIterator::dump(FILE *output)
{
	CSysNetPortType *pSysNetPortType;
	
	while ((pSysNetPortType=next())!=NULL)
	{
		pSysNetPortType->dump(output);
	}
}



void CWriteableSysNetInterface::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ObjectID,MonitorType_ID,IfType,EName,IpAddress,IpMask,IfStatus,MAC,DeviceID,DeviceObjectID,DeviceIndex,isPolling,Description\n");
}
	
void CWriteableSysNetInterface::init(void)
{
	ID.clear();
	ObjectID.clear();
	MonitorType_ID.clear();
	IfType.clear();
	EName.clear();
	IpAddress.clear();
	IpMask.clear();
	IfStatus.clear();
	MAC.clear();
	DeviceID.clear();
	DeviceObjectID.clear();
	DeviceIndex.clear();
	isPolling.clear();
	Description.clear();
}

int CWriteableSysNetInterface::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetInterface),input)!=sizeof(CWriteableSysNetInterface))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetInterface::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType_ID=token;
		}
		else
		{
			MonitorType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IfType=token;
		}
		else
		{
			IfType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IpAddress=token;
		}
		else
		{
			IpAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IpMask=token;
		}
		else
		{
			IpMask="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IfStatus=token;
		}
		else
		{
			IfStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MAC=token;
		}
		else
		{
			MAC="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceID=token;
		}
		else
		{
			DeviceID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceObjectID=token;
		}
		else
		{
			DeviceObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceIndex=token;
		}
		else
		{
			DeviceIndex="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			isPolling=token;
		}
		else
		{
			isPolling="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Description=token;
		}
		else
		{
			Description="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonitorType_ID"))
			{
				MonitorType_ID=token;
			}
			else if (!strcmp(fieldName,"IfType"))
			{
				IfType=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"IpAddress"))
			{
				IpAddress=token;
			}
			else if (!strcmp(fieldName,"IpMask"))
			{
				IpMask=token;
			}
			else if (!strcmp(fieldName,"IfStatus"))
			{
				IfStatus=token;
			}
			else if (!strcmp(fieldName,"MAC"))
			{
				MAC=token;
			}
			else if (!strcmp(fieldName,"DeviceID"))
			{
				DeviceID=token;
			}
			else if (!strcmp(fieldName,"DeviceObjectID"))
			{
				DeviceObjectID=token;
			}
			else if (!strcmp(fieldName,"DeviceIndex"))
			{
				DeviceIndex=token;
			}
			else if (!strcmp(fieldName,"isPolling"))
			{
				isPolling=token;
			}
			else if (!strcmp(fieldName,"Description"))
			{
				Description=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetInterface::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetInterface),output)!=sizeof(CWriteableSysNetInterface))
		return 0;
	else
		return 1;
}

int CWriteableSysNetInterface::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IfType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IpAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IpMask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IfStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MAC.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceIndex.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	isPolling.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Description.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetInterface::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetInterface%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);	
	IfType.getString(buf);
	fprintf(fp,"\t\tIfType = %s    [端口类型]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [端口名]\n",buf);	
	IpAddress.getString(buf);
	fprintf(fp,"\t\tIpAddress = %s    [IP地址]\n",buf);	
	IpMask.getString(buf);
	fprintf(fp,"\t\tIpMask = %s    [掩码]\n",buf);	
	IfStatus.getString(buf);
	fprintf(fp,"\t\tIfStatus = %s    [端口状态]\n",buf);	
	MAC.getString(buf);
	fprintf(fp,"\t\tMAC = %s    [物理地址]\n",buf);	
	DeviceID.getString(buf);
	fprintf(fp,"\t\tDeviceID = %s    [所属设备ID]\n",buf);	
	DeviceObjectID.getString(buf);
	fprintf(fp,"\t\tDeviceObjectID = %s    [所属设备ObjectID]\n",buf);	
	DeviceIndex.getString(buf);
	fprintf(fp,"\t\tDeviceIndex = %s    [所属设备端口索引]\n",buf);	
	isPolling.getString(buf);
	fprintf(fp,"\t\tisPolling = %s    [是否轮询]\n",buf);	
	Description.getString(buf);
	fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetInterface::dumpDiff(FILE *fp, const CWriteableSysNetInterface *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetInterface = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [监控对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [监控对象]\n",buf);
	}
	MonitorType_ID.getString(buf);
	if (compare(MonitorType_ID.getValue(),pOriginal->MonitorType_ID.getValue())!=0)
	{
		pOriginal->MonitorType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType_ID = %s -> %s    [监控对象类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);
	}
	IfType.getString(buf);
	if (compare(IfType.getValue(),pOriginal->IfType.getValue())!=0)
	{
		pOriginal->IfType.getString(bufOriginal);
		fprintf(fp,"\t\tIfType = %s -> %s    [端口类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIfType = %s    [端口类型]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [端口名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [端口名]\n",buf);
	}
	IpAddress.getString(buf);
	if (compare(IpAddress.getValue(),pOriginal->IpAddress.getValue())!=0)
	{
		pOriginal->IpAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIpAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIpAddress = %s    [IP地址]\n",buf);
	}
	IpMask.getString(buf);
	if (compare(IpMask.getValue(),pOriginal->IpMask.getValue())!=0)
	{
		pOriginal->IpMask.getString(bufOriginal);
		fprintf(fp,"\t\tIpMask = %s -> %s    [掩码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIpMask = %s    [掩码]\n",buf);
	}
	IfStatus.getString(buf);
	if (compare(IfStatus.getValue(),pOriginal->IfStatus.getValue())!=0)
	{
		pOriginal->IfStatus.getString(bufOriginal);
		fprintf(fp,"\t\tIfStatus = %s -> %s    [端口状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIfStatus = %s    [端口状态]\n",buf);
	}
	MAC.getString(buf);
	if (compare(MAC.getValue(),pOriginal->MAC.getValue())!=0)
	{
		pOriginal->MAC.getString(bufOriginal);
		fprintf(fp,"\t\tMAC = %s -> %s    [物理地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMAC = %s    [物理地址]\n",buf);
	}
	DeviceID.getString(buf);
	if (compare(DeviceID.getValue(),pOriginal->DeviceID.getValue())!=0)
	{
		pOriginal->DeviceID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceID = %s -> %s    [所属设备ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceID = %s    [所属设备ID]\n",buf);
	}
	DeviceObjectID.getString(buf);
	if (compare(DeviceObjectID.getValue(),pOriginal->DeviceObjectID.getValue())!=0)
	{
		pOriginal->DeviceObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceObjectID = %s -> %s    [所属设备ObjectID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceObjectID = %s    [所属设备ObjectID]\n",buf);
	}
	DeviceIndex.getString(buf);
	if (compare(DeviceIndex.getValue(),pOriginal->DeviceIndex.getValue())!=0)
	{
		pOriginal->DeviceIndex.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceIndex = %s -> %s    [所属设备端口索引]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceIndex = %s    [所属设备端口索引]\n",buf);
	}
	isPolling.getString(buf);
	if (compare(isPolling.getValue(),pOriginal->isPolling.getValue())!=0)
	{
		pOriginal->isPolling.getString(bufOriginal);
		fprintf(fp,"\t\tisPolling = %s -> %s    [是否轮询]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tisPolling = %s    [是否轮询]\n",buf);
	}
	Description.getString(buf);
	if (compare(Description.getValue(),pOriginal->Description.getValue())!=0)
	{
		pOriginal->Description.getString(bufOriginal);
		fprintf(fp,"\t\tDescription = %s -> %s    [描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetInterface::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,",MonitorType_ID,%s",buf);	
	IfType.getString(buf);
	fprintf(fp,",IfType,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	IpAddress.getString(buf);
	fprintf(fp,",IpAddress,%s",buf);	
	IpMask.getString(buf);
	fprintf(fp,",IpMask,%s",buf);	
	IfStatus.getString(buf);
	fprintf(fp,",IfStatus,%s",buf);	
	MAC.getString(buf);
	fprintf(fp,",MAC,%s",buf);	
	DeviceID.getString(buf);
	fprintf(fp,",DeviceID,%s",buf);	
	DeviceObjectID.getString(buf);
	fprintf(fp,",DeviceObjectID,%s",buf);	
	DeviceIndex.getString(buf);
	fprintf(fp,",DeviceIndex,%s",buf);	
	isPolling.getString(buf);
	fprintf(fp,",isPolling,%s",buf);	
	Description.getString(buf);
	fprintf(fp,",Description,%s",buf);	
}

void CWriteableSysNetInterface::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonitorType_ID.getString(buf);
	sprintf(p,"MonitorType_ID=%s,",buf);
	p+=strlen(p);
	IfType.getString(buf);
	sprintf(p,"IfType=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	IpAddress.getString(buf);
	sprintf(p,"IpAddress=%s,",buf);
	p+=strlen(p);
	IpMask.getString(buf);
	sprintf(p,"IpMask=%s,",buf);
	p+=strlen(p);
	IfStatus.getString(buf);
	sprintf(p,"IfStatus=%s,",buf);
	p+=strlen(p);
	MAC.getString(buf);
	sprintf(p,"MAC=%s,",buf);
	p+=strlen(p);
	DeviceID.getString(buf);
	sprintf(p,"DeviceID=%s,",buf);
	p+=strlen(p);
	DeviceObjectID.getString(buf);
	sprintf(p,"DeviceObjectID=%s,",buf);
	p+=strlen(p);
	DeviceIndex.getString(buf);
	sprintf(p,"DeviceIndex=%s,",buf);
	p+=strlen(p);
	isPolling.getString(buf);
	sprintf(p,"isPolling=%s,",buf);
	p+=strlen(p);
	Description.getString(buf);
	sprintf(p,"Description=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetInterface::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetInterface");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 监控对象",buf);
	MonitorType_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorType_ID=%s 监控对象类型",buf);
	IfType.getString(buf);
	pLogger->output(indent+1,0,"IfType=%s 端口类型",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 端口名",buf);
	IpAddress.getString(buf);
	pLogger->output(indent+1,0,"IpAddress=%s IP地址",buf);
	IpMask.getString(buf);
	pLogger->output(indent+1,0,"IpMask=%s 掩码",buf);
	IfStatus.getString(buf);
	pLogger->output(indent+1,0,"IfStatus=%s 端口状态",buf);
	MAC.getString(buf);
	pLogger->output(indent+1,0,"MAC=%s 物理地址",buf);
	DeviceID.getString(buf);
	pLogger->output(indent+1,0,"DeviceID=%s 所属设备ID",buf);
	DeviceObjectID.getString(buf);
	pLogger->output(indent+1,0,"DeviceObjectID=%s 所属设备ObjectID",buf);
	DeviceIndex.getString(buf);
	pLogger->output(indent+1,0,"DeviceIndex=%s 所属设备端口索引",buf);
	isPolling.getString(buf);
	pLogger->output(indent+1,0,"isPolling=%s 是否轮询",buf);
	Description.getString(buf);
	pLogger->output(indent+1,0,"Description=%s 描述",buf);
	pLogger->output(indent,0,"}");
}

CSysNetInterfaceIterator::~CSysNetInterfaceIterator(void)
{
}


void CSysNetInterfaceIterator::dump(FILE *output)
{
	CSysNetInterface *pSysNetInterface;
	
	while ((pSysNetInterface=next())!=NULL)
	{
		pSysNetInterface->dump(output);
	}
}



void CWriteableSysNetGeneralOID::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,OID,Unit,isTheTable\n");
}
	
void CWriteableSysNetGeneralOID::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	OID.clear();
	Unit.clear();
	isTheTable.clear();
}

int CWriteableSysNetGeneralOID::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetGeneralOID),input)!=sizeof(CWriteableSysNetGeneralOID))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetGeneralOID::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OID=token;
		}
		else
		{
			OID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Unit=token;
		}
		else
		{
			Unit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			isTheTable=token;
		}
		else
		{
			isTheTable="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"OID"))
			{
				OID=token;
			}
			else if (!strcmp(fieldName,"Unit"))
			{
				Unit=token;
			}
			else if (!strcmp(fieldName,"isTheTable"))
			{
				isTheTable=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetGeneralOID::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetGeneralOID),output)!=sizeof(CWriteableSysNetGeneralOID))
		return 0;
	else
		return 1;
}

int CWriteableSysNetGeneralOID::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Unit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	isTheTable.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetGeneralOID::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetGeneralOID%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);	
	OID.getString(buf);
	fprintf(fp,"\t\tOID = %s    [OID]\n",buf);	
	Unit.getString(buf);
	fprintf(fp,"\t\tUnit = %s    [单位]\n",buf);	
	isTheTable.getString(buf);
	fprintf(fp,"\t\tisTheTable = %s    [是否标量标志]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetGeneralOID::dumpDiff(FILE *fp, const CWriteableSysNetGeneralOID *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetGeneralOID = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [OID中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [OID英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);
	}
	OID.getString(buf);
	if (compare(OID.getValue(),pOriginal->OID.getValue())!=0)
	{
		pOriginal->OID.getString(bufOriginal);
		fprintf(fp,"\t\tOID = %s -> %s    [OID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOID = %s    [OID]\n",buf);
	}
	Unit.getString(buf);
	if (compare(Unit.getValue(),pOriginal->Unit.getValue())!=0)
	{
		pOriginal->Unit.getString(bufOriginal);
		fprintf(fp,"\t\tUnit = %s -> %s    [单位]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnit = %s    [单位]\n",buf);
	}
	isTheTable.getString(buf);
	if (compare(isTheTable.getValue(),pOriginal->isTheTable.getValue())!=0)
	{
		pOriginal->isTheTable.getString(bufOriginal);
		fprintf(fp,"\t\tisTheTable = %s -> %s    [是否标量标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tisTheTable = %s    [是否标量标志]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetGeneralOID::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	OID.getString(buf);
	fprintf(fp,",OID,%s",buf);	
	Unit.getString(buf);
	fprintf(fp,",Unit,%s",buf);	
	isTheTable.getString(buf);
	fprintf(fp,",isTheTable,%s",buf);	
}

void CWriteableSysNetGeneralOID::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	OID.getString(buf);
	sprintf(p,"OID=%s,",buf);
	p+=strlen(p);
	Unit.getString(buf);
	sprintf(p,"Unit=%s,",buf);
	p+=strlen(p);
	isTheTable.getString(buf);
	sprintf(p,"isTheTable=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetGeneralOID::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetGeneralOID");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s OID中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s OID英文名",buf);
	OID.getString(buf);
	pLogger->output(indent+1,0,"OID=%s OID",buf);
	Unit.getString(buf);
	pLogger->output(indent+1,0,"Unit=%s 单位",buf);
	isTheTable.getString(buf);
	pLogger->output(indent+1,0,"isTheTable=%s 是否标量标志",buf);
	pLogger->output(indent,0,"}");
}

CSysNetGeneralOIDIterator::~CSysNetGeneralOIDIterator(void)
{
}


void CSysNetGeneralOIDIterator::dump(FILE *output)
{
	CSysNetGeneralOID *pSysNetGeneralOID;
	
	while ((pSysNetGeneralOID=next())!=NULL)
	{
		pSysNetGeneralOID->dump(output);
	}
}



void CWriteableSysNetMonitorType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetMonitorType::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetMonitorType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorType),input)!=sizeof(CWriteableSysNetMonitorType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorType),output)!=sizeof(CWriteableSysNetMonitorType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorType::dumpDiff(FILE *fp, const CWriteableSysNetMonitorType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [OID中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [OID中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [OID英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [OID英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetMonitorType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s OID中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s OID英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorTypeIterator::~CSysNetMonitorTypeIterator(void)
{
}


void CSysNetMonitorTypeIterator::dump(FILE *output)
{
	CSysNetMonitorType *pSysNetMonitorType;
	
	while ((pSysNetMonitorType=next())!=NULL)
	{
		pSysNetMonitorType->dump(output);
	}
}



void CWriteableSysNetMonitorAttrScope::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,Comments\n");
}
	
void CWriteableSysNetMonitorAttrScope::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	Comments.clear();
}

int CWriteableSysNetMonitorAttrScope::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorAttrScope),input)!=sizeof(CWriteableSysNetMonitorAttrScope))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorAttrScope::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Comments=token;
		}
		else
		{
			Comments="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"Comments"))
			{
				Comments=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorAttrScope::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorAttrScope),output)!=sizeof(CWriteableSysNetMonitorAttrScope))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorAttrScope::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Comments.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorAttrScope::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorAttrScope%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [指标中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [指标英文名]\n",buf);	
	Comments.getString(buf);
	fprintf(fp,"\t\tComments = %s    [注释]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorAttrScope::dumpDiff(FILE *fp, const CWriteableSysNetMonitorAttrScope *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorAttrScope = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [指标中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [指标中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [指标英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [指标英文名]\n",buf);
	}
	Comments.getString(buf);
	if (compare(Comments.getValue(),pOriginal->Comments.getValue())!=0)
	{
		pOriginal->Comments.getString(bufOriginal);
		fprintf(fp,"\t\tComments = %s -> %s    [注释]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tComments = %s    [注释]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorAttrScope::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	Comments.getString(buf);
	fprintf(fp,",Comments,%s",buf);	
}

void CWriteableSysNetMonitorAttrScope::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	Comments.getString(buf);
	sprintf(p,"Comments=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorAttrScope::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorAttrScope");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 指标中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 指标英文名",buf);
	Comments.getString(buf);
	pLogger->output(indent+1,0,"Comments=%s 注释",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorAttrScopeIterator::~CSysNetMonitorAttrScopeIterator(void)
{
}


void CSysNetMonitorAttrScopeIterator::dump(FILE *output)
{
	CSysNetMonitorAttrScope *pSysNetMonitorAttrScope;
	
	while ((pSysNetMonitorAttrScope=next())!=NULL)
	{
		pSysNetMonitorAttrScope->dump(output);
	}
}



void CWriteableSysNetMonitorAttrType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,MANUFACTORY_ID,MonitorType_ID,AttrType_ID,MANUFACTORY,MonitorType,AttrType\n");
}
	
void CWriteableSysNetMonitorAttrType::init(void)
{
	ID.clear();
	MANUFACTORY_ID.clear();
	MonitorType_ID.clear();
	AttrType_ID.clear();
	MANUFACTORY.clear();
	MonitorType.clear();
	AttrType.clear();
}

int CWriteableSysNetMonitorAttrType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorAttrType),input)!=sizeof(CWriteableSysNetMonitorAttrType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorAttrType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MANUFACTORY_ID=token;
		}
		else
		{
			MANUFACTORY_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType_ID=token;
		}
		else
		{
			MonitorType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType_ID=token;
		}
		else
		{
			AttrType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MANUFACTORY=token;
		}
		else
		{
			MANUFACTORY="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType=token;
		}
		else
		{
			MonitorType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrType=token;
		}
		else
		{
			AttrType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"MANUFACTORY_ID"))
			{
				MANUFACTORY_ID=token;
			}
			else if (!strcmp(fieldName,"MonitorType_ID"))
			{
				MonitorType_ID=token;
			}
			else if (!strcmp(fieldName,"AttrType_ID"))
			{
				AttrType_ID=token;
			}
			else if (!strcmp(fieldName,"MANUFACTORY"))
			{
				MANUFACTORY=token;
			}
			else if (!strcmp(fieldName,"MonitorType"))
			{
				MonitorType=token;
			}
			else if (!strcmp(fieldName,"AttrType"))
			{
				AttrType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorAttrType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorAttrType),output)!=sizeof(CWriteableSysNetMonitorAttrType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorAttrType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MANUFACTORY_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MANUFACTORY.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorAttrType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorAttrType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,"\t\tMonitorType_ID = %s    [设备类别]\n",buf);	
	AttrType_ID.getString(buf);
	fprintf(fp,"\t\tAttrType_ID = %s    [网络监控指标ID]\n",buf);	
	MANUFACTORY.getString(buf);
	fprintf(fp,"\t\tMANUFACTORY = %s    [厂商类型]\n",buf);	
	MonitorType.getString(buf);
	fprintf(fp,"\t\tMonitorType = %s    [设备类别]\n",buf);	
	AttrType.getString(buf);
	fprintf(fp,"\t\tAttrType = %s    [网络监控指标]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorAttrType::dumpDiff(FILE *fp, const CWriteableSysNetMonitorAttrType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorAttrType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	MANUFACTORY_ID.getString(buf);
	if (compare(MANUFACTORY_ID.getValue(),pOriginal->MANUFACTORY_ID.getValue())!=0)
	{
		pOriginal->MANUFACTORY_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMANUFACTORY_ID = %s -> %s    [厂商类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);
	}
	MonitorType_ID.getString(buf);
	if (compare(MonitorType_ID.getValue(),pOriginal->MonitorType_ID.getValue())!=0)
	{
		pOriginal->MonitorType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType_ID = %s -> %s    [设备类别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType_ID = %s    [设备类别]\n",buf);
	}
	AttrType_ID.getString(buf);
	if (compare(AttrType_ID.getValue(),pOriginal->AttrType_ID.getValue())!=0)
	{
		pOriginal->AttrType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType_ID = %s -> %s    [网络监控指标ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType_ID = %s    [网络监控指标ID]\n",buf);
	}
	MANUFACTORY.getString(buf);
	if (compare(MANUFACTORY.getValue(),pOriginal->MANUFACTORY.getValue())!=0)
	{
		pOriginal->MANUFACTORY.getString(bufOriginal);
		fprintf(fp,"\t\tMANUFACTORY = %s -> %s    [厂商类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMANUFACTORY = %s    [厂商类型]\n",buf);
	}
	MonitorType.getString(buf);
	if (compare(MonitorType.getValue(),pOriginal->MonitorType.getValue())!=0)
	{
		pOriginal->MonitorType.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType = %s -> %s    [设备类别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType = %s    [设备类别]\n",buf);
	}
	AttrType.getString(buf);
	if (compare(AttrType.getValue(),pOriginal->AttrType.getValue())!=0)
	{
		pOriginal->AttrType.getString(bufOriginal);
		fprintf(fp,"\t\tAttrType = %s -> %s    [网络监控指标]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrType = %s    [网络监控指标]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorAttrType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,",MANUFACTORY_ID,%s",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,",MonitorType_ID,%s",buf);	
	AttrType_ID.getString(buf);
	fprintf(fp,",AttrType_ID,%s",buf);	
	MANUFACTORY.getString(buf);
	fprintf(fp,",MANUFACTORY,%s",buf);	
	MonitorType.getString(buf);
	fprintf(fp,",MonitorType,%s",buf);	
	AttrType.getString(buf);
	fprintf(fp,",AttrType,%s",buf);	
}

void CWriteableSysNetMonitorAttrType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	MANUFACTORY_ID.getString(buf);
	sprintf(p,"MANUFACTORY_ID=%s,",buf);
	p+=strlen(p);
	MonitorType_ID.getString(buf);
	sprintf(p,"MonitorType_ID=%s,",buf);
	p+=strlen(p);
	AttrType_ID.getString(buf);
	sprintf(p,"AttrType_ID=%s,",buf);
	p+=strlen(p);
	MANUFACTORY.getString(buf);
	sprintf(p,"MANUFACTORY=%s,",buf);
	p+=strlen(p);
	MonitorType.getString(buf);
	sprintf(p,"MonitorType=%s,",buf);
	p+=strlen(p);
	AttrType.getString(buf);
	sprintf(p,"AttrType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorAttrType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorAttrType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	MANUFACTORY_ID.getString(buf);
	pLogger->output(indent+1,0,"MANUFACTORY_ID=%s 厂商类型",buf);
	MonitorType_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorType_ID=%s 设备类别",buf);
	AttrType_ID.getString(buf);
	pLogger->output(indent+1,0,"AttrType_ID=%s 网络监控指标ID",buf);
	MANUFACTORY.getString(buf);
	pLogger->output(indent+1,0,"MANUFACTORY=%s 厂商类型",buf);
	MonitorType.getString(buf);
	pLogger->output(indent+1,0,"MonitorType=%s 设备类别",buf);
	AttrType.getString(buf);
	pLogger->output(indent+1,0,"AttrType=%s 网络监控指标",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorAttrTypeIterator::~CSysNetMonitorAttrTypeIterator(void)
{
}


void CSysNetMonitorAttrTypeIterator::dump(FILE *output)
{
	CSysNetMonitorAttrType *pSysNetMonitorAttrType;
	
	while ((pSysNetMonitorAttrType=next())!=NULL)
	{
		pSysNetMonitorAttrType->dump(output);
	}
}



void CWriteableSysNetMonitorCommandType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,Manufactory_ID,MonitorType_ID,DeviceModle_ID,ActionGroup_ID,Manufactory,MonitorType,DeviceModle,ActionGroup,Command\n");
}
	
void CWriteableSysNetMonitorCommandType::init(void)
{
	ID.clear();
	Manufactory_ID.clear();
	MonitorType_ID.clear();
	DeviceModle_ID.clear();
	ActionGroup_ID.clear();
	Manufactory.clear();
	MonitorType.clear();
	DeviceModle.clear();
	ActionGroup.clear();
	Command.clear();
}

int CWriteableSysNetMonitorCommandType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorCommandType),input)!=sizeof(CWriteableSysNetMonitorCommandType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorCommandType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory_ID=token;
		}
		else
		{
			Manufactory_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType_ID=token;
		}
		else
		{
			MonitorType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceModle_ID=token;
		}
		else
		{
			DeviceModle_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionGroup_ID=token;
		}
		else
		{
			ActionGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory=token;
		}
		else
		{
			Manufactory="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType=token;
		}
		else
		{
			MonitorType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceModle=token;
		}
		else
		{
			DeviceModle="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionGroup=token;
		}
		else
		{
			ActionGroup="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Command=token;
		}
		else
		{
			Command="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"Manufactory_ID"))
			{
				Manufactory_ID=token;
			}
			else if (!strcmp(fieldName,"MonitorType_ID"))
			{
				MonitorType_ID=token;
			}
			else if (!strcmp(fieldName,"DeviceModle_ID"))
			{
				DeviceModle_ID=token;
			}
			else if (!strcmp(fieldName,"ActionGroup_ID"))
			{
				ActionGroup_ID=token;
			}
			else if (!strcmp(fieldName,"Manufactory"))
			{
				Manufactory=token;
			}
			else if (!strcmp(fieldName,"MonitorType"))
			{
				MonitorType=token;
			}
			else if (!strcmp(fieldName,"DeviceModle"))
			{
				DeviceModle=token;
			}
			else if (!strcmp(fieldName,"ActionGroup"))
			{
				ActionGroup=token;
			}
			else if (!strcmp(fieldName,"Command"))
			{
				Command=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorCommandType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorCommandType),output)!=sizeof(CWriteableSysNetMonitorCommandType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorCommandType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceModle_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceModle.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionGroup.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Command.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorCommandType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorCommandType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,"\t\tManufactory_ID = %s    [厂商类型ID]\n",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,"\t\tMonitorType_ID = %s    [设备类别ID]\n",buf);	
	DeviceModle_ID.getString(buf);
	fprintf(fp,"\t\tDeviceModle_ID = %s    [设备型号ID]\n",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,"\t\tActionGroup_ID = %s    [动作族ID]\n",buf);	
	Manufactory.getString(buf);
	fprintf(fp,"\t\tManufactory = %s    [厂商类型]\n",buf);	
	MonitorType.getString(buf);
	fprintf(fp,"\t\tMonitorType = %s    [设备类别]\n",buf);	
	DeviceModle.getString(buf);
	fprintf(fp,"\t\tDeviceModle = %s    [设备型号]\n",buf);	
	ActionGroup.getString(buf);
	fprintf(fp,"\t\tActionGroup = %s    [动作族]\n",buf);	
	Command.getString(buf);
	fprintf(fp,"\t\tCommand = %s    [指令码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorCommandType::dumpDiff(FILE *fp, const CWriteableSysNetMonitorCommandType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorCommandType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	Manufactory_ID.getString(buf);
	if (compare(Manufactory_ID.getValue(),pOriginal->Manufactory_ID.getValue())!=0)
	{
		pOriginal->Manufactory_ID.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory_ID = %s -> %s    [厂商类型ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory_ID = %s    [厂商类型ID]\n",buf);
	}
	MonitorType_ID.getString(buf);
	if (compare(MonitorType_ID.getValue(),pOriginal->MonitorType_ID.getValue())!=0)
	{
		pOriginal->MonitorType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType_ID = %s -> %s    [设备类别ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType_ID = %s    [设备类别ID]\n",buf);
	}
	DeviceModle_ID.getString(buf);
	if (compare(DeviceModle_ID.getValue(),pOriginal->DeviceModle_ID.getValue())!=0)
	{
		pOriginal->DeviceModle_ID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceModle_ID = %s -> %s    [设备型号ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceModle_ID = %s    [设备型号ID]\n",buf);
	}
	ActionGroup_ID.getString(buf);
	if (compare(ActionGroup_ID.getValue(),pOriginal->ActionGroup_ID.getValue())!=0)
	{
		pOriginal->ActionGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tActionGroup_ID = %s -> %s    [动作族ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionGroup_ID = %s    [动作族ID]\n",buf);
	}
	Manufactory.getString(buf);
	if (compare(Manufactory.getValue(),pOriginal->Manufactory.getValue())!=0)
	{
		pOriginal->Manufactory.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory = %s -> %s    [厂商类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory = %s    [厂商类型]\n",buf);
	}
	MonitorType.getString(buf);
	if (compare(MonitorType.getValue(),pOriginal->MonitorType.getValue())!=0)
	{
		pOriginal->MonitorType.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType = %s -> %s    [设备类别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType = %s    [设备类别]\n",buf);
	}
	DeviceModle.getString(buf);
	if (compare(DeviceModle.getValue(),pOriginal->DeviceModle.getValue())!=0)
	{
		pOriginal->DeviceModle.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceModle = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceModle = %s    [设备型号]\n",buf);
	}
	ActionGroup.getString(buf);
	if (compare(ActionGroup.getValue(),pOriginal->ActionGroup.getValue())!=0)
	{
		pOriginal->ActionGroup.getString(bufOriginal);
		fprintf(fp,"\t\tActionGroup = %s -> %s    [动作族]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionGroup = %s    [动作族]\n",buf);
	}
	Command.getString(buf);
	if (compare(Command.getValue(),pOriginal->Command.getValue())!=0)
	{
		pOriginal->Command.getString(bufOriginal);
		fprintf(fp,"\t\tCommand = %s -> %s    [指令码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCommand = %s    [指令码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorCommandType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,",Manufactory_ID,%s",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,",MonitorType_ID,%s",buf);	
	DeviceModle_ID.getString(buf);
	fprintf(fp,",DeviceModle_ID,%s",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,",ActionGroup_ID,%s",buf);	
	Manufactory.getString(buf);
	fprintf(fp,",Manufactory,%s",buf);	
	MonitorType.getString(buf);
	fprintf(fp,",MonitorType,%s",buf);	
	DeviceModle.getString(buf);
	fprintf(fp,",DeviceModle,%s",buf);	
	ActionGroup.getString(buf);
	fprintf(fp,",ActionGroup,%s",buf);	
	Command.getString(buf);
	fprintf(fp,",Command,%s",buf);	
}

void CWriteableSysNetMonitorCommandType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	Manufactory_ID.getString(buf);
	sprintf(p,"Manufactory_ID=%s,",buf);
	p+=strlen(p);
	MonitorType_ID.getString(buf);
	sprintf(p,"MonitorType_ID=%s,",buf);
	p+=strlen(p);
	DeviceModle_ID.getString(buf);
	sprintf(p,"DeviceModle_ID=%s,",buf);
	p+=strlen(p);
	ActionGroup_ID.getString(buf);
	sprintf(p,"ActionGroup_ID=%s,",buf);
	p+=strlen(p);
	Manufactory.getString(buf);
	sprintf(p,"Manufactory=%s,",buf);
	p+=strlen(p);
	MonitorType.getString(buf);
	sprintf(p,"MonitorType=%s,",buf);
	p+=strlen(p);
	DeviceModle.getString(buf);
	sprintf(p,"DeviceModle=%s,",buf);
	p+=strlen(p);
	ActionGroup.getString(buf);
	sprintf(p,"ActionGroup=%s,",buf);
	p+=strlen(p);
	Command.getString(buf);
	sprintf(p,"Command=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorCommandType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorCommandType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	Manufactory_ID.getString(buf);
	pLogger->output(indent+1,0,"Manufactory_ID=%s 厂商类型ID",buf);
	MonitorType_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorType_ID=%s 设备类别ID",buf);
	DeviceModle_ID.getString(buf);
	pLogger->output(indent+1,0,"DeviceModle_ID=%s 设备型号ID",buf);
	ActionGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"ActionGroup_ID=%s 动作族ID",buf);
	Manufactory.getString(buf);
	pLogger->output(indent+1,0,"Manufactory=%s 厂商类型",buf);
	MonitorType.getString(buf);
	pLogger->output(indent+1,0,"MonitorType=%s 设备类别",buf);
	DeviceModle.getString(buf);
	pLogger->output(indent+1,0,"DeviceModle=%s 设备型号",buf);
	ActionGroup.getString(buf);
	pLogger->output(indent+1,0,"ActionGroup=%s 动作族",buf);
	Command.getString(buf);
	pLogger->output(indent+1,0,"Command=%s 指令码",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorCommandTypeIterator::~CSysNetMonitorCommandTypeIterator(void)
{
}


void CSysNetMonitorCommandTypeIterator::dump(FILE *output)
{
	CSysNetMonitorCommandType *pSysNetMonitorCommandType;
	
	while ((pSysNetMonitorCommandType=next())!=NULL)
	{
		pSysNetMonitorCommandType->dump(output);
	}
}



void CWriteableSysNetMonitorActionGroup::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,ActionType,Comments\n");
}
	
void CWriteableSysNetMonitorActionGroup::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	ActionType.clear();
	Comments.clear();
}

int CWriteableSysNetMonitorActionGroup::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorActionGroup),input)!=sizeof(CWriteableSysNetMonitorActionGroup))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorActionGroup::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionType=token;
		}
		else
		{
			ActionType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Comments=token;
		}
		else
		{
			Comments="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"ActionType"))
			{
				ActionType=token;
			}
			else if (!strcmp(fieldName,"Comments"))
			{
				Comments=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorActionGroup::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorActionGroup),output)!=sizeof(CWriteableSysNetMonitorActionGroup))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorActionGroup::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Comments.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorActionGroup::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorActionGroup%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [动作族中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [动作族英文名]\n",buf);	
	ActionType.getString(buf);
	fprintf(fp,"\t\tActionType = %s    [动作类型码]\n",buf);	
	Comments.getString(buf);
	fprintf(fp,"\t\tComments = %s    [注释]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorActionGroup::dumpDiff(FILE *fp, const CWriteableSysNetMonitorActionGroup *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorActionGroup = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [动作族中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [动作族中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [动作族英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [动作族英文名]\n",buf);
	}
	ActionType.getString(buf);
	if (compare(ActionType.getValue(),pOriginal->ActionType.getValue())!=0)
	{
		pOriginal->ActionType.getString(bufOriginal);
		fprintf(fp,"\t\tActionType = %s -> %s    [动作类型码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionType = %s    [动作类型码]\n",buf);
	}
	Comments.getString(buf);
	if (compare(Comments.getValue(),pOriginal->Comments.getValue())!=0)
	{
		pOriginal->Comments.getString(bufOriginal);
		fprintf(fp,"\t\tComments = %s -> %s    [注释]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tComments = %s    [注释]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorActionGroup::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	ActionType.getString(buf);
	fprintf(fp,",ActionType,%s",buf);	
	Comments.getString(buf);
	fprintf(fp,",Comments,%s",buf);	
}

void CWriteableSysNetMonitorActionGroup::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	ActionType.getString(buf);
	sprintf(p,"ActionType=%s,",buf);
	p+=strlen(p);
	Comments.getString(buf);
	sprintf(p,"Comments=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorActionGroup::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorActionGroup");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 动作族中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 动作族英文名",buf);
	ActionType.getString(buf);
	pLogger->output(indent+1,0,"ActionType=%s 动作类型码",buf);
	Comments.getString(buf);
	pLogger->output(indent+1,0,"Comments=%s 注释",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorActionGroupIterator::~CSysNetMonitorActionGroupIterator(void)
{
}


void CSysNetMonitorActionGroupIterator::dump(FILE *output)
{
	CSysNetMonitorActionGroup *pSysNetMonitorActionGroup;
	
	while ((pSysNetMonitorActionGroup=next())!=NULL)
	{
		pSysNetMonitorActionGroup->dump(output);
	}
}



void CWriteableSysNetMonitorDeviceGroup::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,Condition,Comments\n");
}
	
void CWriteableSysNetMonitorDeviceGroup::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	Condition.clear();
	Comments.clear();
}

int CWriteableSysNetMonitorDeviceGroup::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorDeviceGroup),input)!=sizeof(CWriteableSysNetMonitorDeviceGroup))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorDeviceGroup::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Condition=token;
		}
		else
		{
			Condition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Comments=token;
		}
		else
		{
			Comments="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"Condition"))
			{
				Condition=token;
			}
			else if (!strcmp(fieldName,"Comments"))
			{
				Comments=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorDeviceGroup::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorDeviceGroup),output)!=sizeof(CWriteableSysNetMonitorDeviceGroup))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorDeviceGroup::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Condition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Comments.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorDeviceGroup::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorDeviceGroup%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [设备对象组中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [设备对象组英文名]\n",buf);	
	Condition.getString(buf);
	fprintf(fp,"\t\tCondition = %s    [设备过滤条件]\n",buf);	
	Comments.getString(buf);
	fprintf(fp,"\t\tComments = %s    [注释]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorDeviceGroup::dumpDiff(FILE *fp, const CWriteableSysNetMonitorDeviceGroup *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorDeviceGroup = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [设备对象组中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [设备对象组中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [设备对象组英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [设备对象组英文名]\n",buf);
	}
	Condition.getString(buf);
	if (compare(Condition.getValue(),pOriginal->Condition.getValue())!=0)
	{
		pOriginal->Condition.getString(bufOriginal);
		fprintf(fp,"\t\tCondition = %s -> %s    [设备过滤条件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCondition = %s    [设备过滤条件]\n",buf);
	}
	Comments.getString(buf);
	if (compare(Comments.getValue(),pOriginal->Comments.getValue())!=0)
	{
		pOriginal->Comments.getString(bufOriginal);
		fprintf(fp,"\t\tComments = %s -> %s    [注释]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tComments = %s    [注释]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorDeviceGroup::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	Condition.getString(buf);
	fprintf(fp,",Condition,%s",buf);	
	Comments.getString(buf);
	fprintf(fp,",Comments,%s",buf);	
}

void CWriteableSysNetMonitorDeviceGroup::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	Condition.getString(buf);
	sprintf(p,"Condition=%s,",buf);
	p+=strlen(p);
	Comments.getString(buf);
	sprintf(p,"Comments=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorDeviceGroup::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorDeviceGroup");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 设备对象组中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 设备对象组英文名",buf);
	Condition.getString(buf);
	pLogger->output(indent+1,0,"Condition=%s 设备过滤条件",buf);
	Comments.getString(buf);
	pLogger->output(indent+1,0,"Comments=%s 注释",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorDeviceGroupIterator::~CSysNetMonitorDeviceGroupIterator(void)
{
}


void CSysNetMonitorDeviceGroupIterator::dump(FILE *output)
{
	CSysNetMonitorDeviceGroup *pSysNetMonitorDeviceGroup;
	
	while ((pSysNetMonitorDeviceGroup=next())!=NULL)
	{
		pSysNetMonitorDeviceGroup->dump(output);
	}
}



void CWriteableSysNetMonitorTaskInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,DeviceGroup_ID,ManagerGroup_ID,TimePolicy_ID,TaskPriority_ID,OutputPolicy_ID,ActionGroup_ID,EventExprStr,DeviceGroup,ManagerGroup,TimePolicy,TaskPriority,OutputPolicy,ActionGroup,ValidFlag,TaskStatus,Comments\n");
}
	
void CWriteableSysNetMonitorTaskInfo::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	DeviceGroup_ID.clear();
	ManagerGroup_ID.clear();
	TimePolicy_ID.clear();
	TaskPriority_ID.clear();
	OutputPolicy_ID.clear();
	ActionGroup_ID.clear();
	EventExprStr.clear();
	DeviceGroup.clear();
	ManagerGroup.clear();
	TimePolicy.clear();
	TaskPriority.clear();
	OutputPolicy.clear();
	ActionGroup.clear();
	ValidFlag.clear();
	TaskStatus.clear();
	Comments.clear();
}

int CWriteableSysNetMonitorTaskInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorTaskInfo),input)!=sizeof(CWriteableSysNetMonitorTaskInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorTaskInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceGroup_ID=token;
		}
		else
		{
			DeviceGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ManagerGroup_ID=token;
		}
		else
		{
			ManagerGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimePolicy_ID=token;
		}
		else
		{
			TimePolicy_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TaskPriority_ID=token;
		}
		else
		{
			TaskPriority_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OutputPolicy_ID=token;
		}
		else
		{
			OutputPolicy_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionGroup_ID=token;
		}
		else
		{
			ActionGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventExprStr=token;
		}
		else
		{
			EventExprStr="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceGroup=token;
		}
		else
		{
			DeviceGroup="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ManagerGroup=token;
		}
		else
		{
			ManagerGroup="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimePolicy=token;
		}
		else
		{
			TimePolicy="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TaskPriority=token;
		}
		else
		{
			TaskPriority="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OutputPolicy=token;
		}
		else
		{
			OutputPolicy="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionGroup=token;
		}
		else
		{
			ActionGroup="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValidFlag=token;
		}
		else
		{
			ValidFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TaskStatus=token;
		}
		else
		{
			TaskStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Comments=token;
		}
		else
		{
			Comments="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"DeviceGroup_ID"))
			{
				DeviceGroup_ID=token;
			}
			else if (!strcmp(fieldName,"ManagerGroup_ID"))
			{
				ManagerGroup_ID=token;
			}
			else if (!strcmp(fieldName,"TimePolicy_ID"))
			{
				TimePolicy_ID=token;
			}
			else if (!strcmp(fieldName,"TaskPriority_ID"))
			{
				TaskPriority_ID=token;
			}
			else if (!strcmp(fieldName,"OutputPolicy_ID"))
			{
				OutputPolicy_ID=token;
			}
			else if (!strcmp(fieldName,"ActionGroup_ID"))
			{
				ActionGroup_ID=token;
			}
			else if (!strcmp(fieldName,"EventExprStr"))
			{
				EventExprStr=token;
			}
			else if (!strcmp(fieldName,"DeviceGroup"))
			{
				DeviceGroup=token;
			}
			else if (!strcmp(fieldName,"ManagerGroup"))
			{
				ManagerGroup=token;
			}
			else if (!strcmp(fieldName,"TimePolicy"))
			{
				TimePolicy=token;
			}
			else if (!strcmp(fieldName,"TaskPriority"))
			{
				TaskPriority=token;
			}
			else if (!strcmp(fieldName,"OutputPolicy"))
			{
				OutputPolicy=token;
			}
			else if (!strcmp(fieldName,"ActionGroup"))
			{
				ActionGroup=token;
			}
			else if (!strcmp(fieldName,"ValidFlag"))
			{
				ValidFlag=token;
			}
			else if (!strcmp(fieldName,"TaskStatus"))
			{
				TaskStatus=token;
			}
			else if (!strcmp(fieldName,"Comments"))
			{
				Comments=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorTaskInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorTaskInfo),output)!=sizeof(CWriteableSysNetMonitorTaskInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorTaskInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ManagerGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimePolicy_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TaskPriority_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OutputPolicy_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventExprStr.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceGroup.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ManagerGroup.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimePolicy.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TaskPriority.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OutputPolicy.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionGroup.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValidFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TaskStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Comments.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorTaskInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorTaskInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [任务中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [任务英文名]\n",buf);	
	DeviceGroup_ID.getString(buf);
	fprintf(fp,"\t\tDeviceGroup_ID = %s    [设备对象组ID]\n",buf);	
	ManagerGroup_ID.getString(buf);
	fprintf(fp,"\t\tManagerGroup_ID = %s    [管理人员对象组ID]\n",buf);	
	TimePolicy_ID.getString(buf);
	fprintf(fp,"\t\tTimePolicy_ID = %s    [任务时间策略ID]\n",buf);	
	TaskPriority_ID.getString(buf);
	fprintf(fp,"\t\tTaskPriority_ID = %s    [任务优先级ID]\n",buf);	
	OutputPolicy_ID.getString(buf);
	fprintf(fp,"\t\tOutputPolicy_ID = %s    [结果输出策略ID]\n",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,"\t\tActionGroup_ID = %s    [任务动作族ID]\n",buf);	
	EventExprStr.getString(buf);
	fprintf(fp,"\t\tEventExprStr = %s    [任务表达式ID联合串]\n",buf);	
	DeviceGroup.getString(buf);
	fprintf(fp,"\t\tDeviceGroup = %s    [设备对象组]\n",buf);	
	ManagerGroup.getString(buf);
	fprintf(fp,"\t\tManagerGroup = %s    [管理人员对象组]\n",buf);	
	TimePolicy.getString(buf);
	fprintf(fp,"\t\tTimePolicy = %s    [任务时间策略]\n",buf);	
	TaskPriority.getString(buf);
	fprintf(fp,"\t\tTaskPriority = %s    [任务优先级]\n",buf);	
	OutputPolicy.getString(buf);
	fprintf(fp,"\t\tOutputPolicy = %s    [结果输出策略]\n",buf);	
	ActionGroup.getString(buf);
	fprintf(fp,"\t\tActionGroup = %s    [任务动作族]\n",buf);	
	ValidFlag.getString(buf);
	fprintf(fp,"\t\tValidFlag = %s    [任务有效性标识]\n",buf);	
	TaskStatus.getString(buf);
	fprintf(fp,"\t\tTaskStatus = %s    [任务状态标识]\n",buf);	
	Comments.getString(buf);
	fprintf(fp,"\t\tComments = %s    [任务描述]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskInfo::dumpDiff(FILE *fp, const CWriteableSysNetMonitorTaskInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorTaskInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [任务中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [任务中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [任务英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [任务英文名]\n",buf);
	}
	DeviceGroup_ID.getString(buf);
	if (compare(DeviceGroup_ID.getValue(),pOriginal->DeviceGroup_ID.getValue())!=0)
	{
		pOriginal->DeviceGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceGroup_ID = %s -> %s    [设备对象组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceGroup_ID = %s    [设备对象组ID]\n",buf);
	}
	ManagerGroup_ID.getString(buf);
	if (compare(ManagerGroup_ID.getValue(),pOriginal->ManagerGroup_ID.getValue())!=0)
	{
		pOriginal->ManagerGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tManagerGroup_ID = %s -> %s    [管理人员对象组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManagerGroup_ID = %s    [管理人员对象组ID]\n",buf);
	}
	TimePolicy_ID.getString(buf);
	if (compare(TimePolicy_ID.getValue(),pOriginal->TimePolicy_ID.getValue())!=0)
	{
		pOriginal->TimePolicy_ID.getString(bufOriginal);
		fprintf(fp,"\t\tTimePolicy_ID = %s -> %s    [任务时间策略ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimePolicy_ID = %s    [任务时间策略ID]\n",buf);
	}
	TaskPriority_ID.getString(buf);
	if (compare(TaskPriority_ID.getValue(),pOriginal->TaskPriority_ID.getValue())!=0)
	{
		pOriginal->TaskPriority_ID.getString(bufOriginal);
		fprintf(fp,"\t\tTaskPriority_ID = %s -> %s    [任务优先级ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTaskPriority_ID = %s    [任务优先级ID]\n",buf);
	}
	OutputPolicy_ID.getString(buf);
	if (compare(OutputPolicy_ID.getValue(),pOriginal->OutputPolicy_ID.getValue())!=0)
	{
		pOriginal->OutputPolicy_ID.getString(bufOriginal);
		fprintf(fp,"\t\tOutputPolicy_ID = %s -> %s    [结果输出策略ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOutputPolicy_ID = %s    [结果输出策略ID]\n",buf);
	}
	ActionGroup_ID.getString(buf);
	if (compare(ActionGroup_ID.getValue(),pOriginal->ActionGroup_ID.getValue())!=0)
	{
		pOriginal->ActionGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tActionGroup_ID = %s -> %s    [任务动作族ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionGroup_ID = %s    [任务动作族ID]\n",buf);
	}
	EventExprStr.getString(buf);
	if (compare(EventExprStr.getValue(),pOriginal->EventExprStr.getValue())!=0)
	{
		pOriginal->EventExprStr.getString(bufOriginal);
		fprintf(fp,"\t\tEventExprStr = %s -> %s    [任务表达式ID联合串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventExprStr = %s    [任务表达式ID联合串]\n",buf);
	}
	DeviceGroup.getString(buf);
	if (compare(DeviceGroup.getValue(),pOriginal->DeviceGroup.getValue())!=0)
	{
		pOriginal->DeviceGroup.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceGroup = %s -> %s    [设备对象组]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceGroup = %s    [设备对象组]\n",buf);
	}
	ManagerGroup.getString(buf);
	if (compare(ManagerGroup.getValue(),pOriginal->ManagerGroup.getValue())!=0)
	{
		pOriginal->ManagerGroup.getString(bufOriginal);
		fprintf(fp,"\t\tManagerGroup = %s -> %s    [管理人员对象组]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManagerGroup = %s    [管理人员对象组]\n",buf);
	}
	TimePolicy.getString(buf);
	if (compare(TimePolicy.getValue(),pOriginal->TimePolicy.getValue())!=0)
	{
		pOriginal->TimePolicy.getString(bufOriginal);
		fprintf(fp,"\t\tTimePolicy = %s -> %s    [任务时间策略]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimePolicy = %s    [任务时间策略]\n",buf);
	}
	TaskPriority.getString(buf);
	if (compare(TaskPriority.getValue(),pOriginal->TaskPriority.getValue())!=0)
	{
		pOriginal->TaskPriority.getString(bufOriginal);
		fprintf(fp,"\t\tTaskPriority = %s -> %s    [任务优先级]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTaskPriority = %s    [任务优先级]\n",buf);
	}
	OutputPolicy.getString(buf);
	if (compare(OutputPolicy.getValue(),pOriginal->OutputPolicy.getValue())!=0)
	{
		pOriginal->OutputPolicy.getString(bufOriginal);
		fprintf(fp,"\t\tOutputPolicy = %s -> %s    [结果输出策略]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOutputPolicy = %s    [结果输出策略]\n",buf);
	}
	ActionGroup.getString(buf);
	if (compare(ActionGroup.getValue(),pOriginal->ActionGroup.getValue())!=0)
	{
		pOriginal->ActionGroup.getString(bufOriginal);
		fprintf(fp,"\t\tActionGroup = %s -> %s    [任务动作族]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionGroup = %s    [任务动作族]\n",buf);
	}
	ValidFlag.getString(buf);
	if (compare(ValidFlag.getValue(),pOriginal->ValidFlag.getValue())!=0)
	{
		pOriginal->ValidFlag.getString(bufOriginal);
		fprintf(fp,"\t\tValidFlag = %s -> %s    [任务有效性标识]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValidFlag = %s    [任务有效性标识]\n",buf);
	}
	TaskStatus.getString(buf);
	if (compare(TaskStatus.getValue(),pOriginal->TaskStatus.getValue())!=0)
	{
		pOriginal->TaskStatus.getString(bufOriginal);
		fprintf(fp,"\t\tTaskStatus = %s -> %s    [任务状态标识]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTaskStatus = %s    [任务状态标识]\n",buf);
	}
	Comments.getString(buf);
	if (compare(Comments.getValue(),pOriginal->Comments.getValue())!=0)
	{
		pOriginal->Comments.getString(bufOriginal);
		fprintf(fp,"\t\tComments = %s -> %s    [任务描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tComments = %s    [任务描述]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	DeviceGroup_ID.getString(buf);
	fprintf(fp,",DeviceGroup_ID,%s",buf);	
	ManagerGroup_ID.getString(buf);
	fprintf(fp,",ManagerGroup_ID,%s",buf);	
	TimePolicy_ID.getString(buf);
	fprintf(fp,",TimePolicy_ID,%s",buf);	
	TaskPriority_ID.getString(buf);
	fprintf(fp,",TaskPriority_ID,%s",buf);	
	OutputPolicy_ID.getString(buf);
	fprintf(fp,",OutputPolicy_ID,%s",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,",ActionGroup_ID,%s",buf);	
	EventExprStr.getString(buf);
	fprintf(fp,",EventExprStr,%s",buf);	
	DeviceGroup.getString(buf);
	fprintf(fp,",DeviceGroup,%s",buf);	
	ManagerGroup.getString(buf);
	fprintf(fp,",ManagerGroup,%s",buf);	
	TimePolicy.getString(buf);
	fprintf(fp,",TimePolicy,%s",buf);	
	TaskPriority.getString(buf);
	fprintf(fp,",TaskPriority,%s",buf);	
	OutputPolicy.getString(buf);
	fprintf(fp,",OutputPolicy,%s",buf);	
	ActionGroup.getString(buf);
	fprintf(fp,",ActionGroup,%s",buf);	
	ValidFlag.getString(buf);
	fprintf(fp,",ValidFlag,%s",buf);	
	TaskStatus.getString(buf);
	fprintf(fp,",TaskStatus,%s",buf);	
	Comments.getString(buf);
	fprintf(fp,",Comments,%s",buf);	
}

void CWriteableSysNetMonitorTaskInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	DeviceGroup_ID.getString(buf);
	sprintf(p,"DeviceGroup_ID=%s,",buf);
	p+=strlen(p);
	ManagerGroup_ID.getString(buf);
	sprintf(p,"ManagerGroup_ID=%s,",buf);
	p+=strlen(p);
	TimePolicy_ID.getString(buf);
	sprintf(p,"TimePolicy_ID=%s,",buf);
	p+=strlen(p);
	TaskPriority_ID.getString(buf);
	sprintf(p,"TaskPriority_ID=%s,",buf);
	p+=strlen(p);
	OutputPolicy_ID.getString(buf);
	sprintf(p,"OutputPolicy_ID=%s,",buf);
	p+=strlen(p);
	ActionGroup_ID.getString(buf);
	sprintf(p,"ActionGroup_ID=%s,",buf);
	p+=strlen(p);
	EventExprStr.getString(buf);
	sprintf(p,"EventExprStr=%s,",buf);
	p+=strlen(p);
	DeviceGroup.getString(buf);
	sprintf(p,"DeviceGroup=%s,",buf);
	p+=strlen(p);
	ManagerGroup.getString(buf);
	sprintf(p,"ManagerGroup=%s,",buf);
	p+=strlen(p);
	TimePolicy.getString(buf);
	sprintf(p,"TimePolicy=%s,",buf);
	p+=strlen(p);
	TaskPriority.getString(buf);
	sprintf(p,"TaskPriority=%s,",buf);
	p+=strlen(p);
	OutputPolicy.getString(buf);
	sprintf(p,"OutputPolicy=%s,",buf);
	p+=strlen(p);
	ActionGroup.getString(buf);
	sprintf(p,"ActionGroup=%s,",buf);
	p+=strlen(p);
	ValidFlag.getString(buf);
	sprintf(p,"ValidFlag=%s,",buf);
	p+=strlen(p);
	TaskStatus.getString(buf);
	sprintf(p,"TaskStatus=%s,",buf);
	p+=strlen(p);
	Comments.getString(buf);
	sprintf(p,"Comments=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorTaskInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorTaskInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 任务中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 任务英文名",buf);
	DeviceGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"DeviceGroup_ID=%s 设备对象组ID",buf);
	ManagerGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"ManagerGroup_ID=%s 管理人员对象组ID",buf);
	TimePolicy_ID.getString(buf);
	pLogger->output(indent+1,0,"TimePolicy_ID=%s 任务时间策略ID",buf);
	TaskPriority_ID.getString(buf);
	pLogger->output(indent+1,0,"TaskPriority_ID=%s 任务优先级ID",buf);
	OutputPolicy_ID.getString(buf);
	pLogger->output(indent+1,0,"OutputPolicy_ID=%s 结果输出策略ID",buf);
	ActionGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"ActionGroup_ID=%s 任务动作族ID",buf);
	EventExprStr.getString(buf);
	pLogger->output(indent+1,0,"EventExprStr=%s 任务表达式ID联合串",buf);
	DeviceGroup.getString(buf);
	pLogger->output(indent+1,0,"DeviceGroup=%s 设备对象组",buf);
	ManagerGroup.getString(buf);
	pLogger->output(indent+1,0,"ManagerGroup=%s 管理人员对象组",buf);
	TimePolicy.getString(buf);
	pLogger->output(indent+1,0,"TimePolicy=%s 任务时间策略",buf);
	TaskPriority.getString(buf);
	pLogger->output(indent+1,0,"TaskPriority=%s 任务优先级",buf);
	OutputPolicy.getString(buf);
	pLogger->output(indent+1,0,"OutputPolicy=%s 结果输出策略",buf);
	ActionGroup.getString(buf);
	pLogger->output(indent+1,0,"ActionGroup=%s 任务动作族",buf);
	ValidFlag.getString(buf);
	pLogger->output(indent+1,0,"ValidFlag=%s 任务有效性标识",buf);
	TaskStatus.getString(buf);
	pLogger->output(indent+1,0,"TaskStatus=%s 任务状态标识",buf);
	Comments.getString(buf);
	pLogger->output(indent+1,0,"Comments=%s 任务描述",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorTaskInfoIterator::~CSysNetMonitorTaskInfoIterator(void)
{
}


void CSysNetMonitorTaskInfoIterator::dump(FILE *output)
{
	CSysNetMonitorTaskInfo *pSysNetMonitorTaskInfo;
	
	while ((pSysNetMonitorTaskInfo=next())!=NULL)
	{
		pSysNetMonitorTaskInfo->dump(output);
	}
}



void CWriteableSysNetMonitorTaskObjectSet::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,DeviceGroup_ID,Device_ID,DataCenter\n");
}
	
void CWriteableSysNetMonitorTaskObjectSet::init(void)
{
	ID.clear();
	DeviceGroup_ID.clear();
	Device_ID.clear();
	DataCenter.clear();
}

int CWriteableSysNetMonitorTaskObjectSet::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorTaskObjectSet),input)!=sizeof(CWriteableSysNetMonitorTaskObjectSet))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorTaskObjectSet::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceGroup_ID=token;
		}
		else
		{
			DeviceGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Device_ID=token;
		}
		else
		{
			Device_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DataCenter=token;
		}
		else
		{
			DataCenter="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"DeviceGroup_ID"))
			{
				DeviceGroup_ID=token;
			}
			else if (!strcmp(fieldName,"Device_ID"))
			{
				Device_ID=token;
			}
			else if (!strcmp(fieldName,"DataCenter"))
			{
				DataCenter=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorTaskObjectSet::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorTaskObjectSet),output)!=sizeof(CWriteableSysNetMonitorTaskObjectSet))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorTaskObjectSet::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Device_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DataCenter.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorTaskObjectSet::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorTaskObjectSet%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	DeviceGroup_ID.getString(buf);
	fprintf(fp,"\t\tDeviceGroup_ID = %s    [设备对象组ID]\n",buf);	
	Device_ID.getString(buf);
	fprintf(fp,"\t\tDevice_ID = %s    [设备ID]\n",buf);	
	DataCenter.getString(buf);
	fprintf(fp,"\t\tDataCenter = %s    [DataCenter]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskObjectSet::dumpDiff(FILE *fp, const CWriteableSysNetMonitorTaskObjectSet *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorTaskObjectSet = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	DeviceGroup_ID.getString(buf);
	if (compare(DeviceGroup_ID.getValue(),pOriginal->DeviceGroup_ID.getValue())!=0)
	{
		pOriginal->DeviceGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceGroup_ID = %s -> %s    [设备对象组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceGroup_ID = %s    [设备对象组ID]\n",buf);
	}
	Device_ID.getString(buf);
	if (compare(Device_ID.getValue(),pOriginal->Device_ID.getValue())!=0)
	{
		pOriginal->Device_ID.getString(bufOriginal);
		fprintf(fp,"\t\tDevice_ID = %s -> %s    [设备ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDevice_ID = %s    [设备ID]\n",buf);
	}
	DataCenter.getString(buf);
	if (compare(DataCenter.getValue(),pOriginal->DataCenter.getValue())!=0)
	{
		pOriginal->DataCenter.getString(bufOriginal);
		fprintf(fp,"\t\tDataCenter = %s -> %s    [DataCenter]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDataCenter = %s    [DataCenter]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskObjectSet::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	DeviceGroup_ID.getString(buf);
	fprintf(fp,",DeviceGroup_ID,%s",buf);	
	Device_ID.getString(buf);
	fprintf(fp,",Device_ID,%s",buf);	
	DataCenter.getString(buf);
	fprintf(fp,",DataCenter,%s",buf);	
}

void CWriteableSysNetMonitorTaskObjectSet::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	DeviceGroup_ID.getString(buf);
	sprintf(p,"DeviceGroup_ID=%s,",buf);
	p+=strlen(p);
	Device_ID.getString(buf);
	sprintf(p,"Device_ID=%s,",buf);
	p+=strlen(p);
	DataCenter.getString(buf);
	sprintf(p,"DataCenter=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorTaskObjectSet::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorTaskObjectSet");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	DeviceGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"DeviceGroup_ID=%s 设备对象组ID",buf);
	Device_ID.getString(buf);
	pLogger->output(indent+1,0,"Device_ID=%s 设备ID",buf);
	DataCenter.getString(buf);
	pLogger->output(indent+1,0,"DataCenter=%s DataCenter",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorTaskObjectSetIterator::~CSysNetMonitorTaskObjectSetIterator(void)
{
}


void CSysNetMonitorTaskObjectSetIterator::dump(FILE *output)
{
	CSysNetMonitorTaskObjectSet *pSysNetMonitorTaskObjectSet;
	
	while ((pSysNetMonitorTaskObjectSet=next())!=NULL)
	{
		pSysNetMonitorTaskObjectSet->dump(output);
	}
}



void CWriteableSysNetMonitorTaskResult::writeCSVHead(FILE *output)
{
	fprintf(output,"ObjectID,Task_ID,OperateTime,MonDate,MonTime,InstructChain,ResultChain,Flag\n");
}
	
void CWriteableSysNetMonitorTaskResult::init(void)
{
	ObjectID.clear();
	Task_ID.clear();
	OperateTime.clear();
	MonDate.clear();
	MonTime.clear();
	InstructChain.clear();
	ResultChain.clear();
	Flag.clear();
}

int CWriteableSysNetMonitorTaskResult::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorTaskResult),input)!=sizeof(CWriteableSysNetMonitorTaskResult))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorTaskResult::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Task_ID=token;
		}
		else
		{
			Task_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperateTime=token;
		}
		else
		{
			OperateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstructChain=token;
		}
		else
		{
			InstructChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ResultChain=token;
		}
		else
		{
			ResultChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Flag=token;
		}
		else
		{
			Flag="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"Task_ID"))
			{
				Task_ID=token;
			}
			else if (!strcmp(fieldName,"OperateTime"))
			{
				OperateTime=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"InstructChain"))
			{
				InstructChain=token;
			}
			else if (!strcmp(fieldName,"ResultChain"))
			{
				ResultChain=token;
			}
			else if (!strcmp(fieldName,"Flag"))
			{
				Flag=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorTaskResult::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorTaskResult),output)!=sizeof(CWriteableSysNetMonitorTaskResult))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorTaskResult::writeCSV(FILE *output) const
{
	char buffer[1025];
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Task_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstructChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ResultChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Flag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorTaskResult::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorTaskResult%s = {\n", index_buf);
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);	
	Task_ID.getString(buf);
	fprintf(fp,"\t\tTask_ID = %s    [任务ID]\n",buf);	
	OperateTime.getString(buf);
	fprintf(fp,"\t\tOperateTime = %s    [执行次数]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	InstructChain.getString(buf);
	fprintf(fp,"\t\tInstructChain = %s    [指令串]\n",buf);	
	ResultChain.getString(buf);
	fprintf(fp,"\t\tResultChain = %s    [结果串]\n",buf);	
	Flag.getString(buf);
	fprintf(fp,"\t\tFlag = %s    [任务执行标识]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskResult::dumpDiff(FILE *fp, const CWriteableSysNetMonitorTaskResult *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorTaskResult = {\n");
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [网络监控对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);
	}
	Task_ID.getString(buf);
	if (compare(Task_ID.getValue(),pOriginal->Task_ID.getValue())!=0)
	{
		pOriginal->Task_ID.getString(bufOriginal);
		fprintf(fp,"\t\tTask_ID = %s -> %s    [任务ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTask_ID = %s    [任务ID]\n",buf);
	}
	OperateTime.getString(buf);
	if (compare(OperateTime.getValue(),pOriginal->OperateTime.getValue())!=0)
	{
		pOriginal->OperateTime.getString(bufOriginal);
		fprintf(fp,"\t\tOperateTime = %s -> %s    [执行次数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperateTime = %s    [执行次数]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	InstructChain.getString(buf);
	if (compare(InstructChain.getValue(),pOriginal->InstructChain.getValue())!=0)
	{
		pOriginal->InstructChain.getString(bufOriginal);
		fprintf(fp,"\t\tInstructChain = %s -> %s    [指令串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstructChain = %s    [指令串]\n",buf);
	}
	ResultChain.getString(buf);
	if (compare(ResultChain.getValue(),pOriginal->ResultChain.getValue())!=0)
	{
		pOriginal->ResultChain.getString(bufOriginal);
		fprintf(fp,"\t\tResultChain = %s -> %s    [结果串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tResultChain = %s    [结果串]\n",buf);
	}
	Flag.getString(buf);
	if (compare(Flag.getValue(),pOriginal->Flag.getValue())!=0)
	{
		pOriginal->Flag.getString(bufOriginal);
		fprintf(fp,"\t\tFlag = %s -> %s    [任务执行标识]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFlag = %s    [任务执行标识]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskResult::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	Task_ID.getString(buf);
	fprintf(fp,",Task_ID,%s",buf);	
	OperateTime.getString(buf);
	fprintf(fp,",OperateTime,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	InstructChain.getString(buf);
	fprintf(fp,",InstructChain,%s",buf);	
	ResultChain.getString(buf);
	fprintf(fp,",ResultChain,%s",buf);	
	Flag.getString(buf);
	fprintf(fp,",Flag,%s",buf);	
}

void CWriteableSysNetMonitorTaskResult::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	Task_ID.getString(buf);
	sprintf(p,"Task_ID=%s,",buf);
	p+=strlen(p);
	OperateTime.getString(buf);
	sprintf(p,"OperateTime=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	InstructChain.getString(buf);
	sprintf(p,"InstructChain=%s,",buf);
	p+=strlen(p);
	ResultChain.getString(buf);
	sprintf(p,"ResultChain=%s,",buf);
	p+=strlen(p);
	Flag.getString(buf);
	sprintf(p,"Flag=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorTaskResult::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorTaskResult");
	pLogger->output(indent,0,"{");
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 网络监控对象ID",buf);
	Task_ID.getString(buf);
	pLogger->output(indent+1,0,"Task_ID=%s 任务ID",buf);
	OperateTime.getString(buf);
	pLogger->output(indent+1,0,"OperateTime=%s 执行次数",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	InstructChain.getString(buf);
	pLogger->output(indent+1,0,"InstructChain=%s 指令串",buf);
	ResultChain.getString(buf);
	pLogger->output(indent+1,0,"ResultChain=%s 结果串",buf);
	Flag.getString(buf);
	pLogger->output(indent+1,0,"Flag=%s 任务执行标识",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorTaskResultIterator::~CSysNetMonitorTaskResultIterator(void)
{
}


void CSysNetMonitorTaskResultIterator::dump(FILE *output)
{
	CSysNetMonitorTaskResult *pSysNetMonitorTaskResult;
	
	while ((pSysNetMonitorTaskResult=next())!=NULL)
	{
		pSysNetMonitorTaskResult->dump(output);
	}
}



void CWriteableSysNetPartyLinkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,MEMBER_NO,MEMBER_NAME,REMOTE_ADDR,LOCAL_ADDR,ADDRESS,LINE_STATUS,CONTACT,TELEPHONE,MOBILEPHONE,EMAIL,FAX,PROVINCE,DDN_NO,IN_MODE,IP_WAN,IP_LAN,IPADDR,Interface,INTERFACE_DATE,SOFTWARE,FEE_TYPE,SERVICEPROVIDER,IF_ZIYING,IF_TUOGUAN,HASOTHER,SEAT_NO,PRO\n");
}
	
void CWriteableSysNetPartyLinkInfo::init(void)
{
	ID.clear();
	MEMBER_NO.clear();
	MEMBER_NAME.clear();
	REMOTE_ADDR.clear();
	LOCAL_ADDR.clear();
	ADDRESS.clear();
	LINE_STATUS.clear();
	CONTACT.clear();
	TELEPHONE.clear();
	MOBILEPHONE.clear();
	EMAIL.clear();
	FAX.clear();
	PROVINCE.clear();
	DDN_NO.clear();
	IN_MODE.clear();
	IP_WAN.clear();
	IP_LAN.clear();
	IPADDR.clear();
	Interface.clear();
	INTERFACE_DATE.clear();
	SOFTWARE.clear();
	FEE_TYPE.clear();
	SERVICEPROVIDER.clear();
	IF_ZIYING.clear();
	IF_TUOGUAN.clear();
	HASOTHER.clear();
	SEAT_NO.clear();
	PRO.clear();
}

int CWriteableSysNetPartyLinkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetPartyLinkInfo),input)!=sizeof(CWriteableSysNetPartyLinkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetPartyLinkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NO=token;
		}
		else
		{
			MEMBER_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NAME=token;
		}
		else
		{
			MEMBER_NAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			REMOTE_ADDR=token;
		}
		else
		{
			REMOTE_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LOCAL_ADDR=token;
		}
		else
		{
			LOCAL_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ADDRESS=token;
		}
		else
		{
			ADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LINE_STATUS=token;
		}
		else
		{
			LINE_STATUS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONTACT=token;
		}
		else
		{
			CONTACT="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TELEPHONE=token;
		}
		else
		{
			TELEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MOBILEPHONE=token;
		}
		else
		{
			MOBILEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EMAIL=token;
		}
		else
		{
			EMAIL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FAX=token;
		}
		else
		{
			FAX="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PROVINCE=token;
		}
		else
		{
			PROVINCE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IN_MODE=token;
		}
		else
		{
			IN_MODE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_WAN=token;
		}
		else
		{
			IP_WAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_LAN=token;
		}
		else
		{
			IP_LAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			INTERFACE_DATE=token;
		}
		else
		{
			INTERFACE_DATE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SOFTWARE=token;
		}
		else
		{
			SOFTWARE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FEE_TYPE=token;
		}
		else
		{
			FEE_TYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SERVICEPROVIDER=token;
		}
		else
		{
			SERVICEPROVIDER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_ZIYING=token;
		}
		else
		{
			IF_ZIYING="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_TUOGUAN=token;
		}
		else
		{
			IF_TUOGUAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HASOTHER=token;
		}
		else
		{
			HASOTHER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SEAT_NO=token;
		}
		else
		{
			SEAT_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PRO=token;
		}
		else
		{
			PRO="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NO"))
			{
				MEMBER_NO=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NAME"))
			{
				MEMBER_NAME=token;
			}
			else if (!strcmp(fieldName,"REMOTE_ADDR"))
			{
				REMOTE_ADDR=token;
			}
			else if (!strcmp(fieldName,"LOCAL_ADDR"))
			{
				LOCAL_ADDR=token;
			}
			else if (!strcmp(fieldName,"ADDRESS"))
			{
				ADDRESS=token;
			}
			else if (!strcmp(fieldName,"LINE_STATUS"))
			{
				LINE_STATUS=token;
			}
			else if (!strcmp(fieldName,"CONTACT"))
			{
				CONTACT=token;
			}
			else if (!strcmp(fieldName,"TELEPHONE"))
			{
				TELEPHONE=token;
			}
			else if (!strcmp(fieldName,"MOBILEPHONE"))
			{
				MOBILEPHONE=token;
			}
			else if (!strcmp(fieldName,"EMAIL"))
			{
				EMAIL=token;
			}
			else if (!strcmp(fieldName,"FAX"))
			{
				FAX=token;
			}
			else if (!strcmp(fieldName,"PROVINCE"))
			{
				PROVINCE=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"IN_MODE"))
			{
				IN_MODE=token;
			}
			else if (!strcmp(fieldName,"IP_WAN"))
			{
				IP_WAN=token;
			}
			else if (!strcmp(fieldName,"IP_LAN"))
			{
				IP_LAN=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			else if (!strcmp(fieldName,"INTERFACE_DATE"))
			{
				INTERFACE_DATE=token;
			}
			else if (!strcmp(fieldName,"SOFTWARE"))
			{
				SOFTWARE=token;
			}
			else if (!strcmp(fieldName,"FEE_TYPE"))
			{
				FEE_TYPE=token;
			}
			else if (!strcmp(fieldName,"SERVICEPROVIDER"))
			{
				SERVICEPROVIDER=token;
			}
			else if (!strcmp(fieldName,"IF_ZIYING"))
			{
				IF_ZIYING=token;
			}
			else if (!strcmp(fieldName,"IF_TUOGUAN"))
			{
				IF_TUOGUAN=token;
			}
			else if (!strcmp(fieldName,"HASOTHER"))
			{
				HASOTHER=token;
			}
			else if (!strcmp(fieldName,"SEAT_NO"))
			{
				SEAT_NO=token;
			}
			else if (!strcmp(fieldName,"PRO"))
			{
				PRO=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetPartyLinkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetPartyLinkInfo),output)!=sizeof(CWriteableSysNetPartyLinkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetPartyLinkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	REMOTE_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LOCAL_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LINE_STATUS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONTACT.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TELEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MOBILEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EMAIL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FAX.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PROVINCE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IN_MODE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_WAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_LAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	INTERFACE_DATE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SOFTWARE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FEE_TYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SERVICEPROVIDER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_ZIYING.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_TUOGUAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HASOTHER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SEAT_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PRO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetPartyLinkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetPartyLinkInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);	
	CONTACT.getString(buf);
	fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);	
	EMAIL.getString(buf);
	fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);	
	FAX.getString(buf);
	fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);	
	PRO.getString(buf);
	fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartyLinkInfo::dumpDiff(FILE *fp, const CWriteableSysNetPartyLinkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetPartyLinkInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	MEMBER_NO.getString(buf);
	if (compare(MEMBER_NO.getValue(),pOriginal->MEMBER_NO.getValue())!=0)
	{
		pOriginal->MEMBER_NO.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NO = %s -> %s    [会员号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);
	}
	MEMBER_NAME.getString(buf);
	if (compare(MEMBER_NAME.getValue(),pOriginal->MEMBER_NAME.getValue())!=0)
	{
		pOriginal->MEMBER_NAME.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NAME = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);
	}
	REMOTE_ADDR.getString(buf);
	if (compare(REMOTE_ADDR.getValue(),pOriginal->REMOTE_ADDR.getValue())!=0)
	{
		pOriginal->REMOTE_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tREMOTE_ADDR = %s -> %s    [会员接入地点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);
	}
	LOCAL_ADDR.getString(buf);
	if (compare(LOCAL_ADDR.getValue(),pOriginal->LOCAL_ADDR.getValue())!=0)
	{
		pOriginal->LOCAL_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tLOCAL_ADDR = %s -> %s    [上期所接入点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);
	}
	ADDRESS.getString(buf);
	if (compare(ADDRESS.getValue(),pOriginal->ADDRESS.getValue())!=0)
	{
		pOriginal->ADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tADDRESS = %s -> %s    [地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);
	}
	LINE_STATUS.getString(buf);
	if (compare(LINE_STATUS.getValue(),pOriginal->LINE_STATUS.getValue())!=0)
	{
		pOriginal->LINE_STATUS.getString(bufOriginal);
		fprintf(fp,"\t\tLINE_STATUS = %s -> %s    [线路状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);
	}
	CONTACT.getString(buf);
	if (compare(CONTACT.getValue(),pOriginal->CONTACT.getValue())!=0)
	{
		pOriginal->CONTACT.getString(bufOriginal);
		fprintf(fp,"\t\tCONTACT = %s -> %s    [联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);
	}
	TELEPHONE.getString(buf);
	if (compare(TELEPHONE.getValue(),pOriginal->TELEPHONE.getValue())!=0)
	{
		pOriginal->TELEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tTELEPHONE = %s -> %s    [联系电话]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);
	}
	MOBILEPHONE.getString(buf);
	if (compare(MOBILEPHONE.getValue(),pOriginal->MOBILEPHONE.getValue())!=0)
	{
		pOriginal->MOBILEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tMOBILEPHONE = %s -> %s    [手机号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);
	}
	EMAIL.getString(buf);
	if (compare(EMAIL.getValue(),pOriginal->EMAIL.getValue())!=0)
	{
		pOriginal->EMAIL.getString(bufOriginal);
		fprintf(fp,"\t\tEMAIL = %s -> %s    [EMAIL]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);
	}
	FAX.getString(buf);
	if (compare(FAX.getValue(),pOriginal->FAX.getValue())!=0)
	{
		pOriginal->FAX.getString(bufOriginal);
		fprintf(fp,"\t\tFAX = %s -> %s    [传真]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);
	}
	PROVINCE.getString(buf);
	if (compare(PROVINCE.getValue(),pOriginal->PROVINCE.getValue())!=0)
	{
		pOriginal->PROVINCE.getString(bufOriginal);
		fprintf(fp,"\t\tPROVINCE = %s -> %s    [所属省份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	IN_MODE.getString(buf);
	if (compare(IN_MODE.getValue(),pOriginal->IN_MODE.getValue())!=0)
	{
		pOriginal->IN_MODE.getString(bufOriginal);
		fprintf(fp,"\t\tIN_MODE = %s -> %s    [接入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);
	}
	IP_WAN.getString(buf);
	if (compare(IP_WAN.getValue(),pOriginal->IP_WAN.getValue())!=0)
	{
		pOriginal->IP_WAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_WAN = %s -> %s    [入网IP广域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);
	}
	IP_LAN.getString(buf);
	if (compare(IP_LAN.getValue(),pOriginal->IP_LAN.getValue())!=0)
	{
		pOriginal->IP_LAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_LAN = %s -> %s    [入网IP局域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [路由器端口号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);
	}
	INTERFACE_DATE.getString(buf);
	if (compare(INTERFACE_DATE.getValue(),pOriginal->INTERFACE_DATE.getValue())!=0)
	{
		pOriginal->INTERFACE_DATE.getString(bufOriginal);
		fprintf(fp,"\t\tINTERFACE_DATE = %s -> %s    [接口开通日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);
	}
	SOFTWARE.getString(buf);
	if (compare(SOFTWARE.getValue(),pOriginal->SOFTWARE.getValue())!=0)
	{
		pOriginal->SOFTWARE.getString(bufOriginal);
		fprintf(fp,"\t\tSOFTWARE = %s -> %s    [所用软件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);
	}
	FEE_TYPE.getString(buf);
	if (compare(FEE_TYPE.getValue(),pOriginal->FEE_TYPE.getValue())!=0)
	{
		pOriginal->FEE_TYPE.getString(bufOriginal);
		fprintf(fp,"\t\tFEE_TYPE = %s -> %s    [付费类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);
	}
	SERVICEPROVIDER.getString(buf);
	if (compare(SERVICEPROVIDER.getValue(),pOriginal->SERVICEPROVIDER.getValue())!=0)
	{
		pOriginal->SERVICEPROVIDER.getString(bufOriginal);
		fprintf(fp,"\t\tSERVICEPROVIDER = %s -> %s    [运营商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);
	}
	IF_ZIYING.getString(buf);
	if (compare(IF_ZIYING.getValue(),pOriginal->IF_ZIYING.getValue())!=0)
	{
		pOriginal->IF_ZIYING.getString(bufOriginal);
		fprintf(fp,"\t\tIF_ZIYING = %s -> %s    [是否自营]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);
	}
	IF_TUOGUAN.getString(buf);
	if (compare(IF_TUOGUAN.getValue(),pOriginal->IF_TUOGUAN.getValue())!=0)
	{
		pOriginal->IF_TUOGUAN.getString(bufOriginal);
		fprintf(fp,"\t\tIF_TUOGUAN = %s -> %s    [是否托管]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);
	}
	HASOTHER.getString(buf);
	if (compare(HASOTHER.getValue(),pOriginal->HASOTHER.getValue())!=0)
	{
		pOriginal->HASOTHER.getString(bufOriginal);
		fprintf(fp,"\t\tHASOTHER = %s -> %s    [有无他所线路]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);
	}
	SEAT_NO.getString(buf);
	if (compare(SEAT_NO.getValue(),pOriginal->SEAT_NO.getValue())!=0)
	{
		pOriginal->SEAT_NO.getString(bufOriginal);
		fprintf(fp,"\t\tSEAT_NO = %s -> %s    [席位号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);
	}
	PRO.getString(buf);
	if (compare(PRO.getValue(),pOriginal->PRO.getValue())!=0)
	{
		pOriginal->PRO.getString(bufOriginal);
		fprintf(fp,"\t\tPRO = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartyLinkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,",MEMBER_NO,%s",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,",MEMBER_NAME,%s",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,",REMOTE_ADDR,%s",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,",LOCAL_ADDR,%s",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,",ADDRESS,%s",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,",LINE_STATUS,%s",buf);	
	CONTACT.getString(buf);
	fprintf(fp,",CONTACT,%s",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,",TELEPHONE,%s",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,",MOBILEPHONE,%s",buf);	
	EMAIL.getString(buf);
	fprintf(fp,",EMAIL,%s",buf);	
	FAX.getString(buf);
	fprintf(fp,",FAX,%s",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,",PROVINCE,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,",IN_MODE,%s",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,",IP_WAN,%s",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,",IP_LAN,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,",INTERFACE_DATE,%s",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,",SOFTWARE,%s",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,",FEE_TYPE,%s",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,",SERVICEPROVIDER,%s",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,",IF_ZIYING,%s",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,",IF_TUOGUAN,%s",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,",HASOTHER,%s",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,",SEAT_NO,%s",buf);	
	PRO.getString(buf);
	fprintf(fp,",PRO,%s",buf);	
}

void CWriteableSysNetPartyLinkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	MEMBER_NO.getString(buf);
	sprintf(p,"MEMBER_NO=%s,",buf);
	p+=strlen(p);
	MEMBER_NAME.getString(buf);
	sprintf(p,"MEMBER_NAME=%s,",buf);
	p+=strlen(p);
	REMOTE_ADDR.getString(buf);
	sprintf(p,"REMOTE_ADDR=%s,",buf);
	p+=strlen(p);
	LOCAL_ADDR.getString(buf);
	sprintf(p,"LOCAL_ADDR=%s,",buf);
	p+=strlen(p);
	ADDRESS.getString(buf);
	sprintf(p,"ADDRESS=%s,",buf);
	p+=strlen(p);
	LINE_STATUS.getString(buf);
	sprintf(p,"LINE_STATUS=%s,",buf);
	p+=strlen(p);
	CONTACT.getString(buf);
	sprintf(p,"CONTACT=%s,",buf);
	p+=strlen(p);
	TELEPHONE.getString(buf);
	sprintf(p,"TELEPHONE=%s,",buf);
	p+=strlen(p);
	MOBILEPHONE.getString(buf);
	sprintf(p,"MOBILEPHONE=%s,",buf);
	p+=strlen(p);
	EMAIL.getString(buf);
	sprintf(p,"EMAIL=%s,",buf);
	p+=strlen(p);
	FAX.getString(buf);
	sprintf(p,"FAX=%s,",buf);
	p+=strlen(p);
	PROVINCE.getString(buf);
	sprintf(p,"PROVINCE=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	IN_MODE.getString(buf);
	sprintf(p,"IN_MODE=%s,",buf);
	p+=strlen(p);
	IP_WAN.getString(buf);
	sprintf(p,"IP_WAN=%s,",buf);
	p+=strlen(p);
	IP_LAN.getString(buf);
	sprintf(p,"IP_LAN=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	INTERFACE_DATE.getString(buf);
	sprintf(p,"INTERFACE_DATE=%s,",buf);
	p+=strlen(p);
	SOFTWARE.getString(buf);
	sprintf(p,"SOFTWARE=%s,",buf);
	p+=strlen(p);
	FEE_TYPE.getString(buf);
	sprintf(p,"FEE_TYPE=%s,",buf);
	p+=strlen(p);
	SERVICEPROVIDER.getString(buf);
	sprintf(p,"SERVICEPROVIDER=%s,",buf);
	p+=strlen(p);
	IF_ZIYING.getString(buf);
	sprintf(p,"IF_ZIYING=%s,",buf);
	p+=strlen(p);
	IF_TUOGUAN.getString(buf);
	sprintf(p,"IF_TUOGUAN=%s,",buf);
	p+=strlen(p);
	HASOTHER.getString(buf);
	sprintf(p,"HASOTHER=%s,",buf);
	p+=strlen(p);
	SEAT_NO.getString(buf);
	sprintf(p,"SEAT_NO=%s,",buf);
	p+=strlen(p);
	PRO.getString(buf);
	sprintf(p,"PRO=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetPartyLinkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetPartyLinkInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	MEMBER_NO.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NO=%s 会员号",buf);
	MEMBER_NAME.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NAME=%s 会员名称",buf);
	REMOTE_ADDR.getString(buf);
	pLogger->output(indent+1,0,"REMOTE_ADDR=%s 会员接入地点",buf);
	LOCAL_ADDR.getString(buf);
	pLogger->output(indent+1,0,"LOCAL_ADDR=%s 上期所接入点",buf);
	ADDRESS.getString(buf);
	pLogger->output(indent+1,0,"ADDRESS=%s 地址",buf);
	LINE_STATUS.getString(buf);
	pLogger->output(indent+1,0,"LINE_STATUS=%s 线路状态",buf);
	CONTACT.getString(buf);
	pLogger->output(indent+1,0,"CONTACT=%s 联系人",buf);
	TELEPHONE.getString(buf);
	pLogger->output(indent+1,0,"TELEPHONE=%s 联系电话",buf);
	MOBILEPHONE.getString(buf);
	pLogger->output(indent+1,0,"MOBILEPHONE=%s 手机号",buf);
	EMAIL.getString(buf);
	pLogger->output(indent+1,0,"EMAIL=%s EMAIL",buf);
	FAX.getString(buf);
	pLogger->output(indent+1,0,"FAX=%s 传真",buf);
	PROVINCE.getString(buf);
	pLogger->output(indent+1,0,"PROVINCE=%s 所属省份",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	IN_MODE.getString(buf);
	pLogger->output(indent+1,0,"IN_MODE=%s 接入方式",buf);
	IP_WAN.getString(buf);
	pLogger->output(indent+1,0,"IP_WAN=%s 入网IP广域",buf);
	IP_LAN.getString(buf);
	pLogger->output(indent+1,0,"IP_LAN=%s 入网IP局域",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s 路由器端口号",buf);
	INTERFACE_DATE.getString(buf);
	pLogger->output(indent+1,0,"INTERFACE_DATE=%s 接口开通日期",buf);
	SOFTWARE.getString(buf);
	pLogger->output(indent+1,0,"SOFTWARE=%s 所用软件",buf);
	FEE_TYPE.getString(buf);
	pLogger->output(indent+1,0,"FEE_TYPE=%s 付费类型",buf);
	SERVICEPROVIDER.getString(buf);
	pLogger->output(indent+1,0,"SERVICEPROVIDER=%s 运营商",buf);
	IF_ZIYING.getString(buf);
	pLogger->output(indent+1,0,"IF_ZIYING=%s 是否自营",buf);
	IF_TUOGUAN.getString(buf);
	pLogger->output(indent+1,0,"IF_TUOGUAN=%s 是否托管",buf);
	HASOTHER.getString(buf);
	pLogger->output(indent+1,0,"HASOTHER=%s 有无他所线路",buf);
	SEAT_NO.getString(buf);
	pLogger->output(indent+1,0,"SEAT_NO=%s 席位号",buf);
	PRO.getString(buf);
	pLogger->output(indent+1,0,"PRO=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetPartyLinkInfoIterator::~CSysNetPartyLinkInfoIterator(void)
{
}


void CSysNetPartyLinkInfoIterator::dump(FILE *output)
{
	CSysNetPartyLinkInfo *pSysNetPartyLinkInfo;
	
	while ((pSysNetPartyLinkInfo=next())!=NULL)
	{
		pSysNetPartyLinkInfo->dump(output);
	}
}



void CWriteableSysNetDelPartyLinkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,MEMBER_NO,MEMBER_NAME,REMOTE_ADDR,LOCAL_ADDR,ADDRESS,LINE_STATUS,CONTACT,TELEPHONE,MOBILEPHONE,EMAIL,FAX,PROVINCE,DDN_NO,IN_MODE,IP_WAN,IP_LAN,IPADDR,Interface,INTERFACE_DATE,SOFTWARE,FEE_TYPE,SERVICEPROVIDER,IF_ZIYING,IF_TUOGUAN,HASOTHER,SEAT_NO,PRO\n");
}
	
void CWriteableSysNetDelPartyLinkInfo::init(void)
{
	ID.clear();
	MEMBER_NO.clear();
	MEMBER_NAME.clear();
	REMOTE_ADDR.clear();
	LOCAL_ADDR.clear();
	ADDRESS.clear();
	LINE_STATUS.clear();
	CONTACT.clear();
	TELEPHONE.clear();
	MOBILEPHONE.clear();
	EMAIL.clear();
	FAX.clear();
	PROVINCE.clear();
	DDN_NO.clear();
	IN_MODE.clear();
	IP_WAN.clear();
	IP_LAN.clear();
	IPADDR.clear();
	Interface.clear();
	INTERFACE_DATE.clear();
	SOFTWARE.clear();
	FEE_TYPE.clear();
	SERVICEPROVIDER.clear();
	IF_ZIYING.clear();
	IF_TUOGUAN.clear();
	HASOTHER.clear();
	SEAT_NO.clear();
	PRO.clear();
}

int CWriteableSysNetDelPartyLinkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDelPartyLinkInfo),input)!=sizeof(CWriteableSysNetDelPartyLinkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDelPartyLinkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NO=token;
		}
		else
		{
			MEMBER_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NAME=token;
		}
		else
		{
			MEMBER_NAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			REMOTE_ADDR=token;
		}
		else
		{
			REMOTE_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LOCAL_ADDR=token;
		}
		else
		{
			LOCAL_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ADDRESS=token;
		}
		else
		{
			ADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LINE_STATUS=token;
		}
		else
		{
			LINE_STATUS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONTACT=token;
		}
		else
		{
			CONTACT="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TELEPHONE=token;
		}
		else
		{
			TELEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MOBILEPHONE=token;
		}
		else
		{
			MOBILEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EMAIL=token;
		}
		else
		{
			EMAIL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FAX=token;
		}
		else
		{
			FAX="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PROVINCE=token;
		}
		else
		{
			PROVINCE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IN_MODE=token;
		}
		else
		{
			IN_MODE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_WAN=token;
		}
		else
		{
			IP_WAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_LAN=token;
		}
		else
		{
			IP_LAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			INTERFACE_DATE=token;
		}
		else
		{
			INTERFACE_DATE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SOFTWARE=token;
		}
		else
		{
			SOFTWARE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FEE_TYPE=token;
		}
		else
		{
			FEE_TYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SERVICEPROVIDER=token;
		}
		else
		{
			SERVICEPROVIDER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_ZIYING=token;
		}
		else
		{
			IF_ZIYING="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_TUOGUAN=token;
		}
		else
		{
			IF_TUOGUAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HASOTHER=token;
		}
		else
		{
			HASOTHER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SEAT_NO=token;
		}
		else
		{
			SEAT_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PRO=token;
		}
		else
		{
			PRO="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NO"))
			{
				MEMBER_NO=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NAME"))
			{
				MEMBER_NAME=token;
			}
			else if (!strcmp(fieldName,"REMOTE_ADDR"))
			{
				REMOTE_ADDR=token;
			}
			else if (!strcmp(fieldName,"LOCAL_ADDR"))
			{
				LOCAL_ADDR=token;
			}
			else if (!strcmp(fieldName,"ADDRESS"))
			{
				ADDRESS=token;
			}
			else if (!strcmp(fieldName,"LINE_STATUS"))
			{
				LINE_STATUS=token;
			}
			else if (!strcmp(fieldName,"CONTACT"))
			{
				CONTACT=token;
			}
			else if (!strcmp(fieldName,"TELEPHONE"))
			{
				TELEPHONE=token;
			}
			else if (!strcmp(fieldName,"MOBILEPHONE"))
			{
				MOBILEPHONE=token;
			}
			else if (!strcmp(fieldName,"EMAIL"))
			{
				EMAIL=token;
			}
			else if (!strcmp(fieldName,"FAX"))
			{
				FAX=token;
			}
			else if (!strcmp(fieldName,"PROVINCE"))
			{
				PROVINCE=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"IN_MODE"))
			{
				IN_MODE=token;
			}
			else if (!strcmp(fieldName,"IP_WAN"))
			{
				IP_WAN=token;
			}
			else if (!strcmp(fieldName,"IP_LAN"))
			{
				IP_LAN=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			else if (!strcmp(fieldName,"INTERFACE_DATE"))
			{
				INTERFACE_DATE=token;
			}
			else if (!strcmp(fieldName,"SOFTWARE"))
			{
				SOFTWARE=token;
			}
			else if (!strcmp(fieldName,"FEE_TYPE"))
			{
				FEE_TYPE=token;
			}
			else if (!strcmp(fieldName,"SERVICEPROVIDER"))
			{
				SERVICEPROVIDER=token;
			}
			else if (!strcmp(fieldName,"IF_ZIYING"))
			{
				IF_ZIYING=token;
			}
			else if (!strcmp(fieldName,"IF_TUOGUAN"))
			{
				IF_TUOGUAN=token;
			}
			else if (!strcmp(fieldName,"HASOTHER"))
			{
				HASOTHER=token;
			}
			else if (!strcmp(fieldName,"SEAT_NO"))
			{
				SEAT_NO=token;
			}
			else if (!strcmp(fieldName,"PRO"))
			{
				PRO=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDelPartyLinkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDelPartyLinkInfo),output)!=sizeof(CWriteableSysNetDelPartyLinkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDelPartyLinkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	REMOTE_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LOCAL_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LINE_STATUS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONTACT.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TELEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MOBILEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EMAIL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FAX.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PROVINCE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IN_MODE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_WAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_LAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	INTERFACE_DATE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SOFTWARE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FEE_TYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SERVICEPROVIDER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_ZIYING.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_TUOGUAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HASOTHER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SEAT_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PRO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDelPartyLinkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDelPartyLinkInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);	
	CONTACT.getString(buf);
	fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);	
	EMAIL.getString(buf);
	fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);	
	FAX.getString(buf);
	fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);	
	PRO.getString(buf);
	fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDelPartyLinkInfo::dumpDiff(FILE *fp, const CWriteableSysNetDelPartyLinkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDelPartyLinkInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	MEMBER_NO.getString(buf);
	if (compare(MEMBER_NO.getValue(),pOriginal->MEMBER_NO.getValue())!=0)
	{
		pOriginal->MEMBER_NO.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NO = %s -> %s    [会员号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);
	}
	MEMBER_NAME.getString(buf);
	if (compare(MEMBER_NAME.getValue(),pOriginal->MEMBER_NAME.getValue())!=0)
	{
		pOriginal->MEMBER_NAME.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NAME = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);
	}
	REMOTE_ADDR.getString(buf);
	if (compare(REMOTE_ADDR.getValue(),pOriginal->REMOTE_ADDR.getValue())!=0)
	{
		pOriginal->REMOTE_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tREMOTE_ADDR = %s -> %s    [会员接入地点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);
	}
	LOCAL_ADDR.getString(buf);
	if (compare(LOCAL_ADDR.getValue(),pOriginal->LOCAL_ADDR.getValue())!=0)
	{
		pOriginal->LOCAL_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tLOCAL_ADDR = %s -> %s    [上期所接入点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);
	}
	ADDRESS.getString(buf);
	if (compare(ADDRESS.getValue(),pOriginal->ADDRESS.getValue())!=0)
	{
		pOriginal->ADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tADDRESS = %s -> %s    [地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);
	}
	LINE_STATUS.getString(buf);
	if (compare(LINE_STATUS.getValue(),pOriginal->LINE_STATUS.getValue())!=0)
	{
		pOriginal->LINE_STATUS.getString(bufOriginal);
		fprintf(fp,"\t\tLINE_STATUS = %s -> %s    [线路状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);
	}
	CONTACT.getString(buf);
	if (compare(CONTACT.getValue(),pOriginal->CONTACT.getValue())!=0)
	{
		pOriginal->CONTACT.getString(bufOriginal);
		fprintf(fp,"\t\tCONTACT = %s -> %s    [联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);
	}
	TELEPHONE.getString(buf);
	if (compare(TELEPHONE.getValue(),pOriginal->TELEPHONE.getValue())!=0)
	{
		pOriginal->TELEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tTELEPHONE = %s -> %s    [联系电话]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);
	}
	MOBILEPHONE.getString(buf);
	if (compare(MOBILEPHONE.getValue(),pOriginal->MOBILEPHONE.getValue())!=0)
	{
		pOriginal->MOBILEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tMOBILEPHONE = %s -> %s    [手机号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);
	}
	EMAIL.getString(buf);
	if (compare(EMAIL.getValue(),pOriginal->EMAIL.getValue())!=0)
	{
		pOriginal->EMAIL.getString(bufOriginal);
		fprintf(fp,"\t\tEMAIL = %s -> %s    [EMAIL]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);
	}
	FAX.getString(buf);
	if (compare(FAX.getValue(),pOriginal->FAX.getValue())!=0)
	{
		pOriginal->FAX.getString(bufOriginal);
		fprintf(fp,"\t\tFAX = %s -> %s    [传真]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);
	}
	PROVINCE.getString(buf);
	if (compare(PROVINCE.getValue(),pOriginal->PROVINCE.getValue())!=0)
	{
		pOriginal->PROVINCE.getString(bufOriginal);
		fprintf(fp,"\t\tPROVINCE = %s -> %s    [所属省份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	IN_MODE.getString(buf);
	if (compare(IN_MODE.getValue(),pOriginal->IN_MODE.getValue())!=0)
	{
		pOriginal->IN_MODE.getString(bufOriginal);
		fprintf(fp,"\t\tIN_MODE = %s -> %s    [接入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);
	}
	IP_WAN.getString(buf);
	if (compare(IP_WAN.getValue(),pOriginal->IP_WAN.getValue())!=0)
	{
		pOriginal->IP_WAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_WAN = %s -> %s    [入网IP广域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);
	}
	IP_LAN.getString(buf);
	if (compare(IP_LAN.getValue(),pOriginal->IP_LAN.getValue())!=0)
	{
		pOriginal->IP_LAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_LAN = %s -> %s    [入网IP局域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [路由器端口号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);
	}
	INTERFACE_DATE.getString(buf);
	if (compare(INTERFACE_DATE.getValue(),pOriginal->INTERFACE_DATE.getValue())!=0)
	{
		pOriginal->INTERFACE_DATE.getString(bufOriginal);
		fprintf(fp,"\t\tINTERFACE_DATE = %s -> %s    [接口开通日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);
	}
	SOFTWARE.getString(buf);
	if (compare(SOFTWARE.getValue(),pOriginal->SOFTWARE.getValue())!=0)
	{
		pOriginal->SOFTWARE.getString(bufOriginal);
		fprintf(fp,"\t\tSOFTWARE = %s -> %s    [所用软件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);
	}
	FEE_TYPE.getString(buf);
	if (compare(FEE_TYPE.getValue(),pOriginal->FEE_TYPE.getValue())!=0)
	{
		pOriginal->FEE_TYPE.getString(bufOriginal);
		fprintf(fp,"\t\tFEE_TYPE = %s -> %s    [付费类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);
	}
	SERVICEPROVIDER.getString(buf);
	if (compare(SERVICEPROVIDER.getValue(),pOriginal->SERVICEPROVIDER.getValue())!=0)
	{
		pOriginal->SERVICEPROVIDER.getString(bufOriginal);
		fprintf(fp,"\t\tSERVICEPROVIDER = %s -> %s    [运营商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);
	}
	IF_ZIYING.getString(buf);
	if (compare(IF_ZIYING.getValue(),pOriginal->IF_ZIYING.getValue())!=0)
	{
		pOriginal->IF_ZIYING.getString(bufOriginal);
		fprintf(fp,"\t\tIF_ZIYING = %s -> %s    [是否自营]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);
	}
	IF_TUOGUAN.getString(buf);
	if (compare(IF_TUOGUAN.getValue(),pOriginal->IF_TUOGUAN.getValue())!=0)
	{
		pOriginal->IF_TUOGUAN.getString(bufOriginal);
		fprintf(fp,"\t\tIF_TUOGUAN = %s -> %s    [是否托管]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);
	}
	HASOTHER.getString(buf);
	if (compare(HASOTHER.getValue(),pOriginal->HASOTHER.getValue())!=0)
	{
		pOriginal->HASOTHER.getString(bufOriginal);
		fprintf(fp,"\t\tHASOTHER = %s -> %s    [有无他所线路]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);
	}
	SEAT_NO.getString(buf);
	if (compare(SEAT_NO.getValue(),pOriginal->SEAT_NO.getValue())!=0)
	{
		pOriginal->SEAT_NO.getString(bufOriginal);
		fprintf(fp,"\t\tSEAT_NO = %s -> %s    [席位号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);
	}
	PRO.getString(buf);
	if (compare(PRO.getValue(),pOriginal->PRO.getValue())!=0)
	{
		pOriginal->PRO.getString(bufOriginal);
		fprintf(fp,"\t\tPRO = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDelPartyLinkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,",MEMBER_NO,%s",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,",MEMBER_NAME,%s",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,",REMOTE_ADDR,%s",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,",LOCAL_ADDR,%s",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,",ADDRESS,%s",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,",LINE_STATUS,%s",buf);	
	CONTACT.getString(buf);
	fprintf(fp,",CONTACT,%s",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,",TELEPHONE,%s",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,",MOBILEPHONE,%s",buf);	
	EMAIL.getString(buf);
	fprintf(fp,",EMAIL,%s",buf);	
	FAX.getString(buf);
	fprintf(fp,",FAX,%s",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,",PROVINCE,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,",IN_MODE,%s",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,",IP_WAN,%s",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,",IP_LAN,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,",INTERFACE_DATE,%s",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,",SOFTWARE,%s",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,",FEE_TYPE,%s",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,",SERVICEPROVIDER,%s",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,",IF_ZIYING,%s",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,",IF_TUOGUAN,%s",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,",HASOTHER,%s",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,",SEAT_NO,%s",buf);	
	PRO.getString(buf);
	fprintf(fp,",PRO,%s",buf);	
}

void CWriteableSysNetDelPartyLinkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	MEMBER_NO.getString(buf);
	sprintf(p,"MEMBER_NO=%s,",buf);
	p+=strlen(p);
	MEMBER_NAME.getString(buf);
	sprintf(p,"MEMBER_NAME=%s,",buf);
	p+=strlen(p);
	REMOTE_ADDR.getString(buf);
	sprintf(p,"REMOTE_ADDR=%s,",buf);
	p+=strlen(p);
	LOCAL_ADDR.getString(buf);
	sprintf(p,"LOCAL_ADDR=%s,",buf);
	p+=strlen(p);
	ADDRESS.getString(buf);
	sprintf(p,"ADDRESS=%s,",buf);
	p+=strlen(p);
	LINE_STATUS.getString(buf);
	sprintf(p,"LINE_STATUS=%s,",buf);
	p+=strlen(p);
	CONTACT.getString(buf);
	sprintf(p,"CONTACT=%s,",buf);
	p+=strlen(p);
	TELEPHONE.getString(buf);
	sprintf(p,"TELEPHONE=%s,",buf);
	p+=strlen(p);
	MOBILEPHONE.getString(buf);
	sprintf(p,"MOBILEPHONE=%s,",buf);
	p+=strlen(p);
	EMAIL.getString(buf);
	sprintf(p,"EMAIL=%s,",buf);
	p+=strlen(p);
	FAX.getString(buf);
	sprintf(p,"FAX=%s,",buf);
	p+=strlen(p);
	PROVINCE.getString(buf);
	sprintf(p,"PROVINCE=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	IN_MODE.getString(buf);
	sprintf(p,"IN_MODE=%s,",buf);
	p+=strlen(p);
	IP_WAN.getString(buf);
	sprintf(p,"IP_WAN=%s,",buf);
	p+=strlen(p);
	IP_LAN.getString(buf);
	sprintf(p,"IP_LAN=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	INTERFACE_DATE.getString(buf);
	sprintf(p,"INTERFACE_DATE=%s,",buf);
	p+=strlen(p);
	SOFTWARE.getString(buf);
	sprintf(p,"SOFTWARE=%s,",buf);
	p+=strlen(p);
	FEE_TYPE.getString(buf);
	sprintf(p,"FEE_TYPE=%s,",buf);
	p+=strlen(p);
	SERVICEPROVIDER.getString(buf);
	sprintf(p,"SERVICEPROVIDER=%s,",buf);
	p+=strlen(p);
	IF_ZIYING.getString(buf);
	sprintf(p,"IF_ZIYING=%s,",buf);
	p+=strlen(p);
	IF_TUOGUAN.getString(buf);
	sprintf(p,"IF_TUOGUAN=%s,",buf);
	p+=strlen(p);
	HASOTHER.getString(buf);
	sprintf(p,"HASOTHER=%s,",buf);
	p+=strlen(p);
	SEAT_NO.getString(buf);
	sprintf(p,"SEAT_NO=%s,",buf);
	p+=strlen(p);
	PRO.getString(buf);
	sprintf(p,"PRO=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDelPartyLinkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDelPartyLinkInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	MEMBER_NO.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NO=%s 会员号",buf);
	MEMBER_NAME.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NAME=%s 会员名称",buf);
	REMOTE_ADDR.getString(buf);
	pLogger->output(indent+1,0,"REMOTE_ADDR=%s 会员接入地点",buf);
	LOCAL_ADDR.getString(buf);
	pLogger->output(indent+1,0,"LOCAL_ADDR=%s 上期所接入点",buf);
	ADDRESS.getString(buf);
	pLogger->output(indent+1,0,"ADDRESS=%s 地址",buf);
	LINE_STATUS.getString(buf);
	pLogger->output(indent+1,0,"LINE_STATUS=%s 线路状态",buf);
	CONTACT.getString(buf);
	pLogger->output(indent+1,0,"CONTACT=%s 联系人",buf);
	TELEPHONE.getString(buf);
	pLogger->output(indent+1,0,"TELEPHONE=%s 联系电话",buf);
	MOBILEPHONE.getString(buf);
	pLogger->output(indent+1,0,"MOBILEPHONE=%s 手机号",buf);
	EMAIL.getString(buf);
	pLogger->output(indent+1,0,"EMAIL=%s EMAIL",buf);
	FAX.getString(buf);
	pLogger->output(indent+1,0,"FAX=%s 传真",buf);
	PROVINCE.getString(buf);
	pLogger->output(indent+1,0,"PROVINCE=%s 所属省份",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	IN_MODE.getString(buf);
	pLogger->output(indent+1,0,"IN_MODE=%s 接入方式",buf);
	IP_WAN.getString(buf);
	pLogger->output(indent+1,0,"IP_WAN=%s 入网IP广域",buf);
	IP_LAN.getString(buf);
	pLogger->output(indent+1,0,"IP_LAN=%s 入网IP局域",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s 路由器端口号",buf);
	INTERFACE_DATE.getString(buf);
	pLogger->output(indent+1,0,"INTERFACE_DATE=%s 接口开通日期",buf);
	SOFTWARE.getString(buf);
	pLogger->output(indent+1,0,"SOFTWARE=%s 所用软件",buf);
	FEE_TYPE.getString(buf);
	pLogger->output(indent+1,0,"FEE_TYPE=%s 付费类型",buf);
	SERVICEPROVIDER.getString(buf);
	pLogger->output(indent+1,0,"SERVICEPROVIDER=%s 运营商",buf);
	IF_ZIYING.getString(buf);
	pLogger->output(indent+1,0,"IF_ZIYING=%s 是否自营",buf);
	IF_TUOGUAN.getString(buf);
	pLogger->output(indent+1,0,"IF_TUOGUAN=%s 是否托管",buf);
	HASOTHER.getString(buf);
	pLogger->output(indent+1,0,"HASOTHER=%s 有无他所线路",buf);
	SEAT_NO.getString(buf);
	pLogger->output(indent+1,0,"SEAT_NO=%s 席位号",buf);
	PRO.getString(buf);
	pLogger->output(indent+1,0,"PRO=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDelPartyLinkInfoIterator::~CSysNetDelPartyLinkInfoIterator(void)
{
}


void CSysNetDelPartyLinkInfoIterator::dump(FILE *output)
{
	CSysNetDelPartyLinkInfo *pSysNetDelPartyLinkInfo;
	
	while ((pSysNetDelPartyLinkInfo=next())!=NULL)
	{
		pSysNetDelPartyLinkInfo->dump(output);
	}
}



void CWriteableSysNetPartyLinkAddrChange::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,RelationID,OLDADDRESS,NEWADDRESS,OPERATOR,MonDate,MonTime\n");
}
	
void CWriteableSysNetPartyLinkAddrChange::init(void)
{
	ID.clear();
	RelationID.clear();
	OLDADDRESS.clear();
	NEWADDRESS.clear();
	OPERATOR.clear();
	MonDate.clear();
	MonTime.clear();
}

int CWriteableSysNetPartyLinkAddrChange::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetPartyLinkAddrChange),input)!=sizeof(CWriteableSysNetPartyLinkAddrChange))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetPartyLinkAddrChange::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RelationID=token;
		}
		else
		{
			RelationID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OLDADDRESS=token;
		}
		else
		{
			OLDADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NEWADDRESS=token;
		}
		else
		{
			NEWADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OPERATOR=token;
		}
		else
		{
			OPERATOR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"RelationID"))
			{
				RelationID=token;
			}
			else if (!strcmp(fieldName,"OLDADDRESS"))
			{
				OLDADDRESS=token;
			}
			else if (!strcmp(fieldName,"NEWADDRESS"))
			{
				NEWADDRESS=token;
			}
			else if (!strcmp(fieldName,"OPERATOR"))
			{
				OPERATOR=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetPartyLinkAddrChange::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetPartyLinkAddrChange),output)!=sizeof(CWriteableSysNetPartyLinkAddrChange))
		return 0;
	else
		return 1;
}

int CWriteableSysNetPartyLinkAddrChange::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RelationID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OLDADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NEWADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OPERATOR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetPartyLinkAddrChange::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetPartyLinkAddrChange%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	RelationID.getString(buf);
	fprintf(fp,"\t\tRelationID = %s    [ID]\n",buf);	
	OLDADDRESS.getString(buf);
	fprintf(fp,"\t\tOLDADDRESS = %s    [变更前地址]\n",buf);	
	NEWADDRESS.getString(buf);
	fprintf(fp,"\t\tNEWADDRESS = %s    [变更后地址]\n",buf);	
	OPERATOR.getString(buf);
	fprintf(fp,"\t\tOPERATOR = %s    [操作人]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [修改日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [修改时间]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartyLinkAddrChange::dumpDiff(FILE *fp, const CWriteableSysNetPartyLinkAddrChange *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetPartyLinkAddrChange = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	RelationID.getString(buf);
	if (compare(RelationID.getValue(),pOriginal->RelationID.getValue())!=0)
	{
		pOriginal->RelationID.getString(bufOriginal);
		fprintf(fp,"\t\tRelationID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRelationID = %s    [ID]\n",buf);
	}
	OLDADDRESS.getString(buf);
	if (compare(OLDADDRESS.getValue(),pOriginal->OLDADDRESS.getValue())!=0)
	{
		pOriginal->OLDADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tOLDADDRESS = %s -> %s    [变更前地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOLDADDRESS = %s    [变更前地址]\n",buf);
	}
	NEWADDRESS.getString(buf);
	if (compare(NEWADDRESS.getValue(),pOriginal->NEWADDRESS.getValue())!=0)
	{
		pOriginal->NEWADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tNEWADDRESS = %s -> %s    [变更后地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNEWADDRESS = %s    [变更后地址]\n",buf);
	}
	OPERATOR.getString(buf);
	if (compare(OPERATOR.getValue(),pOriginal->OPERATOR.getValue())!=0)
	{
		pOriginal->OPERATOR.getString(bufOriginal);
		fprintf(fp,"\t\tOPERATOR = %s -> %s    [操作人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOPERATOR = %s    [操作人]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [修改日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [修改日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [修改时间]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartyLinkAddrChange::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	RelationID.getString(buf);
	fprintf(fp,",RelationID,%s",buf);	
	OLDADDRESS.getString(buf);
	fprintf(fp,",OLDADDRESS,%s",buf);	
	NEWADDRESS.getString(buf);
	fprintf(fp,",NEWADDRESS,%s",buf);	
	OPERATOR.getString(buf);
	fprintf(fp,",OPERATOR,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
}

void CWriteableSysNetPartyLinkAddrChange::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	RelationID.getString(buf);
	sprintf(p,"RelationID=%s,",buf);
	p+=strlen(p);
	OLDADDRESS.getString(buf);
	sprintf(p,"OLDADDRESS=%s,",buf);
	p+=strlen(p);
	NEWADDRESS.getString(buf);
	sprintf(p,"NEWADDRESS=%s,",buf);
	p+=strlen(p);
	OPERATOR.getString(buf);
	sprintf(p,"OPERATOR=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetPartyLinkAddrChange::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetPartyLinkAddrChange");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	RelationID.getString(buf);
	pLogger->output(indent+1,0,"RelationID=%s ID",buf);
	OLDADDRESS.getString(buf);
	pLogger->output(indent+1,0,"OLDADDRESS=%s 变更前地址",buf);
	NEWADDRESS.getString(buf);
	pLogger->output(indent+1,0,"NEWADDRESS=%s 变更后地址",buf);
	OPERATOR.getString(buf);
	pLogger->output(indent+1,0,"OPERATOR=%s 操作人",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 修改日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 修改时间",buf);
	pLogger->output(indent,0,"}");
}

CSysNetPartyLinkAddrChangeIterator::~CSysNetPartyLinkAddrChangeIterator(void)
{
}


void CSysNetPartyLinkAddrChangeIterator::dump(FILE *output)
{
	CSysNetPartyLinkAddrChange *pSysNetPartyLinkAddrChange;
	
	while ((pSysNetPartyLinkAddrChange=next())!=NULL)
	{
		pSysNetPartyLinkAddrChange->dump(output);
	}
}



void CWriteableSysNetMonitorActionAttr::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ActionGroup_ID,MonitorAttr_ID,MonitorAttrName\n");
}
	
void CWriteableSysNetMonitorActionAttr::init(void)
{
	ID.clear();
	ActionGroup_ID.clear();
	MonitorAttr_ID.clear();
	MonitorAttrName.clear();
}

int CWriteableSysNetMonitorActionAttr::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorActionAttr),input)!=sizeof(CWriteableSysNetMonitorActionAttr))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorActionAttr::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionGroup_ID=token;
		}
		else
		{
			ActionGroup_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorAttr_ID=token;
		}
		else
		{
			MonitorAttr_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorAttrName=token;
		}
		else
		{
			MonitorAttrName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ActionGroup_ID"))
			{
				ActionGroup_ID=token;
			}
			else if (!strcmp(fieldName,"MonitorAttr_ID"))
			{
				MonitorAttr_ID=token;
			}
			else if (!strcmp(fieldName,"MonitorAttrName"))
			{
				MonitorAttrName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorActionAttr::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorActionAttr),output)!=sizeof(CWriteableSysNetMonitorActionAttr))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorActionAttr::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionGroup_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorAttr_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorAttrName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorActionAttr::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorActionAttr%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,"\t\tActionGroup_ID = %s    [动作族ID]\n",buf);	
	MonitorAttr_ID.getString(buf);
	fprintf(fp,"\t\tMonitorAttr_ID = %s    [监控对象ID]\n",buf);	
	MonitorAttrName.getString(buf);
	fprintf(fp,"\t\tMonitorAttrName = %s    [指标英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorActionAttr::dumpDiff(FILE *fp, const CWriteableSysNetMonitorActionAttr *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorActionAttr = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ActionGroup_ID.getString(buf);
	if (compare(ActionGroup_ID.getValue(),pOriginal->ActionGroup_ID.getValue())!=0)
	{
		pOriginal->ActionGroup_ID.getString(bufOriginal);
		fprintf(fp,"\t\tActionGroup_ID = %s -> %s    [动作族ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionGroup_ID = %s    [动作族ID]\n",buf);
	}
	MonitorAttr_ID.getString(buf);
	if (compare(MonitorAttr_ID.getValue(),pOriginal->MonitorAttr_ID.getValue())!=0)
	{
		pOriginal->MonitorAttr_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorAttr_ID = %s -> %s    [监控对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorAttr_ID = %s    [监控对象ID]\n",buf);
	}
	MonitorAttrName.getString(buf);
	if (compare(MonitorAttrName.getValue(),pOriginal->MonitorAttrName.getValue())!=0)
	{
		pOriginal->MonitorAttrName.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorAttrName = %s -> %s    [指标英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorAttrName = %s    [指标英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorActionAttr::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ActionGroup_ID.getString(buf);
	fprintf(fp,",ActionGroup_ID,%s",buf);	
	MonitorAttr_ID.getString(buf);
	fprintf(fp,",MonitorAttr_ID,%s",buf);	
	MonitorAttrName.getString(buf);
	fprintf(fp,",MonitorAttrName,%s",buf);	
}

void CWriteableSysNetMonitorActionAttr::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ActionGroup_ID.getString(buf);
	sprintf(p,"ActionGroup_ID=%s,",buf);
	p+=strlen(p);
	MonitorAttr_ID.getString(buf);
	sprintf(p,"MonitorAttr_ID=%s,",buf);
	p+=strlen(p);
	MonitorAttrName.getString(buf);
	sprintf(p,"MonitorAttrName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorActionAttr::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorActionAttr");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ActionGroup_ID.getString(buf);
	pLogger->output(indent+1,0,"ActionGroup_ID=%s 动作族ID",buf);
	MonitorAttr_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorAttr_ID=%s 监控对象ID",buf);
	MonitorAttrName.getString(buf);
	pLogger->output(indent+1,0,"MonitorAttrName=%s 指标英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorActionAttrIterator::~CSysNetMonitorActionAttrIterator(void)
{
}


void CSysNetMonitorActionAttrIterator::dump(FILE *output)
{
	CSysNetMonitorActionAttr *pSysNetMonitorActionAttr;
	
	while ((pSysNetMonitorActionAttr=next())!=NULL)
	{
		pSysNetMonitorActionAttr->dump(output);
	}
}



void CWriteableSysNetModule::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ObjectID,MonitorType_ID,DeviceID,DeviceObjectID,Name,Description,ModuleIndex,EntPhyIndex\n");
}
	
void CWriteableSysNetModule::init(void)
{
	ID.clear();
	ObjectID.clear();
	MonitorType_ID.clear();
	DeviceID.clear();
	DeviceObjectID.clear();
	Name.clear();
	Description.clear();
	ModuleIndex.clear();
	EntPhyIndex.clear();
}

int CWriteableSysNetModule::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetModule),input)!=sizeof(CWriteableSysNetModule))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetModule::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonitorType_ID=token;
		}
		else
		{
			MonitorType_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceID=token;
		}
		else
		{
			DeviceID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceObjectID=token;
		}
		else
		{
			DeviceObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Name=token;
		}
		else
		{
			Name="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Description=token;
		}
		else
		{
			Description="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ModuleIndex=token;
		}
		else
		{
			ModuleIndex="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EntPhyIndex=token;
		}
		else
		{
			EntPhyIndex="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"MonitorType_ID"))
			{
				MonitorType_ID=token;
			}
			else if (!strcmp(fieldName,"DeviceID"))
			{
				DeviceID=token;
			}
			else if (!strcmp(fieldName,"DeviceObjectID"))
			{
				DeviceObjectID=token;
			}
			else if (!strcmp(fieldName,"Name"))
			{
				Name=token;
			}
			else if (!strcmp(fieldName,"Description"))
			{
				Description=token;
			}
			else if (!strcmp(fieldName,"ModuleIndex"))
			{
				ModuleIndex=token;
			}
			else if (!strcmp(fieldName,"EntPhyIndex"))
			{
				EntPhyIndex=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetModule::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetModule),output)!=sizeof(CWriteableSysNetModule))
		return 0;
	else
		return 1;
}

int CWriteableSysNetModule::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonitorType_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Name.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Description.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ModuleIndex.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EntPhyIndex.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetModule::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetModule%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);	
	DeviceID.getString(buf);
	fprintf(fp,"\t\tDeviceID = %s    [所属设备ID]\n",buf);	
	DeviceObjectID.getString(buf);
	fprintf(fp,"\t\tDeviceObjectID = %s    [所属设备ObjectID]\n",buf);	
	Name.getString(buf);
	fprintf(fp,"\t\tName = %s    [名字]\n",buf);	
	Description.getString(buf);
	fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);	
	ModuleIndex.getString(buf);
	fprintf(fp,"\t\tModuleIndex = %s    [模块索引]\n",buf);	
	EntPhyIndex.getString(buf);
	fprintf(fp,"\t\tEntPhyIndex = %s    [物理索引]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetModule::dumpDiff(FILE *fp, const CWriteableSysNetModule *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetModule = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [网络监控对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);
	}
	MonitorType_ID.getString(buf);
	if (compare(MonitorType_ID.getValue(),pOriginal->MonitorType_ID.getValue())!=0)
	{
		pOriginal->MonitorType_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMonitorType_ID = %s -> %s    [监控对象类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonitorType_ID = %s    [监控对象类型]\n",buf);
	}
	DeviceID.getString(buf);
	if (compare(DeviceID.getValue(),pOriginal->DeviceID.getValue())!=0)
	{
		pOriginal->DeviceID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceID = %s -> %s    [所属设备ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceID = %s    [所属设备ID]\n",buf);
	}
	DeviceObjectID.getString(buf);
	if (compare(DeviceObjectID.getValue(),pOriginal->DeviceObjectID.getValue())!=0)
	{
		pOriginal->DeviceObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceObjectID = %s -> %s    [所属设备ObjectID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceObjectID = %s    [所属设备ObjectID]\n",buf);
	}
	Name.getString(buf);
	if (compare(Name.getValue(),pOriginal->Name.getValue())!=0)
	{
		pOriginal->Name.getString(bufOriginal);
		fprintf(fp,"\t\tName = %s -> %s    [名字]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tName = %s    [名字]\n",buf);
	}
	Description.getString(buf);
	if (compare(Description.getValue(),pOriginal->Description.getValue())!=0)
	{
		pOriginal->Description.getString(bufOriginal);
		fprintf(fp,"\t\tDescription = %s -> %s    [描述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDescription = %s    [描述]\n",buf);
	}
	ModuleIndex.getString(buf);
	if (compare(ModuleIndex.getValue(),pOriginal->ModuleIndex.getValue())!=0)
	{
		pOriginal->ModuleIndex.getString(bufOriginal);
		fprintf(fp,"\t\tModuleIndex = %s -> %s    [模块索引]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tModuleIndex = %s    [模块索引]\n",buf);
	}
	EntPhyIndex.getString(buf);
	if (compare(EntPhyIndex.getValue(),pOriginal->EntPhyIndex.getValue())!=0)
	{
		pOriginal->EntPhyIndex.getString(bufOriginal);
		fprintf(fp,"\t\tEntPhyIndex = %s -> %s    [物理索引]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEntPhyIndex = %s    [物理索引]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetModule::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	MonitorType_ID.getString(buf);
	fprintf(fp,",MonitorType_ID,%s",buf);	
	DeviceID.getString(buf);
	fprintf(fp,",DeviceID,%s",buf);	
	DeviceObjectID.getString(buf);
	fprintf(fp,",DeviceObjectID,%s",buf);	
	Name.getString(buf);
	fprintf(fp,",Name,%s",buf);	
	Description.getString(buf);
	fprintf(fp,",Description,%s",buf);	
	ModuleIndex.getString(buf);
	fprintf(fp,",ModuleIndex,%s",buf);	
	EntPhyIndex.getString(buf);
	fprintf(fp,",EntPhyIndex,%s",buf);	
}

void CWriteableSysNetModule::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	MonitorType_ID.getString(buf);
	sprintf(p,"MonitorType_ID=%s,",buf);
	p+=strlen(p);
	DeviceID.getString(buf);
	sprintf(p,"DeviceID=%s,",buf);
	p+=strlen(p);
	DeviceObjectID.getString(buf);
	sprintf(p,"DeviceObjectID=%s,",buf);
	p+=strlen(p);
	Name.getString(buf);
	sprintf(p,"Name=%s,",buf);
	p+=strlen(p);
	Description.getString(buf);
	sprintf(p,"Description=%s,",buf);
	p+=strlen(p);
	ModuleIndex.getString(buf);
	sprintf(p,"ModuleIndex=%s,",buf);
	p+=strlen(p);
	EntPhyIndex.getString(buf);
	sprintf(p,"EntPhyIndex=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetModule::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetModule");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 网络监控对象ID",buf);
	MonitorType_ID.getString(buf);
	pLogger->output(indent+1,0,"MonitorType_ID=%s 监控对象类型",buf);
	DeviceID.getString(buf);
	pLogger->output(indent+1,0,"DeviceID=%s 所属设备ID",buf);
	DeviceObjectID.getString(buf);
	pLogger->output(indent+1,0,"DeviceObjectID=%s 所属设备ObjectID",buf);
	Name.getString(buf);
	pLogger->output(indent+1,0,"Name=%s 名字",buf);
	Description.getString(buf);
	pLogger->output(indent+1,0,"Description=%s 描述",buf);
	ModuleIndex.getString(buf);
	pLogger->output(indent+1,0,"ModuleIndex=%s 模块索引",buf);
	EntPhyIndex.getString(buf);
	pLogger->output(indent+1,0,"EntPhyIndex=%s 物理索引",buf);
	pLogger->output(indent,0,"}");
}

CSysNetModuleIterator::~CSysNetModuleIterator(void)
{
}


void CSysNetModuleIterator::dump(FILE *output)
{
	CSysNetModule *pSysNetModule;
	
	while ((pSysNetModule=next())!=NULL)
	{
		pSysNetModule->dump(output);
	}
}



void CWriteableSysNetEventExpr::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CNAME,ENAME,WarningLEVEL,EventTypeID,SubEventTypeID,GIVEUPTIME,CONTROL,EXPR,BRIEF,DISCRIPTION,MSGGROUP_ID,ADMINGROUP_ID\n");
}
	
void CWriteableSysNetEventExpr::init(void)
{
	ID.clear();
	CNAME.clear();
	ENAME.clear();
	WarningLEVEL.clear();
	EventTypeID.clear();
	SubEventTypeID.clear();
	GIVEUPTIME.clear();
	CONTROL.clear();
	EXPR.clear();
	BRIEF.clear();
	DISCRIPTION.clear();
	MSGGROUP_ID.clear();
	ADMINGROUP_ID.clear();
}

int CWriteableSysNetEventExpr::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetEventExpr),input)!=sizeof(CWriteableSysNetEventExpr))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetEventExpr::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CNAME=token;
		}
		else
		{
			CNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ENAME=token;
		}
		else
		{
			ENAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WarningLEVEL=token;
		}
		else
		{
			WarningLEVEL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EventTypeID=token;
		}
		else
		{
			EventTypeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SubEventTypeID=token;
		}
		else
		{
			SubEventTypeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GIVEUPTIME=token;
		}
		else
		{
			GIVEUPTIME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONTROL=token;
		}
		else
		{
			CONTROL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EXPR=token;
		}
		else
		{
			EXPR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BRIEF=token;
		}
		else
		{
			BRIEF="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DISCRIPTION=token;
		}
		else
		{
			DISCRIPTION="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MSGGROUP_ID=token;
		}
		else
		{
			MSGGROUP_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ADMINGROUP_ID=token;
		}
		else
		{
			ADMINGROUP_ID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CNAME"))
			{
				CNAME=token;
			}
			else if (!strcmp(fieldName,"ENAME"))
			{
				ENAME=token;
			}
			else if (!strcmp(fieldName,"WarningLEVEL"))
			{
				WarningLEVEL=token;
			}
			else if (!strcmp(fieldName,"EventTypeID"))
			{
				EventTypeID=token;
			}
			else if (!strcmp(fieldName,"SubEventTypeID"))
			{
				SubEventTypeID=token;
			}
			else if (!strcmp(fieldName,"GIVEUPTIME"))
			{
				GIVEUPTIME=token;
			}
			else if (!strcmp(fieldName,"CONTROL"))
			{
				CONTROL=token;
			}
			else if (!strcmp(fieldName,"EXPR"))
			{
				EXPR=token;
			}
			else if (!strcmp(fieldName,"BRIEF"))
			{
				BRIEF=token;
			}
			else if (!strcmp(fieldName,"DISCRIPTION"))
			{
				DISCRIPTION=token;
			}
			else if (!strcmp(fieldName,"MSGGROUP_ID"))
			{
				MSGGROUP_ID=token;
			}
			else if (!strcmp(fieldName,"ADMINGROUP_ID"))
			{
				ADMINGROUP_ID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetEventExpr::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetEventExpr),output)!=sizeof(CWriteableSysNetEventExpr))
		return 0;
	else
		return 1;
}

int CWriteableSysNetEventExpr::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ENAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WarningLEVEL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EventTypeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SubEventTypeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GIVEUPTIME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONTROL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EXPR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BRIEF.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DISCRIPTION.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MSGGROUP_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ADMINGROUP_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetEventExpr::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetEventExpr%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CNAME.getString(buf);
	fprintf(fp,"\t\tCNAME = %s    [中文事件名]\n",buf);	
	ENAME.getString(buf);
	fprintf(fp,"\t\tENAME = %s    [英文事件名]\n",buf);	
	WarningLEVEL.getString(buf);
	fprintf(fp,"\t\tWarningLEVEL = %s    [事件级别]\n",buf);	
	EventTypeID.getString(buf);
	fprintf(fp,"\t\tEventTypeID = %s    [事件类型]\n",buf);	
	SubEventTypeID.getString(buf);
	fprintf(fp,"\t\tSubEventTypeID = %s    [事件子类型]\n",buf);	
	GIVEUPTIME.getString(buf);
	fprintf(fp,"\t\tGIVEUPTIME = %s    [告警间隔时间]\n",buf);	
	CONTROL.getString(buf);
	fprintf(fp,"\t\tCONTROL = %s    [控制定义项]\n",buf);	
	EXPR.getString(buf);
	fprintf(fp,"\t\tEXPR = %s    [表达式定义项]\n",buf);	
	BRIEF.getString(buf);
	fprintf(fp,"\t\tBRIEF = %s    [事件简述]\n",buf);	
	DISCRIPTION.getString(buf);
	fprintf(fp,"\t\tDISCRIPTION = %s    [事件描述项]\n",buf);	
	MSGGROUP_ID.getString(buf);
	fprintf(fp,"\t\tMSGGROUP_ID = %s    [消息组ID]\n",buf);	
	ADMINGROUP_ID.getString(buf);
	fprintf(fp,"\t\tADMINGROUP_ID = %s    [管理员组ID]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventExpr::dumpDiff(FILE *fp, const CWriteableSysNetEventExpr *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetEventExpr = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CNAME.getString(buf);
	if (compare(CNAME.getValue(),pOriginal->CNAME.getValue())!=0)
	{
		pOriginal->CNAME.getString(bufOriginal);
		fprintf(fp,"\t\tCNAME = %s -> %s    [中文事件名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCNAME = %s    [中文事件名]\n",buf);
	}
	ENAME.getString(buf);
	if (compare(ENAME.getValue(),pOriginal->ENAME.getValue())!=0)
	{
		pOriginal->ENAME.getString(bufOriginal);
		fprintf(fp,"\t\tENAME = %s -> %s    [英文事件名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tENAME = %s    [英文事件名]\n",buf);
	}
	WarningLEVEL.getString(buf);
	if (compare(WarningLEVEL.getValue(),pOriginal->WarningLEVEL.getValue())!=0)
	{
		pOriginal->WarningLEVEL.getString(bufOriginal);
		fprintf(fp,"\t\tWarningLEVEL = %s -> %s    [事件级别]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWarningLEVEL = %s    [事件级别]\n",buf);
	}
	EventTypeID.getString(buf);
	if (compare(EventTypeID.getValue(),pOriginal->EventTypeID.getValue())!=0)
	{
		pOriginal->EventTypeID.getString(bufOriginal);
		fprintf(fp,"\t\tEventTypeID = %s -> %s    [事件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEventTypeID = %s    [事件类型]\n",buf);
	}
	SubEventTypeID.getString(buf);
	if (compare(SubEventTypeID.getValue(),pOriginal->SubEventTypeID.getValue())!=0)
	{
		pOriginal->SubEventTypeID.getString(bufOriginal);
		fprintf(fp,"\t\tSubEventTypeID = %s -> %s    [事件子类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubEventTypeID = %s    [事件子类型]\n",buf);
	}
	GIVEUPTIME.getString(buf);
	if (compare(GIVEUPTIME.getValue(),pOriginal->GIVEUPTIME.getValue())!=0)
	{
		pOriginal->GIVEUPTIME.getString(bufOriginal);
		fprintf(fp,"\t\tGIVEUPTIME = %s -> %s    [告警间隔时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGIVEUPTIME = %s    [告警间隔时间]\n",buf);
	}
	CONTROL.getString(buf);
	if (compare(CONTROL.getValue(),pOriginal->CONTROL.getValue())!=0)
	{
		pOriginal->CONTROL.getString(bufOriginal);
		fprintf(fp,"\t\tCONTROL = %s -> %s    [控制定义项]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONTROL = %s    [控制定义项]\n",buf);
	}
	EXPR.getString(buf);
	if (compare(EXPR.getValue(),pOriginal->EXPR.getValue())!=0)
	{
		pOriginal->EXPR.getString(bufOriginal);
		fprintf(fp,"\t\tEXPR = %s -> %s    [表达式定义项]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEXPR = %s    [表达式定义项]\n",buf);
	}
	BRIEF.getString(buf);
	if (compare(BRIEF.getValue(),pOriginal->BRIEF.getValue())!=0)
	{
		pOriginal->BRIEF.getString(bufOriginal);
		fprintf(fp,"\t\tBRIEF = %s -> %s    [事件简述]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBRIEF = %s    [事件简述]\n",buf);
	}
	DISCRIPTION.getString(buf);
	if (compare(DISCRIPTION.getValue(),pOriginal->DISCRIPTION.getValue())!=0)
	{
		pOriginal->DISCRIPTION.getString(bufOriginal);
		fprintf(fp,"\t\tDISCRIPTION = %s -> %s    [事件描述项]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDISCRIPTION = %s    [事件描述项]\n",buf);
	}
	MSGGROUP_ID.getString(buf);
	if (compare(MSGGROUP_ID.getValue(),pOriginal->MSGGROUP_ID.getValue())!=0)
	{
		pOriginal->MSGGROUP_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMSGGROUP_ID = %s -> %s    [消息组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMSGGROUP_ID = %s    [消息组ID]\n",buf);
	}
	ADMINGROUP_ID.getString(buf);
	if (compare(ADMINGROUP_ID.getValue(),pOriginal->ADMINGROUP_ID.getValue())!=0)
	{
		pOriginal->ADMINGROUP_ID.getString(bufOriginal);
		fprintf(fp,"\t\tADMINGROUP_ID = %s -> %s    [管理员组ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tADMINGROUP_ID = %s    [管理员组ID]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventExpr::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CNAME.getString(buf);
	fprintf(fp,",CNAME,%s",buf);	
	ENAME.getString(buf);
	fprintf(fp,",ENAME,%s",buf);	
	WarningLEVEL.getString(buf);
	fprintf(fp,",WarningLEVEL,%s",buf);	
	EventTypeID.getString(buf);
	fprintf(fp,",EventTypeID,%s",buf);	
	SubEventTypeID.getString(buf);
	fprintf(fp,",SubEventTypeID,%s",buf);	
	GIVEUPTIME.getString(buf);
	fprintf(fp,",GIVEUPTIME,%s",buf);	
	CONTROL.getString(buf);
	fprintf(fp,",CONTROL,%s",buf);	
	EXPR.getString(buf);
	fprintf(fp,",EXPR,%s",buf);	
	BRIEF.getString(buf);
	fprintf(fp,",BRIEF,%s",buf);	
	DISCRIPTION.getString(buf);
	fprintf(fp,",DISCRIPTION,%s",buf);	
	MSGGROUP_ID.getString(buf);
	fprintf(fp,",MSGGROUP_ID,%s",buf);	
	ADMINGROUP_ID.getString(buf);
	fprintf(fp,",ADMINGROUP_ID,%s",buf);	
}

void CWriteableSysNetEventExpr::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CNAME.getString(buf);
	sprintf(p,"CNAME=%s,",buf);
	p+=strlen(p);
	ENAME.getString(buf);
	sprintf(p,"ENAME=%s,",buf);
	p+=strlen(p);
	WarningLEVEL.getString(buf);
	sprintf(p,"WarningLEVEL=%s,",buf);
	p+=strlen(p);
	EventTypeID.getString(buf);
	sprintf(p,"EventTypeID=%s,",buf);
	p+=strlen(p);
	SubEventTypeID.getString(buf);
	sprintf(p,"SubEventTypeID=%s,",buf);
	p+=strlen(p);
	GIVEUPTIME.getString(buf);
	sprintf(p,"GIVEUPTIME=%s,",buf);
	p+=strlen(p);
	CONTROL.getString(buf);
	sprintf(p,"CONTROL=%s,",buf);
	p+=strlen(p);
	EXPR.getString(buf);
	sprintf(p,"EXPR=%s,",buf);
	p+=strlen(p);
	BRIEF.getString(buf);
	sprintf(p,"BRIEF=%s,",buf);
	p+=strlen(p);
	DISCRIPTION.getString(buf);
	sprintf(p,"DISCRIPTION=%s,",buf);
	p+=strlen(p);
	MSGGROUP_ID.getString(buf);
	sprintf(p,"MSGGROUP_ID=%s,",buf);
	p+=strlen(p);
	ADMINGROUP_ID.getString(buf);
	sprintf(p,"ADMINGROUP_ID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetEventExpr::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetEventExpr");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CNAME.getString(buf);
	pLogger->output(indent+1,0,"CNAME=%s 中文事件名",buf);
	ENAME.getString(buf);
	pLogger->output(indent+1,0,"ENAME=%s 英文事件名",buf);
	WarningLEVEL.getString(buf);
	pLogger->output(indent+1,0,"WarningLEVEL=%s 事件级别",buf);
	EventTypeID.getString(buf);
	pLogger->output(indent+1,0,"EventTypeID=%s 事件类型",buf);
	SubEventTypeID.getString(buf);
	pLogger->output(indent+1,0,"SubEventTypeID=%s 事件子类型",buf);
	GIVEUPTIME.getString(buf);
	pLogger->output(indent+1,0,"GIVEUPTIME=%s 告警间隔时间",buf);
	CONTROL.getString(buf);
	pLogger->output(indent+1,0,"CONTROL=%s 控制定义项",buf);
	EXPR.getString(buf);
	pLogger->output(indent+1,0,"EXPR=%s 表达式定义项",buf);
	BRIEF.getString(buf);
	pLogger->output(indent+1,0,"BRIEF=%s 事件简述",buf);
	DISCRIPTION.getString(buf);
	pLogger->output(indent+1,0,"DISCRIPTION=%s 事件描述项",buf);
	MSGGROUP_ID.getString(buf);
	pLogger->output(indent+1,0,"MSGGROUP_ID=%s 消息组ID",buf);
	ADMINGROUP_ID.getString(buf);
	pLogger->output(indent+1,0,"ADMINGROUP_ID=%s 管理员组ID",buf);
	pLogger->output(indent,0,"}");
}

CSysNetEventExprIterator::~CSysNetEventExprIterator(void)
{
}


void CSysNetEventExprIterator::dump(FILE *output)
{
	CSysNetEventExpr *pSysNetEventExpr;
	
	while ((pSysNetEventExpr=next())!=NULL)
	{
		pSysNetEventExpr->dump(output);
	}
}



void CWriteableSysNetEventType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetEventType::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetEventType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetEventType),input)!=sizeof(CWriteableSysNetEventType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetEventType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetEventType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetEventType),output)!=sizeof(CWriteableSysNetEventType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetEventType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetEventType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetEventType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [事件类型中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [事件类型英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventType::dumpDiff(FILE *fp, const CWriteableSysNetEventType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetEventType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [事件类型中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [事件类型中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [事件类型英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [事件类型英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetEventType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetEventType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetEventType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 事件类型中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 事件类型英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetEventTypeIterator::~CSysNetEventTypeIterator(void)
{
}


void CSysNetEventTypeIterator::dump(FILE *output)
{
	CSysNetEventType *pSysNetEventType;
	
	while ((pSysNetEventType=next())!=NULL)
	{
		pSysNetEventType->dump(output);
	}
}



void CWriteableSysNetSubEventType::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName\n");
}
	
void CWriteableSysNetSubEventType::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
}

int CWriteableSysNetSubEventType::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetSubEventType),input)!=sizeof(CWriteableSysNetSubEventType))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetSubEventType::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetSubEventType::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetSubEventType),output)!=sizeof(CWriteableSysNetSubEventType))
		return 0;
	else
		return 1;
}

int CWriteableSysNetSubEventType::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetSubEventType::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetSubEventType%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [事件子类型中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [事件子类型英文名]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubEventType::dumpDiff(FILE *fp, const CWriteableSysNetSubEventType *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetSubEventType = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [事件子类型中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [事件子类型中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [事件子类型英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [事件子类型英文名]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetSubEventType::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
}

void CWriteableSysNetSubEventType::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetSubEventType::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetSubEventType");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 事件子类型中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 事件子类型英文名",buf);
	pLogger->output(indent,0,"}");
}

CSysNetSubEventTypeIterator::~CSysNetSubEventTypeIterator(void)
{
}


void CSysNetSubEventTypeIterator::dump(FILE *output)
{
	CSysNetSubEventType *pSysNetSubEventType;
	
	while ((pSysNetSubEventType=next())!=NULL)
	{
		pSysNetSubEventType->dump(output);
	}
}



void CWriteableSysNetEventLevel::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,CName,EName,DISCRIPTION\n");
}
	
void CWriteableSysNetEventLevel::init(void)
{
	ID.clear();
	CName.clear();
	EName.clear();
	DISCRIPTION.clear();
}

int CWriteableSysNetEventLevel::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetEventLevel),input)!=sizeof(CWriteableSysNetEventLevel))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetEventLevel::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CName=token;
		}
		else
		{
			CName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EName=token;
		}
		else
		{
			EName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DISCRIPTION=token;
		}
		else
		{
			DISCRIPTION="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"CName"))
			{
				CName=token;
			}
			else if (!strcmp(fieldName,"EName"))
			{
				EName=token;
			}
			else if (!strcmp(fieldName,"DISCRIPTION"))
			{
				DISCRIPTION=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetEventLevel::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetEventLevel),output)!=sizeof(CWriteableSysNetEventLevel))
		return 0;
	else
		return 1;
}

int CWriteableSysNetEventLevel::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DISCRIPTION.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetEventLevel::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetEventLevel%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	CName.getString(buf);
	fprintf(fp,"\t\tCName = %s    [事件级别中文名]\n",buf);	
	EName.getString(buf);
	fprintf(fp,"\t\tEName = %s    [事件级别英文名]\n",buf);	
	DISCRIPTION.getString(buf);
	fprintf(fp,"\t\tDISCRIPTION = %s    [事件级别描述项]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventLevel::dumpDiff(FILE *fp, const CWriteableSysNetEventLevel *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetEventLevel = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	CName.getString(buf);
	if (compare(CName.getValue(),pOriginal->CName.getValue())!=0)
	{
		pOriginal->CName.getString(bufOriginal);
		fprintf(fp,"\t\tCName = %s -> %s    [事件级别中文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCName = %s    [事件级别中文名]\n",buf);
	}
	EName.getString(buf);
	if (compare(EName.getValue(),pOriginal->EName.getValue())!=0)
	{
		pOriginal->EName.getString(bufOriginal);
		fprintf(fp,"\t\tEName = %s -> %s    [事件级别英文名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEName = %s    [事件级别英文名]\n",buf);
	}
	DISCRIPTION.getString(buf);
	if (compare(DISCRIPTION.getValue(),pOriginal->DISCRIPTION.getValue())!=0)
	{
		pOriginal->DISCRIPTION.getString(bufOriginal);
		fprintf(fp,"\t\tDISCRIPTION = %s -> %s    [事件级别描述项]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDISCRIPTION = %s    [事件级别描述项]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetEventLevel::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	CName.getString(buf);
	fprintf(fp,",CName,%s",buf);	
	EName.getString(buf);
	fprintf(fp,",EName,%s",buf);	
	DISCRIPTION.getString(buf);
	fprintf(fp,",DISCRIPTION,%s",buf);	
}

void CWriteableSysNetEventLevel::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	CName.getString(buf);
	sprintf(p,"CName=%s,",buf);
	p+=strlen(p);
	EName.getString(buf);
	sprintf(p,"EName=%s,",buf);
	p+=strlen(p);
	DISCRIPTION.getString(buf);
	sprintf(p,"DISCRIPTION=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetEventLevel::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetEventLevel");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	CName.getString(buf);
	pLogger->output(indent+1,0,"CName=%s 事件级别中文名",buf);
	EName.getString(buf);
	pLogger->output(indent+1,0,"EName=%s 事件级别英文名",buf);
	DISCRIPTION.getString(buf);
	pLogger->output(indent+1,0,"DISCRIPTION=%s 事件级别描述项",buf);
	pLogger->output(indent,0,"}");
}

CSysNetEventLevelIterator::~CSysNetEventLevelIterator(void)
{
}


void CSysNetEventLevelIterator::dump(FILE *output)
{
	CSysNetEventLevel *pSysNetEventLevel;
	
	while ((pSysNetEventLevel=next())!=NULL)
	{
		pSysNetEventLevel->dump(output);
	}
}



void CWriteableSysNetMonitorDeviceTask::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ObjectID,IPAddress,Manufactory_ID,InstructChain,InstructAlias,InstructArgs,DefParamChain,Flag,SecondID\n");
}
	
void CWriteableSysNetMonitorDeviceTask::init(void)
{
	ID.clear();
	ObjectID.clear();
	IPAddress.clear();
	Manufactory_ID.clear();
	InstructChain.clear();
	InstructAlias.clear();
	InstructArgs.clear();
	DefParamChain.clear();
	Flag.clear();
	SecondID.clear();
}

int CWriteableSysNetMonitorDeviceTask::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorDeviceTask),input)!=sizeof(CWriteableSysNetMonitorDeviceTask))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorDeviceTask::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory_ID=token;
		}
		else
		{
			Manufactory_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstructChain=token;
		}
		else
		{
			InstructChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstructAlias=token;
		}
		else
		{
			InstructAlias="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstructArgs=token;
		}
		else
		{
			InstructArgs="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DefParamChain=token;
		}
		else
		{
			DefParamChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Flag=token;
		}
		else
		{
			Flag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SecondID=token;
		}
		else
		{
			SecondID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"Manufactory_ID"))
			{
				Manufactory_ID=token;
			}
			else if (!strcmp(fieldName,"InstructChain"))
			{
				InstructChain=token;
			}
			else if (!strcmp(fieldName,"InstructAlias"))
			{
				InstructAlias=token;
			}
			else if (!strcmp(fieldName,"InstructArgs"))
			{
				InstructArgs=token;
			}
			else if (!strcmp(fieldName,"DefParamChain"))
			{
				DefParamChain=token;
			}
			else if (!strcmp(fieldName,"Flag"))
			{
				Flag=token;
			}
			else if (!strcmp(fieldName,"SecondID"))
			{
				SecondID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorDeviceTask::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorDeviceTask),output)!=sizeof(CWriteableSysNetMonitorDeviceTask))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorDeviceTask::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstructChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstructAlias.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstructArgs.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DefParamChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Flag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SecondID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorDeviceTask::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorDeviceTask%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,"\t\tManufactory_ID = %s    [网络设备产商ID]\n",buf);	
	InstructChain.getString(buf);
	fprintf(fp,"\t\tInstructChain = %s    [指令]\n",buf);	
	InstructAlias.getString(buf);
	fprintf(fp,"\t\tInstructAlias = %s    [指令别名]\n",buf);	
	InstructArgs.getString(buf);
	fprintf(fp,"\t\tInstructArgs = %s    [指令参数串]\n",buf);	
	DefParamChain.getString(buf);
	fprintf(fp,"\t\tDefParamChain = %s    [指标阀值串]\n",buf);	
	Flag.getString(buf);
	fprintf(fp,"\t\tFlag = %s    [结束标志]\n",buf);	
	SecondID.getString(buf);
	fprintf(fp,"\t\tSecondID = %s    [PrimID]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorDeviceTask::dumpDiff(FILE *fp, const CWriteableSysNetMonitorDeviceTask *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorDeviceTask = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [网络监控对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [网络监控对象ID]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	Manufactory_ID.getString(buf);
	if (compare(Manufactory_ID.getValue(),pOriginal->Manufactory_ID.getValue())!=0)
	{
		pOriginal->Manufactory_ID.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory_ID = %s -> %s    [网络设备产商ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory_ID = %s    [网络设备产商ID]\n",buf);
	}
	InstructChain.getString(buf);
	if (compare(InstructChain.getValue(),pOriginal->InstructChain.getValue())!=0)
	{
		pOriginal->InstructChain.getString(bufOriginal);
		fprintf(fp,"\t\tInstructChain = %s -> %s    [指令]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstructChain = %s    [指令]\n",buf);
	}
	InstructAlias.getString(buf);
	if (compare(InstructAlias.getValue(),pOriginal->InstructAlias.getValue())!=0)
	{
		pOriginal->InstructAlias.getString(bufOriginal);
		fprintf(fp,"\t\tInstructAlias = %s -> %s    [指令别名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstructAlias = %s    [指令别名]\n",buf);
	}
	InstructArgs.getString(buf);
	if (compare(InstructArgs.getValue(),pOriginal->InstructArgs.getValue())!=0)
	{
		pOriginal->InstructArgs.getString(bufOriginal);
		fprintf(fp,"\t\tInstructArgs = %s -> %s    [指令参数串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstructArgs = %s    [指令参数串]\n",buf);
	}
	DefParamChain.getString(buf);
	if (compare(DefParamChain.getValue(),pOriginal->DefParamChain.getValue())!=0)
	{
		pOriginal->DefParamChain.getString(bufOriginal);
		fprintf(fp,"\t\tDefParamChain = %s -> %s    [指标阀值串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDefParamChain = %s    [指标阀值串]\n",buf);
	}
	Flag.getString(buf);
	if (compare(Flag.getValue(),pOriginal->Flag.getValue())!=0)
	{
		pOriginal->Flag.getString(bufOriginal);
		fprintf(fp,"\t\tFlag = %s -> %s    [结束标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFlag = %s    [结束标志]\n",buf);
	}
	SecondID.getString(buf);
	if (compare(SecondID.getValue(),pOriginal->SecondID.getValue())!=0)
	{
		pOriginal->SecondID.getString(bufOriginal);
		fprintf(fp,"\t\tSecondID = %s -> %s    [PrimID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSecondID = %s    [PrimID]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorDeviceTask::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,",Manufactory_ID,%s",buf);	
	InstructChain.getString(buf);
	fprintf(fp,",InstructChain,%s",buf);	
	InstructAlias.getString(buf);
	fprintf(fp,",InstructAlias,%s",buf);	
	InstructArgs.getString(buf);
	fprintf(fp,",InstructArgs,%s",buf);	
	DefParamChain.getString(buf);
	fprintf(fp,",DefParamChain,%s",buf);	
	Flag.getString(buf);
	fprintf(fp,",Flag,%s",buf);	
	SecondID.getString(buf);
	fprintf(fp,",SecondID,%s",buf);	
}

void CWriteableSysNetMonitorDeviceTask::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	Manufactory_ID.getString(buf);
	sprintf(p,"Manufactory_ID=%s,",buf);
	p+=strlen(p);
	InstructChain.getString(buf);
	sprintf(p,"InstructChain=%s,",buf);
	p+=strlen(p);
	InstructAlias.getString(buf);
	sprintf(p,"InstructAlias=%s,",buf);
	p+=strlen(p);
	InstructArgs.getString(buf);
	sprintf(p,"InstructArgs=%s,",buf);
	p+=strlen(p);
	DefParamChain.getString(buf);
	sprintf(p,"DefParamChain=%s,",buf);
	p+=strlen(p);
	Flag.getString(buf);
	sprintf(p,"Flag=%s,",buf);
	p+=strlen(p);
	SecondID.getString(buf);
	sprintf(p,"SecondID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorDeviceTask::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorDeviceTask");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 网络监控对象ID",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	Manufactory_ID.getString(buf);
	pLogger->output(indent+1,0,"Manufactory_ID=%s 网络设备产商ID",buf);
	InstructChain.getString(buf);
	pLogger->output(indent+1,0,"InstructChain=%s 指令",buf);
	InstructAlias.getString(buf);
	pLogger->output(indent+1,0,"InstructAlias=%s 指令别名",buf);
	InstructArgs.getString(buf);
	pLogger->output(indent+1,0,"InstructArgs=%s 指令参数串",buf);
	DefParamChain.getString(buf);
	pLogger->output(indent+1,0,"DefParamChain=%s 指标阀值串",buf);
	Flag.getString(buf);
	pLogger->output(indent+1,0,"Flag=%s 结束标志",buf);
	SecondID.getString(buf);
	pLogger->output(indent+1,0,"SecondID=%s PrimID",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorDeviceTaskIterator::~CSysNetMonitorDeviceTaskIterator(void)
{
}


void CSysNetMonitorDeviceTaskIterator::dump(FILE *output)
{
	CSysNetMonitorDeviceTask *pSysNetMonitorDeviceTask;
	
	while ((pSysNetMonitorDeviceTask=next())!=NULL)
	{
		pSysNetMonitorDeviceTask->dump(output);
	}
}



void CWriteableSysNetMonitorTaskInstAttrs::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,Manufactory_ID,InstructAlias,DEVICETYPE,AttrsChain,DefRegularChain,DefParamChain\n");
}
	
void CWriteableSysNetMonitorTaskInstAttrs::init(void)
{
	ID.clear();
	Manufactory_ID.clear();
	InstructAlias.clear();
	DEVICETYPE.clear();
	AttrsChain.clear();
	DefRegularChain.clear();
	DefParamChain.clear();
}

int CWriteableSysNetMonitorTaskInstAttrs::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMonitorTaskInstAttrs),input)!=sizeof(CWriteableSysNetMonitorTaskInstAttrs))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMonitorTaskInstAttrs::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Manufactory_ID=token;
		}
		else
		{
			Manufactory_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstructAlias=token;
		}
		else
		{
			InstructAlias="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DEVICETYPE=token;
		}
		else
		{
			DEVICETYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AttrsChain=token;
		}
		else
		{
			AttrsChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DefRegularChain=token;
		}
		else
		{
			DefRegularChain="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DefParamChain=token;
		}
		else
		{
			DefParamChain="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"Manufactory_ID"))
			{
				Manufactory_ID=token;
			}
			else if (!strcmp(fieldName,"InstructAlias"))
			{
				InstructAlias=token;
			}
			else if (!strcmp(fieldName,"DEVICETYPE"))
			{
				DEVICETYPE=token;
			}
			else if (!strcmp(fieldName,"AttrsChain"))
			{
				AttrsChain=token;
			}
			else if (!strcmp(fieldName,"DefRegularChain"))
			{
				DefRegularChain=token;
			}
			else if (!strcmp(fieldName,"DefParamChain"))
			{
				DefParamChain=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMonitorTaskInstAttrs::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMonitorTaskInstAttrs),output)!=sizeof(CWriteableSysNetMonitorTaskInstAttrs))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMonitorTaskInstAttrs::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Manufactory_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstructAlias.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DEVICETYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AttrsChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DefRegularChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DefParamChain.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMonitorTaskInstAttrs::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMonitorTaskInstAttrs%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,"\t\tManufactory_ID = %s    [网络设备产商ID]\n",buf);	
	InstructAlias.getString(buf);
	fprintf(fp,"\t\tInstructAlias = %s    [指令别名]\n",buf);	
	DEVICETYPE.getString(buf);
	fprintf(fp,"\t\tDEVICETYPE = %s    [设备型号]\n",buf);	
	AttrsChain.getString(buf);
	fprintf(fp,"\t\tAttrsChain = %s    [指标串]\n",buf);	
	DefRegularChain.getString(buf);
	fprintf(fp,"\t\tDefRegularChain = %s    [指标规则串]\n",buf);	
	DefParamChain.getString(buf);
	fprintf(fp,"\t\tDefParamChain = %s    [指标阀值串]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskInstAttrs::dumpDiff(FILE *fp, const CWriteableSysNetMonitorTaskInstAttrs *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMonitorTaskInstAttrs = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	Manufactory_ID.getString(buf);
	if (compare(Manufactory_ID.getValue(),pOriginal->Manufactory_ID.getValue())!=0)
	{
		pOriginal->Manufactory_ID.getString(bufOriginal);
		fprintf(fp,"\t\tManufactory_ID = %s -> %s    [网络设备产商ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tManufactory_ID = %s    [网络设备产商ID]\n",buf);
	}
	InstructAlias.getString(buf);
	if (compare(InstructAlias.getValue(),pOriginal->InstructAlias.getValue())!=0)
	{
		pOriginal->InstructAlias.getString(bufOriginal);
		fprintf(fp,"\t\tInstructAlias = %s -> %s    [指令别名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstructAlias = %s    [指令别名]\n",buf);
	}
	DEVICETYPE.getString(buf);
	if (compare(DEVICETYPE.getValue(),pOriginal->DEVICETYPE.getValue())!=0)
	{
		pOriginal->DEVICETYPE.getString(bufOriginal);
		fprintf(fp,"\t\tDEVICETYPE = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDEVICETYPE = %s    [设备型号]\n",buf);
	}
	AttrsChain.getString(buf);
	if (compare(AttrsChain.getValue(),pOriginal->AttrsChain.getValue())!=0)
	{
		pOriginal->AttrsChain.getString(bufOriginal);
		fprintf(fp,"\t\tAttrsChain = %s -> %s    [指标串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAttrsChain = %s    [指标串]\n",buf);
	}
	DefRegularChain.getString(buf);
	if (compare(DefRegularChain.getValue(),pOriginal->DefRegularChain.getValue())!=0)
	{
		pOriginal->DefRegularChain.getString(bufOriginal);
		fprintf(fp,"\t\tDefRegularChain = %s -> %s    [指标规则串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDefRegularChain = %s    [指标规则串]\n",buf);
	}
	DefParamChain.getString(buf);
	if (compare(DefParamChain.getValue(),pOriginal->DefParamChain.getValue())!=0)
	{
		pOriginal->DefParamChain.getString(bufOriginal);
		fprintf(fp,"\t\tDefParamChain = %s -> %s    [指标阀值串]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDefParamChain = %s    [指标阀值串]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMonitorTaskInstAttrs::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	Manufactory_ID.getString(buf);
	fprintf(fp,",Manufactory_ID,%s",buf);	
	InstructAlias.getString(buf);
	fprintf(fp,",InstructAlias,%s",buf);	
	DEVICETYPE.getString(buf);
	fprintf(fp,",DEVICETYPE,%s",buf);	
	AttrsChain.getString(buf);
	fprintf(fp,",AttrsChain,%s",buf);	
	DefRegularChain.getString(buf);
	fprintf(fp,",DefRegularChain,%s",buf);	
	DefParamChain.getString(buf);
	fprintf(fp,",DefParamChain,%s",buf);	
}

void CWriteableSysNetMonitorTaskInstAttrs::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	Manufactory_ID.getString(buf);
	sprintf(p,"Manufactory_ID=%s,",buf);
	p+=strlen(p);
	InstructAlias.getString(buf);
	sprintf(p,"InstructAlias=%s,",buf);
	p+=strlen(p);
	DEVICETYPE.getString(buf);
	sprintf(p,"DEVICETYPE=%s,",buf);
	p+=strlen(p);
	AttrsChain.getString(buf);
	sprintf(p,"AttrsChain=%s,",buf);
	p+=strlen(p);
	DefRegularChain.getString(buf);
	sprintf(p,"DefRegularChain=%s,",buf);
	p+=strlen(p);
	DefParamChain.getString(buf);
	sprintf(p,"DefParamChain=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMonitorTaskInstAttrs::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMonitorTaskInstAttrs");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	Manufactory_ID.getString(buf);
	pLogger->output(indent+1,0,"Manufactory_ID=%s 网络设备产商ID",buf);
	InstructAlias.getString(buf);
	pLogger->output(indent+1,0,"InstructAlias=%s 指令别名",buf);
	DEVICETYPE.getString(buf);
	pLogger->output(indent+1,0,"DEVICETYPE=%s 设备型号",buf);
	AttrsChain.getString(buf);
	pLogger->output(indent+1,0,"AttrsChain=%s 指标串",buf);
	DefRegularChain.getString(buf);
	pLogger->output(indent+1,0,"DefRegularChain=%s 指标规则串",buf);
	DefParamChain.getString(buf);
	pLogger->output(indent+1,0,"DefParamChain=%s 指标阀值串",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMonitorTaskInstAttrsIterator::~CSysNetMonitorTaskInstAttrsIterator(void)
{
}


void CSysNetMonitorTaskInstAttrsIterator::dump(FILE *output)
{
	CSysNetMonitorTaskInstAttrs *pSysNetMonitorTaskInstAttrs;
	
	while ((pSysNetMonitorTaskInstAttrs=next())!=NULL)
	{
		pSysNetMonitorTaskInstAttrs->dump(output);
	}
}



void CWriteableSysNetBaseLine::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,MANUFACTORY_ID,Name,SerialUsed,data,memo,Flag\n");
}
	
void CWriteableSysNetBaseLine::init(void)
{
	ID.clear();
	MANUFACTORY_ID.clear();
	Name.clear();
	SerialUsed.clear();
	data.clear();
	memo.clear();
	Flag.clear();
}

int CWriteableSysNetBaseLine::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetBaseLine),input)!=sizeof(CWriteableSysNetBaseLine))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetBaseLine::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MANUFACTORY_ID=token;
		}
		else
		{
			MANUFACTORY_ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Name=token;
		}
		else
		{
			Name="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SerialUsed=token;
		}
		else
		{
			SerialUsed="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			data=token;
		}
		else
		{
			data="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			memo=token;
		}
		else
		{
			memo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Flag=token;
		}
		else
		{
			Flag="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"MANUFACTORY_ID"))
			{
				MANUFACTORY_ID=token;
			}
			else if (!strcmp(fieldName,"Name"))
			{
				Name=token;
			}
			else if (!strcmp(fieldName,"SerialUsed"))
			{
				SerialUsed=token;
			}
			else if (!strcmp(fieldName,"data"))
			{
				data=token;
			}
			else if (!strcmp(fieldName,"memo"))
			{
				memo=token;
			}
			else if (!strcmp(fieldName,"Flag"))
			{
				Flag=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetBaseLine::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetBaseLine),output)!=sizeof(CWriteableSysNetBaseLine))
		return 0;
	else
		return 1;
}

int CWriteableSysNetBaseLine::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MANUFACTORY_ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Name.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SerialUsed.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	data.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	memo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Flag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetBaseLine::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetBaseLine%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);	
	Name.getString(buf);
	fprintf(fp,"\t\tName = %s    [基线名]\n",buf);	
	SerialUsed.getString(buf);
	fprintf(fp,"\t\tSerialUsed = %s    [设备型号]\n",buf);	
	data.getString(buf);
	fprintf(fp,"\t\tdata = %s    [文件内容]\n",buf);	
	memo.getString(buf);
	fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);	
	Flag.getString(buf);
	fprintf(fp,"\t\tFlag = %s    [结束标志]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetBaseLine::dumpDiff(FILE *fp, const CWriteableSysNetBaseLine *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetBaseLine = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	MANUFACTORY_ID.getString(buf);
	if (compare(MANUFACTORY_ID.getValue(),pOriginal->MANUFACTORY_ID.getValue())!=0)
	{
		pOriginal->MANUFACTORY_ID.getString(bufOriginal);
		fprintf(fp,"\t\tMANUFACTORY_ID = %s -> %s    [厂商类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMANUFACTORY_ID = %s    [厂商类型]\n",buf);
	}
	Name.getString(buf);
	if (compare(Name.getValue(),pOriginal->Name.getValue())!=0)
	{
		pOriginal->Name.getString(bufOriginal);
		fprintf(fp,"\t\tName = %s -> %s    [基线名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tName = %s    [基线名]\n",buf);
	}
	SerialUsed.getString(buf);
	if (compare(SerialUsed.getValue(),pOriginal->SerialUsed.getValue())!=0)
	{
		pOriginal->SerialUsed.getString(bufOriginal);
		fprintf(fp,"\t\tSerialUsed = %s -> %s    [设备型号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSerialUsed = %s    [设备型号]\n",buf);
	}
	data.getString(buf);
	if (compare(data.getValue(),pOriginal->data.getValue())!=0)
	{
		pOriginal->data.getString(bufOriginal);
		fprintf(fp,"\t\tdata = %s -> %s    [文件内容]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tdata = %s    [文件内容]\n",buf);
	}
	memo.getString(buf);
	if (compare(memo.getValue(),pOriginal->memo.getValue())!=0)
	{
		pOriginal->memo.getString(bufOriginal);
		fprintf(fp,"\t\tmemo = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);
	}
	Flag.getString(buf);
	if (compare(Flag.getValue(),pOriginal->Flag.getValue())!=0)
	{
		pOriginal->Flag.getString(bufOriginal);
		fprintf(fp,"\t\tFlag = %s -> %s    [结束标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFlag = %s    [结束标志]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetBaseLine::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	MANUFACTORY_ID.getString(buf);
	fprintf(fp,",MANUFACTORY_ID,%s",buf);	
	Name.getString(buf);
	fprintf(fp,",Name,%s",buf);	
	SerialUsed.getString(buf);
	fprintf(fp,",SerialUsed,%s",buf);	
	data.getString(buf);
	fprintf(fp,",data,%s",buf);	
	memo.getString(buf);
	fprintf(fp,",memo,%s",buf);	
	Flag.getString(buf);
	fprintf(fp,",Flag,%s",buf);	
}

void CWriteableSysNetBaseLine::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	MANUFACTORY_ID.getString(buf);
	sprintf(p,"MANUFACTORY_ID=%s,",buf);
	p+=strlen(p);
	Name.getString(buf);
	sprintf(p,"Name=%s,",buf);
	p+=strlen(p);
	SerialUsed.getString(buf);
	sprintf(p,"SerialUsed=%s,",buf);
	p+=strlen(p);
	data.getString(buf);
	sprintf(p,"data=%s,",buf);
	p+=strlen(p);
	memo.getString(buf);
	sprintf(p,"memo=%s,",buf);
	p+=strlen(p);
	Flag.getString(buf);
	sprintf(p,"Flag=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetBaseLine::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetBaseLine");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	MANUFACTORY_ID.getString(buf);
	pLogger->output(indent+1,0,"MANUFACTORY_ID=%s 厂商类型",buf);
	Name.getString(buf);
	pLogger->output(indent+1,0,"Name=%s 基线名",buf);
	SerialUsed.getString(buf);
	pLogger->output(indent+1,0,"SerialUsed=%s 设备型号",buf);
	data.getString(buf);
	pLogger->output(indent+1,0,"data=%s 文件内容",buf);
	memo.getString(buf);
	pLogger->output(indent+1,0,"memo=%s 备注",buf);
	Flag.getString(buf);
	pLogger->output(indent+1,0,"Flag=%s 结束标志",buf);
	pLogger->output(indent,0,"}");
}

CSysNetBaseLineIterator::~CSysNetBaseLineIterator(void)
{
}


void CSysNetBaseLineIterator::dump(FILE *output)
{
	CSysNetBaseLine *pSysNetBaseLine;
	
	while ((pSysNetBaseLine=next())!=NULL)
	{
		pSysNetBaseLine->dump(output);
	}
}



void CWriteableSysNetBaseLineTask::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,Name,BaseLineIDList,DeviceIDList,GenDate,GenTime,GenUser,memo\n");
}
	
void CWriteableSysNetBaseLineTask::init(void)
{
	ID.clear();
	Name.clear();
	BaseLineIDList.clear();
	DeviceIDList.clear();
	GenDate.clear();
	GenTime.clear();
	GenUser.clear();
	memo.clear();
}

int CWriteableSysNetBaseLineTask::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetBaseLineTask),input)!=sizeof(CWriteableSysNetBaseLineTask))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetBaseLineTask::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Name=token;
		}
		else
		{
			Name="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BaseLineIDList=token;
		}
		else
		{
			BaseLineIDList="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeviceIDList=token;
		}
		else
		{
			DeviceIDList="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GenDate=token;
		}
		else
		{
			GenDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GenTime=token;
		}
		else
		{
			GenTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GenUser=token;
		}
		else
		{
			GenUser="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			memo=token;
		}
		else
		{
			memo="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"Name"))
			{
				Name=token;
			}
			else if (!strcmp(fieldName,"BaseLineIDList"))
			{
				BaseLineIDList=token;
			}
			else if (!strcmp(fieldName,"DeviceIDList"))
			{
				DeviceIDList=token;
			}
			else if (!strcmp(fieldName,"GenDate"))
			{
				GenDate=token;
			}
			else if (!strcmp(fieldName,"GenTime"))
			{
				GenTime=token;
			}
			else if (!strcmp(fieldName,"GenUser"))
			{
				GenUser=token;
			}
			else if (!strcmp(fieldName,"memo"))
			{
				memo=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetBaseLineTask::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetBaseLineTask),output)!=sizeof(CWriteableSysNetBaseLineTask))
		return 0;
	else
		return 1;
}

int CWriteableSysNetBaseLineTask::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Name.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BaseLineIDList.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeviceIDList.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GenDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GenTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GenUser.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	memo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetBaseLineTask::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetBaseLineTask%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	Name.getString(buf);
	fprintf(fp,"\t\tName = %s    [基线任务名]\n",buf);	
	BaseLineIDList.getString(buf);
	fprintf(fp,"\t\tBaseLineIDList = %s    [基线ID列表]\n",buf);	
	DeviceIDList.getString(buf);
	fprintf(fp,"\t\tDeviceIDList = %s    [设备ID列表]\n",buf);	
	GenDate.getString(buf);
	fprintf(fp,"\t\tGenDate = %s    [生成日期]\n",buf);	
	GenTime.getString(buf);
	fprintf(fp,"\t\tGenTime = %s    [生成时间]\n",buf);	
	GenUser.getString(buf);
	fprintf(fp,"\t\tGenUser = %s    [生成者]\n",buf);	
	memo.getString(buf);
	fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetBaseLineTask::dumpDiff(FILE *fp, const CWriteableSysNetBaseLineTask *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetBaseLineTask = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	Name.getString(buf);
	if (compare(Name.getValue(),pOriginal->Name.getValue())!=0)
	{
		pOriginal->Name.getString(bufOriginal);
		fprintf(fp,"\t\tName = %s -> %s    [基线任务名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tName = %s    [基线任务名]\n",buf);
	}
	BaseLineIDList.getString(buf);
	if (compare(BaseLineIDList.getValue(),pOriginal->BaseLineIDList.getValue())!=0)
	{
		pOriginal->BaseLineIDList.getString(bufOriginal);
		fprintf(fp,"\t\tBaseLineIDList = %s -> %s    [基线ID列表]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBaseLineIDList = %s    [基线ID列表]\n",buf);
	}
	DeviceIDList.getString(buf);
	if (compare(DeviceIDList.getValue(),pOriginal->DeviceIDList.getValue())!=0)
	{
		pOriginal->DeviceIDList.getString(bufOriginal);
		fprintf(fp,"\t\tDeviceIDList = %s -> %s    [设备ID列表]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeviceIDList = %s    [设备ID列表]\n",buf);
	}
	GenDate.getString(buf);
	if (compare(GenDate.getValue(),pOriginal->GenDate.getValue())!=0)
	{
		pOriginal->GenDate.getString(bufOriginal);
		fprintf(fp,"\t\tGenDate = %s -> %s    [生成日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGenDate = %s    [生成日期]\n",buf);
	}
	GenTime.getString(buf);
	if (compare(GenTime.getValue(),pOriginal->GenTime.getValue())!=0)
	{
		pOriginal->GenTime.getString(bufOriginal);
		fprintf(fp,"\t\tGenTime = %s -> %s    [生成时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGenTime = %s    [生成时间]\n",buf);
	}
	GenUser.getString(buf);
	if (compare(GenUser.getValue(),pOriginal->GenUser.getValue())!=0)
	{
		pOriginal->GenUser.getString(bufOriginal);
		fprintf(fp,"\t\tGenUser = %s -> %s    [生成者]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGenUser = %s    [生成者]\n",buf);
	}
	memo.getString(buf);
	if (compare(memo.getValue(),pOriginal->memo.getValue())!=0)
	{
		pOriginal->memo.getString(bufOriginal);
		fprintf(fp,"\t\tmemo = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetBaseLineTask::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	Name.getString(buf);
	fprintf(fp,",Name,%s",buf);	
	BaseLineIDList.getString(buf);
	fprintf(fp,",BaseLineIDList,%s",buf);	
	DeviceIDList.getString(buf);
	fprintf(fp,",DeviceIDList,%s",buf);	
	GenDate.getString(buf);
	fprintf(fp,",GenDate,%s",buf);	
	GenTime.getString(buf);
	fprintf(fp,",GenTime,%s",buf);	
	GenUser.getString(buf);
	fprintf(fp,",GenUser,%s",buf);	
	memo.getString(buf);
	fprintf(fp,",memo,%s",buf);	
}

void CWriteableSysNetBaseLineTask::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	Name.getString(buf);
	sprintf(p,"Name=%s,",buf);
	p+=strlen(p);
	BaseLineIDList.getString(buf);
	sprintf(p,"BaseLineIDList=%s,",buf);
	p+=strlen(p);
	DeviceIDList.getString(buf);
	sprintf(p,"DeviceIDList=%s,",buf);
	p+=strlen(p);
	GenDate.getString(buf);
	sprintf(p,"GenDate=%s,",buf);
	p+=strlen(p);
	GenTime.getString(buf);
	sprintf(p,"GenTime=%s,",buf);
	p+=strlen(p);
	GenUser.getString(buf);
	sprintf(p,"GenUser=%s,",buf);
	p+=strlen(p);
	memo.getString(buf);
	sprintf(p,"memo=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetBaseLineTask::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetBaseLineTask");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	Name.getString(buf);
	pLogger->output(indent+1,0,"Name=%s 基线任务名",buf);
	BaseLineIDList.getString(buf);
	pLogger->output(indent+1,0,"BaseLineIDList=%s 基线ID列表",buf);
	DeviceIDList.getString(buf);
	pLogger->output(indent+1,0,"DeviceIDList=%s 设备ID列表",buf);
	GenDate.getString(buf);
	pLogger->output(indent+1,0,"GenDate=%s 生成日期",buf);
	GenTime.getString(buf);
	pLogger->output(indent+1,0,"GenTime=%s 生成时间",buf);
	GenUser.getString(buf);
	pLogger->output(indent+1,0,"GenUser=%s 生成者",buf);
	memo.getString(buf);
	pLogger->output(indent+1,0,"memo=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetBaseLineTaskIterator::~CSysNetBaseLineTaskIterator(void)
{
}


void CSysNetBaseLineTaskIterator::dump(FILE *output)
{
	CSysNetBaseLineTask *pSysNetBaseLineTask;
	
	while ((pSysNetBaseLineTask=next())!=NULL)
	{
		pSysNetBaseLineTask->dump(output);
	}
}



void CWriteableSysMdbNetPartyLinkStatusInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,MonDate,MonTime,SEAT_NO,IPADDR,Interface,status\n");
}
	
void CWriteableSysMdbNetPartyLinkStatusInfo::init(void)
{
	SubcriberID.clear();
	MonDate.clear();
	MonTime.clear();
	SEAT_NO.clear();
	IPADDR.clear();
	Interface.clear();
	status.clear();
}

int CWriteableSysMdbNetPartyLinkStatusInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbNetPartyLinkStatusInfo),input)!=sizeof(CWriteableSysMdbNetPartyLinkStatusInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbNetPartyLinkStatusInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SEAT_NO=token;
		}
		else
		{
			SEAT_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			status=token;
		}
		else
		{
			status="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"SEAT_NO"))
			{
				SEAT_NO=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			else if (!strcmp(fieldName,"status"))
			{
				status=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbNetPartyLinkStatusInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbNetPartyLinkStatusInfo),output)!=sizeof(CWriteableSysMdbNetPartyLinkStatusInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbNetPartyLinkStatusInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SEAT_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	status.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbNetPartyLinkStatusInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbNetPartyLinkStatusInfo%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);	
	status.getString(buf);
	fprintf(fp,"\t\tstatus = %s    [链路状态]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbNetPartyLinkStatusInfo::dumpDiff(FILE *fp, const CWriteableSysMdbNetPartyLinkStatusInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbNetPartyLinkStatusInfo = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	SEAT_NO.getString(buf);
	if (compare(SEAT_NO.getValue(),pOriginal->SEAT_NO.getValue())!=0)
	{
		pOriginal->SEAT_NO.getString(bufOriginal);
		fprintf(fp,"\t\tSEAT_NO = %s -> %s    [席位号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [路由器端口号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);
	}
	status.getString(buf);
	if (compare(status.getValue(),pOriginal->status.getValue())!=0)
	{
		pOriginal->status.getString(bufOriginal);
		fprintf(fp,"\t\tstatus = %s -> %s    [链路状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tstatus = %s    [链路状态]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbNetPartyLinkStatusInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,",SEAT_NO,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
	status.getString(buf);
	fprintf(fp,",status,%s",buf);	
}

void CWriteableSysMdbNetPartyLinkStatusInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	SEAT_NO.getString(buf);
	sprintf(p,"SEAT_NO=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	status.getString(buf);
	sprintf(p,"status=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbNetPartyLinkStatusInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbNetPartyLinkStatusInfo");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	SEAT_NO.getString(buf);
	pLogger->output(indent+1,0,"SEAT_NO=%s 席位号",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s 路由器端口号",buf);
	status.getString(buf);
	pLogger->output(indent+1,0,"status=%s 链路状态",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbNetPartyLinkStatusInfoIterator::~CSysMdbNetPartyLinkStatusInfoIterator(void)
{
}


void CSysMdbNetPartyLinkStatusInfoIterator::dump(FILE *output)
{
	CSysMdbNetPartyLinkStatusInfo *pSysMdbNetPartyLinkStatusInfo;
	
	while ((pSysMdbNetPartyLinkStatusInfo=next())!=NULL)
	{
		pSysMdbNetPartyLinkStatusInfo->dump(output);
	}
}



void CWriteableSysNetMemberSDHLineInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SeqNo,MemContractNo,ApplyPerson,MonthlyRental,MemberNo,ParticipantName,ClientManager,Bandwidth,InterfaceType,RemoteCircuit,LocalCircuit,Remark,EndALineAddress,EndAContact,EndZLineAddress,ContactName,TELEPHONE,MOBILEPHONE,IPADDR,Interface,PROVINCE,StartPortID,StartJump,LINE_STATUS,DataCenterID\n");
}
	
void CWriteableSysNetMemberSDHLineInfo::init(void)
{
	ID.clear();
	SeqNo.clear();
	MemContractNo.clear();
	ApplyPerson.clear();
	MonthlyRental.clear();
	MemberNo.clear();
	ParticipantName.clear();
	ClientManager.clear();
	Bandwidth.clear();
	InterfaceType.clear();
	RemoteCircuit.clear();
	LocalCircuit.clear();
	Remark.clear();
	EndALineAddress.clear();
	EndAContact.clear();
	EndZLineAddress.clear();
	ContactName.clear();
	TELEPHONE.clear();
	MOBILEPHONE.clear();
	IPADDR.clear();
	Interface.clear();
	PROVINCE.clear();
	StartPortID.clear();
	StartJump.clear();
	LINE_STATUS.clear();
	DataCenterID.clear();
}

int CWriteableSysNetMemberSDHLineInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetMemberSDHLineInfo),input)!=sizeof(CWriteableSysNetMemberSDHLineInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetMemberSDHLineInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SeqNo=token;
		}
		else
		{
			SeqNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemContractNo=token;
		}
		else
		{
			MemContractNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ApplyPerson=token;
		}
		else
		{
			ApplyPerson="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonthlyRental=token;
		}
		else
		{
			MonthlyRental="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemberNo=token;
		}
		else
		{
			MemberNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantName=token;
		}
		else
		{
			ParticipantName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientManager=token;
		}
		else
		{
			ClientManager="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Bandwidth=token;
		}
		else
		{
			Bandwidth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InterfaceType=token;
		}
		else
		{
			InterfaceType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RemoteCircuit=token;
		}
		else
		{
			RemoteCircuit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LocalCircuit=token;
		}
		else
		{
			LocalCircuit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Remark=token;
		}
		else
		{
			Remark="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndALineAddress=token;
		}
		else
		{
			EndALineAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndAContact=token;
		}
		else
		{
			EndAContact="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndZLineAddress=token;
		}
		else
		{
			EndZLineAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ContactName=token;
		}
		else
		{
			ContactName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TELEPHONE=token;
		}
		else
		{
			TELEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MOBILEPHONE=token;
		}
		else
		{
			MOBILEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PROVINCE=token;
		}
		else
		{
			PROVINCE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartPortID=token;
		}
		else
		{
			StartPortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartJump=token;
		}
		else
		{
			StartJump="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LINE_STATUS=token;
		}
		else
		{
			LINE_STATUS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DataCenterID=token;
		}
		else
		{
			DataCenterID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SeqNo"))
			{
				SeqNo=token;
			}
			else if (!strcmp(fieldName,"MemContractNo"))
			{
				MemContractNo=token;
			}
			else if (!strcmp(fieldName,"ApplyPerson"))
			{
				ApplyPerson=token;
			}
			else if (!strcmp(fieldName,"MonthlyRental"))
			{
				MonthlyRental=token;
			}
			else if (!strcmp(fieldName,"MemberNo"))
			{
				MemberNo=token;
			}
			else if (!strcmp(fieldName,"ParticipantName"))
			{
				ParticipantName=token;
			}
			else if (!strcmp(fieldName,"ClientManager"))
			{
				ClientManager=token;
			}
			else if (!strcmp(fieldName,"Bandwidth"))
			{
				Bandwidth=token;
			}
			else if (!strcmp(fieldName,"InterfaceType"))
			{
				InterfaceType=token;
			}
			else if (!strcmp(fieldName,"RemoteCircuit"))
			{
				RemoteCircuit=token;
			}
			else if (!strcmp(fieldName,"LocalCircuit"))
			{
				LocalCircuit=token;
			}
			else if (!strcmp(fieldName,"Remark"))
			{
				Remark=token;
			}
			else if (!strcmp(fieldName,"EndALineAddress"))
			{
				EndALineAddress=token;
			}
			else if (!strcmp(fieldName,"EndAContact"))
			{
				EndAContact=token;
			}
			else if (!strcmp(fieldName,"EndZLineAddress"))
			{
				EndZLineAddress=token;
			}
			else if (!strcmp(fieldName,"ContactName"))
			{
				ContactName=token;
			}
			else if (!strcmp(fieldName,"TELEPHONE"))
			{
				TELEPHONE=token;
			}
			else if (!strcmp(fieldName,"MOBILEPHONE"))
			{
				MOBILEPHONE=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			else if (!strcmp(fieldName,"PROVINCE"))
			{
				PROVINCE=token;
			}
			else if (!strcmp(fieldName,"StartPortID"))
			{
				StartPortID=token;
			}
			else if (!strcmp(fieldName,"StartJump"))
			{
				StartJump=token;
			}
			else if (!strcmp(fieldName,"LINE_STATUS"))
			{
				LINE_STATUS=token;
			}
			else if (!strcmp(fieldName,"DataCenterID"))
			{
				DataCenterID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetMemberSDHLineInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetMemberSDHLineInfo),output)!=sizeof(CWriteableSysNetMemberSDHLineInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetMemberSDHLineInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SeqNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemContractNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ApplyPerson.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonthlyRental.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemberNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientManager.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Bandwidth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InterfaceType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RemoteCircuit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LocalCircuit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Remark.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndALineAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndAContact.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndZLineAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ContactName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TELEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MOBILEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PROVINCE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartPortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartJump.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LINE_STATUS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DataCenterID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetMemberSDHLineInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetMemberSDHLineInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SeqNo.getString(buf);
	fprintf(fp,"\t\tSeqNo = %s    [序列号]\n",buf);	
	MemContractNo.getString(buf);
	fprintf(fp,"\t\tMemContractNo = %s    [合同号]\n",buf);	
	ApplyPerson.getString(buf);
	fprintf(fp,"\t\tApplyPerson = %s    [申请人]\n",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);	
	MemberNo.getString(buf);
	fprintf(fp,"\t\tMemberNo = %s    [会员号]\n",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);	
	ClientManager.getString(buf);
	fprintf(fp,"\t\tClientManager = %s    [客户经理]\n",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,"\t\tBandwidth = %s    [带宽]\n",buf);	
	InterfaceType.getString(buf);
	fprintf(fp,"\t\tInterfaceType = %s    [接口类]\n",buf);	
	RemoteCircuit.getString(buf);
	fprintf(fp,"\t\tRemoteCircuit = %s    [长途电路编码]\n",buf);	
	LocalCircuit.getString(buf);
	fprintf(fp,"\t\tLocalCircuit = %s    [本地电路编码]\n",buf);	
	Remark.getString(buf);
	fprintf(fp,"\t\tRemark = %s    [备注]\n",buf);	
	EndALineAddress.getString(buf);
	fprintf(fp,"\t\tEndALineAddress = %s    [A端接入地址]\n",buf);	
	EndAContact.getString(buf);
	fprintf(fp,"\t\tEndAContact = %s    [A端联系人]\n",buf);	
	EndZLineAddress.getString(buf);
	fprintf(fp,"\t\tEndZLineAddress = %s    [Z端接入地址]\n",buf);	
	ContactName.getString(buf);
	fprintf(fp,"\t\tContactName = %s    [联系人]\n",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);	
	StartPortID.getString(buf);
	fprintf(fp,"\t\tStartPortID = %s    [起始设备端口]\n",buf);	
	StartJump.getString(buf);
	fprintf(fp,"\t\tStartJump = %s    [起始设备跳接端]\n",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);	
	DataCenterID.getString(buf);
	fprintf(fp,"\t\tDataCenterID = %s    [数据中心代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMemberSDHLineInfo::dumpDiff(FILE *fp, const CWriteableSysNetMemberSDHLineInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetMemberSDHLineInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SeqNo.getString(buf);
	if (compare(SeqNo.getValue(),pOriginal->SeqNo.getValue())!=0)
	{
		pOriginal->SeqNo.getString(bufOriginal);
		fprintf(fp,"\t\tSeqNo = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSeqNo = %s    [序列号]\n",buf);
	}
	MemContractNo.getString(buf);
	if (compare(MemContractNo.getValue(),pOriginal->MemContractNo.getValue())!=0)
	{
		pOriginal->MemContractNo.getString(bufOriginal);
		fprintf(fp,"\t\tMemContractNo = %s -> %s    [合同号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemContractNo = %s    [合同号]\n",buf);
	}
	ApplyPerson.getString(buf);
	if (compare(ApplyPerson.getValue(),pOriginal->ApplyPerson.getValue())!=0)
	{
		pOriginal->ApplyPerson.getString(bufOriginal);
		fprintf(fp,"\t\tApplyPerson = %s -> %s    [申请人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tApplyPerson = %s    [申请人]\n",buf);
	}
	MonthlyRental.getString(buf);
	if (compare(MonthlyRental.getValue(),pOriginal->MonthlyRental.getValue())!=0)
	{
		pOriginal->MonthlyRental.getString(bufOriginal);
		fprintf(fp,"\t\tMonthlyRental = %s -> %s    [月租费用]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);
	}
	MemberNo.getString(buf);
	if (compare(MemberNo.getValue(),pOriginal->MemberNo.getValue())!=0)
	{
		pOriginal->MemberNo.getString(bufOriginal);
		fprintf(fp,"\t\tMemberNo = %s -> %s    [会员号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemberNo = %s    [会员号]\n",buf);
	}
	ParticipantName.getString(buf);
	if (compare(ParticipantName.getValue(),pOriginal->ParticipantName.getValue())!=0)
	{
		pOriginal->ParticipantName.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantName = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);
	}
	ClientManager.getString(buf);
	if (compare(ClientManager.getValue(),pOriginal->ClientManager.getValue())!=0)
	{
		pOriginal->ClientManager.getString(bufOriginal);
		fprintf(fp,"\t\tClientManager = %s -> %s    [客户经理]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientManager = %s    [客户经理]\n",buf);
	}
	Bandwidth.getString(buf);
	if (compare(Bandwidth.getValue(),pOriginal->Bandwidth.getValue())!=0)
	{
		pOriginal->Bandwidth.getString(bufOriginal);
		fprintf(fp,"\t\tBandwidth = %s -> %s    [带宽]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBandwidth = %s    [带宽]\n",buf);
	}
	InterfaceType.getString(buf);
	if (compare(InterfaceType.getValue(),pOriginal->InterfaceType.getValue())!=0)
	{
		pOriginal->InterfaceType.getString(bufOriginal);
		fprintf(fp,"\t\tInterfaceType = %s -> %s    [接口类]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterfaceType = %s    [接口类]\n",buf);
	}
	RemoteCircuit.getString(buf);
	if (compare(RemoteCircuit.getValue(),pOriginal->RemoteCircuit.getValue())!=0)
	{
		pOriginal->RemoteCircuit.getString(bufOriginal);
		fprintf(fp,"\t\tRemoteCircuit = %s -> %s    [长途电路编码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRemoteCircuit = %s    [长途电路编码]\n",buf);
	}
	LocalCircuit.getString(buf);
	if (compare(LocalCircuit.getValue(),pOriginal->LocalCircuit.getValue())!=0)
	{
		pOriginal->LocalCircuit.getString(bufOriginal);
		fprintf(fp,"\t\tLocalCircuit = %s -> %s    [本地电路编码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLocalCircuit = %s    [本地电路编码]\n",buf);
	}
	Remark.getString(buf);
	if (compare(Remark.getValue(),pOriginal->Remark.getValue())!=0)
	{
		pOriginal->Remark.getString(bufOriginal);
		fprintf(fp,"\t\tRemark = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRemark = %s    [备注]\n",buf);
	}
	EndALineAddress.getString(buf);
	if (compare(EndALineAddress.getValue(),pOriginal->EndALineAddress.getValue())!=0)
	{
		pOriginal->EndALineAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndALineAddress = %s -> %s    [A端接入地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndALineAddress = %s    [A端接入地址]\n",buf);
	}
	EndAContact.getString(buf);
	if (compare(EndAContact.getValue(),pOriginal->EndAContact.getValue())!=0)
	{
		pOriginal->EndAContact.getString(bufOriginal);
		fprintf(fp,"\t\tEndAContact = %s -> %s    [A端联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndAContact = %s    [A端联系人]\n",buf);
	}
	EndZLineAddress.getString(buf);
	if (compare(EndZLineAddress.getValue(),pOriginal->EndZLineAddress.getValue())!=0)
	{
		pOriginal->EndZLineAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndZLineAddress = %s -> %s    [Z端接入地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndZLineAddress = %s    [Z端接入地址]\n",buf);
	}
	ContactName.getString(buf);
	if (compare(ContactName.getValue(),pOriginal->ContactName.getValue())!=0)
	{
		pOriginal->ContactName.getString(bufOriginal);
		fprintf(fp,"\t\tContactName = %s -> %s    [联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContactName = %s    [联系人]\n",buf);
	}
	TELEPHONE.getString(buf);
	if (compare(TELEPHONE.getValue(),pOriginal->TELEPHONE.getValue())!=0)
	{
		pOriginal->TELEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tTELEPHONE = %s -> %s    [联系电话]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);
	}
	MOBILEPHONE.getString(buf);
	if (compare(MOBILEPHONE.getValue(),pOriginal->MOBILEPHONE.getValue())!=0)
	{
		pOriginal->MOBILEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tMOBILEPHONE = %s -> %s    [手机号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [路由器端口号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);
	}
	PROVINCE.getString(buf);
	if (compare(PROVINCE.getValue(),pOriginal->PROVINCE.getValue())!=0)
	{
		pOriginal->PROVINCE.getString(bufOriginal);
		fprintf(fp,"\t\tPROVINCE = %s -> %s    [所属省份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);
	}
	StartPortID.getString(buf);
	if (compare(StartPortID.getValue(),pOriginal->StartPortID.getValue())!=0)
	{
		pOriginal->StartPortID.getString(bufOriginal);
		fprintf(fp,"\t\tStartPortID = %s -> %s    [起始设备端口]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartPortID = %s    [起始设备端口]\n",buf);
	}
	StartJump.getString(buf);
	if (compare(StartJump.getValue(),pOriginal->StartJump.getValue())!=0)
	{
		pOriginal->StartJump.getString(bufOriginal);
		fprintf(fp,"\t\tStartJump = %s -> %s    [起始设备跳接端]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartJump = %s    [起始设备跳接端]\n",buf);
	}
	LINE_STATUS.getString(buf);
	if (compare(LINE_STATUS.getValue(),pOriginal->LINE_STATUS.getValue())!=0)
	{
		pOriginal->LINE_STATUS.getString(bufOriginal);
		fprintf(fp,"\t\tLINE_STATUS = %s -> %s    [线路状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);
	}
	DataCenterID.getString(buf);
	if (compare(DataCenterID.getValue(),pOriginal->DataCenterID.getValue())!=0)
	{
		pOriginal->DataCenterID.getString(bufOriginal);
		fprintf(fp,"\t\tDataCenterID = %s -> %s    [数据中心代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDataCenterID = %s    [数据中心代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetMemberSDHLineInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SeqNo.getString(buf);
	fprintf(fp,",SeqNo,%s",buf);	
	MemContractNo.getString(buf);
	fprintf(fp,",MemContractNo,%s",buf);	
	ApplyPerson.getString(buf);
	fprintf(fp,",ApplyPerson,%s",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,",MonthlyRental,%s",buf);	
	MemberNo.getString(buf);
	fprintf(fp,",MemberNo,%s",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,",ParticipantName,%s",buf);	
	ClientManager.getString(buf);
	fprintf(fp,",ClientManager,%s",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,",Bandwidth,%s",buf);	
	InterfaceType.getString(buf);
	fprintf(fp,",InterfaceType,%s",buf);	
	RemoteCircuit.getString(buf);
	fprintf(fp,",RemoteCircuit,%s",buf);	
	LocalCircuit.getString(buf);
	fprintf(fp,",LocalCircuit,%s",buf);	
	Remark.getString(buf);
	fprintf(fp,",Remark,%s",buf);	
	EndALineAddress.getString(buf);
	fprintf(fp,",EndALineAddress,%s",buf);	
	EndAContact.getString(buf);
	fprintf(fp,",EndAContact,%s",buf);	
	EndZLineAddress.getString(buf);
	fprintf(fp,",EndZLineAddress,%s",buf);	
	ContactName.getString(buf);
	fprintf(fp,",ContactName,%s",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,",TELEPHONE,%s",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,",MOBILEPHONE,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,",PROVINCE,%s",buf);	
	StartPortID.getString(buf);
	fprintf(fp,",StartPortID,%s",buf);	
	StartJump.getString(buf);
	fprintf(fp,",StartJump,%s",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,",LINE_STATUS,%s",buf);	
	DataCenterID.getString(buf);
	fprintf(fp,",DataCenterID,%s",buf);	
}

void CWriteableSysNetMemberSDHLineInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SeqNo.getString(buf);
	sprintf(p,"SeqNo=%s,",buf);
	p+=strlen(p);
	MemContractNo.getString(buf);
	sprintf(p,"MemContractNo=%s,",buf);
	p+=strlen(p);
	ApplyPerson.getString(buf);
	sprintf(p,"ApplyPerson=%s,",buf);
	p+=strlen(p);
	MonthlyRental.getString(buf);
	sprintf(p,"MonthlyRental=%s,",buf);
	p+=strlen(p);
	MemberNo.getString(buf);
	sprintf(p,"MemberNo=%s,",buf);
	p+=strlen(p);
	ParticipantName.getString(buf);
	sprintf(p,"ParticipantName=%s,",buf);
	p+=strlen(p);
	ClientManager.getString(buf);
	sprintf(p,"ClientManager=%s,",buf);
	p+=strlen(p);
	Bandwidth.getString(buf);
	sprintf(p,"Bandwidth=%s,",buf);
	p+=strlen(p);
	InterfaceType.getString(buf);
	sprintf(p,"InterfaceType=%s,",buf);
	p+=strlen(p);
	RemoteCircuit.getString(buf);
	sprintf(p,"RemoteCircuit=%s,",buf);
	p+=strlen(p);
	LocalCircuit.getString(buf);
	sprintf(p,"LocalCircuit=%s,",buf);
	p+=strlen(p);
	Remark.getString(buf);
	sprintf(p,"Remark=%s,",buf);
	p+=strlen(p);
	EndALineAddress.getString(buf);
	sprintf(p,"EndALineAddress=%s,",buf);
	p+=strlen(p);
	EndAContact.getString(buf);
	sprintf(p,"EndAContact=%s,",buf);
	p+=strlen(p);
	EndZLineAddress.getString(buf);
	sprintf(p,"EndZLineAddress=%s,",buf);
	p+=strlen(p);
	ContactName.getString(buf);
	sprintf(p,"ContactName=%s,",buf);
	p+=strlen(p);
	TELEPHONE.getString(buf);
	sprintf(p,"TELEPHONE=%s,",buf);
	p+=strlen(p);
	MOBILEPHONE.getString(buf);
	sprintf(p,"MOBILEPHONE=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	PROVINCE.getString(buf);
	sprintf(p,"PROVINCE=%s,",buf);
	p+=strlen(p);
	StartPortID.getString(buf);
	sprintf(p,"StartPortID=%s,",buf);
	p+=strlen(p);
	StartJump.getString(buf);
	sprintf(p,"StartJump=%s,",buf);
	p+=strlen(p);
	LINE_STATUS.getString(buf);
	sprintf(p,"LINE_STATUS=%s,",buf);
	p+=strlen(p);
	DataCenterID.getString(buf);
	sprintf(p,"DataCenterID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetMemberSDHLineInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetMemberSDHLineInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SeqNo.getString(buf);
	pLogger->output(indent+1,0,"SeqNo=%s 序列号",buf);
	MemContractNo.getString(buf);
	pLogger->output(indent+1,0,"MemContractNo=%s 合同号",buf);
	ApplyPerson.getString(buf);
	pLogger->output(indent+1,0,"ApplyPerson=%s 申请人",buf);
	MonthlyRental.getString(buf);
	pLogger->output(indent+1,0,"MonthlyRental=%s 月租费用",buf);
	MemberNo.getString(buf);
	pLogger->output(indent+1,0,"MemberNo=%s 会员号",buf);
	ParticipantName.getString(buf);
	pLogger->output(indent+1,0,"ParticipantName=%s 会员名称",buf);
	ClientManager.getString(buf);
	pLogger->output(indent+1,0,"ClientManager=%s 客户经理",buf);
	Bandwidth.getString(buf);
	pLogger->output(indent+1,0,"Bandwidth=%s 带宽",buf);
	InterfaceType.getString(buf);
	pLogger->output(indent+1,0,"InterfaceType=%s 接口类",buf);
	RemoteCircuit.getString(buf);
	pLogger->output(indent+1,0,"RemoteCircuit=%s 长途电路编码",buf);
	LocalCircuit.getString(buf);
	pLogger->output(indent+1,0,"LocalCircuit=%s 本地电路编码",buf);
	Remark.getString(buf);
	pLogger->output(indent+1,0,"Remark=%s 备注",buf);
	EndALineAddress.getString(buf);
	pLogger->output(indent+1,0,"EndALineAddress=%s A端接入地址",buf);
	EndAContact.getString(buf);
	pLogger->output(indent+1,0,"EndAContact=%s A端联系人",buf);
	EndZLineAddress.getString(buf);
	pLogger->output(indent+1,0,"EndZLineAddress=%s Z端接入地址",buf);
	ContactName.getString(buf);
	pLogger->output(indent+1,0,"ContactName=%s 联系人",buf);
	TELEPHONE.getString(buf);
	pLogger->output(indent+1,0,"TELEPHONE=%s 联系电话",buf);
	MOBILEPHONE.getString(buf);
	pLogger->output(indent+1,0,"MOBILEPHONE=%s 手机号",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s 路由器端口号",buf);
	PROVINCE.getString(buf);
	pLogger->output(indent+1,0,"PROVINCE=%s 所属省份",buf);
	StartPortID.getString(buf);
	pLogger->output(indent+1,0,"StartPortID=%s 起始设备端口",buf);
	StartJump.getString(buf);
	pLogger->output(indent+1,0,"StartJump=%s 起始设备跳接端",buf);
	LINE_STATUS.getString(buf);
	pLogger->output(indent+1,0,"LINE_STATUS=%s 线路状态",buf);
	DataCenterID.getString(buf);
	pLogger->output(indent+1,0,"DataCenterID=%s 数据中心代码",buf);
	pLogger->output(indent,0,"}");
}

CSysNetMemberSDHLineInfoIterator::~CSysNetMemberSDHLineInfoIterator(void)
{
}


void CSysNetMemberSDHLineInfoIterator::dump(FILE *output)
{
	CSysNetMemberSDHLineInfo *pSysNetMemberSDHLineInfo;
	
	while ((pSysNetMemberSDHLineInfo=next())!=NULL)
	{
		pSysNetMemberSDHLineInfo->dump(output);
	}
}



void CWriteableSysNetDDNLinkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ClientName,DDN_NO,BusinessUnit,Bandwidth,EndAAddress,EndAContactName,EndZAddress,EndZContactName\n");
}
	
void CWriteableSysNetDDNLinkInfo::init(void)
{
	ID.clear();
	ClientName.clear();
	DDN_NO.clear();
	BusinessUnit.clear();
	Bandwidth.clear();
	EndAAddress.clear();
	EndAContactName.clear();
	EndZAddress.clear();
	EndZContactName.clear();
}

int CWriteableSysNetDDNLinkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetDDNLinkInfo),input)!=sizeof(CWriteableSysNetDDNLinkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetDDNLinkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientName=token;
		}
		else
		{
			ClientName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Bandwidth=token;
		}
		else
		{
			Bandwidth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndAAddress=token;
		}
		else
		{
			EndAAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndAContactName=token;
		}
		else
		{
			EndAContactName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndZAddress=token;
		}
		else
		{
			EndZAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndZContactName=token;
		}
		else
		{
			EndZContactName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ClientName"))
			{
				ClientName=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"Bandwidth"))
			{
				Bandwidth=token;
			}
			else if (!strcmp(fieldName,"EndAAddress"))
			{
				EndAAddress=token;
			}
			else if (!strcmp(fieldName,"EndAContactName"))
			{
				EndAContactName=token;
			}
			else if (!strcmp(fieldName,"EndZAddress"))
			{
				EndZAddress=token;
			}
			else if (!strcmp(fieldName,"EndZContactName"))
			{
				EndZContactName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetDDNLinkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetDDNLinkInfo),output)!=sizeof(CWriteableSysNetDDNLinkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetDDNLinkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Bandwidth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndAAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndAContactName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndZAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndZContactName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetDDNLinkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetDDNLinkInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ClientName.getString(buf);
	fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,"\t\tBandwidth = %s    [速率]\n",buf);	
	EndAAddress.getString(buf);
	fprintf(fp,"\t\tEndAAddress = %s    [甲端地址]\n",buf);	
	EndAContactName.getString(buf);
	fprintf(fp,"\t\tEndAContactName = %s    [甲端联系人]\n",buf);	
	EndZAddress.getString(buf);
	fprintf(fp,"\t\tEndZAddress = %s    [乙端地址]\n",buf);	
	EndZContactName.getString(buf);
	fprintf(fp,"\t\tEndZContactName = %s    [乙端联系人]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDDNLinkInfo::dumpDiff(FILE *fp, const CWriteableSysNetDDNLinkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetDDNLinkInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ClientName.getString(buf);
	if (compare(ClientName.getValue(),pOriginal->ClientName.getValue())!=0)
	{
		pOriginal->ClientName.getString(bufOriginal);
		fprintf(fp,"\t\tClientName = %s -> %s    [客户名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	Bandwidth.getString(buf);
	if (compare(Bandwidth.getValue(),pOriginal->Bandwidth.getValue())!=0)
	{
		pOriginal->Bandwidth.getString(bufOriginal);
		fprintf(fp,"\t\tBandwidth = %s -> %s    [速率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBandwidth = %s    [速率]\n",buf);
	}
	EndAAddress.getString(buf);
	if (compare(EndAAddress.getValue(),pOriginal->EndAAddress.getValue())!=0)
	{
		pOriginal->EndAAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndAAddress = %s -> %s    [甲端地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndAAddress = %s    [甲端地址]\n",buf);
	}
	EndAContactName.getString(buf);
	if (compare(EndAContactName.getValue(),pOriginal->EndAContactName.getValue())!=0)
	{
		pOriginal->EndAContactName.getString(bufOriginal);
		fprintf(fp,"\t\tEndAContactName = %s -> %s    [甲端联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndAContactName = %s    [甲端联系人]\n",buf);
	}
	EndZAddress.getString(buf);
	if (compare(EndZAddress.getValue(),pOriginal->EndZAddress.getValue())!=0)
	{
		pOriginal->EndZAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndZAddress = %s -> %s    [乙端地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndZAddress = %s    [乙端地址]\n",buf);
	}
	EndZContactName.getString(buf);
	if (compare(EndZContactName.getValue(),pOriginal->EndZContactName.getValue())!=0)
	{
		pOriginal->EndZContactName.getString(bufOriginal);
		fprintf(fp,"\t\tEndZContactName = %s -> %s    [乙端联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndZContactName = %s    [乙端联系人]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetDDNLinkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ClientName.getString(buf);
	fprintf(fp,",ClientName,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,",Bandwidth,%s",buf);	
	EndAAddress.getString(buf);
	fprintf(fp,",EndAAddress,%s",buf);	
	EndAContactName.getString(buf);
	fprintf(fp,",EndAContactName,%s",buf);	
	EndZAddress.getString(buf);
	fprintf(fp,",EndZAddress,%s",buf);	
	EndZContactName.getString(buf);
	fprintf(fp,",EndZContactName,%s",buf);	
}

void CWriteableSysNetDDNLinkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ClientName.getString(buf);
	sprintf(p,"ClientName=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	Bandwidth.getString(buf);
	sprintf(p,"Bandwidth=%s,",buf);
	p+=strlen(p);
	EndAAddress.getString(buf);
	sprintf(p,"EndAAddress=%s,",buf);
	p+=strlen(p);
	EndAContactName.getString(buf);
	sprintf(p,"EndAContactName=%s,",buf);
	p+=strlen(p);
	EndZAddress.getString(buf);
	sprintf(p,"EndZAddress=%s,",buf);
	p+=strlen(p);
	EndZContactName.getString(buf);
	sprintf(p,"EndZContactName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetDDNLinkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetDDNLinkInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ClientName.getString(buf);
	pLogger->output(indent+1,0,"ClientName=%s 客户名称",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	Bandwidth.getString(buf);
	pLogger->output(indent+1,0,"Bandwidth=%s 速率",buf);
	EndAAddress.getString(buf);
	pLogger->output(indent+1,0,"EndAAddress=%s 甲端地址",buf);
	EndAContactName.getString(buf);
	pLogger->output(indent+1,0,"EndAContactName=%s 甲端联系人",buf);
	EndZAddress.getString(buf);
	pLogger->output(indent+1,0,"EndZAddress=%s 乙端地址",buf);
	EndZContactName.getString(buf);
	pLogger->output(indent+1,0,"EndZContactName=%s 乙端联系人",buf);
	pLogger->output(indent,0,"}");
}

CSysNetDDNLinkInfoIterator::~CSysNetDDNLinkInfoIterator(void)
{
}


void CSysNetDDNLinkInfoIterator::dump(FILE *output)
{
	CSysNetDDNLinkInfo *pSysNetDDNLinkInfo;
	
	while ((pSysNetDDNLinkInfo=next())!=NULL)
	{
		pSysNetDDNLinkInfo->dump(output);
	}
}



void CWriteableSysNetPseudMemberLinkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SeqNo,MemContractNo,LineUsage,LocalCircuit,RemoteCircuit,BusinessUnit,Bandwidth,ApplyPerson,MonthlyRental,EndAAddress,EndAContactName,EndZAddress,EndZContactName,Telephone,LineInfo,IPADDR\n");
}
	
void CWriteableSysNetPseudMemberLinkInfo::init(void)
{
	ID.clear();
	SeqNo.clear();
	MemContractNo.clear();
	LineUsage.clear();
	LocalCircuit.clear();
	RemoteCircuit.clear();
	BusinessUnit.clear();
	Bandwidth.clear();
	ApplyPerson.clear();
	MonthlyRental.clear();
	EndAAddress.clear();
	EndAContactName.clear();
	EndZAddress.clear();
	EndZContactName.clear();
	Telephone.clear();
	LineInfo.clear();
	IPADDR.clear();
}

int CWriteableSysNetPseudMemberLinkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetPseudMemberLinkInfo),input)!=sizeof(CWriteableSysNetPseudMemberLinkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetPseudMemberLinkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SeqNo=token;
		}
		else
		{
			SeqNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemContractNo=token;
		}
		else
		{
			MemContractNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LineUsage=token;
		}
		else
		{
			LineUsage="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LocalCircuit=token;
		}
		else
		{
			LocalCircuit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RemoteCircuit=token;
		}
		else
		{
			RemoteCircuit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Bandwidth=token;
		}
		else
		{
			Bandwidth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ApplyPerson=token;
		}
		else
		{
			ApplyPerson="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonthlyRental=token;
		}
		else
		{
			MonthlyRental="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndAAddress=token;
		}
		else
		{
			EndAAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndAContactName=token;
		}
		else
		{
			EndAContactName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndZAddress=token;
		}
		else
		{
			EndZAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndZContactName=token;
		}
		else
		{
			EndZContactName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Telephone=token;
		}
		else
		{
			Telephone="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LineInfo=token;
		}
		else
		{
			LineInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SeqNo"))
			{
				SeqNo=token;
			}
			else if (!strcmp(fieldName,"MemContractNo"))
			{
				MemContractNo=token;
			}
			else if (!strcmp(fieldName,"LineUsage"))
			{
				LineUsage=token;
			}
			else if (!strcmp(fieldName,"LocalCircuit"))
			{
				LocalCircuit=token;
			}
			else if (!strcmp(fieldName,"RemoteCircuit"))
			{
				RemoteCircuit=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"Bandwidth"))
			{
				Bandwidth=token;
			}
			else if (!strcmp(fieldName,"ApplyPerson"))
			{
				ApplyPerson=token;
			}
			else if (!strcmp(fieldName,"MonthlyRental"))
			{
				MonthlyRental=token;
			}
			else if (!strcmp(fieldName,"EndAAddress"))
			{
				EndAAddress=token;
			}
			else if (!strcmp(fieldName,"EndAContactName"))
			{
				EndAContactName=token;
			}
			else if (!strcmp(fieldName,"EndZAddress"))
			{
				EndZAddress=token;
			}
			else if (!strcmp(fieldName,"EndZContactName"))
			{
				EndZContactName=token;
			}
			else if (!strcmp(fieldName,"Telephone"))
			{
				Telephone=token;
			}
			else if (!strcmp(fieldName,"LineInfo"))
			{
				LineInfo=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetPseudMemberLinkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetPseudMemberLinkInfo),output)!=sizeof(CWriteableSysNetPseudMemberLinkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetPseudMemberLinkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SeqNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemContractNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LineUsage.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LocalCircuit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RemoteCircuit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Bandwidth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ApplyPerson.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonthlyRental.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndAAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndAContactName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndZAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndZContactName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Telephone.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LineInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetPseudMemberLinkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetPseudMemberLinkInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SeqNo.getString(buf);
	fprintf(fp,"\t\tSeqNo = %s    [序列号]\n",buf);	
	MemContractNo.getString(buf);
	fprintf(fp,"\t\tMemContractNo = %s    [合同号]\n",buf);	
	LineUsage.getString(buf);
	fprintf(fp,"\t\tLineUsage = %s    [线路用途]\n",buf);	
	LocalCircuit.getString(buf);
	fprintf(fp,"\t\tLocalCircuit = %s    [本地电路编码]\n",buf);	
	RemoteCircuit.getString(buf);
	fprintf(fp,"\t\tRemoteCircuit = %s    [长途电路编码]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务]\n",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,"\t\tBandwidth = %s    [速率]\n",buf);	
	ApplyPerson.getString(buf);
	fprintf(fp,"\t\tApplyPerson = %s    [申请人]\n",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);	
	EndAAddress.getString(buf);
	fprintf(fp,"\t\tEndAAddress = %s    [甲端地址]\n",buf);	
	EndAContactName.getString(buf);
	fprintf(fp,"\t\tEndAContactName = %s    [甲端联系人]\n",buf);	
	EndZAddress.getString(buf);
	fprintf(fp,"\t\tEndZAddress = %s    [乙端地址]\n",buf);	
	EndZContactName.getString(buf);
	fprintf(fp,"\t\tEndZContactName = %s    [乙端联系人]\n",buf);	
	Telephone.getString(buf);
	fprintf(fp,"\t\tTelephone = %s    [乙端电话号码]\n",buf);	
	LineInfo.getString(buf);
	fprintf(fp,"\t\tLineInfo = %s    [线路信息]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPseudMemberLinkInfo::dumpDiff(FILE *fp, const CWriteableSysNetPseudMemberLinkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetPseudMemberLinkInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SeqNo.getString(buf);
	if (compare(SeqNo.getValue(),pOriginal->SeqNo.getValue())!=0)
	{
		pOriginal->SeqNo.getString(bufOriginal);
		fprintf(fp,"\t\tSeqNo = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSeqNo = %s    [序列号]\n",buf);
	}
	MemContractNo.getString(buf);
	if (compare(MemContractNo.getValue(),pOriginal->MemContractNo.getValue())!=0)
	{
		pOriginal->MemContractNo.getString(bufOriginal);
		fprintf(fp,"\t\tMemContractNo = %s -> %s    [合同号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemContractNo = %s    [合同号]\n",buf);
	}
	LineUsage.getString(buf);
	if (compare(LineUsage.getValue(),pOriginal->LineUsage.getValue())!=0)
	{
		pOriginal->LineUsage.getString(bufOriginal);
		fprintf(fp,"\t\tLineUsage = %s -> %s    [线路用途]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLineUsage = %s    [线路用途]\n",buf);
	}
	LocalCircuit.getString(buf);
	if (compare(LocalCircuit.getValue(),pOriginal->LocalCircuit.getValue())!=0)
	{
		pOriginal->LocalCircuit.getString(bufOriginal);
		fprintf(fp,"\t\tLocalCircuit = %s -> %s    [本地电路编码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLocalCircuit = %s    [本地电路编码]\n",buf);
	}
	RemoteCircuit.getString(buf);
	if (compare(RemoteCircuit.getValue(),pOriginal->RemoteCircuit.getValue())!=0)
	{
		pOriginal->RemoteCircuit.getString(bufOriginal);
		fprintf(fp,"\t\tRemoteCircuit = %s -> %s    [长途电路编码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRemoteCircuit = %s    [长途电路编码]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务]\n",buf);
	}
	Bandwidth.getString(buf);
	if (compare(Bandwidth.getValue(),pOriginal->Bandwidth.getValue())!=0)
	{
		pOriginal->Bandwidth.getString(bufOriginal);
		fprintf(fp,"\t\tBandwidth = %s -> %s    [速率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBandwidth = %s    [速率]\n",buf);
	}
	ApplyPerson.getString(buf);
	if (compare(ApplyPerson.getValue(),pOriginal->ApplyPerson.getValue())!=0)
	{
		pOriginal->ApplyPerson.getString(bufOriginal);
		fprintf(fp,"\t\tApplyPerson = %s -> %s    [申请人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tApplyPerson = %s    [申请人]\n",buf);
	}
	MonthlyRental.getString(buf);
	if (compare(MonthlyRental.getValue(),pOriginal->MonthlyRental.getValue())!=0)
	{
		pOriginal->MonthlyRental.getString(bufOriginal);
		fprintf(fp,"\t\tMonthlyRental = %s -> %s    [月租费用]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);
	}
	EndAAddress.getString(buf);
	if (compare(EndAAddress.getValue(),pOriginal->EndAAddress.getValue())!=0)
	{
		pOriginal->EndAAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndAAddress = %s -> %s    [甲端地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndAAddress = %s    [甲端地址]\n",buf);
	}
	EndAContactName.getString(buf);
	if (compare(EndAContactName.getValue(),pOriginal->EndAContactName.getValue())!=0)
	{
		pOriginal->EndAContactName.getString(bufOriginal);
		fprintf(fp,"\t\tEndAContactName = %s -> %s    [甲端联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndAContactName = %s    [甲端联系人]\n",buf);
	}
	EndZAddress.getString(buf);
	if (compare(EndZAddress.getValue(),pOriginal->EndZAddress.getValue())!=0)
	{
		pOriginal->EndZAddress.getString(bufOriginal);
		fprintf(fp,"\t\tEndZAddress = %s -> %s    [乙端地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndZAddress = %s    [乙端地址]\n",buf);
	}
	EndZContactName.getString(buf);
	if (compare(EndZContactName.getValue(),pOriginal->EndZContactName.getValue())!=0)
	{
		pOriginal->EndZContactName.getString(bufOriginal);
		fprintf(fp,"\t\tEndZContactName = %s -> %s    [乙端联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndZContactName = %s    [乙端联系人]\n",buf);
	}
	Telephone.getString(buf);
	if (compare(Telephone.getValue(),pOriginal->Telephone.getValue())!=0)
	{
		pOriginal->Telephone.getString(bufOriginal);
		fprintf(fp,"\t\tTelephone = %s -> %s    [乙端电话号码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTelephone = %s    [乙端电话号码]\n",buf);
	}
	LineInfo.getString(buf);
	if (compare(LineInfo.getValue(),pOriginal->LineInfo.getValue())!=0)
	{
		pOriginal->LineInfo.getString(bufOriginal);
		fprintf(fp,"\t\tLineInfo = %s -> %s    [线路信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLineInfo = %s    [线路信息]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPseudMemberLinkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SeqNo.getString(buf);
	fprintf(fp,",SeqNo,%s",buf);	
	MemContractNo.getString(buf);
	fprintf(fp,",MemContractNo,%s",buf);	
	LineUsage.getString(buf);
	fprintf(fp,",LineUsage,%s",buf);	
	LocalCircuit.getString(buf);
	fprintf(fp,",LocalCircuit,%s",buf);	
	RemoteCircuit.getString(buf);
	fprintf(fp,",RemoteCircuit,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	Bandwidth.getString(buf);
	fprintf(fp,",Bandwidth,%s",buf);	
	ApplyPerson.getString(buf);
	fprintf(fp,",ApplyPerson,%s",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,",MonthlyRental,%s",buf);	
	EndAAddress.getString(buf);
	fprintf(fp,",EndAAddress,%s",buf);	
	EndAContactName.getString(buf);
	fprintf(fp,",EndAContactName,%s",buf);	
	EndZAddress.getString(buf);
	fprintf(fp,",EndZAddress,%s",buf);	
	EndZContactName.getString(buf);
	fprintf(fp,",EndZContactName,%s",buf);	
	Telephone.getString(buf);
	fprintf(fp,",Telephone,%s",buf);	
	LineInfo.getString(buf);
	fprintf(fp,",LineInfo,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
}

void CWriteableSysNetPseudMemberLinkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SeqNo.getString(buf);
	sprintf(p,"SeqNo=%s,",buf);
	p+=strlen(p);
	MemContractNo.getString(buf);
	sprintf(p,"MemContractNo=%s,",buf);
	p+=strlen(p);
	LineUsage.getString(buf);
	sprintf(p,"LineUsage=%s,",buf);
	p+=strlen(p);
	LocalCircuit.getString(buf);
	sprintf(p,"LocalCircuit=%s,",buf);
	p+=strlen(p);
	RemoteCircuit.getString(buf);
	sprintf(p,"RemoteCircuit=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	Bandwidth.getString(buf);
	sprintf(p,"Bandwidth=%s,",buf);
	p+=strlen(p);
	ApplyPerson.getString(buf);
	sprintf(p,"ApplyPerson=%s,",buf);
	p+=strlen(p);
	MonthlyRental.getString(buf);
	sprintf(p,"MonthlyRental=%s,",buf);
	p+=strlen(p);
	EndAAddress.getString(buf);
	sprintf(p,"EndAAddress=%s,",buf);
	p+=strlen(p);
	EndAContactName.getString(buf);
	sprintf(p,"EndAContactName=%s,",buf);
	p+=strlen(p);
	EndZAddress.getString(buf);
	sprintf(p,"EndZAddress=%s,",buf);
	p+=strlen(p);
	EndZContactName.getString(buf);
	sprintf(p,"EndZContactName=%s,",buf);
	p+=strlen(p);
	Telephone.getString(buf);
	sprintf(p,"Telephone=%s,",buf);
	p+=strlen(p);
	LineInfo.getString(buf);
	sprintf(p,"LineInfo=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetPseudMemberLinkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetPseudMemberLinkInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SeqNo.getString(buf);
	pLogger->output(indent+1,0,"SeqNo=%s 序列号",buf);
	MemContractNo.getString(buf);
	pLogger->output(indent+1,0,"MemContractNo=%s 合同号",buf);
	LineUsage.getString(buf);
	pLogger->output(indent+1,0,"LineUsage=%s 线路用途",buf);
	LocalCircuit.getString(buf);
	pLogger->output(indent+1,0,"LocalCircuit=%s 本地电路编码",buf);
	RemoteCircuit.getString(buf);
	pLogger->output(indent+1,0,"RemoteCircuit=%s 长途电路编码",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务",buf);
	Bandwidth.getString(buf);
	pLogger->output(indent+1,0,"Bandwidth=%s 速率",buf);
	ApplyPerson.getString(buf);
	pLogger->output(indent+1,0,"ApplyPerson=%s 申请人",buf);
	MonthlyRental.getString(buf);
	pLogger->output(indent+1,0,"MonthlyRental=%s 月租费用",buf);
	EndAAddress.getString(buf);
	pLogger->output(indent+1,0,"EndAAddress=%s 甲端地址",buf);
	EndAContactName.getString(buf);
	pLogger->output(indent+1,0,"EndAContactName=%s 甲端联系人",buf);
	EndZAddress.getString(buf);
	pLogger->output(indent+1,0,"EndZAddress=%s 乙端地址",buf);
	EndZContactName.getString(buf);
	pLogger->output(indent+1,0,"EndZContactName=%s 乙端联系人",buf);
	Telephone.getString(buf);
	pLogger->output(indent+1,0,"Telephone=%s 乙端电话号码",buf);
	LineInfo.getString(buf);
	pLogger->output(indent+1,0,"LineInfo=%s 线路信息",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	pLogger->output(indent,0,"}");
}

CSysNetPseudMemberLinkInfoIterator::~CSysNetPseudMemberLinkInfoIterator(void)
{
}


void CSysNetPseudMemberLinkInfoIterator::dump(FILE *output)
{
	CSysNetPseudMemberLinkInfo *pSysNetPseudMemberLinkInfo;
	
	while ((pSysNetPseudMemberLinkInfo=next())!=NULL)
	{
		pSysNetPseudMemberLinkInfo->dump(output);
	}
}



void CWriteableSysNetOuterDeviceInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,IPADDR,NAME,memo\n");
}
	
void CWriteableSysNetOuterDeviceInfo::init(void)
{
	ID.clear();
	IPADDR.clear();
	NAME.clear();
	memo.clear();
}

int CWriteableSysNetOuterDeviceInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetOuterDeviceInfo),input)!=sizeof(CWriteableSysNetOuterDeviceInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetOuterDeviceInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NAME=token;
		}
		else
		{
			NAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			memo=token;
		}
		else
		{
			memo="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"NAME"))
			{
				NAME=token;
			}
			else if (!strcmp(fieldName,"memo"))
			{
				memo=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetOuterDeviceInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetOuterDeviceInfo),output)!=sizeof(CWriteableSysNetOuterDeviceInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetOuterDeviceInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	memo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetOuterDeviceInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetOuterDeviceInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [IP地址  ]\n",buf);	
	NAME.getString(buf);
	fprintf(fp,"\t\tNAME = %s    [设备名称 ]\n",buf);	
	memo.getString(buf);
	fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetOuterDeviceInfo::dumpDiff(FILE *fp, const CWriteableSysNetOuterDeviceInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetOuterDeviceInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [IP地址  ]\n",buf);
	}
	NAME.getString(buf);
	if (compare(NAME.getValue(),pOriginal->NAME.getValue())!=0)
	{
		pOriginal->NAME.getString(bufOriginal);
		fprintf(fp,"\t\tNAME = %s -> %s    [设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNAME = %s    [设备名称 ]\n",buf);
	}
	memo.getString(buf);
	if (compare(memo.getValue(),pOriginal->memo.getValue())!=0)
	{
		pOriginal->memo.getString(bufOriginal);
		fprintf(fp,"\t\tmemo = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tmemo = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetOuterDeviceInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	NAME.getString(buf);
	fprintf(fp,",NAME,%s",buf);	
	memo.getString(buf);
	fprintf(fp,",memo,%s",buf);	
}

void CWriteableSysNetOuterDeviceInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	NAME.getString(buf);
	sprintf(p,"NAME=%s,",buf);
	p+=strlen(p);
	memo.getString(buf);
	sprintf(p,"memo=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetOuterDeviceInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetOuterDeviceInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s IP地址  ",buf);
	NAME.getString(buf);
	pLogger->output(indent+1,0,"NAME=%s 设备名称 ",buf);
	memo.getString(buf);
	pLogger->output(indent+1,0,"memo=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetOuterDeviceInfoIterator::~CSysNetOuterDeviceInfoIterator(void)
{
}


void CSysNetOuterDeviceInfoIterator::dump(FILE *output)
{
	CSysNetOuterDeviceInfo *pSysNetOuterDeviceInfo;
	
	while ((pSysNetOuterDeviceInfo=next())!=NULL)
	{
		pSysNetOuterDeviceInfo->dump(output);
	}
}



void CWriteableSysLocalPingResultInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SouIPADDR,SouNAME,TarIPADDR,TarNAME,PDateSta,PTimeSta,ConnRate\n");
}
	
void CWriteableSysLocalPingResultInfo::init(void)
{
	ID.clear();
	SouIPADDR.clear();
	SouNAME.clear();
	TarIPADDR.clear();
	TarNAME.clear();
	PDateSta.clear();
	PTimeSta.clear();
	ConnRate.clear();
}

int CWriteableSysLocalPingResultInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysLocalPingResultInfo),input)!=sizeof(CWriteableSysLocalPingResultInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysLocalPingResultInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SouIPADDR=token;
		}
		else
		{
			SouIPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SouNAME=token;
		}
		else
		{
			SouNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TarIPADDR=token;
		}
		else
		{
			TarIPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TarNAME=token;
		}
		else
		{
			TarNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PDateSta=token;
		}
		else
		{
			PDateSta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PTimeSta=token;
		}
		else
		{
			PTimeSta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ConnRate=token;
		}
		else
		{
			ConnRate="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SouIPADDR"))
			{
				SouIPADDR=token;
			}
			else if (!strcmp(fieldName,"SouNAME"))
			{
				SouNAME=token;
			}
			else if (!strcmp(fieldName,"TarIPADDR"))
			{
				TarIPADDR=token;
			}
			else if (!strcmp(fieldName,"TarNAME"))
			{
				TarNAME=token;
			}
			else if (!strcmp(fieldName,"PDateSta"))
			{
				PDateSta=token;
			}
			else if (!strcmp(fieldName,"PTimeSta"))
			{
				PTimeSta=token;
			}
			else if (!strcmp(fieldName,"ConnRate"))
			{
				ConnRate=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysLocalPingResultInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysLocalPingResultInfo),output)!=sizeof(CWriteableSysLocalPingResultInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysLocalPingResultInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SouIPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SouNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TarIPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TarNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PDateSta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PTimeSta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ConnRate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysLocalPingResultInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysLocalPingResultInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SouIPADDR.getString(buf);
	fprintf(fp,"\t\tSouIPADDR = %s    [源IP地址  ]\n",buf);	
	SouNAME.getString(buf);
	fprintf(fp,"\t\tSouNAME = %s    [源设备名称 ]\n",buf);	
	TarIPADDR.getString(buf);
	fprintf(fp,"\t\tTarIPADDR = %s    [目的IP地址  ]\n",buf);	
	TarNAME.getString(buf);
	fprintf(fp,"\t\tTarNAME = %s    [目的设备名称 ]\n",buf);	
	PDateSta.getString(buf);
	fprintf(fp,"\t\tPDateSta = %s    [生成日期]\n",buf);	
	PTimeSta.getString(buf);
	fprintf(fp,"\t\tPTimeSta = %s    [时间戳]\n",buf);	
	ConnRate.getString(buf);
	fprintf(fp,"\t\tConnRate = %s    [连通率]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysLocalPingResultInfo::dumpDiff(FILE *fp, const CWriteableSysLocalPingResultInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysLocalPingResultInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SouIPADDR.getString(buf);
	if (compare(SouIPADDR.getValue(),pOriginal->SouIPADDR.getValue())!=0)
	{
		pOriginal->SouIPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tSouIPADDR = %s -> %s    [源IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSouIPADDR = %s    [源IP地址  ]\n",buf);
	}
	SouNAME.getString(buf);
	if (compare(SouNAME.getValue(),pOriginal->SouNAME.getValue())!=0)
	{
		pOriginal->SouNAME.getString(bufOriginal);
		fprintf(fp,"\t\tSouNAME = %s -> %s    [源设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSouNAME = %s    [源设备名称 ]\n",buf);
	}
	TarIPADDR.getString(buf);
	if (compare(TarIPADDR.getValue(),pOriginal->TarIPADDR.getValue())!=0)
	{
		pOriginal->TarIPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tTarIPADDR = %s -> %s    [目的IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTarIPADDR = %s    [目的IP地址  ]\n",buf);
	}
	TarNAME.getString(buf);
	if (compare(TarNAME.getValue(),pOriginal->TarNAME.getValue())!=0)
	{
		pOriginal->TarNAME.getString(bufOriginal);
		fprintf(fp,"\t\tTarNAME = %s -> %s    [目的设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTarNAME = %s    [目的设备名称 ]\n",buf);
	}
	PDateSta.getString(buf);
	if (compare(PDateSta.getValue(),pOriginal->PDateSta.getValue())!=0)
	{
		pOriginal->PDateSta.getString(bufOriginal);
		fprintf(fp,"\t\tPDateSta = %s -> %s    [生成日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPDateSta = %s    [生成日期]\n",buf);
	}
	PTimeSta.getString(buf);
	if (compare(PTimeSta.getValue(),pOriginal->PTimeSta.getValue())!=0)
	{
		pOriginal->PTimeSta.getString(bufOriginal);
		fprintf(fp,"\t\tPTimeSta = %s -> %s    [时间戳]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPTimeSta = %s    [时间戳]\n",buf);
	}
	ConnRate.getString(buf);
	if (compare(ConnRate.getValue(),pOriginal->ConnRate.getValue())!=0)
	{
		pOriginal->ConnRate.getString(bufOriginal);
		fprintf(fp,"\t\tConnRate = %s -> %s    [连通率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tConnRate = %s    [连通率]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysLocalPingResultInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SouIPADDR.getString(buf);
	fprintf(fp,",SouIPADDR,%s",buf);	
	SouNAME.getString(buf);
	fprintf(fp,",SouNAME,%s",buf);	
	TarIPADDR.getString(buf);
	fprintf(fp,",TarIPADDR,%s",buf);	
	TarNAME.getString(buf);
	fprintf(fp,",TarNAME,%s",buf);	
	PDateSta.getString(buf);
	fprintf(fp,",PDateSta,%s",buf);	
	PTimeSta.getString(buf);
	fprintf(fp,",PTimeSta,%s",buf);	
	ConnRate.getString(buf);
	fprintf(fp,",ConnRate,%s",buf);	
}

void CWriteableSysLocalPingResultInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SouIPADDR.getString(buf);
	sprintf(p,"SouIPADDR=%s,",buf);
	p+=strlen(p);
	SouNAME.getString(buf);
	sprintf(p,"SouNAME=%s,",buf);
	p+=strlen(p);
	TarIPADDR.getString(buf);
	sprintf(p,"TarIPADDR=%s,",buf);
	p+=strlen(p);
	TarNAME.getString(buf);
	sprintf(p,"TarNAME=%s,",buf);
	p+=strlen(p);
	PDateSta.getString(buf);
	sprintf(p,"PDateSta=%s,",buf);
	p+=strlen(p);
	PTimeSta.getString(buf);
	sprintf(p,"PTimeSta=%s,",buf);
	p+=strlen(p);
	ConnRate.getString(buf);
	sprintf(p,"ConnRate=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysLocalPingResultInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysLocalPingResultInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SouIPADDR.getString(buf);
	pLogger->output(indent+1,0,"SouIPADDR=%s 源IP地址  ",buf);
	SouNAME.getString(buf);
	pLogger->output(indent+1,0,"SouNAME=%s 源设备名称 ",buf);
	TarIPADDR.getString(buf);
	pLogger->output(indent+1,0,"TarIPADDR=%s 目的IP地址  ",buf);
	TarNAME.getString(buf);
	pLogger->output(indent+1,0,"TarNAME=%s 目的设备名称 ",buf);
	PDateSta.getString(buf);
	pLogger->output(indent+1,0,"PDateSta=%s 生成日期",buf);
	PTimeSta.getString(buf);
	pLogger->output(indent+1,0,"PTimeSta=%s 时间戳",buf);
	ConnRate.getString(buf);
	pLogger->output(indent+1,0,"ConnRate=%s 连通率",buf);
	pLogger->output(indent,0,"}");
}

CSysLocalPingResultInfoIterator::~CSysLocalPingResultInfoIterator(void)
{
}


void CSysLocalPingResultInfoIterator::dump(FILE *output)
{
	CSysLocalPingResultInfo *pSysLocalPingResultInfo;
	
	while ((pSysLocalPingResultInfo=next())!=NULL)
	{
		pSysLocalPingResultInfo->dump(output);
	}
}



void CWriteableSysRomotePingResultInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,SouIPADDR,SouNAME,TarIPADDR,TarNAME,PDateSta,PTimeSta,ConnRate,TimeDlyMin,TimeDlyMax,TimeDlyAvg\n");
}
	
void CWriteableSysRomotePingResultInfo::init(void)
{
	ID.clear();
	SouIPADDR.clear();
	SouNAME.clear();
	TarIPADDR.clear();
	TarNAME.clear();
	PDateSta.clear();
	PTimeSta.clear();
	ConnRate.clear();
	TimeDlyMin.clear();
	TimeDlyMax.clear();
	TimeDlyAvg.clear();
}

int CWriteableSysRomotePingResultInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysRomotePingResultInfo),input)!=sizeof(CWriteableSysRomotePingResultInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysRomotePingResultInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SouIPADDR=token;
		}
		else
		{
			SouIPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SouNAME=token;
		}
		else
		{
			SouNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TarIPADDR=token;
		}
		else
		{
			TarIPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TarNAME=token;
		}
		else
		{
			TarNAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PDateSta=token;
		}
		else
		{
			PDateSta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PTimeSta=token;
		}
		else
		{
			PTimeSta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ConnRate=token;
		}
		else
		{
			ConnRate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeDlyMin=token;
		}
		else
		{
			TimeDlyMin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeDlyMax=token;
		}
		else
		{
			TimeDlyMax="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeDlyAvg=token;
		}
		else
		{
			TimeDlyAvg="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"SouIPADDR"))
			{
				SouIPADDR=token;
			}
			else if (!strcmp(fieldName,"SouNAME"))
			{
				SouNAME=token;
			}
			else if (!strcmp(fieldName,"TarIPADDR"))
			{
				TarIPADDR=token;
			}
			else if (!strcmp(fieldName,"TarNAME"))
			{
				TarNAME=token;
			}
			else if (!strcmp(fieldName,"PDateSta"))
			{
				PDateSta=token;
			}
			else if (!strcmp(fieldName,"PTimeSta"))
			{
				PTimeSta=token;
			}
			else if (!strcmp(fieldName,"ConnRate"))
			{
				ConnRate=token;
			}
			else if (!strcmp(fieldName,"TimeDlyMin"))
			{
				TimeDlyMin=token;
			}
			else if (!strcmp(fieldName,"TimeDlyMax"))
			{
				TimeDlyMax=token;
			}
			else if (!strcmp(fieldName,"TimeDlyAvg"))
			{
				TimeDlyAvg=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysRomotePingResultInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysRomotePingResultInfo),output)!=sizeof(CWriteableSysRomotePingResultInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysRomotePingResultInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SouIPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SouNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TarIPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TarNAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PDateSta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PTimeSta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ConnRate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeDlyMin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeDlyMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeDlyAvg.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysRomotePingResultInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysRomotePingResultInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	SouIPADDR.getString(buf);
	fprintf(fp,"\t\tSouIPADDR = %s    [源IP地址  ]\n",buf);	
	SouNAME.getString(buf);
	fprintf(fp,"\t\tSouNAME = %s    [源设备名称 ]\n",buf);	
	TarIPADDR.getString(buf);
	fprintf(fp,"\t\tTarIPADDR = %s    [目的IP地址  ]\n",buf);	
	TarNAME.getString(buf);
	fprintf(fp,"\t\tTarNAME = %s    [目的设备名称 ]\n",buf);	
	PDateSta.getString(buf);
	fprintf(fp,"\t\tPDateSta = %s    [生成日期]\n",buf);	
	PTimeSta.getString(buf);
	fprintf(fp,"\t\tPTimeSta = %s    [时间戳]\n",buf);	
	ConnRate.getString(buf);
	fprintf(fp,"\t\tConnRate = %s    [连通率]\n",buf);	
	TimeDlyMin.getString(buf);
	fprintf(fp,"\t\tTimeDlyMin = %s    [最小时延]\n",buf);	
	TimeDlyMax.getString(buf);
	fprintf(fp,"\t\tTimeDlyMax = %s    [最大时延]\n",buf);	
	TimeDlyAvg.getString(buf);
	fprintf(fp,"\t\tTimeDlyAvg = %s    [平均时延]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysRomotePingResultInfo::dumpDiff(FILE *fp, const CWriteableSysRomotePingResultInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysRomotePingResultInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	SouIPADDR.getString(buf);
	if (compare(SouIPADDR.getValue(),pOriginal->SouIPADDR.getValue())!=0)
	{
		pOriginal->SouIPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tSouIPADDR = %s -> %s    [源IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSouIPADDR = %s    [源IP地址  ]\n",buf);
	}
	SouNAME.getString(buf);
	if (compare(SouNAME.getValue(),pOriginal->SouNAME.getValue())!=0)
	{
		pOriginal->SouNAME.getString(bufOriginal);
		fprintf(fp,"\t\tSouNAME = %s -> %s    [源设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSouNAME = %s    [源设备名称 ]\n",buf);
	}
	TarIPADDR.getString(buf);
	if (compare(TarIPADDR.getValue(),pOriginal->TarIPADDR.getValue())!=0)
	{
		pOriginal->TarIPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tTarIPADDR = %s -> %s    [目的IP地址  ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTarIPADDR = %s    [目的IP地址  ]\n",buf);
	}
	TarNAME.getString(buf);
	if (compare(TarNAME.getValue(),pOriginal->TarNAME.getValue())!=0)
	{
		pOriginal->TarNAME.getString(bufOriginal);
		fprintf(fp,"\t\tTarNAME = %s -> %s    [目的设备名称 ]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTarNAME = %s    [目的设备名称 ]\n",buf);
	}
	PDateSta.getString(buf);
	if (compare(PDateSta.getValue(),pOriginal->PDateSta.getValue())!=0)
	{
		pOriginal->PDateSta.getString(bufOriginal);
		fprintf(fp,"\t\tPDateSta = %s -> %s    [生成日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPDateSta = %s    [生成日期]\n",buf);
	}
	PTimeSta.getString(buf);
	if (compare(PTimeSta.getValue(),pOriginal->PTimeSta.getValue())!=0)
	{
		pOriginal->PTimeSta.getString(bufOriginal);
		fprintf(fp,"\t\tPTimeSta = %s -> %s    [时间戳]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPTimeSta = %s    [时间戳]\n",buf);
	}
	ConnRate.getString(buf);
	if (compare(ConnRate.getValue(),pOriginal->ConnRate.getValue())!=0)
	{
		pOriginal->ConnRate.getString(bufOriginal);
		fprintf(fp,"\t\tConnRate = %s -> %s    [连通率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tConnRate = %s    [连通率]\n",buf);
	}
	TimeDlyMin.getString(buf);
	if (compare(TimeDlyMin.getValue(),pOriginal->TimeDlyMin.getValue())!=0)
	{
		pOriginal->TimeDlyMin.getString(bufOriginal);
		fprintf(fp,"\t\tTimeDlyMin = %s -> %s    [最小时延]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeDlyMin = %s    [最小时延]\n",buf);
	}
	TimeDlyMax.getString(buf);
	if (compare(TimeDlyMax.getValue(),pOriginal->TimeDlyMax.getValue())!=0)
	{
		pOriginal->TimeDlyMax.getString(bufOriginal);
		fprintf(fp,"\t\tTimeDlyMax = %s -> %s    [最大时延]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeDlyMax = %s    [最大时延]\n",buf);
	}
	TimeDlyAvg.getString(buf);
	if (compare(TimeDlyAvg.getValue(),pOriginal->TimeDlyAvg.getValue())!=0)
	{
		pOriginal->TimeDlyAvg.getString(bufOriginal);
		fprintf(fp,"\t\tTimeDlyAvg = %s -> %s    [平均时延]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeDlyAvg = %s    [平均时延]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysRomotePingResultInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	SouIPADDR.getString(buf);
	fprintf(fp,",SouIPADDR,%s",buf);	
	SouNAME.getString(buf);
	fprintf(fp,",SouNAME,%s",buf);	
	TarIPADDR.getString(buf);
	fprintf(fp,",TarIPADDR,%s",buf);	
	TarNAME.getString(buf);
	fprintf(fp,",TarNAME,%s",buf);	
	PDateSta.getString(buf);
	fprintf(fp,",PDateSta,%s",buf);	
	PTimeSta.getString(buf);
	fprintf(fp,",PTimeSta,%s",buf);	
	ConnRate.getString(buf);
	fprintf(fp,",ConnRate,%s",buf);	
	TimeDlyMin.getString(buf);
	fprintf(fp,",TimeDlyMin,%s",buf);	
	TimeDlyMax.getString(buf);
	fprintf(fp,",TimeDlyMax,%s",buf);	
	TimeDlyAvg.getString(buf);
	fprintf(fp,",TimeDlyAvg,%s",buf);	
}

void CWriteableSysRomotePingResultInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	SouIPADDR.getString(buf);
	sprintf(p,"SouIPADDR=%s,",buf);
	p+=strlen(p);
	SouNAME.getString(buf);
	sprintf(p,"SouNAME=%s,",buf);
	p+=strlen(p);
	TarIPADDR.getString(buf);
	sprintf(p,"TarIPADDR=%s,",buf);
	p+=strlen(p);
	TarNAME.getString(buf);
	sprintf(p,"TarNAME=%s,",buf);
	p+=strlen(p);
	PDateSta.getString(buf);
	sprintf(p,"PDateSta=%s,",buf);
	p+=strlen(p);
	PTimeSta.getString(buf);
	sprintf(p,"PTimeSta=%s,",buf);
	p+=strlen(p);
	ConnRate.getString(buf);
	sprintf(p,"ConnRate=%s,",buf);
	p+=strlen(p);
	TimeDlyMin.getString(buf);
	sprintf(p,"TimeDlyMin=%s,",buf);
	p+=strlen(p);
	TimeDlyMax.getString(buf);
	sprintf(p,"TimeDlyMax=%s,",buf);
	p+=strlen(p);
	TimeDlyAvg.getString(buf);
	sprintf(p,"TimeDlyAvg=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysRomotePingResultInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysRomotePingResultInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	SouIPADDR.getString(buf);
	pLogger->output(indent+1,0,"SouIPADDR=%s 源IP地址  ",buf);
	SouNAME.getString(buf);
	pLogger->output(indent+1,0,"SouNAME=%s 源设备名称 ",buf);
	TarIPADDR.getString(buf);
	pLogger->output(indent+1,0,"TarIPADDR=%s 目的IP地址  ",buf);
	TarNAME.getString(buf);
	pLogger->output(indent+1,0,"TarNAME=%s 目的设备名称 ",buf);
	PDateSta.getString(buf);
	pLogger->output(indent+1,0,"PDateSta=%s 生成日期",buf);
	PTimeSta.getString(buf);
	pLogger->output(indent+1,0,"PTimeSta=%s 时间戳",buf);
	ConnRate.getString(buf);
	pLogger->output(indent+1,0,"ConnRate=%s 连通率",buf);
	TimeDlyMin.getString(buf);
	pLogger->output(indent+1,0,"TimeDlyMin=%s 最小时延",buf);
	TimeDlyMax.getString(buf);
	pLogger->output(indent+1,0,"TimeDlyMax=%s 最大时延",buf);
	TimeDlyAvg.getString(buf);
	pLogger->output(indent+1,0,"TimeDlyAvg=%s 平均时延",buf);
	pLogger->output(indent,0,"}");
}

CSysRomotePingResultInfoIterator::~CSysRomotePingResultInfoIterator(void)
{
}


void CSysRomotePingResultInfoIterator::dump(FILE *output)
{
	CSysRomotePingResultInfo *pSysRomotePingResultInfo;
	
	while ((pSysRomotePingResultInfo=next())!=NULL)
	{
		pSysRomotePingResultInfo->dump(output);
	}
}



void CWriteableSysParticTradeOrderStates::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,UserID,MonDate,MonTime,StaticWidth,FrontID,OrderCount,CancleCount,QueryCount,TradeCount,TradeMoney,OrderCntMax,CancleCntMax,QueryCntMax,TradeCntMax,TradeMoneyMax\n");
}
	
void CWriteableSysParticTradeOrderStates::init(void)
{
	ParticipantID.clear();
	UserID.clear();
	MonDate.clear();
	MonTime.clear();
	StaticWidth.clear();
	FrontID.clear();
	OrderCount.clear();
	CancleCount.clear();
	QueryCount.clear();
	TradeCount.clear();
	TradeMoney.clear();
	OrderCntMax.clear();
	CancleCntMax.clear();
	QueryCntMax.clear();
	TradeCntMax.clear();
	TradeMoneyMax.clear();
}

int CWriteableSysParticTradeOrderStates::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysParticTradeOrderStates),input)!=sizeof(CWriteableSysParticTradeOrderStates))
		return 0;
	else
		return 1;
}
	
int CWriteableSysParticTradeOrderStates::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StaticWidth=token;
		}
		else
		{
			StaticWidth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrontID=token;
		}
		else
		{
			FrontID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderCount=token;
		}
		else
		{
			OrderCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancleCount=token;
		}
		else
		{
			CancleCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QueryCount=token;
		}
		else
		{
			QueryCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeCount=token;
		}
		else
		{
			TradeCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeMoney=token;
		}
		else
		{
			TradeMoney="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderCntMax=token;
		}
		else
		{
			OrderCntMax="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancleCntMax=token;
		}
		else
		{
			CancleCntMax="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QueryCntMax=token;
		}
		else
		{
			QueryCntMax="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeCntMax=token;
		}
		else
		{
			TradeCntMax="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeMoneyMax=token;
		}
		else
		{
			TradeMoneyMax="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"StaticWidth"))
			{
				StaticWidth=token;
			}
			else if (!strcmp(fieldName,"FrontID"))
			{
				FrontID=token;
			}
			else if (!strcmp(fieldName,"OrderCount"))
			{
				OrderCount=token;
			}
			else if (!strcmp(fieldName,"CancleCount"))
			{
				CancleCount=token;
			}
			else if (!strcmp(fieldName,"QueryCount"))
			{
				QueryCount=token;
			}
			else if (!strcmp(fieldName,"TradeCount"))
			{
				TradeCount=token;
			}
			else if (!strcmp(fieldName,"TradeMoney"))
			{
				TradeMoney=token;
			}
			else if (!strcmp(fieldName,"OrderCntMax"))
			{
				OrderCntMax=token;
			}
			else if (!strcmp(fieldName,"CancleCntMax"))
			{
				CancleCntMax=token;
			}
			else if (!strcmp(fieldName,"QueryCntMax"))
			{
				QueryCntMax=token;
			}
			else if (!strcmp(fieldName,"TradeCntMax"))
			{
				TradeCntMax=token;
			}
			else if (!strcmp(fieldName,"TradeMoneyMax"))
			{
				TradeMoneyMax=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysParticTradeOrderStates::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysParticTradeOrderStates),output)!=sizeof(CWriteableSysParticTradeOrderStates))
		return 0;
	else
		return 1;
}

int CWriteableSysParticTradeOrderStates::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StaticWidth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrontID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancleCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QueryCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeMoney.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderCntMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancleCntMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QueryCntMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeCntMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeMoneyMax.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysParticTradeOrderStates::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysParticTradeOrderStates%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [报单统计日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [报单统计时间]\n",buf);	
	StaticWidth.getString(buf);
	fprintf(fp,"\t\tStaticWidth = %s    [统计时长(sec)]\n",buf);	
	FrontID.getString(buf);
	fprintf(fp,"\t\tFrontID = %s    [前置ID]\n",buf);	
	OrderCount.getString(buf);
	fprintf(fp,"\t\tOrderCount = %s    [报单数]\n",buf);	
	CancleCount.getString(buf);
	fprintf(fp,"\t\tCancleCount = %s    [撤单数]\n",buf);	
	QueryCount.getString(buf);
	fprintf(fp,"\t\tQueryCount = %s    [查询数]\n",buf);	
	TradeCount.getString(buf);
	fprintf(fp,"\t\tTradeCount = %s    [成交数]\n",buf);	
	TradeMoney.getString(buf);
	fprintf(fp,"\t\tTradeMoney = %s    [成交金额]\n",buf);	
	OrderCntMax.getString(buf);
	fprintf(fp,"\t\tOrderCntMax = %s    [最大报单数]\n",buf);	
	CancleCntMax.getString(buf);
	fprintf(fp,"\t\tCancleCntMax = %s    [最大撤单数]\n",buf);	
	QueryCntMax.getString(buf);
	fprintf(fp,"\t\tQueryCntMax = %s    [最大查询数]\n",buf);	
	TradeCntMax.getString(buf);
	fprintf(fp,"\t\tTradeCntMax = %s    [最大成交数]\n",buf);	
	TradeMoneyMax.getString(buf);
	fprintf(fp,"\t\tTradeMoneyMax = %s    [最大成交金额]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticTradeOrderStates::dumpDiff(FILE *fp, const CWriteableSysParticTradeOrderStates *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysParticTradeOrderStates = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [报单统计日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [报单统计日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [报单统计时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [报单统计时间]\n",buf);
	}
	StaticWidth.getString(buf);
	if (compare(StaticWidth.getValue(),pOriginal->StaticWidth.getValue())!=0)
	{
		pOriginal->StaticWidth.getString(bufOriginal);
		fprintf(fp,"\t\tStaticWidth = %s -> %s    [统计时长(sec)]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStaticWidth = %s    [统计时长(sec)]\n",buf);
	}
	FrontID.getString(buf);
	if (compare(FrontID.getValue(),pOriginal->FrontID.getValue())!=0)
	{
		pOriginal->FrontID.getString(bufOriginal);
		fprintf(fp,"\t\tFrontID = %s -> %s    [前置ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrontID = %s    [前置ID]\n",buf);
	}
	OrderCount.getString(buf);
	if (compare(OrderCount.getValue(),pOriginal->OrderCount.getValue())!=0)
	{
		pOriginal->OrderCount.getString(bufOriginal);
		fprintf(fp,"\t\tOrderCount = %s -> %s    [报单数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderCount = %s    [报单数]\n",buf);
	}
	CancleCount.getString(buf);
	if (compare(CancleCount.getValue(),pOriginal->CancleCount.getValue())!=0)
	{
		pOriginal->CancleCount.getString(bufOriginal);
		fprintf(fp,"\t\tCancleCount = %s -> %s    [撤单数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancleCount = %s    [撤单数]\n",buf);
	}
	QueryCount.getString(buf);
	if (compare(QueryCount.getValue(),pOriginal->QueryCount.getValue())!=0)
	{
		pOriginal->QueryCount.getString(bufOriginal);
		fprintf(fp,"\t\tQueryCount = %s -> %s    [查询数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQueryCount = %s    [查询数]\n",buf);
	}
	TradeCount.getString(buf);
	if (compare(TradeCount.getValue(),pOriginal->TradeCount.getValue())!=0)
	{
		pOriginal->TradeCount.getString(bufOriginal);
		fprintf(fp,"\t\tTradeCount = %s -> %s    [成交数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeCount = %s    [成交数]\n",buf);
	}
	TradeMoney.getString(buf);
	if (compare(TradeMoney.getValue(),pOriginal->TradeMoney.getValue())!=0)
	{
		pOriginal->TradeMoney.getString(bufOriginal);
		fprintf(fp,"\t\tTradeMoney = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeMoney = %s    [成交金额]\n",buf);
	}
	OrderCntMax.getString(buf);
	if (compare(OrderCntMax.getValue(),pOriginal->OrderCntMax.getValue())!=0)
	{
		pOriginal->OrderCntMax.getString(bufOriginal);
		fprintf(fp,"\t\tOrderCntMax = %s -> %s    [最大报单数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderCntMax = %s    [最大报单数]\n",buf);
	}
	CancleCntMax.getString(buf);
	if (compare(CancleCntMax.getValue(),pOriginal->CancleCntMax.getValue())!=0)
	{
		pOriginal->CancleCntMax.getString(bufOriginal);
		fprintf(fp,"\t\tCancleCntMax = %s -> %s    [最大撤单数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancleCntMax = %s    [最大撤单数]\n",buf);
	}
	QueryCntMax.getString(buf);
	if (compare(QueryCntMax.getValue(),pOriginal->QueryCntMax.getValue())!=0)
	{
		pOriginal->QueryCntMax.getString(bufOriginal);
		fprintf(fp,"\t\tQueryCntMax = %s -> %s    [最大查询数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQueryCntMax = %s    [最大查询数]\n",buf);
	}
	TradeCntMax.getString(buf);
	if (compare(TradeCntMax.getValue(),pOriginal->TradeCntMax.getValue())!=0)
	{
		pOriginal->TradeCntMax.getString(bufOriginal);
		fprintf(fp,"\t\tTradeCntMax = %s -> %s    [最大成交数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeCntMax = %s    [最大成交数]\n",buf);
	}
	TradeMoneyMax.getString(buf);
	if (compare(TradeMoneyMax.getValue(),pOriginal->TradeMoneyMax.getValue())!=0)
	{
		pOriginal->TradeMoneyMax.getString(bufOriginal);
		fprintf(fp,"\t\tTradeMoneyMax = %s -> %s    [最大成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeMoneyMax = %s    [最大成交金额]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysParticTradeOrderStates::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	StaticWidth.getString(buf);
	fprintf(fp,",StaticWidth,%s",buf);	
	FrontID.getString(buf);
	fprintf(fp,",FrontID,%s",buf);	
	OrderCount.getString(buf);
	fprintf(fp,",OrderCount,%s",buf);	
	CancleCount.getString(buf);
	fprintf(fp,",CancleCount,%s",buf);	
	QueryCount.getString(buf);
	fprintf(fp,",QueryCount,%s",buf);	
	TradeCount.getString(buf);
	fprintf(fp,",TradeCount,%s",buf);	
	TradeMoney.getString(buf);
	fprintf(fp,",TradeMoney,%s",buf);	
	OrderCntMax.getString(buf);
	fprintf(fp,",OrderCntMax,%s",buf);	
	CancleCntMax.getString(buf);
	fprintf(fp,",CancleCntMax,%s",buf);	
	QueryCntMax.getString(buf);
	fprintf(fp,",QueryCntMax,%s",buf);	
	TradeCntMax.getString(buf);
	fprintf(fp,",TradeCntMax,%s",buf);	
	TradeMoneyMax.getString(buf);
	fprintf(fp,",TradeMoneyMax,%s",buf);	
}

void CWriteableSysParticTradeOrderStates::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	StaticWidth.getString(buf);
	sprintf(p,"StaticWidth=%s,",buf);
	p+=strlen(p);
	FrontID.getString(buf);
	sprintf(p,"FrontID=%s,",buf);
	p+=strlen(p);
	OrderCount.getString(buf);
	sprintf(p,"OrderCount=%s,",buf);
	p+=strlen(p);
	CancleCount.getString(buf);
	sprintf(p,"CancleCount=%s,",buf);
	p+=strlen(p);
	QueryCount.getString(buf);
	sprintf(p,"QueryCount=%s,",buf);
	p+=strlen(p);
	TradeCount.getString(buf);
	sprintf(p,"TradeCount=%s,",buf);
	p+=strlen(p);
	TradeMoney.getString(buf);
	sprintf(p,"TradeMoney=%s,",buf);
	p+=strlen(p);
	OrderCntMax.getString(buf);
	sprintf(p,"OrderCntMax=%s,",buf);
	p+=strlen(p);
	CancleCntMax.getString(buf);
	sprintf(p,"CancleCntMax=%s,",buf);
	p+=strlen(p);
	QueryCntMax.getString(buf);
	sprintf(p,"QueryCntMax=%s,",buf);
	p+=strlen(p);
	TradeCntMax.getString(buf);
	sprintf(p,"TradeCntMax=%s,",buf);
	p+=strlen(p);
	TradeMoneyMax.getString(buf);
	sprintf(p,"TradeMoneyMax=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysParticTradeOrderStates::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysParticTradeOrderStates");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 报单统计日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 报单统计时间",buf);
	StaticWidth.getString(buf);
	pLogger->output(indent+1,0,"StaticWidth=%s 统计时长(sec)",buf);
	FrontID.getString(buf);
	pLogger->output(indent+1,0,"FrontID=%s 前置ID",buf);
	OrderCount.getString(buf);
	pLogger->output(indent+1,0,"OrderCount=%s 报单数",buf);
	CancleCount.getString(buf);
	pLogger->output(indent+1,0,"CancleCount=%s 撤单数",buf);
	QueryCount.getString(buf);
	pLogger->output(indent+1,0,"QueryCount=%s 查询数",buf);
	TradeCount.getString(buf);
	pLogger->output(indent+1,0,"TradeCount=%s 成交数",buf);
	TradeMoney.getString(buf);
	pLogger->output(indent+1,0,"TradeMoney=%s 成交金额",buf);
	OrderCntMax.getString(buf);
	pLogger->output(indent+1,0,"OrderCntMax=%s 最大报单数",buf);
	CancleCntMax.getString(buf);
	pLogger->output(indent+1,0,"CancleCntMax=%s 最大撤单数",buf);
	QueryCntMax.getString(buf);
	pLogger->output(indent+1,0,"QueryCntMax=%s 最大查询数",buf);
	TradeCntMax.getString(buf);
	pLogger->output(indent+1,0,"TradeCntMax=%s 最大成交数",buf);
	TradeMoneyMax.getString(buf);
	pLogger->output(indent+1,0,"TradeMoneyMax=%s 最大成交金额",buf);
	pLogger->output(indent,0,"}");
}

CSysParticTradeOrderStatesIterator::~CSysParticTradeOrderStatesIterator(void)
{
}


void CSysParticTradeOrderStatesIterator::dump(FILE *output)
{
	CSysParticTradeOrderStates *pSysParticTradeOrderStates;
	
	while ((pSysParticTradeOrderStates=next())!=NULL)
	{
		pSysParticTradeOrderStates->dump(output);
	}
}



void CWriteableSysMdbRouterInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,HostName,MonDate,MonTime,Dev,Destination,Gateway,Mask,Flag,RefCnt,Use,Metric,Mtu,Win,Rtt\n");
}
	
void CWriteableSysMdbRouterInfo::init(void)
{
	SubcriberID.clear();
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	Dev.clear();
	Destination.clear();
	Gateway.clear();
	Mask.clear();
	Flag.clear();
	RefCnt.clear();
	Use.clear();
	Metric.clear();
	Mtu.clear();
	Win.clear();
	Rtt.clear();
}

int CWriteableSysMdbRouterInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbRouterInfo),input)!=sizeof(CWriteableSysMdbRouterInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbRouterInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Dev=token;
		}
		else
		{
			Dev="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Destination=token;
		}
		else
		{
			Destination="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Gateway=token;
		}
		else
		{
			Gateway="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Mask=token;
		}
		else
		{
			Mask="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Flag=token;
		}
		else
		{
			Flag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RefCnt=token;
		}
		else
		{
			RefCnt="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Use=token;
		}
		else
		{
			Use="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Metric=token;
		}
		else
		{
			Metric="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Mtu=token;
		}
		else
		{
			Mtu="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Win=token;
		}
		else
		{
			Win="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Rtt=token;
		}
		else
		{
			Rtt="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"Dev"))
			{
				Dev=token;
			}
			else if (!strcmp(fieldName,"Destination"))
			{
				Destination=token;
			}
			else if (!strcmp(fieldName,"Gateway"))
			{
				Gateway=token;
			}
			else if (!strcmp(fieldName,"Mask"))
			{
				Mask=token;
			}
			else if (!strcmp(fieldName,"Flag"))
			{
				Flag=token;
			}
			else if (!strcmp(fieldName,"RefCnt"))
			{
				RefCnt=token;
			}
			else if (!strcmp(fieldName,"Use"))
			{
				Use=token;
			}
			else if (!strcmp(fieldName,"Metric"))
			{
				Metric=token;
			}
			else if (!strcmp(fieldName,"Mtu"))
			{
				Mtu=token;
			}
			else if (!strcmp(fieldName,"Win"))
			{
				Win=token;
			}
			else if (!strcmp(fieldName,"Rtt"))
			{
				Rtt=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbRouterInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbRouterInfo),output)!=sizeof(CWriteableSysMdbRouterInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbRouterInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Dev.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Destination.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Gateway.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Mask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Flag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RefCnt.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Use.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Metric.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Mtu.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Win.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Rtt.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbRouterInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbRouterInfo%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	Dev.getString(buf);
	fprintf(fp,"\t\tDev = %s    [设备接口名]\n",buf);	
	Destination.getString(buf);
	fprintf(fp,"\t\tDestination = %s    [目标网段ip地址]\n",buf);	
	Gateway.getString(buf);
	fprintf(fp,"\t\tGateway = %s    [网关ip地址]\n",buf);	
	Mask.getString(buf);
	fprintf(fp,"\t\tMask = %s    [掩码ip地址]\n",buf);	
	Flag.getString(buf);
	fprintf(fp,"\t\tFlag = %s    [网络状态]\n",buf);	
	RefCnt.getString(buf);
	fprintf(fp,"\t\tRefCnt = %s    [关联计数]\n",buf);	
	Use.getString(buf);
	fprintf(fp,"\t\tUse = %s    [使用计数]\n",buf);	
	Metric.getString(buf);
	fprintf(fp,"\t\tMetric = %s    [metric值]\n",buf);	
	Mtu.getString(buf);
	fprintf(fp,"\t\tMtu = %s    [mtu值]\n",buf);	
	Win.getString(buf);
	fprintf(fp,"\t\tWin = %s    [win值]\n",buf);	
	Rtt.getString(buf);
	fprintf(fp,"\t\tRtt = %s    [rtt值]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbRouterInfo::dumpDiff(FILE *fp, const CWriteableSysMdbRouterInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbRouterInfo = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	Dev.getString(buf);
	if (compare(Dev.getValue(),pOriginal->Dev.getValue())!=0)
	{
		pOriginal->Dev.getString(bufOriginal);
		fprintf(fp,"\t\tDev = %s -> %s    [设备接口名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDev = %s    [设备接口名]\n",buf);
	}
	Destination.getString(buf);
	if (compare(Destination.getValue(),pOriginal->Destination.getValue())!=0)
	{
		pOriginal->Destination.getString(bufOriginal);
		fprintf(fp,"\t\tDestination = %s -> %s    [目标网段ip地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDestination = %s    [目标网段ip地址]\n",buf);
	}
	Gateway.getString(buf);
	if (compare(Gateway.getValue(),pOriginal->Gateway.getValue())!=0)
	{
		pOriginal->Gateway.getString(bufOriginal);
		fprintf(fp,"\t\tGateway = %s -> %s    [网关ip地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGateway = %s    [网关ip地址]\n",buf);
	}
	Mask.getString(buf);
	if (compare(Mask.getValue(),pOriginal->Mask.getValue())!=0)
	{
		pOriginal->Mask.getString(bufOriginal);
		fprintf(fp,"\t\tMask = %s -> %s    [掩码ip地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMask = %s    [掩码ip地址]\n",buf);
	}
	Flag.getString(buf);
	if (compare(Flag.getValue(),pOriginal->Flag.getValue())!=0)
	{
		pOriginal->Flag.getString(bufOriginal);
		fprintf(fp,"\t\tFlag = %s -> %s    [网络状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFlag = %s    [网络状态]\n",buf);
	}
	RefCnt.getString(buf);
	if (compare(RefCnt.getValue(),pOriginal->RefCnt.getValue())!=0)
	{
		pOriginal->RefCnt.getString(bufOriginal);
		fprintf(fp,"\t\tRefCnt = %s -> %s    [关联计数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRefCnt = %s    [关联计数]\n",buf);
	}
	Use.getString(buf);
	if (compare(Use.getValue(),pOriginal->Use.getValue())!=0)
	{
		pOriginal->Use.getString(bufOriginal);
		fprintf(fp,"\t\tUse = %s -> %s    [使用计数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUse = %s    [使用计数]\n",buf);
	}
	Metric.getString(buf);
	if (compare(Metric.getValue(),pOriginal->Metric.getValue())!=0)
	{
		pOriginal->Metric.getString(bufOriginal);
		fprintf(fp,"\t\tMetric = %s -> %s    [metric值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMetric = %s    [metric值]\n",buf);
	}
	Mtu.getString(buf);
	if (compare(Mtu.getValue(),pOriginal->Mtu.getValue())!=0)
	{
		pOriginal->Mtu.getString(bufOriginal);
		fprintf(fp,"\t\tMtu = %s -> %s    [mtu值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMtu = %s    [mtu值]\n",buf);
	}
	Win.getString(buf);
	if (compare(Win.getValue(),pOriginal->Win.getValue())!=0)
	{
		pOriginal->Win.getString(bufOriginal);
		fprintf(fp,"\t\tWin = %s -> %s    [win值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWin = %s    [win值]\n",buf);
	}
	Rtt.getString(buf);
	if (compare(Rtt.getValue(),pOriginal->Rtt.getValue())!=0)
	{
		pOriginal->Rtt.getString(bufOriginal);
		fprintf(fp,"\t\tRtt = %s -> %s    [rtt值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRtt = %s    [rtt值]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbRouterInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	Dev.getString(buf);
	fprintf(fp,",Dev,%s",buf);	
	Destination.getString(buf);
	fprintf(fp,",Destination,%s",buf);	
	Gateway.getString(buf);
	fprintf(fp,",Gateway,%s",buf);	
	Mask.getString(buf);
	fprintf(fp,",Mask,%s",buf);	
	Flag.getString(buf);
	fprintf(fp,",Flag,%s",buf);	
	RefCnt.getString(buf);
	fprintf(fp,",RefCnt,%s",buf);	
	Use.getString(buf);
	fprintf(fp,",Use,%s",buf);	
	Metric.getString(buf);
	fprintf(fp,",Metric,%s",buf);	
	Mtu.getString(buf);
	fprintf(fp,",Mtu,%s",buf);	
	Win.getString(buf);
	fprintf(fp,",Win,%s",buf);	
	Rtt.getString(buf);
	fprintf(fp,",Rtt,%s",buf);	
}

void CWriteableSysMdbRouterInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	Dev.getString(buf);
	sprintf(p,"Dev=%s,",buf);
	p+=strlen(p);
	Destination.getString(buf);
	sprintf(p,"Destination=%s,",buf);
	p+=strlen(p);
	Gateway.getString(buf);
	sprintf(p,"Gateway=%s,",buf);
	p+=strlen(p);
	Mask.getString(buf);
	sprintf(p,"Mask=%s,",buf);
	p+=strlen(p);
	Flag.getString(buf);
	sprintf(p,"Flag=%s,",buf);
	p+=strlen(p);
	RefCnt.getString(buf);
	sprintf(p,"RefCnt=%s,",buf);
	p+=strlen(p);
	Use.getString(buf);
	sprintf(p,"Use=%s,",buf);
	p+=strlen(p);
	Metric.getString(buf);
	sprintf(p,"Metric=%s,",buf);
	p+=strlen(p);
	Mtu.getString(buf);
	sprintf(p,"Mtu=%s,",buf);
	p+=strlen(p);
	Win.getString(buf);
	sprintf(p,"Win=%s,",buf);
	p+=strlen(p);
	Rtt.getString(buf);
	sprintf(p,"Rtt=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbRouterInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbRouterInfo");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	Dev.getString(buf);
	pLogger->output(indent+1,0,"Dev=%s 设备接口名",buf);
	Destination.getString(buf);
	pLogger->output(indent+1,0,"Destination=%s 目标网段ip地址",buf);
	Gateway.getString(buf);
	pLogger->output(indent+1,0,"Gateway=%s 网关ip地址",buf);
	Mask.getString(buf);
	pLogger->output(indent+1,0,"Mask=%s 掩码ip地址",buf);
	Flag.getString(buf);
	pLogger->output(indent+1,0,"Flag=%s 网络状态",buf);
	RefCnt.getString(buf);
	pLogger->output(indent+1,0,"RefCnt=%s 关联计数",buf);
	Use.getString(buf);
	pLogger->output(indent+1,0,"Use=%s 使用计数",buf);
	Metric.getString(buf);
	pLogger->output(indent+1,0,"Metric=%s metric值",buf);
	Mtu.getString(buf);
	pLogger->output(indent+1,0,"Mtu=%s mtu值",buf);
	Win.getString(buf);
	pLogger->output(indent+1,0,"Win=%s win值",buf);
	Rtt.getString(buf);
	pLogger->output(indent+1,0,"Rtt=%s rtt值",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbRouterInfoIterator::~CSysMdbRouterInfoIterator(void)
{
}


void CSysMdbRouterInfoIterator::dump(FILE *output)
{
	CSysMdbRouterInfo *pSysMdbRouterInfo;
	
	while ((pSysMdbRouterInfo=next())!=NULL)
	{
		pSysMdbRouterInfo->dump(output);
	}
}



void CWriteableSysMdbDiskIO::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,HostName,MonDate,MonTime,PartName,ReadMerges,WriteMerges,ReadIOs,WriteIOs,ReadKBs,WriteKBs,SizeVal,QueueVal,Svc_t,Busy\n");
}
	
void CWriteableSysMdbDiskIO::init(void)
{
	SubcriberID.clear();
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	PartName.clear();
	ReadMerges.clear();
	WriteMerges.clear();
	ReadIOs.clear();
	WriteIOs.clear();
	ReadKBs.clear();
	WriteKBs.clear();
	SizeVal.clear();
	QueueVal.clear();
	Svc_t.clear();
	Busy.clear();
}

int CWriteableSysMdbDiskIO::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbDiskIO),input)!=sizeof(CWriteableSysMdbDiskIO))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbDiskIO::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PartName=token;
		}
		else
		{
			PartName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ReadMerges=token;
		}
		else
		{
			ReadMerges="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WriteMerges=token;
		}
		else
		{
			WriteMerges="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ReadIOs=token;
		}
		else
		{
			ReadIOs="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WriteIOs=token;
		}
		else
		{
			WriteIOs="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ReadKBs=token;
		}
		else
		{
			ReadKBs="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			WriteKBs=token;
		}
		else
		{
			WriteKBs="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SizeVal=token;
		}
		else
		{
			SizeVal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QueueVal=token;
		}
		else
		{
			QueueVal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Svc_t=token;
		}
		else
		{
			Svc_t="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Busy=token;
		}
		else
		{
			Busy="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"PartName"))
			{
				PartName=token;
			}
			else if (!strcmp(fieldName,"ReadMerges"))
			{
				ReadMerges=token;
			}
			else if (!strcmp(fieldName,"WriteMerges"))
			{
				WriteMerges=token;
			}
			else if (!strcmp(fieldName,"ReadIOs"))
			{
				ReadIOs=token;
			}
			else if (!strcmp(fieldName,"WriteIOs"))
			{
				WriteIOs=token;
			}
			else if (!strcmp(fieldName,"ReadKBs"))
			{
				ReadKBs=token;
			}
			else if (!strcmp(fieldName,"WriteKBs"))
			{
				WriteKBs=token;
			}
			else if (!strcmp(fieldName,"SizeVal"))
			{
				SizeVal=token;
			}
			else if (!strcmp(fieldName,"QueueVal"))
			{
				QueueVal=token;
			}
			else if (!strcmp(fieldName,"Svc_t"))
			{
				Svc_t=token;
			}
			else if (!strcmp(fieldName,"Busy"))
			{
				Busy=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbDiskIO::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbDiskIO),output)!=sizeof(CWriteableSysMdbDiskIO))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbDiskIO::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PartName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ReadMerges.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WriteMerges.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ReadIOs.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WriteIOs.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ReadKBs.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	WriteKBs.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SizeVal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QueueVal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Svc_t.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Busy.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbDiskIO::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbDiskIO%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	PartName.getString(buf);
	fprintf(fp,"\t\tPartName = %s    [分区名]\n",buf);	
	ReadMerges.getString(buf);
	fprintf(fp,"\t\tReadMerges = %s    [每秒ReadMerge数]\n",buf);	
	WriteMerges.getString(buf);
	fprintf(fp,"\t\tWriteMerges = %s    [每秒WriteMerge数]\n",buf);	
	ReadIOs.getString(buf);
	fprintf(fp,"\t\tReadIOs = %s    [每秒ReadIO数]\n",buf);	
	WriteIOs.getString(buf);
	fprintf(fp,"\t\tWriteIOs = %s    [每秒WriteIO数]\n",buf);	
	ReadKBs.getString(buf);
	fprintf(fp,"\t\tReadKBs = %s    [每秒Read字节数]\n",buf);	
	WriteKBs.getString(buf);
	fprintf(fp,"\t\tWriteKBs = %s    [每秒Write字节数]\n",buf);	
	SizeVal.getString(buf);
	fprintf(fp,"\t\tSizeVal = %s    [Size值]\n",buf);	
	QueueVal.getString(buf);
	fprintf(fp,"\t\tQueueVal = %s    [Queue值]\n",buf);	
	Svc_t.getString(buf);
	fprintf(fp,"\t\tSvc_t = %s    [Svc_t值]\n",buf);	
	Busy.getString(buf);
	fprintf(fp,"\t\tBusy = %s    [繁忙百分率]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbDiskIO::dumpDiff(FILE *fp, const CWriteableSysMdbDiskIO *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbDiskIO = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	PartName.getString(buf);
	if (compare(PartName.getValue(),pOriginal->PartName.getValue())!=0)
	{
		pOriginal->PartName.getString(bufOriginal);
		fprintf(fp,"\t\tPartName = %s -> %s    [分区名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPartName = %s    [分区名]\n",buf);
	}
	ReadMerges.getString(buf);
	if (compare(ReadMerges.getValue(),pOriginal->ReadMerges.getValue())!=0)
	{
		pOriginal->ReadMerges.getString(bufOriginal);
		fprintf(fp,"\t\tReadMerges = %s -> %s    [每秒ReadMerge数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tReadMerges = %s    [每秒ReadMerge数]\n",buf);
	}
	WriteMerges.getString(buf);
	if (compare(WriteMerges.getValue(),pOriginal->WriteMerges.getValue())!=0)
	{
		pOriginal->WriteMerges.getString(bufOriginal);
		fprintf(fp,"\t\tWriteMerges = %s -> %s    [每秒WriteMerge数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWriteMerges = %s    [每秒WriteMerge数]\n",buf);
	}
	ReadIOs.getString(buf);
	if (compare(ReadIOs.getValue(),pOriginal->ReadIOs.getValue())!=0)
	{
		pOriginal->ReadIOs.getString(bufOriginal);
		fprintf(fp,"\t\tReadIOs = %s -> %s    [每秒ReadIO数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tReadIOs = %s    [每秒ReadIO数]\n",buf);
	}
	WriteIOs.getString(buf);
	if (compare(WriteIOs.getValue(),pOriginal->WriteIOs.getValue())!=0)
	{
		pOriginal->WriteIOs.getString(bufOriginal);
		fprintf(fp,"\t\tWriteIOs = %s -> %s    [每秒WriteIO数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWriteIOs = %s    [每秒WriteIO数]\n",buf);
	}
	ReadKBs.getString(buf);
	if (compare(ReadKBs.getValue(),pOriginal->ReadKBs.getValue())!=0)
	{
		pOriginal->ReadKBs.getString(bufOriginal);
		fprintf(fp,"\t\tReadKBs = %s -> %s    [每秒Read字节数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tReadKBs = %s    [每秒Read字节数]\n",buf);
	}
	WriteKBs.getString(buf);
	if (compare(WriteKBs.getValue(),pOriginal->WriteKBs.getValue())!=0)
	{
		pOriginal->WriteKBs.getString(bufOriginal);
		fprintf(fp,"\t\tWriteKBs = %s -> %s    [每秒Write字节数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWriteKBs = %s    [每秒Write字节数]\n",buf);
	}
	SizeVal.getString(buf);
	if (compare(SizeVal.getValue(),pOriginal->SizeVal.getValue())!=0)
	{
		pOriginal->SizeVal.getString(bufOriginal);
		fprintf(fp,"\t\tSizeVal = %s -> %s    [Size值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSizeVal = %s    [Size值]\n",buf);
	}
	QueueVal.getString(buf);
	if (compare(QueueVal.getValue(),pOriginal->QueueVal.getValue())!=0)
	{
		pOriginal->QueueVal.getString(bufOriginal);
		fprintf(fp,"\t\tQueueVal = %s -> %s    [Queue值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQueueVal = %s    [Queue值]\n",buf);
	}
	Svc_t.getString(buf);
	if (compare(Svc_t.getValue(),pOriginal->Svc_t.getValue())!=0)
	{
		pOriginal->Svc_t.getString(bufOriginal);
		fprintf(fp,"\t\tSvc_t = %s -> %s    [Svc_t值]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSvc_t = %s    [Svc_t值]\n",buf);
	}
	Busy.getString(buf);
	if (compare(Busy.getValue(),pOriginal->Busy.getValue())!=0)
	{
		pOriginal->Busy.getString(bufOriginal);
		fprintf(fp,"\t\tBusy = %s -> %s    [繁忙百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusy = %s    [繁忙百分率]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbDiskIO::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	PartName.getString(buf);
	fprintf(fp,",PartName,%s",buf);	
	ReadMerges.getString(buf);
	fprintf(fp,",ReadMerges,%s",buf);	
	WriteMerges.getString(buf);
	fprintf(fp,",WriteMerges,%s",buf);	
	ReadIOs.getString(buf);
	fprintf(fp,",ReadIOs,%s",buf);	
	WriteIOs.getString(buf);
	fprintf(fp,",WriteIOs,%s",buf);	
	ReadKBs.getString(buf);
	fprintf(fp,",ReadKBs,%s",buf);	
	WriteKBs.getString(buf);
	fprintf(fp,",WriteKBs,%s",buf);	
	SizeVal.getString(buf);
	fprintf(fp,",SizeVal,%s",buf);	
	QueueVal.getString(buf);
	fprintf(fp,",QueueVal,%s",buf);	
	Svc_t.getString(buf);
	fprintf(fp,",Svc_t,%s",buf);	
	Busy.getString(buf);
	fprintf(fp,",Busy,%s",buf);	
}

void CWriteableSysMdbDiskIO::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	PartName.getString(buf);
	sprintf(p,"PartName=%s,",buf);
	p+=strlen(p);
	ReadMerges.getString(buf);
	sprintf(p,"ReadMerges=%s,",buf);
	p+=strlen(p);
	WriteMerges.getString(buf);
	sprintf(p,"WriteMerges=%s,",buf);
	p+=strlen(p);
	ReadIOs.getString(buf);
	sprintf(p,"ReadIOs=%s,",buf);
	p+=strlen(p);
	WriteIOs.getString(buf);
	sprintf(p,"WriteIOs=%s,",buf);
	p+=strlen(p);
	ReadKBs.getString(buf);
	sprintf(p,"ReadKBs=%s,",buf);
	p+=strlen(p);
	WriteKBs.getString(buf);
	sprintf(p,"WriteKBs=%s,",buf);
	p+=strlen(p);
	SizeVal.getString(buf);
	sprintf(p,"SizeVal=%s,",buf);
	p+=strlen(p);
	QueueVal.getString(buf);
	sprintf(p,"QueueVal=%s,",buf);
	p+=strlen(p);
	Svc_t.getString(buf);
	sprintf(p,"Svc_t=%s,",buf);
	p+=strlen(p);
	Busy.getString(buf);
	sprintf(p,"Busy=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbDiskIO::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbDiskIO");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	PartName.getString(buf);
	pLogger->output(indent+1,0,"PartName=%s 分区名",buf);
	ReadMerges.getString(buf);
	pLogger->output(indent+1,0,"ReadMerges=%s 每秒ReadMerge数",buf);
	WriteMerges.getString(buf);
	pLogger->output(indent+1,0,"WriteMerges=%s 每秒WriteMerge数",buf);
	ReadIOs.getString(buf);
	pLogger->output(indent+1,0,"ReadIOs=%s 每秒ReadIO数",buf);
	WriteIOs.getString(buf);
	pLogger->output(indent+1,0,"WriteIOs=%s 每秒WriteIO数",buf);
	ReadKBs.getString(buf);
	pLogger->output(indent+1,0,"ReadKBs=%s 每秒Read字节数",buf);
	WriteKBs.getString(buf);
	pLogger->output(indent+1,0,"WriteKBs=%s 每秒Write字节数",buf);
	SizeVal.getString(buf);
	pLogger->output(indent+1,0,"SizeVal=%s Size值",buf);
	QueueVal.getString(buf);
	pLogger->output(indent+1,0,"QueueVal=%s Queue值",buf);
	Svc_t.getString(buf);
	pLogger->output(indent+1,0,"Svc_t=%s Svc_t值",buf);
	Busy.getString(buf);
	pLogger->output(indent+1,0,"Busy=%s 繁忙百分率",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbDiskIOIterator::~CSysMdbDiskIOIterator(void)
{
}


void CSysMdbDiskIOIterator::dump(FILE *output)
{
	CSysMdbDiskIO *pSysMdbDiskIO;
	
	while ((pSysMdbDiskIO=next())!=NULL)
	{
		pSysMdbDiskIO->dump(output);
	}
}



void CWriteableSysMdbStatInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,HostName,MonDate,MonTime,ProcRun,ProcBlk,SwapIn,SwapOut,BlockIn,BlockOut,Inter,Context,CPUUser,CPUSys,CPUIdle,CPUIOWait,CPUSteal\n");
}
	
void CWriteableSysMdbStatInfo::init(void)
{
	SubcriberID.clear();
	HostName.clear();
	MonDate.clear();
	MonTime.clear();
	ProcRun.clear();
	ProcBlk.clear();
	SwapIn.clear();
	SwapOut.clear();
	BlockIn.clear();
	BlockOut.clear();
	Inter.clear();
	Context.clear();
	CPUUser.clear();
	CPUSys.clear();
	CPUIdle.clear();
	CPUIOWait.clear();
	CPUSteal.clear();
}

int CWriteableSysMdbStatInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbStatInfo),input)!=sizeof(CWriteableSysMdbStatInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbStatInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HostName=token;
		}
		else
		{
			HostName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProcRun=token;
		}
		else
		{
			ProcRun="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProcBlk=token;
		}
		else
		{
			ProcBlk="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SwapIn=token;
		}
		else
		{
			SwapIn="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SwapOut=token;
		}
		else
		{
			SwapOut="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BlockIn=token;
		}
		else
		{
			BlockIn="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BlockOut=token;
		}
		else
		{
			BlockOut="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Inter=token;
		}
		else
		{
			Inter="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Context=token;
		}
		else
		{
			Context="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUUser=token;
		}
		else
		{
			CPUUser="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUSys=token;
		}
		else
		{
			CPUSys="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUIdle=token;
		}
		else
		{
			CPUIdle="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUIOWait=token;
		}
		else
		{
			CPUIOWait="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CPUSteal=token;
		}
		else
		{
			CPUSteal="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"HostName"))
			{
				HostName=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"ProcRun"))
			{
				ProcRun=token;
			}
			else if (!strcmp(fieldName,"ProcBlk"))
			{
				ProcBlk=token;
			}
			else if (!strcmp(fieldName,"SwapIn"))
			{
				SwapIn=token;
			}
			else if (!strcmp(fieldName,"SwapOut"))
			{
				SwapOut=token;
			}
			else if (!strcmp(fieldName,"BlockIn"))
			{
				BlockIn=token;
			}
			else if (!strcmp(fieldName,"BlockOut"))
			{
				BlockOut=token;
			}
			else if (!strcmp(fieldName,"Inter"))
			{
				Inter=token;
			}
			else if (!strcmp(fieldName,"Context"))
			{
				Context=token;
			}
			else if (!strcmp(fieldName,"CPUUser"))
			{
				CPUUser=token;
			}
			else if (!strcmp(fieldName,"CPUSys"))
			{
				CPUSys=token;
			}
			else if (!strcmp(fieldName,"CPUIdle"))
			{
				CPUIdle=token;
			}
			else if (!strcmp(fieldName,"CPUIOWait"))
			{
				CPUIOWait=token;
			}
			else if (!strcmp(fieldName,"CPUSteal"))
			{
				CPUSteal=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbStatInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbStatInfo),output)!=sizeof(CWriteableSysMdbStatInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbStatInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HostName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProcRun.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProcBlk.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SwapIn.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SwapOut.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BlockIn.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BlockOut.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Inter.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Context.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUUser.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUSys.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUIdle.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUIOWait.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CPUSteal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbStatInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbStatInfo%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	HostName.getString(buf);
	fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);	
	ProcRun.getString(buf);
	fprintf(fp,"\t\tProcRun = %s    [活跃进程数]\n",buf);	
	ProcBlk.getString(buf);
	fprintf(fp,"\t\tProcBlk = %s    [阻塞进程数]\n",buf);	
	SwapIn.getString(buf);
	fprintf(fp,"\t\tSwapIn = %s    [每秒由磁盘进入Swap的页面数]\n",buf);	
	SwapOut.getString(buf);
	fprintf(fp,"\t\tSwapOut = %s    [每秒由Swap进入磁盘的页面数]\n",buf);	
	BlockIn.getString(buf);
	fprintf(fp,"\t\tBlockIn = %s    [每秒从块设备读入的Block数]\n",buf);	
	BlockOut.getString(buf);
	fprintf(fp,"\t\tBlockOut = %s    [每秒向块设备写入的Block数]\n",buf);	
	Inter.getString(buf);
	fprintf(fp,"\t\tInter = %s    [每秒设备中段次数]\n",buf);	
	Context.getString(buf);
	fprintf(fp,"\t\tContext = %s    [每秒上下文切换次数]\n",buf);	
	CPUUser.getString(buf);
	fprintf(fp,"\t\tCPUUser = %s    [用户态CPU百分率]\n",buf);	
	CPUSys.getString(buf);
	fprintf(fp,"\t\tCPUSys = %s    [系统态CPU百分率]\n",buf);	
	CPUIdle.getString(buf);
	fprintf(fp,"\t\tCPUIdle = %s    [空闲态CPU百分率]\n",buf);	
	CPUIOWait.getString(buf);
	fprintf(fp,"\t\tCPUIOWait = %s    [IO等待态CPU百分率]\n",buf);	
	CPUSteal.getString(buf);
	fprintf(fp,"\t\tCPUSteal = %s    [窃取态CPU百分率]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbStatInfo::dumpDiff(FILE *fp, const CWriteableSysMdbStatInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbStatInfo = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	HostName.getString(buf);
	if (compare(HostName.getValue(),pOriginal->HostName.getValue())!=0)
	{
		pOriginal->HostName.getString(bufOriginal);
		fprintf(fp,"\t\tHostName = %s -> %s    [主机名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHostName = %s    [主机名称]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [采集的日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [采集的日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [采集的时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [采集的时间]\n",buf);
	}
	ProcRun.getString(buf);
	if (compare(ProcRun.getValue(),pOriginal->ProcRun.getValue())!=0)
	{
		pOriginal->ProcRun.getString(bufOriginal);
		fprintf(fp,"\t\tProcRun = %s -> %s    [活跃进程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcRun = %s    [活跃进程数]\n",buf);
	}
	ProcBlk.getString(buf);
	if (compare(ProcBlk.getValue(),pOriginal->ProcBlk.getValue())!=0)
	{
		pOriginal->ProcBlk.getString(bufOriginal);
		fprintf(fp,"\t\tProcBlk = %s -> %s    [阻塞进程数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProcBlk = %s    [阻塞进程数]\n",buf);
	}
	SwapIn.getString(buf);
	if (compare(SwapIn.getValue(),pOriginal->SwapIn.getValue())!=0)
	{
		pOriginal->SwapIn.getString(bufOriginal);
		fprintf(fp,"\t\tSwapIn = %s -> %s    [每秒由磁盘进入Swap的页面数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSwapIn = %s    [每秒由磁盘进入Swap的页面数]\n",buf);
	}
	SwapOut.getString(buf);
	if (compare(SwapOut.getValue(),pOriginal->SwapOut.getValue())!=0)
	{
		pOriginal->SwapOut.getString(bufOriginal);
		fprintf(fp,"\t\tSwapOut = %s -> %s    [每秒由Swap进入磁盘的页面数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSwapOut = %s    [每秒由Swap进入磁盘的页面数]\n",buf);
	}
	BlockIn.getString(buf);
	if (compare(BlockIn.getValue(),pOriginal->BlockIn.getValue())!=0)
	{
		pOriginal->BlockIn.getString(bufOriginal);
		fprintf(fp,"\t\tBlockIn = %s -> %s    [每秒从块设备读入的Block数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBlockIn = %s    [每秒从块设备读入的Block数]\n",buf);
	}
	BlockOut.getString(buf);
	if (compare(BlockOut.getValue(),pOriginal->BlockOut.getValue())!=0)
	{
		pOriginal->BlockOut.getString(bufOriginal);
		fprintf(fp,"\t\tBlockOut = %s -> %s    [每秒向块设备写入的Block数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBlockOut = %s    [每秒向块设备写入的Block数]\n",buf);
	}
	Inter.getString(buf);
	if (compare(Inter.getValue(),pOriginal->Inter.getValue())!=0)
	{
		pOriginal->Inter.getString(bufOriginal);
		fprintf(fp,"\t\tInter = %s -> %s    [每秒设备中段次数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInter = %s    [每秒设备中段次数]\n",buf);
	}
	Context.getString(buf);
	if (compare(Context.getValue(),pOriginal->Context.getValue())!=0)
	{
		pOriginal->Context.getString(bufOriginal);
		fprintf(fp,"\t\tContext = %s -> %s    [每秒上下文切换次数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContext = %s    [每秒上下文切换次数]\n",buf);
	}
	CPUUser.getString(buf);
	if (compare(CPUUser.getValue(),pOriginal->CPUUser.getValue())!=0)
	{
		pOriginal->CPUUser.getString(bufOriginal);
		fprintf(fp,"\t\tCPUUser = %s -> %s    [用户态CPU百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUUser = %s    [用户态CPU百分率]\n",buf);
	}
	CPUSys.getString(buf);
	if (compare(CPUSys.getValue(),pOriginal->CPUSys.getValue())!=0)
	{
		pOriginal->CPUSys.getString(bufOriginal);
		fprintf(fp,"\t\tCPUSys = %s -> %s    [系统态CPU百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUSys = %s    [系统态CPU百分率]\n",buf);
	}
	CPUIdle.getString(buf);
	if (compare(CPUIdle.getValue(),pOriginal->CPUIdle.getValue())!=0)
	{
		pOriginal->CPUIdle.getString(bufOriginal);
		fprintf(fp,"\t\tCPUIdle = %s -> %s    [空闲态CPU百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUIdle = %s    [空闲态CPU百分率]\n",buf);
	}
	CPUIOWait.getString(buf);
	if (compare(CPUIOWait.getValue(),pOriginal->CPUIOWait.getValue())!=0)
	{
		pOriginal->CPUIOWait.getString(bufOriginal);
		fprintf(fp,"\t\tCPUIOWait = %s -> %s    [IO等待态CPU百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUIOWait = %s    [IO等待态CPU百分率]\n",buf);
	}
	CPUSteal.getString(buf);
	if (compare(CPUSteal.getValue(),pOriginal->CPUSteal.getValue())!=0)
	{
		pOriginal->CPUSteal.getString(bufOriginal);
		fprintf(fp,"\t\tCPUSteal = %s -> %s    [窃取态CPU百分率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCPUSteal = %s    [窃取态CPU百分率]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbStatInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	HostName.getString(buf);
	fprintf(fp,",HostName,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	ProcRun.getString(buf);
	fprintf(fp,",ProcRun,%s",buf);	
	ProcBlk.getString(buf);
	fprintf(fp,",ProcBlk,%s",buf);	
	SwapIn.getString(buf);
	fprintf(fp,",SwapIn,%s",buf);	
	SwapOut.getString(buf);
	fprintf(fp,",SwapOut,%s",buf);	
	BlockIn.getString(buf);
	fprintf(fp,",BlockIn,%s",buf);	
	BlockOut.getString(buf);
	fprintf(fp,",BlockOut,%s",buf);	
	Inter.getString(buf);
	fprintf(fp,",Inter,%s",buf);	
	Context.getString(buf);
	fprintf(fp,",Context,%s",buf);	
	CPUUser.getString(buf);
	fprintf(fp,",CPUUser,%s",buf);	
	CPUSys.getString(buf);
	fprintf(fp,",CPUSys,%s",buf);	
	CPUIdle.getString(buf);
	fprintf(fp,",CPUIdle,%s",buf);	
	CPUIOWait.getString(buf);
	fprintf(fp,",CPUIOWait,%s",buf);	
	CPUSteal.getString(buf);
	fprintf(fp,",CPUSteal,%s",buf);	
}

void CWriteableSysMdbStatInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	HostName.getString(buf);
	sprintf(p,"HostName=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	ProcRun.getString(buf);
	sprintf(p,"ProcRun=%s,",buf);
	p+=strlen(p);
	ProcBlk.getString(buf);
	sprintf(p,"ProcBlk=%s,",buf);
	p+=strlen(p);
	SwapIn.getString(buf);
	sprintf(p,"SwapIn=%s,",buf);
	p+=strlen(p);
	SwapOut.getString(buf);
	sprintf(p,"SwapOut=%s,",buf);
	p+=strlen(p);
	BlockIn.getString(buf);
	sprintf(p,"BlockIn=%s,",buf);
	p+=strlen(p);
	BlockOut.getString(buf);
	sprintf(p,"BlockOut=%s,",buf);
	p+=strlen(p);
	Inter.getString(buf);
	sprintf(p,"Inter=%s,",buf);
	p+=strlen(p);
	Context.getString(buf);
	sprintf(p,"Context=%s,",buf);
	p+=strlen(p);
	CPUUser.getString(buf);
	sprintf(p,"CPUUser=%s,",buf);
	p+=strlen(p);
	CPUSys.getString(buf);
	sprintf(p,"CPUSys=%s,",buf);
	p+=strlen(p);
	CPUIdle.getString(buf);
	sprintf(p,"CPUIdle=%s,",buf);
	p+=strlen(p);
	CPUIOWait.getString(buf);
	sprintf(p,"CPUIOWait=%s,",buf);
	p+=strlen(p);
	CPUSteal.getString(buf);
	sprintf(p,"CPUSteal=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbStatInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbStatInfo");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	HostName.getString(buf);
	pLogger->output(indent+1,0,"HostName=%s 主机名称",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 采集的日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 采集的时间",buf);
	ProcRun.getString(buf);
	pLogger->output(indent+1,0,"ProcRun=%s 活跃进程数",buf);
	ProcBlk.getString(buf);
	pLogger->output(indent+1,0,"ProcBlk=%s 阻塞进程数",buf);
	SwapIn.getString(buf);
	pLogger->output(indent+1,0,"SwapIn=%s 每秒由磁盘进入Swap的页面数",buf);
	SwapOut.getString(buf);
	pLogger->output(indent+1,0,"SwapOut=%s 每秒由Swap进入磁盘的页面数",buf);
	BlockIn.getString(buf);
	pLogger->output(indent+1,0,"BlockIn=%s 每秒从块设备读入的Block数",buf);
	BlockOut.getString(buf);
	pLogger->output(indent+1,0,"BlockOut=%s 每秒向块设备写入的Block数",buf);
	Inter.getString(buf);
	pLogger->output(indent+1,0,"Inter=%s 每秒设备中段次数",buf);
	Context.getString(buf);
	pLogger->output(indent+1,0,"Context=%s 每秒上下文切换次数",buf);
	CPUUser.getString(buf);
	pLogger->output(indent+1,0,"CPUUser=%s 用户态CPU百分率",buf);
	CPUSys.getString(buf);
	pLogger->output(indent+1,0,"CPUSys=%s 系统态CPU百分率",buf);
	CPUIdle.getString(buf);
	pLogger->output(indent+1,0,"CPUIdle=%s 空闲态CPU百分率",buf);
	CPUIOWait.getString(buf);
	pLogger->output(indent+1,0,"CPUIOWait=%s IO等待态CPU百分率",buf);
	CPUSteal.getString(buf);
	pLogger->output(indent+1,0,"CPUSteal=%s 窃取态CPU百分率",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbStatInfoIterator::~CSysMdbStatInfoIterator(void)
{
}


void CSysMdbStatInfoIterator::dump(FILE *output)
{
	CSysMdbStatInfo *pSysMdbStatInfo;
	
	while ((pSysMdbStatInfo=next())!=NULL)
	{
		pSysMdbStatInfo->dump(output);
	}
}



void CWriteableSysMdbTradeFrontOrderRttStat::writeCSVHead(FILE *output)
{
	fprintf(output,"SubcriberID,MonDate,MonTime,ObjectID,OrderCount,OrderRttSum,OrderMaxRtt,OrderMinRtt,OrderRttSqu,OrderRttCutDistrib\n");
}
	
void CWriteableSysMdbTradeFrontOrderRttStat::init(void)
{
	SubcriberID.clear();
	MonDate.clear();
	MonTime.clear();
	ObjectID.clear();
	OrderCount.clear();
	OrderRttSum.clear();
	OrderMaxRtt.clear();
	OrderMinRtt.clear();
	OrderRttSqu.clear();
	OrderRttCutDistrib.clear();
}

int CWriteableSysMdbTradeFrontOrderRttStat::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMdbTradeFrontOrderRttStat),input)!=sizeof(CWriteableSysMdbTradeFrontOrderRttStat))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMdbTradeFrontOrderRttStat::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SubcriberID=token;
		}
		else
		{
			SubcriberID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonDate=token;
		}
		else
		{
			MonDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonTime=token;
		}
		else
		{
			MonTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ObjectID=token;
		}
		else
		{
			ObjectID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderCount=token;
		}
		else
		{
			OrderCount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderRttSum=token;
		}
		else
		{
			OrderRttSum="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderMaxRtt=token;
		}
		else
		{
			OrderMaxRtt="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderMinRtt=token;
		}
		else
		{
			OrderMinRtt="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderRttSqu=token;
		}
		else
		{
			OrderRttSqu="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderRttCutDistrib=token;
		}
		else
		{
			OrderRttCutDistrib="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SubcriberID"))
			{
				SubcriberID=token;
			}
			else if (!strcmp(fieldName,"MonDate"))
			{
				MonDate=token;
			}
			else if (!strcmp(fieldName,"MonTime"))
			{
				MonTime=token;
			}
			else if (!strcmp(fieldName,"ObjectID"))
			{
				ObjectID=token;
			}
			else if (!strcmp(fieldName,"OrderCount"))
			{
				OrderCount=token;
			}
			else if (!strcmp(fieldName,"OrderRttSum"))
			{
				OrderRttSum=token;
			}
			else if (!strcmp(fieldName,"OrderMaxRtt"))
			{
				OrderMaxRtt=token;
			}
			else if (!strcmp(fieldName,"OrderMinRtt"))
			{
				OrderMinRtt=token;
			}
			else if (!strcmp(fieldName,"OrderRttSqu"))
			{
				OrderRttSqu=token;
			}
			else if (!strcmp(fieldName,"OrderRttCutDistrib"))
			{
				OrderRttCutDistrib=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMdbTradeFrontOrderRttStat::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMdbTradeFrontOrderRttStat),output)!=sizeof(CWriteableSysMdbTradeFrontOrderRttStat))
		return 0;
	else
		return 1;
}

int CWriteableSysMdbTradeFrontOrderRttStat::writeCSV(FILE *output) const
{
	char buffer[1025];
	SubcriberID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ObjectID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderRttSum.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderMaxRtt.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderMinRtt.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderRttSqu.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderRttCutDistrib.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMdbTradeFrontOrderRttStat::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMdbTradeFrontOrderRttStat%s = {\n", index_buf);
	SubcriberID.getString(buf);
	fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);	
	MonDate.getString(buf);
	fprintf(fp,"\t\tMonDate = %s    [报单日期]\n",buf);	
	MonTime.getString(buf);
	fprintf(fp,"\t\tMonTime = %s    [报单时间]\n",buf);	
	ObjectID.getString(buf);
	fprintf(fp,"\t\tObjectID = %s    [前置对象]\n",buf);	
	OrderCount.getString(buf);
	fprintf(fp,"\t\tOrderCount = %s    [报单量]\n",buf);	
	OrderRttSum.getString(buf);
	fprintf(fp,"\t\tOrderRttSum = %s    [报单响应时间和]\n",buf);	
	OrderMaxRtt.getString(buf);
	fprintf(fp,"\t\tOrderMaxRtt = %s    [最大报单响应时间]\n",buf);	
	OrderMinRtt.getString(buf);
	fprintf(fp,"\t\tOrderMinRtt = %s    [最小报单响应时间]\n",buf);	
	OrderRttSqu.getString(buf);
	fprintf(fp,"\t\tOrderRttSqu = %s    [1秒内响应时间均差]\n",buf);	
	OrderRttCutDistrib.getString(buf);
	fprintf(fp,"\t\tOrderRttCutDistrib = %s    [1秒内响应时间分布]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTradeFrontOrderRttStat::dumpDiff(FILE *fp, const CWriteableSysMdbTradeFrontOrderRttStat *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMdbTradeFrontOrderRttStat = {\n");
	SubcriberID.getString(buf);
	if (compare(SubcriberID.getValue(),pOriginal->SubcriberID.getValue())!=0)
	{
		pOriginal->SubcriberID.getString(bufOriginal);
		fprintf(fp,"\t\tSubcriberID = %s -> %s    [订阅对象ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSubcriberID = %s    [订阅对象ID]\n",buf);
	}
	MonDate.getString(buf);
	if (compare(MonDate.getValue(),pOriginal->MonDate.getValue())!=0)
	{
		pOriginal->MonDate.getString(bufOriginal);
		fprintf(fp,"\t\tMonDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonDate = %s    [报单日期]\n",buf);
	}
	MonTime.getString(buf);
	if (compare(MonTime.getValue(),pOriginal->MonTime.getValue())!=0)
	{
		pOriginal->MonTime.getString(bufOriginal);
		fprintf(fp,"\t\tMonTime = %s -> %s    [报单时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonTime = %s    [报单时间]\n",buf);
	}
	ObjectID.getString(buf);
	if (compare(ObjectID.getValue(),pOriginal->ObjectID.getValue())!=0)
	{
		pOriginal->ObjectID.getString(bufOriginal);
		fprintf(fp,"\t\tObjectID = %s -> %s    [前置对象]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tObjectID = %s    [前置对象]\n",buf);
	}
	OrderCount.getString(buf);
	if (compare(OrderCount.getValue(),pOriginal->OrderCount.getValue())!=0)
	{
		pOriginal->OrderCount.getString(bufOriginal);
		fprintf(fp,"\t\tOrderCount = %s -> %s    [报单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderCount = %s    [报单量]\n",buf);
	}
	OrderRttSum.getString(buf);
	if (compare(OrderRttSum.getValue(),pOriginal->OrderRttSum.getValue())!=0)
	{
		pOriginal->OrderRttSum.getString(bufOriginal);
		fprintf(fp,"\t\tOrderRttSum = %s -> %s    [报单响应时间和]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderRttSum = %s    [报单响应时间和]\n",buf);
	}
	OrderMaxRtt.getString(buf);
	if (compare(OrderMaxRtt.getValue(),pOriginal->OrderMaxRtt.getValue())!=0)
	{
		pOriginal->OrderMaxRtt.getString(bufOriginal);
		fprintf(fp,"\t\tOrderMaxRtt = %s -> %s    [最大报单响应时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderMaxRtt = %s    [最大报单响应时间]\n",buf);
	}
	OrderMinRtt.getString(buf);
	if (compare(OrderMinRtt.getValue(),pOriginal->OrderMinRtt.getValue())!=0)
	{
		pOriginal->OrderMinRtt.getString(bufOriginal);
		fprintf(fp,"\t\tOrderMinRtt = %s -> %s    [最小报单响应时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderMinRtt = %s    [最小报单响应时间]\n",buf);
	}
	OrderRttSqu.getString(buf);
	if (compare(OrderRttSqu.getValue(),pOriginal->OrderRttSqu.getValue())!=0)
	{
		pOriginal->OrderRttSqu.getString(bufOriginal);
		fprintf(fp,"\t\tOrderRttSqu = %s -> %s    [1秒内响应时间均差]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderRttSqu = %s    [1秒内响应时间均差]\n",buf);
	}
	OrderRttCutDistrib.getString(buf);
	if (compare(OrderRttCutDistrib.getValue(),pOriginal->OrderRttCutDistrib.getValue())!=0)
	{
		pOriginal->OrderRttCutDistrib.getString(bufOriginal);
		fprintf(fp,"\t\tOrderRttCutDistrib = %s -> %s    [1秒内响应时间分布]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderRttCutDistrib = %s    [1秒内响应时间分布]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMdbTradeFrontOrderRttStat::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SubcriberID.getString(buf);
	fprintf(fp,",SubcriberID,%s",buf);	
	MonDate.getString(buf);
	fprintf(fp,",MonDate,%s",buf);	
	MonTime.getString(buf);
	fprintf(fp,",MonTime,%s",buf);	
	ObjectID.getString(buf);
	fprintf(fp,",ObjectID,%s",buf);	
	OrderCount.getString(buf);
	fprintf(fp,",OrderCount,%s",buf);	
	OrderRttSum.getString(buf);
	fprintf(fp,",OrderRttSum,%s",buf);	
	OrderMaxRtt.getString(buf);
	fprintf(fp,",OrderMaxRtt,%s",buf);	
	OrderMinRtt.getString(buf);
	fprintf(fp,",OrderMinRtt,%s",buf);	
	OrderRttSqu.getString(buf);
	fprintf(fp,",OrderRttSqu,%s",buf);	
	OrderRttCutDistrib.getString(buf);
	fprintf(fp,",OrderRttCutDistrib,%s",buf);	
}

void CWriteableSysMdbTradeFrontOrderRttStat::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SubcriberID.getString(buf);
	sprintf(p,"SubcriberID=%s,",buf);
	p+=strlen(p);
	MonDate.getString(buf);
	sprintf(p,"MonDate=%s,",buf);
	p+=strlen(p);
	MonTime.getString(buf);
	sprintf(p,"MonTime=%s,",buf);
	p+=strlen(p);
	ObjectID.getString(buf);
	sprintf(p,"ObjectID=%s,",buf);
	p+=strlen(p);
	OrderCount.getString(buf);
	sprintf(p,"OrderCount=%s,",buf);
	p+=strlen(p);
	OrderRttSum.getString(buf);
	sprintf(p,"OrderRttSum=%s,",buf);
	p+=strlen(p);
	OrderMaxRtt.getString(buf);
	sprintf(p,"OrderMaxRtt=%s,",buf);
	p+=strlen(p);
	OrderMinRtt.getString(buf);
	sprintf(p,"OrderMinRtt=%s,",buf);
	p+=strlen(p);
	OrderRttSqu.getString(buf);
	sprintf(p,"OrderRttSqu=%s,",buf);
	p+=strlen(p);
	OrderRttCutDistrib.getString(buf);
	sprintf(p,"OrderRttCutDistrib=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMdbTradeFrontOrderRttStat::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMdbTradeFrontOrderRttStat");
	pLogger->output(indent,0,"{");
	SubcriberID.getString(buf);
	pLogger->output(indent+1,0,"SubcriberID=%s 订阅对象ID",buf);
	MonDate.getString(buf);
	pLogger->output(indent+1,0,"MonDate=%s 报单日期",buf);
	MonTime.getString(buf);
	pLogger->output(indent+1,0,"MonTime=%s 报单时间",buf);
	ObjectID.getString(buf);
	pLogger->output(indent+1,0,"ObjectID=%s 前置对象",buf);
	OrderCount.getString(buf);
	pLogger->output(indent+1,0,"OrderCount=%s 报单量",buf);
	OrderRttSum.getString(buf);
	pLogger->output(indent+1,0,"OrderRttSum=%s 报单响应时间和",buf);
	OrderMaxRtt.getString(buf);
	pLogger->output(indent+1,0,"OrderMaxRtt=%s 最大报单响应时间",buf);
	OrderMinRtt.getString(buf);
	pLogger->output(indent+1,0,"OrderMinRtt=%s 最小报单响应时间",buf);
	OrderRttSqu.getString(buf);
	pLogger->output(indent+1,0,"OrderRttSqu=%s 1秒内响应时间均差",buf);
	OrderRttCutDistrib.getString(buf);
	pLogger->output(indent+1,0,"OrderRttCutDistrib=%s 1秒内响应时间分布",buf);
	pLogger->output(indent,0,"}");
}

CSysMdbTradeFrontOrderRttStatIterator::~CSysMdbTradeFrontOrderRttStatIterator(void)
{
}


void CSysMdbTradeFrontOrderRttStatIterator::dump(FILE *output)
{
	CSysMdbTradeFrontOrderRttStat *pSysMdbTradeFrontOrderRttStat;
	
	while ((pSysMdbTradeFrontOrderRttStat=next())!=NULL)
	{
		pSysMdbTradeFrontOrderRttStat->dump(output);
	}
}



void CWriteableSysInstrumentStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,InstrumentStatus,TradingSegmentSN,EnterTime,EnterReason,EnterDate\n");
}
	
void CWriteableSysInstrumentStatus::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	InstrumentStatus.clear();
	TradingSegmentSN.clear();
	EnterTime.clear();
	EnterReason.clear();
	EnterDate.clear();
}

int CWriteableSysInstrumentStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysInstrumentStatus),input)!=sizeof(CWriteableSysInstrumentStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableSysInstrumentStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterTime=token;
		}
		else
		{
			EnterTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterReason=token;
		}
		else
		{
			EnterReason="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterDate=token;
		}
		else
		{
			EnterDate="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			else if (!strcmp(fieldName,"EnterTime"))
			{
				EnterTime=token;
			}
			else if (!strcmp(fieldName,"EnterReason"))
			{
				EnterReason=token;
			}
			else if (!strcmp(fieldName,"EnterDate"))
			{
				EnterDate=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysInstrumentStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysInstrumentStatus),output)!=sizeof(CWriteableSysInstrumentStatus))
		return 0;
	else
		return 1;
}

int CWriteableSysInstrumentStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterReason.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysInstrumentStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysInstrumentStatus%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	EnterTime.getString(buf);
	fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);	
	EnterReason.getString(buf);
	fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);	
	EnterDate.getString(buf);
	fprintf(fp,"\t\tEnterDate = %s    [进入本状态日期]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysInstrumentStatus::dumpDiff(FILE *fp, const CWriteableSysInstrumentStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysInstrumentStatus = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	EnterTime.getString(buf);
	if (compare(EnterTime.getValue(),pOriginal->EnterTime.getValue())!=0)
	{
		pOriginal->EnterTime.getString(bufOriginal);
		fprintf(fp,"\t\tEnterTime = %s -> %s    [进入本状态时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);
	}
	EnterReason.getString(buf);
	if (compare(EnterReason.getValue(),pOriginal->EnterReason.getValue())!=0)
	{
		pOriginal->EnterReason.getString(bufOriginal);
		fprintf(fp,"\t\tEnterReason = %s -> %s    [进入本状态原因]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);
	}
	EnterDate.getString(buf);
	if (compare(EnterDate.getValue(),pOriginal->EnterDate.getValue())!=0)
	{
		pOriginal->EnterDate.getString(bufOriginal);
		fprintf(fp,"\t\tEnterDate = %s -> %s    [进入本状态日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterDate = %s    [进入本状态日期]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysInstrumentStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
	EnterTime.getString(buf);
	fprintf(fp,",EnterTime,%s",buf);	
	EnterReason.getString(buf);
	fprintf(fp,",EnterReason,%s",buf);	
	EnterDate.getString(buf);
	fprintf(fp,",EnterDate,%s",buf);	
}

void CWriteableSysInstrumentStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	EnterTime.getString(buf);
	sprintf(p,"EnterTime=%s,",buf);
	p+=strlen(p);
	EnterReason.getString(buf);
	sprintf(p,"EnterReason=%s,",buf);
	p+=strlen(p);
	EnterDate.getString(buf);
	sprintf(p,"EnterDate=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysInstrumentStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysInstrumentStatus");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	EnterTime.getString(buf);
	pLogger->output(indent+1,0,"EnterTime=%s 进入本状态时间",buf);
	EnterReason.getString(buf);
	pLogger->output(indent+1,0,"EnterReason=%s 进入本状态原因",buf);
	EnterDate.getString(buf);
	pLogger->output(indent+1,0,"EnterDate=%s 进入本状态日期",buf);
	pLogger->output(indent,0,"}");
}

CSysInstrumentStatusIterator::~CSysInstrumentStatusIterator(void)
{
}


void CSysInstrumentStatusIterator::dump(FILE *output)
{
	CSysInstrumentStatus *pSysInstrumentStatus;
	
	while ((pSysInstrumentStatus=next())!=NULL)
	{
		pSysInstrumentStatus->dump(output);
	}
}



void CWriteableSysCurrTradingSegmentAttr::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,TradingSegmentSN,TradingSegmentName,StartTime,InstrumentStatus,InstrumentID,AdvanceDays\n");
}
	
void CWriteableSysCurrTradingSegmentAttr::init(void)
{
	SettlementGroupID.clear();
	TradingSegmentSN.clear();
	TradingSegmentName.clear();
	StartTime.clear();
	InstrumentStatus.clear();
	InstrumentID.clear();
	AdvanceDays.clear();
}

int CWriteableSysCurrTradingSegmentAttr::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysCurrTradingSegmentAttr),input)!=sizeof(CWriteableSysCurrTradingSegmentAttr))
		return 0;
	else
		return 1;
}
	
int CWriteableSysCurrTradingSegmentAttr::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentName=token;
		}
		else
		{
			TradingSegmentName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTime=token;
		}
		else
		{
			StartTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AdvanceDays=token;
		}
		else
		{
			AdvanceDays="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentName"))
			{
				TradingSegmentName=token;
			}
			else if (!strcmp(fieldName,"StartTime"))
			{
				StartTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"AdvanceDays"))
			{
				AdvanceDays=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysCurrTradingSegmentAttr::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysCurrTradingSegmentAttr),output)!=sizeof(CWriteableSysCurrTradingSegmentAttr))
		return 0;
	else
		return 1;
}

int CWriteableSysCurrTradingSegmentAttr::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AdvanceDays.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysCurrTradingSegmentAttr::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysCurrTradingSegmentAttr%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	TradingSegmentName.getString(buf);
	fprintf(fp,"\t\tTradingSegmentName = %s    [交易阶段名称]\n",buf);	
	StartTime.getString(buf);
	fprintf(fp,"\t\tStartTime = %s    [起始时间]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	AdvanceDays.getString(buf);
	fprintf(fp,"\t\tAdvanceDays = %s    [提前天数]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysCurrTradingSegmentAttr::dumpDiff(FILE *fp, const CWriteableSysCurrTradingSegmentAttr *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysCurrTradingSegmentAttr = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	TradingSegmentName.getString(buf);
	if (compare(TradingSegmentName.getValue(),pOriginal->TradingSegmentName.getValue())!=0)
	{
		pOriginal->TradingSegmentName.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentName = %s -> %s    [交易阶段名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentName = %s    [交易阶段名称]\n",buf);
	}
	StartTime.getString(buf);
	if (compare(StartTime.getValue(),pOriginal->StartTime.getValue())!=0)
	{
		pOriginal->StartTime.getString(bufOriginal);
		fprintf(fp,"\t\tStartTime = %s -> %s    [起始时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTime = %s    [起始时间]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	AdvanceDays.getString(buf);
	if (compare(AdvanceDays.getValue(),pOriginal->AdvanceDays.getValue())!=0)
	{
		pOriginal->AdvanceDays.getString(bufOriginal);
		fprintf(fp,"\t\tAdvanceDays = %s -> %s    [提前天数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAdvanceDays = %s    [提前天数]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysCurrTradingSegmentAttr::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
	TradingSegmentName.getString(buf);
	fprintf(fp,",TradingSegmentName,%s",buf);	
	StartTime.getString(buf);
	fprintf(fp,",StartTime,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	AdvanceDays.getString(buf);
	fprintf(fp,",AdvanceDays,%s",buf);	
}

void CWriteableSysCurrTradingSegmentAttr::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	TradingSegmentName.getString(buf);
	sprintf(p,"TradingSegmentName=%s,",buf);
	p+=strlen(p);
	StartTime.getString(buf);
	sprintf(p,"StartTime=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	AdvanceDays.getString(buf);
	sprintf(p,"AdvanceDays=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysCurrTradingSegmentAttr::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysCurrTradingSegmentAttr");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	TradingSegmentName.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentName=%s 交易阶段名称",buf);
	StartTime.getString(buf);
	pLogger->output(indent+1,0,"StartTime=%s 起始时间",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	AdvanceDays.getString(buf);
	pLogger->output(indent+1,0,"AdvanceDays=%s 提前天数",buf);
	pLogger->output(indent,0,"}");
}

CSysCurrTradingSegmentAttrIterator::~CSysCurrTradingSegmentAttrIterator(void)
{
}


void CSysCurrTradingSegmentAttrIterator::dump(FILE *output)
{
	CSysCurrTradingSegmentAttr *pSysCurrTradingSegmentAttr;
	
	while ((pSysCurrTradingSegmentAttr=next())!=NULL)
	{
		pSysCurrTradingSegmentAttr->dump(output);
	}
}



void CWriteableSysMemberLinkCost::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,ParticipantName,DDN_NO,ServiceProvider,Pay_Date,B_Pay_Date,D_Pay_Date,Charge,Fee_Type,Pro\n");
}
	
void CWriteableSysMemberLinkCost::init(void)
{
	ID.clear();
	ParticipantName.clear();
	DDN_NO.clear();
	ServiceProvider.clear();
	Pay_Date.clear();
	B_Pay_Date.clear();
	D_Pay_Date.clear();
	Charge.clear();
	Fee_Type.clear();
	Pro.clear();
}

int CWriteableSysMemberLinkCost::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysMemberLinkCost),input)!=sizeof(CWriteableSysMemberLinkCost))
		return 0;
	else
		return 1;
}
	
int CWriteableSysMemberLinkCost::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantName=token;
		}
		else
		{
			ParticipantName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ServiceProvider=token;
		}
		else
		{
			ServiceProvider="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Pay_Date=token;
		}
		else
		{
			Pay_Date="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			B_Pay_Date=token;
		}
		else
		{
			B_Pay_Date="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			D_Pay_Date=token;
		}
		else
		{
			D_Pay_Date="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Charge=token;
		}
		else
		{
			Charge="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Fee_Type=token;
		}
		else
		{
			Fee_Type="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Pro=token;
		}
		else
		{
			Pro="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"ParticipantName"))
			{
				ParticipantName=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"ServiceProvider"))
			{
				ServiceProvider=token;
			}
			else if (!strcmp(fieldName,"Pay_Date"))
			{
				Pay_Date=token;
			}
			else if (!strcmp(fieldName,"B_Pay_Date"))
			{
				B_Pay_Date=token;
			}
			else if (!strcmp(fieldName,"D_Pay_Date"))
			{
				D_Pay_Date=token;
			}
			else if (!strcmp(fieldName,"Charge"))
			{
				Charge=token;
			}
			else if (!strcmp(fieldName,"Fee_Type"))
			{
				Fee_Type=token;
			}
			else if (!strcmp(fieldName,"Pro"))
			{
				Pro=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysMemberLinkCost::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysMemberLinkCost),output)!=sizeof(CWriteableSysMemberLinkCost))
		return 0;
	else
		return 1;
}

int CWriteableSysMemberLinkCost::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ServiceProvider.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Pay_Date.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	B_Pay_Date.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	D_Pay_Date.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Charge.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Fee_Type.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Pro.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysMemberLinkCost::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysMemberLinkCost%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	ServiceProvider.getString(buf);
	fprintf(fp,"\t\tServiceProvider = %s    [运营商]\n",buf);	
	Pay_Date.getString(buf);
	fprintf(fp,"\t\tPay_Date = %s    [付款日期]\n",buf);	
	B_Pay_Date.getString(buf);
	fprintf(fp,"\t\tB_Pay_Date = %s    [账期起始日期]\n",buf);	
	D_Pay_Date.getString(buf);
	fprintf(fp,"\t\tD_Pay_Date = %s    [账期终止日期]\n",buf);	
	Charge.getString(buf);
	fprintf(fp,"\t\tCharge = %s    [金额]\n",buf);	
	Fee_Type.getString(buf);
	fprintf(fp,"\t\tFee_Type = %s    [费用类型]\n",buf);	
	Pro.getString(buf);
	fprintf(fp,"\t\tPro = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysMemberLinkCost::dumpDiff(FILE *fp, const CWriteableSysMemberLinkCost *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysMemberLinkCost = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	ParticipantName.getString(buf);
	if (compare(ParticipantName.getValue(),pOriginal->ParticipantName.getValue())!=0)
	{
		pOriginal->ParticipantName.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantName = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	ServiceProvider.getString(buf);
	if (compare(ServiceProvider.getValue(),pOriginal->ServiceProvider.getValue())!=0)
	{
		pOriginal->ServiceProvider.getString(bufOriginal);
		fprintf(fp,"\t\tServiceProvider = %s -> %s    [运营商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tServiceProvider = %s    [运营商]\n",buf);
	}
	Pay_Date.getString(buf);
	if (compare(Pay_Date.getValue(),pOriginal->Pay_Date.getValue())!=0)
	{
		pOriginal->Pay_Date.getString(bufOriginal);
		fprintf(fp,"\t\tPay_Date = %s -> %s    [付款日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPay_Date = %s    [付款日期]\n",buf);
	}
	B_Pay_Date.getString(buf);
	if (compare(B_Pay_Date.getValue(),pOriginal->B_Pay_Date.getValue())!=0)
	{
		pOriginal->B_Pay_Date.getString(bufOriginal);
		fprintf(fp,"\t\tB_Pay_Date = %s -> %s    [账期起始日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tB_Pay_Date = %s    [账期起始日期]\n",buf);
	}
	D_Pay_Date.getString(buf);
	if (compare(D_Pay_Date.getValue(),pOriginal->D_Pay_Date.getValue())!=0)
	{
		pOriginal->D_Pay_Date.getString(bufOriginal);
		fprintf(fp,"\t\tD_Pay_Date = %s -> %s    [账期终止日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tD_Pay_Date = %s    [账期终止日期]\n",buf);
	}
	Charge.getString(buf);
	if (compare(Charge.getValue(),pOriginal->Charge.getValue())!=0)
	{
		pOriginal->Charge.getString(bufOriginal);
		fprintf(fp,"\t\tCharge = %s -> %s    [金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCharge = %s    [金额]\n",buf);
	}
	Fee_Type.getString(buf);
	if (compare(Fee_Type.getValue(),pOriginal->Fee_Type.getValue())!=0)
	{
		pOriginal->Fee_Type.getString(bufOriginal);
		fprintf(fp,"\t\tFee_Type = %s -> %s    [费用类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFee_Type = %s    [费用类型]\n",buf);
	}
	Pro.getString(buf);
	if (compare(Pro.getValue(),pOriginal->Pro.getValue())!=0)
	{
		pOriginal->Pro.getString(bufOriginal);
		fprintf(fp,"\t\tPro = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPro = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysMemberLinkCost::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,",ParticipantName,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	ServiceProvider.getString(buf);
	fprintf(fp,",ServiceProvider,%s",buf);	
	Pay_Date.getString(buf);
	fprintf(fp,",Pay_Date,%s",buf);	
	B_Pay_Date.getString(buf);
	fprintf(fp,",B_Pay_Date,%s",buf);	
	D_Pay_Date.getString(buf);
	fprintf(fp,",D_Pay_Date,%s",buf);	
	Charge.getString(buf);
	fprintf(fp,",Charge,%s",buf);	
	Fee_Type.getString(buf);
	fprintf(fp,",Fee_Type,%s",buf);	
	Pro.getString(buf);
	fprintf(fp,",Pro,%s",buf);	
}

void CWriteableSysMemberLinkCost::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	ParticipantName.getString(buf);
	sprintf(p,"ParticipantName=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	ServiceProvider.getString(buf);
	sprintf(p,"ServiceProvider=%s,",buf);
	p+=strlen(p);
	Pay_Date.getString(buf);
	sprintf(p,"Pay_Date=%s,",buf);
	p+=strlen(p);
	B_Pay_Date.getString(buf);
	sprintf(p,"B_Pay_Date=%s,",buf);
	p+=strlen(p);
	D_Pay_Date.getString(buf);
	sprintf(p,"D_Pay_Date=%s,",buf);
	p+=strlen(p);
	Charge.getString(buf);
	sprintf(p,"Charge=%s,",buf);
	p+=strlen(p);
	Fee_Type.getString(buf);
	sprintf(p,"Fee_Type=%s,",buf);
	p+=strlen(p);
	Pro.getString(buf);
	sprintf(p,"Pro=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysMemberLinkCost::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysMemberLinkCost");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	ParticipantName.getString(buf);
	pLogger->output(indent+1,0,"ParticipantName=%s 会员名称",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	ServiceProvider.getString(buf);
	pLogger->output(indent+1,0,"ServiceProvider=%s 运营商",buf);
	Pay_Date.getString(buf);
	pLogger->output(indent+1,0,"Pay_Date=%s 付款日期",buf);
	B_Pay_Date.getString(buf);
	pLogger->output(indent+1,0,"B_Pay_Date=%s 账期起始日期",buf);
	D_Pay_Date.getString(buf);
	pLogger->output(indent+1,0,"D_Pay_Date=%s 账期终止日期",buf);
	Charge.getString(buf);
	pLogger->output(indent+1,0,"Charge=%s 金额",buf);
	Fee_Type.getString(buf);
	pLogger->output(indent+1,0,"Fee_Type=%s 费用类型",buf);
	Pro.getString(buf);
	pLogger->output(indent+1,0,"Pro=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysMemberLinkCostIterator::~CSysMemberLinkCostIterator(void)
{
}


void CSysMemberLinkCostIterator::dump(FILE *output)
{
	CSysMemberLinkCost *pSysMemberLinkCost;
	
	while ((pSysMemberLinkCost=next())!=NULL)
	{
		pSysMemberLinkCost->dump(output);
	}
}



void CWriteableSysNetPartylinkMonthlyRent::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,LineName,DDN_NO,ServiceProvider,MonthlyRental,Remark\n");
}
	
void CWriteableSysNetPartylinkMonthlyRent::init(void)
{
	ID.clear();
	LineName.clear();
	DDN_NO.clear();
	ServiceProvider.clear();
	MonthlyRental.clear();
	Remark.clear();
}

int CWriteableSysNetPartylinkMonthlyRent::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetPartylinkMonthlyRent),input)!=sizeof(CWriteableSysNetPartylinkMonthlyRent))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetPartylinkMonthlyRent::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LineName=token;
		}
		else
		{
			LineName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ServiceProvider=token;
		}
		else
		{
			ServiceProvider="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MonthlyRental=token;
		}
		else
		{
			MonthlyRental="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Remark=token;
		}
		else
		{
			Remark="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"LineName"))
			{
				LineName=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"ServiceProvider"))
			{
				ServiceProvider=token;
			}
			else if (!strcmp(fieldName,"MonthlyRental"))
			{
				MonthlyRental=token;
			}
			else if (!strcmp(fieldName,"Remark"))
			{
				Remark=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetPartylinkMonthlyRent::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetPartylinkMonthlyRent),output)!=sizeof(CWriteableSysNetPartylinkMonthlyRent))
		return 0;
	else
		return 1;
}

int CWriteableSysNetPartylinkMonthlyRent::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LineName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ServiceProvider.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MonthlyRental.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Remark.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetPartylinkMonthlyRent::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetPartylinkMonthlyRent%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	LineName.getString(buf);
	fprintf(fp,"\t\tLineName = %s    [线路名称]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	ServiceProvider.getString(buf);
	fprintf(fp,"\t\tServiceProvider = %s    [运营商]\n",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);	
	Remark.getString(buf);
	fprintf(fp,"\t\tRemark = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartylinkMonthlyRent::dumpDiff(FILE *fp, const CWriteableSysNetPartylinkMonthlyRent *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetPartylinkMonthlyRent = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	LineName.getString(buf);
	if (compare(LineName.getValue(),pOriginal->LineName.getValue())!=0)
	{
		pOriginal->LineName.getString(bufOriginal);
		fprintf(fp,"\t\tLineName = %s -> %s    [线路名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLineName = %s    [线路名称]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	ServiceProvider.getString(buf);
	if (compare(ServiceProvider.getValue(),pOriginal->ServiceProvider.getValue())!=0)
	{
		pOriginal->ServiceProvider.getString(bufOriginal);
		fprintf(fp,"\t\tServiceProvider = %s -> %s    [运营商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tServiceProvider = %s    [运营商]\n",buf);
	}
	MonthlyRental.getString(buf);
	if (compare(MonthlyRental.getValue(),pOriginal->MonthlyRental.getValue())!=0)
	{
		pOriginal->MonthlyRental.getString(bufOriginal);
		fprintf(fp,"\t\tMonthlyRental = %s -> %s    [月租费用]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMonthlyRental = %s    [月租费用]\n",buf);
	}
	Remark.getString(buf);
	if (compare(Remark.getValue(),pOriginal->Remark.getValue())!=0)
	{
		pOriginal->Remark.getString(bufOriginal);
		fprintf(fp,"\t\tRemark = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRemark = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetPartylinkMonthlyRent::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	LineName.getString(buf);
	fprintf(fp,",LineName,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	ServiceProvider.getString(buf);
	fprintf(fp,",ServiceProvider,%s",buf);	
	MonthlyRental.getString(buf);
	fprintf(fp,",MonthlyRental,%s",buf);	
	Remark.getString(buf);
	fprintf(fp,",Remark,%s",buf);	
}

void CWriteableSysNetPartylinkMonthlyRent::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	LineName.getString(buf);
	sprintf(p,"LineName=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	ServiceProvider.getString(buf);
	sprintf(p,"ServiceProvider=%s,",buf);
	p+=strlen(p);
	MonthlyRental.getString(buf);
	sprintf(p,"MonthlyRental=%s,",buf);
	p+=strlen(p);
	Remark.getString(buf);
	sprintf(p,"Remark=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetPartylinkMonthlyRent::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetPartylinkMonthlyRent");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	LineName.getString(buf);
	pLogger->output(indent+1,0,"LineName=%s 线路名称",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	ServiceProvider.getString(buf);
	pLogger->output(indent+1,0,"ServiceProvider=%s 运营商",buf);
	MonthlyRental.getString(buf);
	pLogger->output(indent+1,0,"MonthlyRental=%s 月租费用",buf);
	Remark.getString(buf);
	pLogger->output(indent+1,0,"Remark=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetPartylinkMonthlyRentIterator::~CSysNetPartylinkMonthlyRentIterator(void)
{
}


void CSysNetPartylinkMonthlyRentIterator::dump(FILE *output)
{
	CSysNetPartylinkMonthlyRent *pSysNetPartylinkMonthlyRent;
	
	while ((pSysNetPartylinkMonthlyRent=next())!=NULL)
	{
		pSysNetPartylinkMonthlyRent->dump(output);
	}
}



void CWriteableSysNetNonPartyLinkInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"ID,MEMBER_NO,MEMBER_NAME,REMOTE_ADDR,LOCAL_ADDR,ADDRESS,LINE_STATUS,CONTACT,TELEPHONE,MOBILEPHONE,EMAIL,FAX,PROVINCE,DDN_NO,IN_MODE,IP_WAN,IP_LAN,IPADDR,Interface,INTERFACE_DATE,SOFTWARE,FEE_TYPE,SERVICEPROVIDER,IF_ZIYING,IF_TUOGUAN,HASOTHER,SEAT_NO,PRO\n");
}
	
void CWriteableSysNetNonPartyLinkInfo::init(void)
{
	ID.clear();
	MEMBER_NO.clear();
	MEMBER_NAME.clear();
	REMOTE_ADDR.clear();
	LOCAL_ADDR.clear();
	ADDRESS.clear();
	LINE_STATUS.clear();
	CONTACT.clear();
	TELEPHONE.clear();
	MOBILEPHONE.clear();
	EMAIL.clear();
	FAX.clear();
	PROVINCE.clear();
	DDN_NO.clear();
	IN_MODE.clear();
	IP_WAN.clear();
	IP_LAN.clear();
	IPADDR.clear();
	Interface.clear();
	INTERFACE_DATE.clear();
	SOFTWARE.clear();
	FEE_TYPE.clear();
	SERVICEPROVIDER.clear();
	IF_ZIYING.clear();
	IF_TUOGUAN.clear();
	HASOTHER.clear();
	SEAT_NO.clear();
	PRO.clear();
}

int CWriteableSysNetNonPartyLinkInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSysNetNonPartyLinkInfo),input)!=sizeof(CWriteableSysNetNonPartyLinkInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableSysNetNonPartyLinkInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ID=token;
		}
		else
		{
			ID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NO=token;
		}
		else
		{
			MEMBER_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MEMBER_NAME=token;
		}
		else
		{
			MEMBER_NAME="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			REMOTE_ADDR=token;
		}
		else
		{
			REMOTE_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LOCAL_ADDR=token;
		}
		else
		{
			LOCAL_ADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ADDRESS=token;
		}
		else
		{
			ADDRESS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LINE_STATUS=token;
		}
		else
		{
			LINE_STATUS="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CONTACT=token;
		}
		else
		{
			CONTACT="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TELEPHONE=token;
		}
		else
		{
			TELEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MOBILEPHONE=token;
		}
		else
		{
			MOBILEPHONE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EMAIL=token;
		}
		else
		{
			EMAIL="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FAX=token;
		}
		else
		{
			FAX="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PROVINCE=token;
		}
		else
		{
			PROVINCE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DDN_NO=token;
		}
		else
		{
			DDN_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IN_MODE=token;
		}
		else
		{
			IN_MODE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_WAN=token;
		}
		else
		{
			IP_WAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IP_LAN=token;
		}
		else
		{
			IP_LAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPADDR=token;
		}
		else
		{
			IPADDR="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Interface=token;
		}
		else
		{
			Interface="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			INTERFACE_DATE=token;
		}
		else
		{
			INTERFACE_DATE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SOFTWARE=token;
		}
		else
		{
			SOFTWARE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FEE_TYPE=token;
		}
		else
		{
			FEE_TYPE="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SERVICEPROVIDER=token;
		}
		else
		{
			SERVICEPROVIDER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_ZIYING=token;
		}
		else
		{
			IF_ZIYING="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IF_TUOGUAN=token;
		}
		else
		{
			IF_TUOGUAN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HASOTHER=token;
		}
		else
		{
			HASOTHER="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SEAT_NO=token;
		}
		else
		{
			SEAT_NO="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PRO=token;
		}
		else
		{
			PRO="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ID"))
			{
				ID=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NO"))
			{
				MEMBER_NO=token;
			}
			else if (!strcmp(fieldName,"MEMBER_NAME"))
			{
				MEMBER_NAME=token;
			}
			else if (!strcmp(fieldName,"REMOTE_ADDR"))
			{
				REMOTE_ADDR=token;
			}
			else if (!strcmp(fieldName,"LOCAL_ADDR"))
			{
				LOCAL_ADDR=token;
			}
			else if (!strcmp(fieldName,"ADDRESS"))
			{
				ADDRESS=token;
			}
			else if (!strcmp(fieldName,"LINE_STATUS"))
			{
				LINE_STATUS=token;
			}
			else if (!strcmp(fieldName,"CONTACT"))
			{
				CONTACT=token;
			}
			else if (!strcmp(fieldName,"TELEPHONE"))
			{
				TELEPHONE=token;
			}
			else if (!strcmp(fieldName,"MOBILEPHONE"))
			{
				MOBILEPHONE=token;
			}
			else if (!strcmp(fieldName,"EMAIL"))
			{
				EMAIL=token;
			}
			else if (!strcmp(fieldName,"FAX"))
			{
				FAX=token;
			}
			else if (!strcmp(fieldName,"PROVINCE"))
			{
				PROVINCE=token;
			}
			else if (!strcmp(fieldName,"DDN_NO"))
			{
				DDN_NO=token;
			}
			else if (!strcmp(fieldName,"IN_MODE"))
			{
				IN_MODE=token;
			}
			else if (!strcmp(fieldName,"IP_WAN"))
			{
				IP_WAN=token;
			}
			else if (!strcmp(fieldName,"IP_LAN"))
			{
				IP_LAN=token;
			}
			else if (!strcmp(fieldName,"IPADDR"))
			{
				IPADDR=token;
			}
			else if (!strcmp(fieldName,"Interface"))
			{
				Interface=token;
			}
			else if (!strcmp(fieldName,"INTERFACE_DATE"))
			{
				INTERFACE_DATE=token;
			}
			else if (!strcmp(fieldName,"SOFTWARE"))
			{
				SOFTWARE=token;
			}
			else if (!strcmp(fieldName,"FEE_TYPE"))
			{
				FEE_TYPE=token;
			}
			else if (!strcmp(fieldName,"SERVICEPROVIDER"))
			{
				SERVICEPROVIDER=token;
			}
			else if (!strcmp(fieldName,"IF_ZIYING"))
			{
				IF_ZIYING=token;
			}
			else if (!strcmp(fieldName,"IF_TUOGUAN"))
			{
				IF_TUOGUAN=token;
			}
			else if (!strcmp(fieldName,"HASOTHER"))
			{
				HASOTHER=token;
			}
			else if (!strcmp(fieldName,"SEAT_NO"))
			{
				SEAT_NO=token;
			}
			else if (!strcmp(fieldName,"PRO"))
			{
				PRO=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSysNetNonPartyLinkInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSysNetNonPartyLinkInfo),output)!=sizeof(CWriteableSysNetNonPartyLinkInfo))
		return 0;
	else
		return 1;
}

int CWriteableSysNetNonPartyLinkInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	ID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MEMBER_NAME.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	REMOTE_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LOCAL_ADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ADDRESS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LINE_STATUS.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CONTACT.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TELEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MOBILEPHONE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EMAIL.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FAX.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PROVINCE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DDN_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IN_MODE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_WAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IP_LAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPADDR.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Interface.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	INTERFACE_DATE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SOFTWARE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FEE_TYPE.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SERVICEPROVIDER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_ZIYING.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IF_TUOGUAN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HASOTHER.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SEAT_NO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PRO.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSysNetNonPartyLinkInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSysNetNonPartyLinkInfo%s = {\n", index_buf);
	ID.getString(buf);
	fprintf(fp,"\t\tID = %s    [ID]\n",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);	
	CONTACT.getString(buf);
	fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);	
	EMAIL.getString(buf);
	fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);	
	FAX.getString(buf);
	fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);	
	IPADDR.getString(buf);
	fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);	
	Interface.getString(buf);
	fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);	
	PRO.getString(buf);
	fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetNonPartyLinkInfo::dumpDiff(FILE *fp, const CWriteableSysNetNonPartyLinkInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSysNetNonPartyLinkInfo = {\n");
	ID.getString(buf);
	if (compare(ID.getValue(),pOriginal->ID.getValue())!=0)
	{
		pOriginal->ID.getString(bufOriginal);
		fprintf(fp,"\t\tID = %s -> %s    [ID]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tID = %s    [ID]\n",buf);
	}
	MEMBER_NO.getString(buf);
	if (compare(MEMBER_NO.getValue(),pOriginal->MEMBER_NO.getValue())!=0)
	{
		pOriginal->MEMBER_NO.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NO = %s -> %s    [会员号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NO = %s    [会员号]\n",buf);
	}
	MEMBER_NAME.getString(buf);
	if (compare(MEMBER_NAME.getValue(),pOriginal->MEMBER_NAME.getValue())!=0)
	{
		pOriginal->MEMBER_NAME.getString(bufOriginal);
		fprintf(fp,"\t\tMEMBER_NAME = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMEMBER_NAME = %s    [会员名称]\n",buf);
	}
	REMOTE_ADDR.getString(buf);
	if (compare(REMOTE_ADDR.getValue(),pOriginal->REMOTE_ADDR.getValue())!=0)
	{
		pOriginal->REMOTE_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tREMOTE_ADDR = %s -> %s    [会员接入地点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tREMOTE_ADDR = %s    [会员接入地点]\n",buf);
	}
	LOCAL_ADDR.getString(buf);
	if (compare(LOCAL_ADDR.getValue(),pOriginal->LOCAL_ADDR.getValue())!=0)
	{
		pOriginal->LOCAL_ADDR.getString(bufOriginal);
		fprintf(fp,"\t\tLOCAL_ADDR = %s -> %s    [上期所接入点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLOCAL_ADDR = %s    [上期所接入点]\n",buf);
	}
	ADDRESS.getString(buf);
	if (compare(ADDRESS.getValue(),pOriginal->ADDRESS.getValue())!=0)
	{
		pOriginal->ADDRESS.getString(bufOriginal);
		fprintf(fp,"\t\tADDRESS = %s -> %s    [地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tADDRESS = %s    [地址]\n",buf);
	}
	LINE_STATUS.getString(buf);
	if (compare(LINE_STATUS.getValue(),pOriginal->LINE_STATUS.getValue())!=0)
	{
		pOriginal->LINE_STATUS.getString(bufOriginal);
		fprintf(fp,"\t\tLINE_STATUS = %s -> %s    [线路状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLINE_STATUS = %s    [线路状态]\n",buf);
	}
	CONTACT.getString(buf);
	if (compare(CONTACT.getValue(),pOriginal->CONTACT.getValue())!=0)
	{
		pOriginal->CONTACT.getString(bufOriginal);
		fprintf(fp,"\t\tCONTACT = %s -> %s    [联系人]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCONTACT = %s    [联系人]\n",buf);
	}
	TELEPHONE.getString(buf);
	if (compare(TELEPHONE.getValue(),pOriginal->TELEPHONE.getValue())!=0)
	{
		pOriginal->TELEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tTELEPHONE = %s -> %s    [联系电话]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTELEPHONE = %s    [联系电话]\n",buf);
	}
	MOBILEPHONE.getString(buf);
	if (compare(MOBILEPHONE.getValue(),pOriginal->MOBILEPHONE.getValue())!=0)
	{
		pOriginal->MOBILEPHONE.getString(bufOriginal);
		fprintf(fp,"\t\tMOBILEPHONE = %s -> %s    [手机号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMOBILEPHONE = %s    [手机号]\n",buf);
	}
	EMAIL.getString(buf);
	if (compare(EMAIL.getValue(),pOriginal->EMAIL.getValue())!=0)
	{
		pOriginal->EMAIL.getString(bufOriginal);
		fprintf(fp,"\t\tEMAIL = %s -> %s    [EMAIL]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEMAIL = %s    [EMAIL]\n",buf);
	}
	FAX.getString(buf);
	if (compare(FAX.getValue(),pOriginal->FAX.getValue())!=0)
	{
		pOriginal->FAX.getString(bufOriginal);
		fprintf(fp,"\t\tFAX = %s -> %s    [传真]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFAX = %s    [传真]\n",buf);
	}
	PROVINCE.getString(buf);
	if (compare(PROVINCE.getValue(),pOriginal->PROVINCE.getValue())!=0)
	{
		pOriginal->PROVINCE.getString(bufOriginal);
		fprintf(fp,"\t\tPROVINCE = %s -> %s    [所属省份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPROVINCE = %s    [所属省份]\n",buf);
	}
	DDN_NO.getString(buf);
	if (compare(DDN_NO.getValue(),pOriginal->DDN_NO.getValue())!=0)
	{
		pOriginal->DDN_NO.getString(bufOriginal);
		fprintf(fp,"\t\tDDN_NO = %s -> %s    [线路编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDDN_NO = %s    [线路编号]\n",buf);
	}
	IN_MODE.getString(buf);
	if (compare(IN_MODE.getValue(),pOriginal->IN_MODE.getValue())!=0)
	{
		pOriginal->IN_MODE.getString(bufOriginal);
		fprintf(fp,"\t\tIN_MODE = %s -> %s    [接入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIN_MODE = %s    [接入方式]\n",buf);
	}
	IP_WAN.getString(buf);
	if (compare(IP_WAN.getValue(),pOriginal->IP_WAN.getValue())!=0)
	{
		pOriginal->IP_WAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_WAN = %s -> %s    [入网IP广域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_WAN = %s    [入网IP广域]\n",buf);
	}
	IP_LAN.getString(buf);
	if (compare(IP_LAN.getValue(),pOriginal->IP_LAN.getValue())!=0)
	{
		pOriginal->IP_LAN.getString(bufOriginal);
		fprintf(fp,"\t\tIP_LAN = %s -> %s    [入网IP局域]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIP_LAN = %s    [入网IP局域]\n",buf);
	}
	IPADDR.getString(buf);
	if (compare(IPADDR.getValue(),pOriginal->IPADDR.getValue())!=0)
	{
		pOriginal->IPADDR.getString(bufOriginal);
		fprintf(fp,"\t\tIPADDR = %s -> %s    [路由器网管IP]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPADDR = %s    [路由器网管IP]\n",buf);
	}
	Interface.getString(buf);
	if (compare(Interface.getValue(),pOriginal->Interface.getValue())!=0)
	{
		pOriginal->Interface.getString(bufOriginal);
		fprintf(fp,"\t\tInterface = %s -> %s    [路由器端口号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterface = %s    [路由器端口号]\n",buf);
	}
	INTERFACE_DATE.getString(buf);
	if (compare(INTERFACE_DATE.getValue(),pOriginal->INTERFACE_DATE.getValue())!=0)
	{
		pOriginal->INTERFACE_DATE.getString(bufOriginal);
		fprintf(fp,"\t\tINTERFACE_DATE = %s -> %s    [接口开通日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tINTERFACE_DATE = %s    [接口开通日期]\n",buf);
	}
	SOFTWARE.getString(buf);
	if (compare(SOFTWARE.getValue(),pOriginal->SOFTWARE.getValue())!=0)
	{
		pOriginal->SOFTWARE.getString(bufOriginal);
		fprintf(fp,"\t\tSOFTWARE = %s -> %s    [所用软件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSOFTWARE = %s    [所用软件]\n",buf);
	}
	FEE_TYPE.getString(buf);
	if (compare(FEE_TYPE.getValue(),pOriginal->FEE_TYPE.getValue())!=0)
	{
		pOriginal->FEE_TYPE.getString(bufOriginal);
		fprintf(fp,"\t\tFEE_TYPE = %s -> %s    [付费类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFEE_TYPE = %s    [付费类型]\n",buf);
	}
	SERVICEPROVIDER.getString(buf);
	if (compare(SERVICEPROVIDER.getValue(),pOriginal->SERVICEPROVIDER.getValue())!=0)
	{
		pOriginal->SERVICEPROVIDER.getString(bufOriginal);
		fprintf(fp,"\t\tSERVICEPROVIDER = %s -> %s    [运营商]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSERVICEPROVIDER = %s    [运营商]\n",buf);
	}
	IF_ZIYING.getString(buf);
	if (compare(IF_ZIYING.getValue(),pOriginal->IF_ZIYING.getValue())!=0)
	{
		pOriginal->IF_ZIYING.getString(bufOriginal);
		fprintf(fp,"\t\tIF_ZIYING = %s -> %s    [是否自营]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_ZIYING = %s    [是否自营]\n",buf);
	}
	IF_TUOGUAN.getString(buf);
	if (compare(IF_TUOGUAN.getValue(),pOriginal->IF_TUOGUAN.getValue())!=0)
	{
		pOriginal->IF_TUOGUAN.getString(bufOriginal);
		fprintf(fp,"\t\tIF_TUOGUAN = %s -> %s    [是否托管]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIF_TUOGUAN = %s    [是否托管]\n",buf);
	}
	HASOTHER.getString(buf);
	if (compare(HASOTHER.getValue(),pOriginal->HASOTHER.getValue())!=0)
	{
		pOriginal->HASOTHER.getString(bufOriginal);
		fprintf(fp,"\t\tHASOTHER = %s -> %s    [有无他所线路]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHASOTHER = %s    [有无他所线路]\n",buf);
	}
	SEAT_NO.getString(buf);
	if (compare(SEAT_NO.getValue(),pOriginal->SEAT_NO.getValue())!=0)
	{
		pOriginal->SEAT_NO.getString(bufOriginal);
		fprintf(fp,"\t\tSEAT_NO = %s -> %s    [席位号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSEAT_NO = %s    [席位号]\n",buf);
	}
	PRO.getString(buf);
	if (compare(PRO.getValue(),pOriginal->PRO.getValue())!=0)
	{
		pOriginal->PRO.getString(bufOriginal);
		fprintf(fp,"\t\tPRO = %s -> %s    [备注]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPRO = %s    [备注]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSysNetNonPartyLinkInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ID.getString(buf);
	fprintf(fp,",ID,%s",buf);	
	MEMBER_NO.getString(buf);
	fprintf(fp,",MEMBER_NO,%s",buf);	
	MEMBER_NAME.getString(buf);
	fprintf(fp,",MEMBER_NAME,%s",buf);	
	REMOTE_ADDR.getString(buf);
	fprintf(fp,",REMOTE_ADDR,%s",buf);	
	LOCAL_ADDR.getString(buf);
	fprintf(fp,",LOCAL_ADDR,%s",buf);	
	ADDRESS.getString(buf);
	fprintf(fp,",ADDRESS,%s",buf);	
	LINE_STATUS.getString(buf);
	fprintf(fp,",LINE_STATUS,%s",buf);	
	CONTACT.getString(buf);
	fprintf(fp,",CONTACT,%s",buf);	
	TELEPHONE.getString(buf);
	fprintf(fp,",TELEPHONE,%s",buf);	
	MOBILEPHONE.getString(buf);
	fprintf(fp,",MOBILEPHONE,%s",buf);	
	EMAIL.getString(buf);
	fprintf(fp,",EMAIL,%s",buf);	
	FAX.getString(buf);
	fprintf(fp,",FAX,%s",buf);	
	PROVINCE.getString(buf);
	fprintf(fp,",PROVINCE,%s",buf);	
	DDN_NO.getString(buf);
	fprintf(fp,",DDN_NO,%s",buf);	
	IN_MODE.getString(buf);
	fprintf(fp,",IN_MODE,%s",buf);	
	IP_WAN.getString(buf);
	fprintf(fp,",IP_WAN,%s",buf);	
	IP_LAN.getString(buf);
	fprintf(fp,",IP_LAN,%s",buf);	
	IPADDR.getString(buf);
	fprintf(fp,",IPADDR,%s",buf);	
	Interface.getString(buf);
	fprintf(fp,",Interface,%s",buf);	
	INTERFACE_DATE.getString(buf);
	fprintf(fp,",INTERFACE_DATE,%s",buf);	
	SOFTWARE.getString(buf);
	fprintf(fp,",SOFTWARE,%s",buf);	
	FEE_TYPE.getString(buf);
	fprintf(fp,",FEE_TYPE,%s",buf);	
	SERVICEPROVIDER.getString(buf);
	fprintf(fp,",SERVICEPROVIDER,%s",buf);	
	IF_ZIYING.getString(buf);
	fprintf(fp,",IF_ZIYING,%s",buf);	
	IF_TUOGUAN.getString(buf);
	fprintf(fp,",IF_TUOGUAN,%s",buf);	
	HASOTHER.getString(buf);
	fprintf(fp,",HASOTHER,%s",buf);	
	SEAT_NO.getString(buf);
	fprintf(fp,",SEAT_NO,%s",buf);	
	PRO.getString(buf);
	fprintf(fp,",PRO,%s",buf);	
}

void CWriteableSysNetNonPartyLinkInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ID.getString(buf);
	sprintf(p,"ID=%s,",buf);
	p+=strlen(p);
	MEMBER_NO.getString(buf);
	sprintf(p,"MEMBER_NO=%s,",buf);
	p+=strlen(p);
	MEMBER_NAME.getString(buf);
	sprintf(p,"MEMBER_NAME=%s,",buf);
	p+=strlen(p);
	REMOTE_ADDR.getString(buf);
	sprintf(p,"REMOTE_ADDR=%s,",buf);
	p+=strlen(p);
	LOCAL_ADDR.getString(buf);
	sprintf(p,"LOCAL_ADDR=%s,",buf);
	p+=strlen(p);
	ADDRESS.getString(buf);
	sprintf(p,"ADDRESS=%s,",buf);
	p+=strlen(p);
	LINE_STATUS.getString(buf);
	sprintf(p,"LINE_STATUS=%s,",buf);
	p+=strlen(p);
	CONTACT.getString(buf);
	sprintf(p,"CONTACT=%s,",buf);
	p+=strlen(p);
	TELEPHONE.getString(buf);
	sprintf(p,"TELEPHONE=%s,",buf);
	p+=strlen(p);
	MOBILEPHONE.getString(buf);
	sprintf(p,"MOBILEPHONE=%s,",buf);
	p+=strlen(p);
	EMAIL.getString(buf);
	sprintf(p,"EMAIL=%s,",buf);
	p+=strlen(p);
	FAX.getString(buf);
	sprintf(p,"FAX=%s,",buf);
	p+=strlen(p);
	PROVINCE.getString(buf);
	sprintf(p,"PROVINCE=%s,",buf);
	p+=strlen(p);
	DDN_NO.getString(buf);
	sprintf(p,"DDN_NO=%s,",buf);
	p+=strlen(p);
	IN_MODE.getString(buf);
	sprintf(p,"IN_MODE=%s,",buf);
	p+=strlen(p);
	IP_WAN.getString(buf);
	sprintf(p,"IP_WAN=%s,",buf);
	p+=strlen(p);
	IP_LAN.getString(buf);
	sprintf(p,"IP_LAN=%s,",buf);
	p+=strlen(p);
	IPADDR.getString(buf);
	sprintf(p,"IPADDR=%s,",buf);
	p+=strlen(p);
	Interface.getString(buf);
	sprintf(p,"Interface=%s,",buf);
	p+=strlen(p);
	INTERFACE_DATE.getString(buf);
	sprintf(p,"INTERFACE_DATE=%s,",buf);
	p+=strlen(p);
	SOFTWARE.getString(buf);
	sprintf(p,"SOFTWARE=%s,",buf);
	p+=strlen(p);
	FEE_TYPE.getString(buf);
	sprintf(p,"FEE_TYPE=%s,",buf);
	p+=strlen(p);
	SERVICEPROVIDER.getString(buf);
	sprintf(p,"SERVICEPROVIDER=%s,",buf);
	p+=strlen(p);
	IF_ZIYING.getString(buf);
	sprintf(p,"IF_ZIYING=%s,",buf);
	p+=strlen(p);
	IF_TUOGUAN.getString(buf);
	sprintf(p,"IF_TUOGUAN=%s,",buf);
	p+=strlen(p);
	HASOTHER.getString(buf);
	sprintf(p,"HASOTHER=%s,",buf);
	p+=strlen(p);
	SEAT_NO.getString(buf);
	sprintf(p,"SEAT_NO=%s,",buf);
	p+=strlen(p);
	PRO.getString(buf);
	sprintf(p,"PRO=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSysNetNonPartyLinkInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSysNetNonPartyLinkInfo");
	pLogger->output(indent,0,"{");
	ID.getString(buf);
	pLogger->output(indent+1,0,"ID=%s ID",buf);
	MEMBER_NO.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NO=%s 会员号",buf);
	MEMBER_NAME.getString(buf);
	pLogger->output(indent+1,0,"MEMBER_NAME=%s 会员名称",buf);
	REMOTE_ADDR.getString(buf);
	pLogger->output(indent+1,0,"REMOTE_ADDR=%s 会员接入地点",buf);
	LOCAL_ADDR.getString(buf);
	pLogger->output(indent+1,0,"LOCAL_ADDR=%s 上期所接入点",buf);
	ADDRESS.getString(buf);
	pLogger->output(indent+1,0,"ADDRESS=%s 地址",buf);
	LINE_STATUS.getString(buf);
	pLogger->output(indent+1,0,"LINE_STATUS=%s 线路状态",buf);
	CONTACT.getString(buf);
	pLogger->output(indent+1,0,"CONTACT=%s 联系人",buf);
	TELEPHONE.getString(buf);
	pLogger->output(indent+1,0,"TELEPHONE=%s 联系电话",buf);
	MOBILEPHONE.getString(buf);
	pLogger->output(indent+1,0,"MOBILEPHONE=%s 手机号",buf);
	EMAIL.getString(buf);
	pLogger->output(indent+1,0,"EMAIL=%s EMAIL",buf);
	FAX.getString(buf);
	pLogger->output(indent+1,0,"FAX=%s 传真",buf);
	PROVINCE.getString(buf);
	pLogger->output(indent+1,0,"PROVINCE=%s 所属省份",buf);
	DDN_NO.getString(buf);
	pLogger->output(indent+1,0,"DDN_NO=%s 线路编号",buf);
	IN_MODE.getString(buf);
	pLogger->output(indent+1,0,"IN_MODE=%s 接入方式",buf);
	IP_WAN.getString(buf);
	pLogger->output(indent+1,0,"IP_WAN=%s 入网IP广域",buf);
	IP_LAN.getString(buf);
	pLogger->output(indent+1,0,"IP_LAN=%s 入网IP局域",buf);
	IPADDR.getString(buf);
	pLogger->output(indent+1,0,"IPADDR=%s 路由器网管IP",buf);
	Interface.getString(buf);
	pLogger->output(indent+1,0,"Interface=%s 路由器端口号",buf);
	INTERFACE_DATE.getString(buf);
	pLogger->output(indent+1,0,"INTERFACE_DATE=%s 接口开通日期",buf);
	SOFTWARE.getString(buf);
	pLogger->output(indent+1,0,"SOFTWARE=%s 所用软件",buf);
	FEE_TYPE.getString(buf);
	pLogger->output(indent+1,0,"FEE_TYPE=%s 付费类型",buf);
	SERVICEPROVIDER.getString(buf);
	pLogger->output(indent+1,0,"SERVICEPROVIDER=%s 运营商",buf);
	IF_ZIYING.getString(buf);
	pLogger->output(indent+1,0,"IF_ZIYING=%s 是否自营",buf);
	IF_TUOGUAN.getString(buf);
	pLogger->output(indent+1,0,"IF_TUOGUAN=%s 是否托管",buf);
	HASOTHER.getString(buf);
	pLogger->output(indent+1,0,"HASOTHER=%s 有无他所线路",buf);
	SEAT_NO.getString(buf);
	pLogger->output(indent+1,0,"SEAT_NO=%s 席位号",buf);
	PRO.getString(buf);
	pLogger->output(indent+1,0,"PRO=%s 备注",buf);
	pLogger->output(indent,0,"}");
}

CSysNetNonPartyLinkInfoIterator::~CSysNetNonPartyLinkInfoIterator(void)
{
}


void CSysNetNonPartyLinkInfoIterator::dump(FILE *output)
{
	CSysNetNonPartyLinkInfo *pSysNetNonPartyLinkInfo;
	
	while ((pSysNetNonPartyLinkInfo=next())!=NULL)
	{
		pSysNetNonPartyLinkInfo->dump(output);
	}
}


