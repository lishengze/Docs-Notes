/////////////////////////////////////////////////////////////////////////
///@system 执行引擎系统
///@company 上海期货信息技术有限公司
///@file BaseDataStruct.cpp
///@brief实现了内存数据库用的基本数据结构类，以及iterator、trigger的基类
///@history 
///20060128	王肇东		创建该文件
///20081203	王肇东		为了NT-0058的需要，增加了读入CSV时自动识别双引号的功能
/////////////////////////////////////////////////////////////////////////

#include "BaseDataStruct.h"
#include "databaseFactories.h"

int compare(const char *s1, const char *s2)
{
	int result=strcmp(s1,s2);
	if (result>0)
		return 1;
	else if (result<0)
		return -1;
	return 0;
}

int compare(const int v1,const int v2)
{
	if (v1>v2)
		return 1;
	if (v1<v2)
		return -1;
	return 0;
}

int compare(const double v1,const double v2)
{
	if (v1>v2+SMALL_DOUBLE)
		return 1;
	if (v1<v2-SMALL_DOUBLE)
		return -1;
	return 0;
}

char *getNextToken(char *buffer)
{
	static char *last;
	char *from, *to;
	
	if (buffer==NULL)
	{
		from=last;
		if (from==NULL)
		{
			return NULL;
		}
	}
	else
	{
		from=buffer;
	}
	
	bool hasQuote=false;
	if (*from=='"')
	{
		from++;
		hasQuote=true;
	}
	to=from;
	while ((*to!='\0')&&(*to!=',')&&(*to!='\n'))
	{
		if (hasQuote && (*to=='"'))
		{
			to++;
			break;
		}
		to++;
	}
	if (*to!=',')
	{
		last=NULL;
	}
	else
	{
		last=to+1;
	}
	if (!hasQuote)
	{
		*to='\0';
	}
	else
	{
		*(to-1)='\0';
	}
	return from;
}


void CWriteableExchangeDataSyncStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,ExchangeID,ExchangeDataSyncStatus\n");
}
	
void CWriteableExchangeDataSyncStatus::init(void)
{
	TradingDay.clear();
	ExchangeID.clear();
	ExchangeDataSyncStatus.clear();
}

int CWriteableExchangeDataSyncStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableExchangeDataSyncStatus),input)!=sizeof(CWriteableExchangeDataSyncStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableExchangeDataSyncStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExchangeID=token;
		}
		else
		{
			ExchangeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExchangeDataSyncStatus=token;
		}
		else
		{
			ExchangeDataSyncStatus="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"ExchangeID"))
			{
				ExchangeID=token;
			}
			else if (!strcmp(fieldName,"ExchangeDataSyncStatus"))
			{
				ExchangeDataSyncStatus=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableExchangeDataSyncStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableExchangeDataSyncStatus),output)!=sizeof(CWriteableExchangeDataSyncStatus))
		return 0;
	else
		return 1;
}

int CWriteableExchangeDataSyncStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExchangeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExchangeDataSyncStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableExchangeDataSyncStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCExchangeDataSyncStatus%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	ExchangeID.getString(buf);
	fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);	
	ExchangeDataSyncStatus.getString(buf);
	fprintf(fp,"\t\tExchangeDataSyncStatus = %s    [交易所数据同步状态]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableExchangeDataSyncStatus::dumpDiff(FILE *fp, const CWriteableExchangeDataSyncStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCExchangeDataSyncStatus = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	ExchangeID.getString(buf);
	if (compare(ExchangeID.getValue(),pOriginal->ExchangeID.getValue())!=0)
	{
		pOriginal->ExchangeID.getString(bufOriginal);
		fprintf(fp,"\t\tExchangeID = %s -> %s    [交易所代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);
	}
	ExchangeDataSyncStatus.getString(buf);
	if (compare(ExchangeDataSyncStatus.getValue(),pOriginal->ExchangeDataSyncStatus.getValue())!=0)
	{
		pOriginal->ExchangeDataSyncStatus.getString(bufOriginal);
		fprintf(fp,"\t\tExchangeDataSyncStatus = %s -> %s    [交易所数据同步状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExchangeDataSyncStatus = %s    [交易所数据同步状态]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableExchangeDataSyncStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	ExchangeID.getString(buf);
	fprintf(fp,",ExchangeID,%s",buf);	
	ExchangeDataSyncStatus.getString(buf);
	fprintf(fp,",ExchangeDataSyncStatus,%s",buf);	
}

void CWriteableExchangeDataSyncStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	ExchangeID.getString(buf);
	sprintf(p,"ExchangeID=%s,",buf);
	p+=strlen(p);
	ExchangeDataSyncStatus.getString(buf);
	sprintf(p,"ExchangeDataSyncStatus=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableExchangeDataSyncStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CExchangeDataSyncStatus");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	ExchangeID.getString(buf);
	pLogger->output(indent+1,0,"ExchangeID=%s 交易所代码",buf);
	ExchangeDataSyncStatus.getString(buf);
	pLogger->output(indent+1,0,"ExchangeDataSyncStatus=%s 交易所数据同步状态",buf);
	pLogger->output(indent,0,"}");
}

CExchangeDataSyncStatusIterator::~CExchangeDataSyncStatusIterator(void)
{
}


void CExchangeDataSyncStatusIterator::dump(FILE *output)
{
	CExchangeDataSyncStatus *pExchangeDataSyncStatus;
	
	while ((pExchangeDataSyncStatus=next())!=NULL)
	{
		pExchangeDataSyncStatus->dump(output);
	}
}



void CWriteableSGDataSyncStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,TradingDay,SettlementID,SGDataSyncStatus\n");
}
	
void CWriteableSGDataSyncStatus::init(void)
{
	SettlementGroupID.clear();
	TradingDay.clear();
	SettlementID.clear();
	SGDataSyncStatus.clear();
}

int CWriteableSGDataSyncStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSGDataSyncStatus),input)!=sizeof(CWriteableSGDataSyncStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableSGDataSyncStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SGDataSyncStatus=token;
		}
		else
		{
			SGDataSyncStatus="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"SGDataSyncStatus"))
			{
				SGDataSyncStatus=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSGDataSyncStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSGDataSyncStatus),output)!=sizeof(CWriteableSGDataSyncStatus))
		return 0;
	else
		return 1;
}

int CWriteableSGDataSyncStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SGDataSyncStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSGDataSyncStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSGDataSyncStatus%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	SGDataSyncStatus.getString(buf);
	fprintf(fp,"\t\tSGDataSyncStatus = %s    [结算组数据同步状态]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSGDataSyncStatus::dumpDiff(FILE *fp, const CWriteableSGDataSyncStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSGDataSyncStatus = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	SGDataSyncStatus.getString(buf);
	if (compare(SGDataSyncStatus.getValue(),pOriginal->SGDataSyncStatus.getValue())!=0)
	{
		pOriginal->SGDataSyncStatus.getString(bufOriginal);
		fprintf(fp,"\t\tSGDataSyncStatus = %s -> %s    [结算组数据同步状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSGDataSyncStatus = %s    [结算组数据同步状态]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSGDataSyncStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	SGDataSyncStatus.getString(buf);
	fprintf(fp,",SGDataSyncStatus,%s",buf);	
}

void CWriteableSGDataSyncStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	SGDataSyncStatus.getString(buf);
	sprintf(p,"SGDataSyncStatus=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSGDataSyncStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSGDataSyncStatus");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	SGDataSyncStatus.getString(buf);
	pLogger->output(indent+1,0,"SGDataSyncStatus=%s 结算组数据同步状态",buf);
	pLogger->output(indent,0,"}");
}

CSGDataSyncStatusIterator::~CSGDataSyncStatusIterator(void)
{
}


void CSGDataSyncStatusIterator::dump(FILE *output)
{
	CSGDataSyncStatus *pSGDataSyncStatus;
	
	while ((pSGDataSyncStatus=next())!=NULL)
	{
		pSGDataSyncStatus->dump(output);
	}
}



void CWriteableCurrentTime::writeCSVHead(FILE *output)
{
	fprintf(output,"CurrDate,CurrTime,CurrMillisec,OldTime,OldMillisec\n");
}
	
void CWriteableCurrentTime::init(void)
{
	CurrDate.clear();
	CurrTime.clear();
	CurrMillisec.clear();
	OldTime.clear();
	OldMillisec.clear();
}

int CWriteableCurrentTime::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrentTime),input)!=sizeof(CWriteableCurrentTime))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrentTime::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			CurrDate=token;
		}
		else
		{
			CurrDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrTime=token;
		}
		else
		{
			CurrTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrMillisec=token;
		}
		else
		{
			CurrMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OldTime=token;
		}
		else
		{
			OldTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OldMillisec=token;
		}
		else
		{
			OldMillisec="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"CurrDate"))
			{
				CurrDate=token;
			}
			else if (!strcmp(fieldName,"CurrTime"))
			{
				CurrTime=token;
			}
			else if (!strcmp(fieldName,"CurrMillisec"))
			{
				CurrMillisec=token;
			}
			else if (!strcmp(fieldName,"OldTime"))
			{
				OldTime=token;
			}
			else if (!strcmp(fieldName,"OldMillisec"))
			{
				OldMillisec=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrentTime::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrentTime),output)!=sizeof(CWriteableCurrentTime))
		return 0;
	else
		return 1;
}

int CWriteableCurrentTime::writeCSV(FILE *output) const
{
	char buffer[1025];
	CurrDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OldTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OldMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrentTime::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrentTime%s = {\n", index_buf);
	CurrDate.getString(buf);
	fprintf(fp,"\t\tCurrDate = %s    [当前日期]\n",buf);	
	CurrTime.getString(buf);
	fprintf(fp,"\t\tCurrTime = %s    [当前时间]\n",buf);	
	CurrMillisec.getString(buf);
	fprintf(fp,"\t\tCurrMillisec = %s    [当前时间（毫秒）]\n",buf);	
	OldTime.getString(buf);
	fprintf(fp,"\t\tOldTime = %s    [原来时间]\n",buf);	
	OldMillisec.getString(buf);
	fprintf(fp,"\t\tOldMillisec = %s    [原来时间（毫秒）]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrentTime::dumpDiff(FILE *fp, const CWriteableCurrentTime *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrentTime = {\n");
	CurrDate.getString(buf);
	if (compare(CurrDate.getValue(),pOriginal->CurrDate.getValue())!=0)
	{
		pOriginal->CurrDate.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDate = %s -> %s    [当前日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDate = %s    [当前日期]\n",buf);
	}
	CurrTime.getString(buf);
	if (compare(CurrTime.getValue(),pOriginal->CurrTime.getValue())!=0)
	{
		pOriginal->CurrTime.getString(bufOriginal);
		fprintf(fp,"\t\tCurrTime = %s -> %s    [当前时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrTime = %s    [当前时间]\n",buf);
	}
	CurrMillisec.getString(buf);
	if (compare(CurrMillisec.getValue(),pOriginal->CurrMillisec.getValue())!=0)
	{
		pOriginal->CurrMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tCurrMillisec = %s -> %s    [当前时间（毫秒）]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrMillisec = %s    [当前时间（毫秒）]\n",buf);
	}
	OldTime.getString(buf);
	if (compare(OldTime.getValue(),pOriginal->OldTime.getValue())!=0)
	{
		pOriginal->OldTime.getString(bufOriginal);
		fprintf(fp,"\t\tOldTime = %s -> %s    [原来时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOldTime = %s    [原来时间]\n",buf);
	}
	OldMillisec.getString(buf);
	if (compare(OldMillisec.getValue(),pOriginal->OldMillisec.getValue())!=0)
	{
		pOriginal->OldMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tOldMillisec = %s -> %s    [原来时间（毫秒）]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOldMillisec = %s    [原来时间（毫秒）]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrentTime::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	CurrDate.getString(buf);
	fprintf(fp,",CurrDate,%s",buf);	
	CurrTime.getString(buf);
	fprintf(fp,",CurrTime,%s",buf);	
	CurrMillisec.getString(buf);
	fprintf(fp,",CurrMillisec,%s",buf);	
	OldTime.getString(buf);
	fprintf(fp,",OldTime,%s",buf);	
	OldMillisec.getString(buf);
	fprintf(fp,",OldMillisec,%s",buf);	
}

void CWriteableCurrentTime::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	CurrDate.getString(buf);
	sprintf(p,"CurrDate=%s,",buf);
	p+=strlen(p);
	CurrTime.getString(buf);
	sprintf(p,"CurrTime=%s,",buf);
	p+=strlen(p);
	CurrMillisec.getString(buf);
	sprintf(p,"CurrMillisec=%s,",buf);
	p+=strlen(p);
	OldTime.getString(buf);
	sprintf(p,"OldTime=%s,",buf);
	p+=strlen(p);
	OldMillisec.getString(buf);
	sprintf(p,"OldMillisec=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrentTime::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrentTime");
	pLogger->output(indent,0,"{");
	CurrDate.getString(buf);
	pLogger->output(indent+1,0,"CurrDate=%s 当前日期",buf);
	CurrTime.getString(buf);
	pLogger->output(indent+1,0,"CurrTime=%s 当前时间",buf);
	CurrMillisec.getString(buf);
	pLogger->output(indent+1,0,"CurrMillisec=%s 当前时间（毫秒）",buf);
	OldTime.getString(buf);
	pLogger->output(indent+1,0,"OldTime=%s 原来时间",buf);
	OldMillisec.getString(buf);
	pLogger->output(indent+1,0,"OldMillisec=%s 原来时间（毫秒）",buf);
	pLogger->output(indent,0,"}");
}

CCurrentTimeIterator::~CCurrentTimeIterator(void)
{
}


void CCurrentTimeIterator::dump(FILE *output)
{
	CCurrentTime *pCurrentTime;
	
	while ((pCurrentTime=next())!=NULL)
	{
		pCurrentTime->dump(output);
	}
}



void CWriteableDataCenterDesc::writeCSVHead(FILE *output)
{
	fprintf(output,"DataCenterID,StartMode\n");
}
	
void CWriteableDataCenterDesc::init(void)
{
	DataCenterID.clear();
	StartMode.clear();
}

int CWriteableDataCenterDesc::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableDataCenterDesc),input)!=sizeof(CWriteableDataCenterDesc))
		return 0;
	else
		return 1;
}
	
int CWriteableDataCenterDesc::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			DataCenterID=token;
		}
		else
		{
			DataCenterID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartMode=token;
		}
		else
		{
			StartMode="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"DataCenterID"))
			{
				DataCenterID=token;
			}
			else if (!strcmp(fieldName,"StartMode"))
			{
				StartMode=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableDataCenterDesc::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableDataCenterDesc),output)!=sizeof(CWriteableDataCenterDesc))
		return 0;
	else
		return 1;
}

int CWriteableDataCenterDesc::writeCSV(FILE *output) const
{
	char buffer[1025];
	DataCenterID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableDataCenterDesc::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCDataCenterDesc%s = {\n", index_buf);
	DataCenterID.getString(buf);
	fprintf(fp,"\t\tDataCenterID = %s    [数据中心代码]\n",buf);	
	StartMode.getString(buf);
	fprintf(fp,"\t\tStartMode = %s    [启动模式]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableDataCenterDesc::dumpDiff(FILE *fp, const CWriteableDataCenterDesc *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCDataCenterDesc = {\n");
	DataCenterID.getString(buf);
	if (compare(DataCenterID.getValue(),pOriginal->DataCenterID.getValue())!=0)
	{
		pOriginal->DataCenterID.getString(bufOriginal);
		fprintf(fp,"\t\tDataCenterID = %s -> %s    [数据中心代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDataCenterID = %s    [数据中心代码]\n",buf);
	}
	StartMode.getString(buf);
	if (compare(StartMode.getValue(),pOriginal->StartMode.getValue())!=0)
	{
		pOriginal->StartMode.getString(bufOriginal);
		fprintf(fp,"\t\tStartMode = %s -> %s    [启动模式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartMode = %s    [启动模式]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableDataCenterDesc::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	DataCenterID.getString(buf);
	fprintf(fp,",DataCenterID,%s",buf);	
	StartMode.getString(buf);
	fprintf(fp,",StartMode,%s",buf);	
}

void CWriteableDataCenterDesc::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	DataCenterID.getString(buf);
	sprintf(p,"DataCenterID=%s,",buf);
	p+=strlen(p);
	StartMode.getString(buf);
	sprintf(p,"StartMode=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableDataCenterDesc::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CDataCenterDesc");
	pLogger->output(indent,0,"{");
	DataCenterID.getString(buf);
	pLogger->output(indent+1,0,"DataCenterID=%s 数据中心代码",buf);
	StartMode.getString(buf);
	pLogger->output(indent+1,0,"StartMode=%s 启动模式",buf);
	pLogger->output(indent,0,"}");
}

CDataCenterDescIterator::~CDataCenterDescIterator(void)
{
}


void CDataCenterDescIterator::dump(FILE *output)
{
	CDataCenterDesc *pDataCenterDesc;
	
	while ((pDataCenterDesc=next())!=NULL)
	{
		pDataCenterDesc->dump(output);
	}
}



void CWriteableExchange::writeCSVHead(FILE *output)
{
	fprintf(output,"ExchangeID,ExchangeName\n");
}
	
void CWriteableExchange::init(void)
{
	ExchangeID.clear();
	ExchangeName.clear();
}

int CWriteableExchange::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableExchange),input)!=sizeof(CWriteableExchange))
		return 0;
	else
		return 1;
}
	
int CWriteableExchange::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ExchangeID=token;
		}
		else
		{
			ExchangeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExchangeName=token;
		}
		else
		{
			ExchangeName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ExchangeID"))
			{
				ExchangeID=token;
			}
			else if (!strcmp(fieldName,"ExchangeName"))
			{
				ExchangeName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableExchange::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableExchange),output)!=sizeof(CWriteableExchange))
		return 0;
	else
		return 1;
}

int CWriteableExchange::writeCSV(FILE *output) const
{
	char buffer[1025];
	ExchangeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExchangeName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableExchange::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCExchange%s = {\n", index_buf);
	ExchangeID.getString(buf);
	fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);	
	ExchangeName.getString(buf);
	fprintf(fp,"\t\tExchangeName = %s    [交易所名称]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableExchange::dumpDiff(FILE *fp, const CWriteableExchange *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCExchange = {\n");
	ExchangeID.getString(buf);
	if (compare(ExchangeID.getValue(),pOriginal->ExchangeID.getValue())!=0)
	{
		pOriginal->ExchangeID.getString(bufOriginal);
		fprintf(fp,"\t\tExchangeID = %s -> %s    [交易所代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);
	}
	ExchangeName.getString(buf);
	if (compare(ExchangeName.getValue(),pOriginal->ExchangeName.getValue())!=0)
	{
		pOriginal->ExchangeName.getString(bufOriginal);
		fprintf(fp,"\t\tExchangeName = %s -> %s    [交易所名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExchangeName = %s    [交易所名称]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableExchange::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ExchangeID.getString(buf);
	fprintf(fp,",ExchangeID,%s",buf);	
	ExchangeName.getString(buf);
	fprintf(fp,",ExchangeName,%s",buf);	
}

void CWriteableExchange::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ExchangeID.getString(buf);
	sprintf(p,"ExchangeID=%s,",buf);
	p+=strlen(p);
	ExchangeName.getString(buf);
	sprintf(p,"ExchangeName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableExchange::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CExchange");
	pLogger->output(indent,0,"{");
	ExchangeID.getString(buf);
	pLogger->output(indent+1,0,"ExchangeID=%s 交易所代码",buf);
	ExchangeName.getString(buf);
	pLogger->output(indent+1,0,"ExchangeName=%s 交易所名称",buf);
	pLogger->output(indent,0,"}");
}

CExchangeIterator::~CExchangeIterator(void)
{
}


void CExchangeIterator::dump(FILE *output)
{
	CExchange *pExchange;
	
	while ((pExchange=next())!=NULL)
	{
		pExchange->dump(output);
	}
}



void CWriteableSettlementGroup::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,SettlementGroupName,ExchangeID,Currency\n");
}
	
void CWriteableSettlementGroup::init(void)
{
	SettlementGroupID.clear();
	SettlementGroupName.clear();
	ExchangeID.clear();
	Currency.clear();
}

int CWriteableSettlementGroup::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableSettlementGroup),input)!=sizeof(CWriteableSettlementGroup))
		return 0;
	else
		return 1;
}
	
int CWriteableSettlementGroup::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupName=token;
		}
		else
		{
			SettlementGroupName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExchangeID=token;
		}
		else
		{
			ExchangeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Currency=token;
		}
		else
		{
			Currency="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupName"))
			{
				SettlementGroupName=token;
			}
			else if (!strcmp(fieldName,"ExchangeID"))
			{
				ExchangeID=token;
			}
			else if (!strcmp(fieldName,"Currency"))
			{
				Currency=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableSettlementGroup::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableSettlementGroup),output)!=sizeof(CWriteableSettlementGroup))
		return 0;
	else
		return 1;
}

int CWriteableSettlementGroup::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExchangeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Currency.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableSettlementGroup::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCSettlementGroup%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementGroupName.getString(buf);
	fprintf(fp,"\t\tSettlementGroupName = %s    [结算组名称]\n",buf);	
	ExchangeID.getString(buf);
	fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);	
	Currency.getString(buf);
	fprintf(fp,"\t\tCurrency = %s    [币种]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableSettlementGroup::dumpDiff(FILE *fp, const CWriteableSettlementGroup *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCSettlementGroup = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementGroupName.getString(buf);
	if (compare(SettlementGroupName.getValue(),pOriginal->SettlementGroupName.getValue())!=0)
	{
		pOriginal->SettlementGroupName.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupName = %s -> %s    [结算组名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupName = %s    [结算组名称]\n",buf);
	}
	ExchangeID.getString(buf);
	if (compare(ExchangeID.getValue(),pOriginal->ExchangeID.getValue())!=0)
	{
		pOriginal->ExchangeID.getString(bufOriginal);
		fprintf(fp,"\t\tExchangeID = %s -> %s    [交易所代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExchangeID = %s    [交易所代码]\n",buf);
	}
	Currency.getString(buf);
	if (compare(Currency.getValue(),pOriginal->Currency.getValue())!=0)
	{
		pOriginal->Currency.getString(bufOriginal);
		fprintf(fp,"\t\tCurrency = %s -> %s    [币种]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrency = %s    [币种]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableSettlementGroup::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementGroupName.getString(buf);
	fprintf(fp,",SettlementGroupName,%s",buf);	
	ExchangeID.getString(buf);
	fprintf(fp,",ExchangeID,%s",buf);	
	Currency.getString(buf);
	fprintf(fp,",Currency,%s",buf);	
}

void CWriteableSettlementGroup::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementGroupName.getString(buf);
	sprintf(p,"SettlementGroupName=%s,",buf);
	p+=strlen(p);
	ExchangeID.getString(buf);
	sprintf(p,"ExchangeID=%s,",buf);
	p+=strlen(p);
	Currency.getString(buf);
	sprintf(p,"Currency=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableSettlementGroup::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CSettlementGroup");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementGroupName.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupName=%s 结算组名称",buf);
	ExchangeID.getString(buf);
	pLogger->output(indent+1,0,"ExchangeID=%s 交易所代码",buf);
	Currency.getString(buf);
	pLogger->output(indent+1,0,"Currency=%s 币种",buf);
	pLogger->output(indent,0,"}");
}

CSettlementGroupIterator::~CSettlementGroupIterator(void)
{
}


void CSettlementGroupIterator::dump(FILE *output)
{
	CSettlementGroup *pSettlementGroup;
	
	while ((pSettlementGroup=next())!=NULL)
	{
		pSettlementGroup->dump(output);
	}
}



void CWriteableMarket::writeCSVHead(FILE *output)
{
	fprintf(output,"MarketID,MarketName\n");
}
	
void CWriteableMarket::init(void)
{
	MarketID.clear();
	MarketName.clear();
}

int CWriteableMarket::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarket),input)!=sizeof(CWriteableMarket))
		return 0;
	else
		return 1;
}
	
int CWriteableMarket::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MarketID=token;
		}
		else
		{
			MarketID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketName=token;
		}
		else
		{
			MarketName="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MarketID"))
			{
				MarketID=token;
			}
			else if (!strcmp(fieldName,"MarketName"))
			{
				MarketName=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarket::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarket),output)!=sizeof(CWriteableMarket))
		return 0;
	else
		return 1;
}

int CWriteableMarket::writeCSV(FILE *output) const
{
	char buffer[1025];
	MarketID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarket::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarket%s = {\n", index_buf);
	MarketID.getString(buf);
	fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);	
	MarketName.getString(buf);
	fprintf(fp,"\t\tMarketName = %s    [市场名称]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarket::dumpDiff(FILE *fp, const CWriteableMarket *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarket = {\n");
	MarketID.getString(buf);
	if (compare(MarketID.getValue(),pOriginal->MarketID.getValue())!=0)
	{
		pOriginal->MarketID.getString(bufOriginal);
		fprintf(fp,"\t\tMarketID = %s -> %s    [市场代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);
	}
	MarketName.getString(buf);
	if (compare(MarketName.getValue(),pOriginal->MarketName.getValue())!=0)
	{
		pOriginal->MarketName.getString(bufOriginal);
		fprintf(fp,"\t\tMarketName = %s -> %s    [市场名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketName = %s    [市场名称]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarket::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MarketID.getString(buf);
	fprintf(fp,",MarketID,%s",buf);	
	MarketName.getString(buf);
	fprintf(fp,",MarketName,%s",buf);	
}

void CWriteableMarket::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MarketID.getString(buf);
	sprintf(p,"MarketID=%s,",buf);
	p+=strlen(p);
	MarketName.getString(buf);
	sprintf(p,"MarketName=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarket::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarket");
	pLogger->output(indent,0,"{");
	MarketID.getString(buf);
	pLogger->output(indent+1,0,"MarketID=%s 市场代码",buf);
	MarketName.getString(buf);
	pLogger->output(indent+1,0,"MarketName=%s 市场名称",buf);
	pLogger->output(indent,0,"}");
}

CMarketIterator::~CMarketIterator(void)
{
}


void CMarketIterator::dump(FILE *output)
{
	CMarket *pMarket;
	
	while ((pMarket=next())!=NULL)
	{
		pMarket->dump(output);
	}
}



void CWriteableMarketProduct::writeCSVHead(FILE *output)
{
	fprintf(output,"MarketID,ProductID\n");
}
	
void CWriteableMarketProduct::init(void)
{
	MarketID.clear();
	ProductID.clear();
}

int CWriteableMarketProduct::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketProduct),input)!=sizeof(CWriteableMarketProduct))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketProduct::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MarketID=token;
		}
		else
		{
			MarketID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MarketID"))
			{
				MarketID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketProduct::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketProduct),output)!=sizeof(CWriteableMarketProduct))
		return 0;
	else
		return 1;
}

int CWriteableMarketProduct::writeCSV(FILE *output) const
{
	char buffer[1025];
	MarketID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketProduct::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketProduct%s = {\n", index_buf);
	MarketID.getString(buf);
	fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketProduct::dumpDiff(FILE *fp, const CWriteableMarketProduct *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketProduct = {\n");
	MarketID.getString(buf);
	if (compare(MarketID.getValue(),pOriginal->MarketID.getValue())!=0)
	{
		pOriginal->MarketID.getString(bufOriginal);
		fprintf(fp,"\t\tMarketID = %s -> %s    [市场代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketProduct::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MarketID.getString(buf);
	fprintf(fp,",MarketID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
}

void CWriteableMarketProduct::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MarketID.getString(buf);
	sprintf(p,"MarketID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketProduct::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketProduct");
	pLogger->output(indent,0,"{");
	MarketID.getString(buf);
	pLogger->output(indent+1,0,"MarketID=%s 市场代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	pLogger->output(indent,0,"}");
}

CMarketProductIterator::~CMarketProductIterator(void)
{
}


void CMarketProductIterator::dump(FILE *output)
{
	CMarketProduct *pMarketProduct;
	
	while ((pMarketProduct=next())!=NULL)
	{
		pMarketProduct->dump(output);
	}
}



void CWriteableMarketProductGroup::writeCSVHead(FILE *output)
{
	fprintf(output,"MarketID,ProductGroupID\n");
}
	
void CWriteableMarketProductGroup::init(void)
{
	MarketID.clear();
	ProductGroupID.clear();
}

int CWriteableMarketProductGroup::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketProductGroup),input)!=sizeof(CWriteableMarketProductGroup))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketProductGroup::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MarketID=token;
		}
		else
		{
			MarketID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductGroupID=token;
		}
		else
		{
			ProductGroupID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MarketID"))
			{
				MarketID=token;
			}
			else if (!strcmp(fieldName,"ProductGroupID"))
			{
				ProductGroupID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketProductGroup::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketProductGroup),output)!=sizeof(CWriteableMarketProductGroup))
		return 0;
	else
		return 1;
}

int CWriteableMarketProductGroup::writeCSV(FILE *output) const
{
	char buffer[1025];
	MarketID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketProductGroup::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketProductGroup%s = {\n", index_buf);
	MarketID.getString(buf);
	fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);	
	ProductGroupID.getString(buf);
	fprintf(fp,"\t\tProductGroupID = %s    [产品组代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketProductGroup::dumpDiff(FILE *fp, const CWriteableMarketProductGroup *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketProductGroup = {\n");
	MarketID.getString(buf);
	if (compare(MarketID.getValue(),pOriginal->MarketID.getValue())!=0)
	{
		pOriginal->MarketID.getString(bufOriginal);
		fprintf(fp,"\t\tMarketID = %s -> %s    [市场代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);
	}
	ProductGroupID.getString(buf);
	if (compare(ProductGroupID.getValue(),pOriginal->ProductGroupID.getValue())!=0)
	{
		pOriginal->ProductGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tProductGroupID = %s -> %s    [产品组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductGroupID = %s    [产品组代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketProductGroup::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MarketID.getString(buf);
	fprintf(fp,",MarketID,%s",buf);	
	ProductGroupID.getString(buf);
	fprintf(fp,",ProductGroupID,%s",buf);	
}

void CWriteableMarketProductGroup::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MarketID.getString(buf);
	sprintf(p,"MarketID=%s,",buf);
	p+=strlen(p);
	ProductGroupID.getString(buf);
	sprintf(p,"ProductGroupID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketProductGroup::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketProductGroup");
	pLogger->output(indent,0,"{");
	MarketID.getString(buf);
	pLogger->output(indent+1,0,"MarketID=%s 市场代码",buf);
	ProductGroupID.getString(buf);
	pLogger->output(indent+1,0,"ProductGroupID=%s 产品组代码",buf);
	pLogger->output(indent,0,"}");
}

CMarketProductGroupIterator::~CMarketProductGroupIterator(void)
{
}


void CMarketProductGroupIterator::dump(FILE *output)
{
	CMarketProductGroup *pMarketProductGroup;
	
	while ((pMarketProductGroup=next())!=NULL)
	{
		pMarketProductGroup->dump(output);
	}
}



void CWriteableMdPubStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"ProductID,InstrumentStatus,MdPubStatus\n");
}
	
void CWriteableMdPubStatus::init(void)
{
	ProductID.clear();
	InstrumentStatus.clear();
	MdPubStatus.clear();
}

int CWriteableMdPubStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMdPubStatus),input)!=sizeof(CWriteableMdPubStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableMdPubStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MdPubStatus=token;
		}
		else
		{
			MdPubStatus="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"MdPubStatus"))
			{
				MdPubStatus=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMdPubStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMdPubStatus),output)!=sizeof(CWriteableMdPubStatus))
		return 0;
	else
		return 1;
}

int CWriteableMdPubStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MdPubStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMdPubStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMdPubStatus%s = {\n", index_buf);
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	MdPubStatus.getString(buf);
	fprintf(fp,"\t\tMdPubStatus = %s    [行情发布状态]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMdPubStatus::dumpDiff(FILE *fp, const CWriteableMdPubStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMdPubStatus = {\n");
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	MdPubStatus.getString(buf);
	if (compare(MdPubStatus.getValue(),pOriginal->MdPubStatus.getValue())!=0)
	{
		pOriginal->MdPubStatus.getString(bufOriginal);
		fprintf(fp,"\t\tMdPubStatus = %s -> %s    [行情发布状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMdPubStatus = %s    [行情发布状态]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMdPubStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	MdPubStatus.getString(buf);
	fprintf(fp,",MdPubStatus,%s",buf);	
}

void CWriteableMdPubStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	MdPubStatus.getString(buf);
	sprintf(p,"MdPubStatus=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMdPubStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMdPubStatus");
	pLogger->output(indent,0,"{");
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	MdPubStatus.getString(buf);
	pLogger->output(indent+1,0,"MdPubStatus=%s 行情发布状态",buf);
	pLogger->output(indent,0,"}");
}

CMdPubStatusIterator::~CMdPubStatusIterator(void)
{
}


void CMdPubStatusIterator::dump(FILE *output)
{
	CMdPubStatus *pMdPubStatus;
	
	while ((pMdPubStatus=next())!=NULL)
	{
		pMdPubStatus->dump(output);
	}
}



void CWriteableMarketDataTopic::writeCSVHead(FILE *output)
{
	fprintf(output,"NextPublishTime,NextLogID,TopicID,TopicName,MarketID,SnapShotFeq,MarketDataDepth,DelaySeconds,MarketDataMode\n");
}
	
void CWriteableMarketDataTopic::init(void)
{
	NextPublishTime.clear();
	NextLogID.clear();
	TopicID.clear();
	TopicName.clear();
	MarketID.clear();
	SnapShotFeq.clear();
	MarketDataDepth.clear();
	DelaySeconds.clear();
	MarketDataMode.clear();
}

int CWriteableMarketDataTopic::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketDataTopic),input)!=sizeof(CWriteableMarketDataTopic))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketDataTopic::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			NextPublishTime=token;
		}
		else
		{
			NextPublishTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NextLogID=token;
		}
		else
		{
			NextLogID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TopicID=token;
		}
		else
		{
			TopicID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TopicName=token;
		}
		else
		{
			TopicName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketID=token;
		}
		else
		{
			MarketID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SnapShotFeq=token;
		}
		else
		{
			SnapShotFeq="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketDataDepth=token;
		}
		else
		{
			MarketDataDepth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DelaySeconds=token;
		}
		else
		{
			DelaySeconds="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketDataMode=token;
		}
		else
		{
			MarketDataMode="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"NextPublishTime"))
			{
				NextPublishTime=token;
			}
			else if (!strcmp(fieldName,"NextLogID"))
			{
				NextLogID=token;
			}
			else if (!strcmp(fieldName,"TopicID"))
			{
				TopicID=token;
			}
			else if (!strcmp(fieldName,"TopicName"))
			{
				TopicName=token;
			}
			else if (!strcmp(fieldName,"MarketID"))
			{
				MarketID=token;
			}
			else if (!strcmp(fieldName,"SnapShotFeq"))
			{
				SnapShotFeq=token;
			}
			else if (!strcmp(fieldName,"MarketDataDepth"))
			{
				MarketDataDepth=token;
			}
			else if (!strcmp(fieldName,"DelaySeconds"))
			{
				DelaySeconds=token;
			}
			else if (!strcmp(fieldName,"MarketDataMode"))
			{
				MarketDataMode=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketDataTopic::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketDataTopic),output)!=sizeof(CWriteableMarketDataTopic))
		return 0;
	else
		return 1;
}

int CWriteableMarketDataTopic::writeCSV(FILE *output) const
{
	char buffer[1025];
	NextPublishTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NextLogID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TopicID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TopicName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SnapShotFeq.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketDataDepth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DelaySeconds.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketDataMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketDataTopic::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketDataTopic%s = {\n", index_buf);
	NextPublishTime.getString(buf);
	fprintf(fp,"\t\tNextPublishTime = %s    [下次发布行情时间]\n",buf);	
	NextLogID.getString(buf);
	fprintf(fp,"\t\tNextLogID = %s    [下次要读的行情流水序号]\n",buf);	
	TopicID.getString(buf);
	fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);	
	TopicName.getString(buf);
	fprintf(fp,"\t\tTopicName = %s    [主题名称]\n",buf);	
	MarketID.getString(buf);
	fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);	
	SnapShotFeq.getString(buf);
	fprintf(fp,"\t\tSnapShotFeq = %s    [采样频率]\n",buf);	
	MarketDataDepth.getString(buf);
	fprintf(fp,"\t\tMarketDataDepth = %s    [市场行情深度]\n",buf);	
	DelaySeconds.getString(buf);
	fprintf(fp,"\t\tDelaySeconds = %s    [延迟秒数]\n",buf);	
	MarketDataMode.getString(buf);
	fprintf(fp,"\t\tMarketDataMode = %s    [行情模式]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataTopic::dumpDiff(FILE *fp, const CWriteableMarketDataTopic *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketDataTopic = {\n");
	NextPublishTime.getString(buf);
	if (compare(NextPublishTime.getValue(),pOriginal->NextPublishTime.getValue())!=0)
	{
		pOriginal->NextPublishTime.getString(bufOriginal);
		fprintf(fp,"\t\tNextPublishTime = %s -> %s    [下次发布行情时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNextPublishTime = %s    [下次发布行情时间]\n",buf);
	}
	NextLogID.getString(buf);
	if (compare(NextLogID.getValue(),pOriginal->NextLogID.getValue())!=0)
	{
		pOriginal->NextLogID.getString(bufOriginal);
		fprintf(fp,"\t\tNextLogID = %s -> %s    [下次要读的行情流水序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNextLogID = %s    [下次要读的行情流水序号]\n",buf);
	}
	TopicID.getString(buf);
	if (compare(TopicID.getValue(),pOriginal->TopicID.getValue())!=0)
	{
		pOriginal->TopicID.getString(bufOriginal);
		fprintf(fp,"\t\tTopicID = %s -> %s    [主题代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);
	}
	TopicName.getString(buf);
	if (compare(TopicName.getValue(),pOriginal->TopicName.getValue())!=0)
	{
		pOriginal->TopicName.getString(bufOriginal);
		fprintf(fp,"\t\tTopicName = %s -> %s    [主题名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTopicName = %s    [主题名称]\n",buf);
	}
	MarketID.getString(buf);
	if (compare(MarketID.getValue(),pOriginal->MarketID.getValue())!=0)
	{
		pOriginal->MarketID.getString(bufOriginal);
		fprintf(fp,"\t\tMarketID = %s -> %s    [市场代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);
	}
	SnapShotFeq.getString(buf);
	if (compare(SnapShotFeq.getValue(),pOriginal->SnapShotFeq.getValue())!=0)
	{
		pOriginal->SnapShotFeq.getString(bufOriginal);
		fprintf(fp,"\t\tSnapShotFeq = %s -> %s    [采样频率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSnapShotFeq = %s    [采样频率]\n",buf);
	}
	MarketDataDepth.getString(buf);
	if (compare(MarketDataDepth.getValue(),pOriginal->MarketDataDepth.getValue())!=0)
	{
		pOriginal->MarketDataDepth.getString(bufOriginal);
		fprintf(fp,"\t\tMarketDataDepth = %s -> %s    [市场行情深度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketDataDepth = %s    [市场行情深度]\n",buf);
	}
	DelaySeconds.getString(buf);
	if (compare(DelaySeconds.getValue(),pOriginal->DelaySeconds.getValue())!=0)
	{
		pOriginal->DelaySeconds.getString(bufOriginal);
		fprintf(fp,"\t\tDelaySeconds = %s -> %s    [延迟秒数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDelaySeconds = %s    [延迟秒数]\n",buf);
	}
	MarketDataMode.getString(buf);
	if (compare(MarketDataMode.getValue(),pOriginal->MarketDataMode.getValue())!=0)
	{
		pOriginal->MarketDataMode.getString(bufOriginal);
		fprintf(fp,"\t\tMarketDataMode = %s -> %s    [行情模式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketDataMode = %s    [行情模式]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataTopic::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	NextPublishTime.getString(buf);
	fprintf(fp,",NextPublishTime,%s",buf);	
	NextLogID.getString(buf);
	fprintf(fp,",NextLogID,%s",buf);	
	TopicID.getString(buf);
	fprintf(fp,",TopicID,%s",buf);	
	TopicName.getString(buf);
	fprintf(fp,",TopicName,%s",buf);	
	MarketID.getString(buf);
	fprintf(fp,",MarketID,%s",buf);	
	SnapShotFeq.getString(buf);
	fprintf(fp,",SnapShotFeq,%s",buf);	
	MarketDataDepth.getString(buf);
	fprintf(fp,",MarketDataDepth,%s",buf);	
	DelaySeconds.getString(buf);
	fprintf(fp,",DelaySeconds,%s",buf);	
	MarketDataMode.getString(buf);
	fprintf(fp,",MarketDataMode,%s",buf);	
}

void CWriteableMarketDataTopic::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	NextPublishTime.getString(buf);
	sprintf(p,"NextPublishTime=%s,",buf);
	p+=strlen(p);
	NextLogID.getString(buf);
	sprintf(p,"NextLogID=%s,",buf);
	p+=strlen(p);
	TopicID.getString(buf);
	sprintf(p,"TopicID=%s,",buf);
	p+=strlen(p);
	TopicName.getString(buf);
	sprintf(p,"TopicName=%s,",buf);
	p+=strlen(p);
	MarketID.getString(buf);
	sprintf(p,"MarketID=%s,",buf);
	p+=strlen(p);
	SnapShotFeq.getString(buf);
	sprintf(p,"SnapShotFeq=%s,",buf);
	p+=strlen(p);
	MarketDataDepth.getString(buf);
	sprintf(p,"MarketDataDepth=%s,",buf);
	p+=strlen(p);
	DelaySeconds.getString(buf);
	sprintf(p,"DelaySeconds=%s,",buf);
	p+=strlen(p);
	MarketDataMode.getString(buf);
	sprintf(p,"MarketDataMode=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketDataTopic::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketDataTopic");
	pLogger->output(indent,0,"{");
	NextPublishTime.getString(buf);
	pLogger->output(indent+1,0,"NextPublishTime=%s 下次发布行情时间",buf);
	NextLogID.getString(buf);
	pLogger->output(indent+1,0,"NextLogID=%s 下次要读的行情流水序号",buf);
	TopicID.getString(buf);
	pLogger->output(indent+1,0,"TopicID=%s 主题代码",buf);
	TopicName.getString(buf);
	pLogger->output(indent+1,0,"TopicName=%s 主题名称",buf);
	MarketID.getString(buf);
	pLogger->output(indent+1,0,"MarketID=%s 市场代码",buf);
	SnapShotFeq.getString(buf);
	pLogger->output(indent+1,0,"SnapShotFeq=%s 采样频率",buf);
	MarketDataDepth.getString(buf);
	pLogger->output(indent+1,0,"MarketDataDepth=%s 市场行情深度",buf);
	DelaySeconds.getString(buf);
	pLogger->output(indent+1,0,"DelaySeconds=%s 延迟秒数",buf);
	MarketDataMode.getString(buf);
	pLogger->output(indent+1,0,"MarketDataMode=%s 行情模式",buf);
	pLogger->output(indent,0,"}");
}

CMarketDataTopicIterator::~CMarketDataTopicIterator(void)
{
}


void CMarketDataTopicIterator::dump(FILE *output)
{
	CMarketDataTopic *pMarketDataTopic;
	
	while ((pMarketDataTopic=next())!=NULL)
	{
		pMarketDataTopic->dump(output);
	}
}



void CWriteablePartTopicSubscribe::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,ParticipantType,TopicID\n");
}
	
void CWriteablePartTopicSubscribe::init(void)
{
	ParticipantID.clear();
	ParticipantType.clear();
	TopicID.clear();
}

int CWriteablePartTopicSubscribe::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartTopicSubscribe),input)!=sizeof(CWriteablePartTopicSubscribe))
		return 0;
	else
		return 1;
}
	
int CWriteablePartTopicSubscribe::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantType=token;
		}
		else
		{
			ParticipantType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TopicID=token;
		}
		else
		{
			TopicID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ParticipantType"))
			{
				ParticipantType=token;
			}
			else if (!strcmp(fieldName,"TopicID"))
			{
				TopicID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartTopicSubscribe::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartTopicSubscribe),output)!=sizeof(CWriteablePartTopicSubscribe))
		return 0;
	else
		return 1;
}

int CWriteablePartTopicSubscribe::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TopicID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartTopicSubscribe::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartTopicSubscribe%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [参与者代码]\n",buf);	
	ParticipantType.getString(buf);
	fprintf(fp,"\t\tParticipantType = %s    [参与者类型]\n",buf);	
	TopicID.getString(buf);
	fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartTopicSubscribe::dumpDiff(FILE *fp, const CWriteablePartTopicSubscribe *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartTopicSubscribe = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [参与者代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [参与者代码]\n",buf);
	}
	ParticipantType.getString(buf);
	if (compare(ParticipantType.getValue(),pOriginal->ParticipantType.getValue())!=0)
	{
		pOriginal->ParticipantType.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantType = %s -> %s    [参与者类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantType = %s    [参与者类型]\n",buf);
	}
	TopicID.getString(buf);
	if (compare(TopicID.getValue(),pOriginal->TopicID.getValue())!=0)
	{
		pOriginal->TopicID.getString(bufOriginal);
		fprintf(fp,"\t\tTopicID = %s -> %s    [主题代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartTopicSubscribe::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ParticipantType.getString(buf);
	fprintf(fp,",ParticipantType,%s",buf);	
	TopicID.getString(buf);
	fprintf(fp,",TopicID,%s",buf);	
}

void CWriteablePartTopicSubscribe::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ParticipantType.getString(buf);
	sprintf(p,"ParticipantType=%s,",buf);
	p+=strlen(p);
	TopicID.getString(buf);
	sprintf(p,"TopicID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartTopicSubscribe::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartTopicSubscribe");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 参与者代码",buf);
	ParticipantType.getString(buf);
	pLogger->output(indent+1,0,"ParticipantType=%s 参与者类型",buf);
	TopicID.getString(buf);
	pLogger->output(indent+1,0,"TopicID=%s 主题代码",buf);
	pLogger->output(indent,0,"}");
}

CPartTopicSubscribeIterator::~CPartTopicSubscribeIterator(void)
{
}


void CPartTopicSubscribeIterator::dump(FILE *output)
{
	CPartTopicSubscribe *pPartTopicSubscribe;
	
	while ((pPartTopicSubscribe=next())!=NULL)
	{
		pPartTopicSubscribe->dump(output);
	}
}



void CWriteableParticipant::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,ParticipantName,ParticipantAbbr,MemberType,IsActive\n");
}
	
void CWriteableParticipant::init(void)
{
	ParticipantID.clear();
	ParticipantName.clear();
	ParticipantAbbr.clear();
	MemberType.clear();
	IsActive.clear();
	pClearingTradingPart=NULL;
}

int CWriteableParticipant::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableParticipant),input)!=sizeof(CWriteableParticipant))
		return 0;
	else
		return 1;
}
	
int CWriteableParticipant::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantName=token;
		}
		else
		{
			ParticipantName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantAbbr=token;
		}
		else
		{
			ParticipantAbbr="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MemberType=token;
		}
		else
		{
			MemberType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ParticipantName"))
			{
				ParticipantName=token;
			}
			else if (!strcmp(fieldName,"ParticipantAbbr"))
			{
				ParticipantAbbr=token;
			}
			else if (!strcmp(fieldName,"MemberType"))
			{
				MemberType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableParticipant::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableParticipant),output)!=sizeof(CWriteableParticipant))
		return 0;
	else
		return 1;
}

int CWriteableParticipant::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantAbbr.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MemberType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableParticipant::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCParticipant%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);	
	MemberType.getString(buf);
	fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableParticipant::dumpDiff(FILE *fp, const CWriteableParticipant *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCParticipant = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ParticipantName.getString(buf);
	if (compare(ParticipantName.getValue(),pOriginal->ParticipantName.getValue())!=0)
	{
		pOriginal->ParticipantName.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantName = %s -> %s    [会员名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantName = %s    [会员名称]\n",buf);
	}
	ParticipantAbbr.getString(buf);
	if (compare(ParticipantAbbr.getValue(),pOriginal->ParticipantAbbr.getValue())!=0)
	{
		pOriginal->ParticipantAbbr.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantAbbr = %s -> %s    [会员简称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantAbbr = %s    [会员简称]\n",buf);
	}
	MemberType.getString(buf);
	if (compare(MemberType.getValue(),pOriginal->MemberType.getValue())!=0)
	{
		pOriginal->MemberType.getString(bufOriginal);
		fprintf(fp,"\t\tMemberType = %s -> %s    [会员类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMemberType = %s    [会员类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableParticipant::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ParticipantName.getString(buf);
	fprintf(fp,",ParticipantName,%s",buf);	
	ParticipantAbbr.getString(buf);
	fprintf(fp,",ParticipantAbbr,%s",buf);	
	MemberType.getString(buf);
	fprintf(fp,",MemberType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
}

void CWriteableParticipant::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ParticipantName.getString(buf);
	sprintf(p,"ParticipantName=%s,",buf);
	p+=strlen(p);
	ParticipantAbbr.getString(buf);
	sprintf(p,"ParticipantAbbr=%s,",buf);
	p+=strlen(p);
	MemberType.getString(buf);
	sprintf(p,"MemberType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableParticipant::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CParticipant");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ParticipantName.getString(buf);
	pLogger->output(indent+1,0,"ParticipantName=%s 会员名称",buf);
	ParticipantAbbr.getString(buf);
	pLogger->output(indent+1,0,"ParticipantAbbr=%s 会员简称",buf);
	MemberType.getString(buf);
	pLogger->output(indent+1,0,"MemberType=%s 会员类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	pLogger->output(indent,0,"}");
}

CParticipantIterator::~CParticipantIterator(void)
{
}


void CParticipantIterator::dump(FILE *output)
{
	CParticipant *pParticipant;
	
	while ((pParticipant=next())!=NULL)
	{
		pParticipant->dump(output);
	}
}



void CWriteableUser::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,UserID,UserType,Password,IsActive\n");
}
	
void CWriteableUser::init(void)
{
	ParticipantID.clear();
	UserID.clear();
	UserType.clear();
	Password.clear();
	IsActive.clear();
}

int CWriteableUser::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUser),input)!=sizeof(CWriteableUser))
		return 0;
	else
		return 1;
}
	
int CWriteableUser::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserType=token;
		}
		else
		{
			UserType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Password=token;
		}
		else
		{
			Password="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"UserType"))
			{
				UserType=token;
			}
			else if (!strcmp(fieldName,"Password"))
			{
				Password=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUser::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUser),output)!=sizeof(CWriteableUser))
		return 0;
	else
		return 1;
}

int CWriteableUser::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Password.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUser::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUser%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	UserType.getString(buf);
	fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);	
	Password.getString(buf);
	fprintf(fp,"\t\tPassword = %s    [密码]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [交易员权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUser::dumpDiff(FILE *fp, const CWriteableUser *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUser = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	UserType.getString(buf);
	if (compare(UserType.getValue(),pOriginal->UserType.getValue())!=0)
	{
		pOriginal->UserType.getString(bufOriginal);
		fprintf(fp,"\t\tUserType = %s -> %s    [交易用户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);
	}
	Password.getString(buf);
	if (compare(Password.getValue(),pOriginal->Password.getValue())!=0)
	{
		pOriginal->Password.getString(bufOriginal);
		fprintf(fp,"\t\tPassword = %s -> %s    [密码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPassword = %s    [密码]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [交易员权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [交易员权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUser::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	UserType.getString(buf);
	fprintf(fp,",UserType,%s",buf);	
	Password.getString(buf);
	fprintf(fp,",Password,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
}

void CWriteableUser::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	UserType.getString(buf);
	sprintf(p,"UserType=%s,",buf);
	p+=strlen(p);
	Password.getString(buf);
	sprintf(p,"Password=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUser::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUser");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	UserType.getString(buf);
	pLogger->output(indent+1,0,"UserType=%s 交易用户类型",buf);
	Password.getString(buf);
	pLogger->output(indent+1,0,"Password=%s 密码",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 交易员权限",buf);
	pLogger->output(indent,0,"}");
}

CUserIterator::~CUserIterator(void)
{
}


void CUserIterator::dump(FILE *output)
{
	CUser *pUser;
	
	while ((pUser=next())!=NULL)
	{
		pUser->dump(output);
	}
}



void CWriteableClient::writeCSVHead(FILE *output)
{
	fprintf(output,"ClientID,ClientName,IdentifiedCardType,IdentifiedCardNo,TradingRole,ClientType,IsActive\n");
}
	
void CWriteableClient::init(void)
{
	ClientID.clear();
	ClientName.clear();
	IdentifiedCardType.clear();
	IdentifiedCardNo.clear();
	TradingRole.clear();
	ClientType.clear();
	IsActive.clear();
}

int CWriteableClient::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClient),input)!=sizeof(CWriteableClient))
		return 0;
	else
		return 1;
}
	
int CWriteableClient::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientName=token;
		}
		else
		{
			ClientName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardType=token;
		}
		else
		{
			IdentifiedCardType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IdentifiedCardNo=token;
		}
		else
		{
			IdentifiedCardNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"ClientName"))
			{
				ClientName=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardType"))
			{
				IdentifiedCardType=token;
			}
			else if (!strcmp(fieldName,"IdentifiedCardNo"))
			{
				IdentifiedCardNo=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClient::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClient),output)!=sizeof(CWriteableClient))
		return 0;
	else
		return 1;
}

int CWriteableClient::writeCSV(FILE *output) const
{
	char buffer[1025];
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IdentifiedCardNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClient::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClient%s = {\n", index_buf);
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	ClientName.getString(buf);
	fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClient::dumpDiff(FILE *fp, const CWriteableClient *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClient = {\n");
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	ClientName.getString(buf);
	if (compare(ClientName.getValue(),pOriginal->ClientName.getValue())!=0)
	{
		pOriginal->ClientName.getString(bufOriginal);
		fprintf(fp,"\t\tClientName = %s -> %s    [客户名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientName = %s    [客户名称]\n",buf);
	}
	IdentifiedCardType.getString(buf);
	if (compare(IdentifiedCardType.getValue(),pOriginal->IdentifiedCardType.getValue())!=0)
	{
		pOriginal->IdentifiedCardType.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardType = %s -> %s    [证件类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardType = %s    [证件类型]\n",buf);
	}
	IdentifiedCardNo.getString(buf);
	if (compare(IdentifiedCardNo.getValue(),pOriginal->IdentifiedCardNo.getValue())!=0)
	{
		pOriginal->IdentifiedCardNo.getString(bufOriginal);
		fprintf(fp,"\t\tIdentifiedCardNo = %s -> %s    [证件号码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIdentifiedCardNo = %s    [证件号码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClient::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	ClientName.getString(buf);
	fprintf(fp,",ClientName,%s",buf);	
	IdentifiedCardType.getString(buf);
	fprintf(fp,",IdentifiedCardType,%s",buf);	
	IdentifiedCardNo.getString(buf);
	fprintf(fp,",IdentifiedCardNo,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
}

void CWriteableClient::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	ClientName.getString(buf);
	sprintf(p,"ClientName=%s,",buf);
	p+=strlen(p);
	IdentifiedCardType.getString(buf);
	sprintf(p,"IdentifiedCardType=%s,",buf);
	p+=strlen(p);
	IdentifiedCardNo.getString(buf);
	sprintf(p,"IdentifiedCardNo=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClient::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClient");
	pLogger->output(indent,0,"{");
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	ClientName.getString(buf);
	pLogger->output(indent+1,0,"ClientName=%s 客户名称",buf);
	IdentifiedCardType.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardType=%s 证件类型",buf);
	IdentifiedCardNo.getString(buf);
	pLogger->output(indent+1,0,"IdentifiedCardNo=%s 证件号码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	pLogger->output(indent,0,"}");
}

CClientIterator::~CClientIterator(void)
{
}


void CClientIterator::dump(FILE *output)
{
	CClient *pClient;
	
	while ((pClient=next())!=NULL)
	{
		pClient->dump(output);
	}
}



void CWriteableUserIP::writeCSVHead(FILE *output)
{
	fprintf(output,"UserID,IPAddress,IPMask\n");
}
	
void CWriteableUserIP::init(void)
{
	UserID.clear();
	IPAddress.clear();
	IPMask.clear();
}

int CWriteableUserIP::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUserIP),input)!=sizeof(CWriteableUserIP))
		return 0;
	else
		return 1;
}
	
int CWriteableUserIP::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPMask=token;
		}
		else
		{
			IPMask="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"IPMask"))
			{
				IPMask=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUserIP::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUserIP),output)!=sizeof(CWriteableUserIP))
		return 0;
	else
		return 1;
}

int CWriteableUserIP::writeCSV(FILE *output) const
{
	char buffer[1025];
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPMask.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUserIP::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUserIP%s = {\n", index_buf);
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	IPMask.getString(buf);
	fprintf(fp,"\t\tIPMask = %s    [IP地址掩码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUserIP::dumpDiff(FILE *fp, const CWriteableUserIP *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUserIP = {\n");
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	IPMask.getString(buf);
	if (compare(IPMask.getValue(),pOriginal->IPMask.getValue())!=0)
	{
		pOriginal->IPMask.getString(bufOriginal);
		fprintf(fp,"\t\tIPMask = %s -> %s    [IP地址掩码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPMask = %s    [IP地址掩码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUserIP::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	IPMask.getString(buf);
	fprintf(fp,",IPMask,%s",buf);	
}

void CWriteableUserIP::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	IPMask.getString(buf);
	sprintf(p,"IPMask=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUserIP::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUserIP");
	pLogger->output(indent,0,"{");
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	IPMask.getString(buf);
	pLogger->output(indent+1,0,"IPMask=%s IP地址掩码",buf);
	pLogger->output(indent,0,"}");
}

CUserIPIterator::~CUserIPIterator(void)
{
}


void CUserIPIterator::dump(FILE *output)
{
	CUserIP *pUserIP;
	
	while ((pUserIP=next())!=NULL)
	{
		pUserIP->dump(output);
	}
}



void CWriteablePartClient::writeCSVHead(FILE *output)
{
	fprintf(output,"ClientID,ParticipantID\n");
}
	
void CWriteablePartClient::init(void)
{
	ClientID.clear();
	ParticipantID.clear();
	pParticipant=NULL;
	pClient=NULL;
}

int CWriteablePartClient::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartClient),input)!=sizeof(CWriteablePartClient))
		return 0;
	else
		return 1;
}
	
int CWriteablePartClient::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartClient::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartClient),output)!=sizeof(CWriteablePartClient))
		return 0;
	else
		return 1;
}

int CWriteablePartClient::writeCSV(FILE *output) const
{
	char buffer[1025];
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartClient::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartClient%s = {\n", index_buf);
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartClient::dumpDiff(FILE *fp, const CWriteablePartClient *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartClient = {\n");
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartClient::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
}

void CWriteablePartClient::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartClient::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartClient");
	pLogger->output(indent,0,"{");
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	pLogger->output(indent,0,"}");
}

CPartClientIterator::~CPartClientIterator(void)
{
}


void CPartClientIterator::dump(FILE *output)
{
	CPartClient *pPartClient;
	
	while ((pPartClient=next())!=NULL)
	{
		pPartClient->dump(output);
	}
}



void CWriteableClearingTradingPart::writeCSVHead(FILE *output)
{
	fprintf(output,"ClearingPartID,ParticipantID\n");
}
	
void CWriteableClearingTradingPart::init(void)
{
	ClearingPartID.clear();
	ParticipantID.clear();
}

int CWriteableClearingTradingPart::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClearingTradingPart),input)!=sizeof(CWriteableClearingTradingPart))
		return 0;
	else
		return 1;
}
	
int CWriteableClearingTradingPart::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClearingTradingPart::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClearingTradingPart),output)!=sizeof(CWriteableClearingTradingPart))
		return 0;
	else
		return 1;
}

int CWriteableClearingTradingPart::writeCSV(FILE *output) const
{
	char buffer[1025];
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClearingTradingPart::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClearingTradingPart%s = {\n", index_buf);
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [交易会员]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClearingTradingPart::dumpDiff(FILE *fp, const CWriteableClearingTradingPart *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClearingTradingPart = {\n");
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [交易会员]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [交易会员]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClearingTradingPart::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
}

void CWriteableClearingTradingPart::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClearingTradingPart::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClearingTradingPart");
	pLogger->output(indent,0,"{");
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 交易会员",buf);
	pLogger->output(indent,0,"}");
}

CClearingTradingPartIterator::~CClearingTradingPartIterator(void)
{
}


void CClearingTradingPartIterator::dump(FILE *output)
{
	CClearingTradingPart *pClearingTradingPart;
	
	while ((pClearingTradingPart=next())!=NULL)
	{
		pClearingTradingPart->dump(output);
	}
}



void CWriteableAliasDefine::writeCSVHead(FILE *output)
{
	fprintf(output,"StartPos,Alias,OriginalText\n");
}
	
void CWriteableAliasDefine::init(void)
{
	StartPos.clear();
	Alias.clear();
	OriginalText.clear();
}

int CWriteableAliasDefine::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableAliasDefine),input)!=sizeof(CWriteableAliasDefine))
		return 0;
	else
		return 1;
}
	
int CWriteableAliasDefine::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			StartPos=token;
		}
		else
		{
			StartPos="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Alias=token;
		}
		else
		{
			Alias="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OriginalText=token;
		}
		else
		{
			OriginalText="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"StartPos"))
			{
				StartPos=token;
			}
			else if (!strcmp(fieldName,"Alias"))
			{
				Alias=token;
			}
			else if (!strcmp(fieldName,"OriginalText"))
			{
				OriginalText=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableAliasDefine::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableAliasDefine),output)!=sizeof(CWriteableAliasDefine))
		return 0;
	else
		return 1;
}

int CWriteableAliasDefine::writeCSV(FILE *output) const
{
	char buffer[1025];
	StartPos.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Alias.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OriginalText.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableAliasDefine::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCAliasDefine%s = {\n", index_buf);
	StartPos.getString(buf);
	fprintf(fp,"\t\tStartPos = %s    [起始位置]\n",buf);	
	Alias.getString(buf);
	fprintf(fp,"\t\tAlias = %s    [别名]\n",buf);	
	OriginalText.getString(buf);
	fprintf(fp,"\t\tOriginalText = %s    [原文]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableAliasDefine::dumpDiff(FILE *fp, const CWriteableAliasDefine *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCAliasDefine = {\n");
	StartPos.getString(buf);
	if (compare(StartPos.getValue(),pOriginal->StartPos.getValue())!=0)
	{
		pOriginal->StartPos.getString(bufOriginal);
		fprintf(fp,"\t\tStartPos = %s -> %s    [起始位置]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartPos = %s    [起始位置]\n",buf);
	}
	Alias.getString(buf);
	if (compare(Alias.getValue(),pOriginal->Alias.getValue())!=0)
	{
		pOriginal->Alias.getString(bufOriginal);
		fprintf(fp,"\t\tAlias = %s -> %s    [别名]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAlias = %s    [别名]\n",buf);
	}
	OriginalText.getString(buf);
	if (compare(OriginalText.getValue(),pOriginal->OriginalText.getValue())!=0)
	{
		pOriginal->OriginalText.getString(bufOriginal);
		fprintf(fp,"\t\tOriginalText = %s -> %s    [原文]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOriginalText = %s    [原文]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableAliasDefine::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	StartPos.getString(buf);
	fprintf(fp,",StartPos,%s",buf);	
	Alias.getString(buf);
	fprintf(fp,",Alias,%s",buf);	
	OriginalText.getString(buf);
	fprintf(fp,",OriginalText,%s",buf);	
}

void CWriteableAliasDefine::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	StartPos.getString(buf);
	sprintf(p,"StartPos=%s,",buf);
	p+=strlen(p);
	Alias.getString(buf);
	sprintf(p,"Alias=%s,",buf);
	p+=strlen(p);
	OriginalText.getString(buf);
	sprintf(p,"OriginalText=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableAliasDefine::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CAliasDefine");
	pLogger->output(indent,0,"{");
	StartPos.getString(buf);
	pLogger->output(indent+1,0,"StartPos=%s 起始位置",buf);
	Alias.getString(buf);
	pLogger->output(indent+1,0,"Alias=%s 别名",buf);
	OriginalText.getString(buf);
	pLogger->output(indent+1,0,"OriginalText=%s 原文",buf);
	pLogger->output(indent,0,"}");
}

CAliasDefineIterator::~CAliasDefineIterator(void)
{
}


void CAliasDefineIterator::dump(FILE *output)
{
	CAliasDefine *pAliasDefine;
	
	while ((pAliasDefine=next())!=NULL)
	{
		pAliasDefine->dump(output);
	}
}



void CWriteableUserFunctionRight::writeCSVHead(FILE *output)
{
	fprintf(output,"UserID,FunctionCode\n");
}
	
void CWriteableUserFunctionRight::init(void)
{
	UserID.clear();
	FunctionCode.clear();
}

int CWriteableUserFunctionRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUserFunctionRight),input)!=sizeof(CWriteableUserFunctionRight))
		return 0;
	else
		return 1;
}
	
int CWriteableUserFunctionRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FunctionCode=token;
		}
		else
		{
			FunctionCode="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"FunctionCode"))
			{
				FunctionCode=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUserFunctionRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUserFunctionRight),output)!=sizeof(CWriteableUserFunctionRight))
		return 0;
	else
		return 1;
}

int CWriteableUserFunctionRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FunctionCode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUserFunctionRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUserFunctionRight%s = {\n", index_buf);
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	FunctionCode.getString(buf);
	fprintf(fp,"\t\tFunctionCode = %s    [功能代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUserFunctionRight::dumpDiff(FILE *fp, const CWriteableUserFunctionRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUserFunctionRight = {\n");
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	FunctionCode.getString(buf);
	if (compare(FunctionCode.getValue(),pOriginal->FunctionCode.getValue())!=0)
	{
		pOriginal->FunctionCode.getString(bufOriginal);
		fprintf(fp,"\t\tFunctionCode = %s -> %s    [功能代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFunctionCode = %s    [功能代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUserFunctionRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	FunctionCode.getString(buf);
	fprintf(fp,",FunctionCode,%s",buf);	
}

void CWriteableUserFunctionRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	FunctionCode.getString(buf);
	sprintf(p,"FunctionCode=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUserFunctionRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUserFunctionRight");
	pLogger->output(indent,0,"{");
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	FunctionCode.getString(buf);
	pLogger->output(indent+1,0,"FunctionCode=%s 功能代码",buf);
	pLogger->output(indent,0,"}");
}

CUserFunctionRightIterator::~CUserFunctionRightIterator(void)
{
}


void CUserFunctionRightIterator::dump(FILE *output)
{
	CUserFunctionRight *pUserFunctionRight;
	
	while ((pUserFunctionRight=next())!=NULL)
	{
		pUserFunctionRight->dump(output);
	}
}



void CWriteableAccount::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,AccountID,ParticipantID,Currency\n");
}
	
void CWriteableAccount::init(void)
{
	SettlementGroupID.clear();
	AccountID.clear();
	ParticipantID.clear();
	Currency.clear();
	pTradingAccount=NULL;
}

int CWriteableAccount::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableAccount),input)!=sizeof(CWriteableAccount))
		return 0;
	else
		return 1;
}
	
int CWriteableAccount::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccountID=token;
		}
		else
		{
			AccountID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Currency=token;
		}
		else
		{
			Currency="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"AccountID"))
			{
				AccountID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"Currency"))
			{
				Currency=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableAccount::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableAccount),output)!=sizeof(CWriteableAccount))
		return 0;
	else
		return 1;
}

int CWriteableAccount::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccountID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Currency.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableAccount::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCAccount%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	AccountID.getString(buf);
	fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	Currency.getString(buf);
	fprintf(fp,"\t\tCurrency = %s    [币种]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableAccount::dumpDiff(FILE *fp, const CWriteableAccount *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCAccount = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	AccountID.getString(buf);
	if (compare(AccountID.getValue(),pOriginal->AccountID.getValue())!=0)
	{
		pOriginal->AccountID.getString(bufOriginal);
		fprintf(fp,"\t\tAccountID = %s -> %s    [资金帐号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	Currency.getString(buf);
	if (compare(Currency.getValue(),pOriginal->Currency.getValue())!=0)
	{
		pOriginal->Currency.getString(bufOriginal);
		fprintf(fp,"\t\tCurrency = %s -> %s    [币种]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrency = %s    [币种]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableAccount::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	AccountID.getString(buf);
	fprintf(fp,",AccountID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	Currency.getString(buf);
	fprintf(fp,",Currency,%s",buf);	
}

void CWriteableAccount::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	AccountID.getString(buf);
	sprintf(p,"AccountID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	Currency.getString(buf);
	sprintf(p,"Currency=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableAccount::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CAccount");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	AccountID.getString(buf);
	pLogger->output(indent+1,0,"AccountID=%s 资金帐号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	Currency.getString(buf);
	pLogger->output(indent+1,0,"Currency=%s 币种",buf);
	pLogger->output(indent,0,"}");
}

CAccountIterator::~CAccountIterator(void)
{
}


void CAccountIterator::dump(FILE *output)
{
	CAccount *pAccount;
	
	while ((pAccount=next())!=NULL)
	{
		pAccount->dump(output);
	}
}



void CWriteableUserCommFlux::writeCSVHead(FILE *output)
{
	fprintf(output,"UserID,MaxCommFlux\n");
}
	
void CWriteableUserCommFlux::init(void)
{
	UserID.clear();
	MaxCommFlux.clear();
}

int CWriteableUserCommFlux::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUserCommFlux),input)!=sizeof(CWriteableUserCommFlux))
		return 0;
	else
		return 1;
}
	
int CWriteableUserCommFlux::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxCommFlux=token;
		}
		else
		{
			MaxCommFlux="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"MaxCommFlux"))
			{
				MaxCommFlux=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUserCommFlux::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUserCommFlux),output)!=sizeof(CWriteableUserCommFlux))
		return 0;
	else
		return 1;
}

int CWriteableUserCommFlux::writeCSV(FILE *output) const
{
	char buffer[1025];
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxCommFlux.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUserCommFlux::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUserCommFlux%s = {\n", index_buf);
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	MaxCommFlux.getString(buf);
	fprintf(fp,"\t\tMaxCommFlux = %s    [最大通讯量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUserCommFlux::dumpDiff(FILE *fp, const CWriteableUserCommFlux *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUserCommFlux = {\n");
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	MaxCommFlux.getString(buf);
	if (compare(MaxCommFlux.getValue(),pOriginal->MaxCommFlux.getValue())!=0)
	{
		pOriginal->MaxCommFlux.getString(bufOriginal);
		fprintf(fp,"\t\tMaxCommFlux = %s -> %s    [最大通讯量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxCommFlux = %s    [最大通讯量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUserCommFlux::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	MaxCommFlux.getString(buf);
	fprintf(fp,",MaxCommFlux,%s",buf);	
}

void CWriteableUserCommFlux::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	MaxCommFlux.getString(buf);
	sprintf(p,"MaxCommFlux=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUserCommFlux::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUserCommFlux");
	pLogger->output(indent,0,"{");
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	MaxCommFlux.getString(buf);
	pLogger->output(indent+1,0,"MaxCommFlux=%s 最大通讯量",buf);
	pLogger->output(indent,0,"}");
}

CUserCommFluxIterator::~CUserCommFluxIterator(void)
{
}


void CUserCommFluxIterator::dump(FILE *output)
{
	CUserCommFlux *pUserCommFlux;
	
	while ((pUserCommFlux=next())!=NULL)
	{
		pUserCommFlux->dump(output);
	}
}



void CWriteableMarketDataLog::writeCSVHead(FILE *output)
{
	fprintf(output,"MarketDataLogNo,TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID\n");
}
	
void CWriteableMarketDataLog::init(void)
{
	MarketDataLogNo.clear();
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
}

int CWriteableMarketDataLog::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketDataLog),input)!=sizeof(CWriteableMarketDataLog))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketDataLog::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			MarketDataLogNo=token;
		}
		else
		{
			MarketDataLogNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"MarketDataLogNo"))
			{
				MarketDataLogNo=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketDataLog::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketDataLog),output)!=sizeof(CWriteableMarketDataLog))
		return 0;
	else
		return 1;
}

int CWriteableMarketDataLog::writeCSV(FILE *output) const
{
	char buffer[1025];
	MarketDataLogNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketDataLog::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketDataLog%s = {\n", index_buf);
	MarketDataLogNo.getString(buf);
	fprintf(fp,"\t\tMarketDataLogNo = %s    [行情流水编号]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataLog::dumpDiff(FILE *fp, const CWriteableMarketDataLog *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketDataLog = {\n");
	MarketDataLogNo.getString(buf);
	if (compare(MarketDataLogNo.getValue(),pOriginal->MarketDataLogNo.getValue())!=0)
	{
		pOriginal->MarketDataLogNo.getString(bufOriginal);
		fprintf(fp,"\t\tMarketDataLogNo = %s -> %s    [行情流水编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketDataLogNo = %s    [行情流水编号]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataLog::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	MarketDataLogNo.getString(buf);
	fprintf(fp,",MarketDataLogNo,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
}

void CWriteableMarketDataLog::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	MarketDataLogNo.getString(buf);
	sprintf(p,"MarketDataLogNo=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketDataLog::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketDataLog");
	pLogger->output(indent,0,"{");
	MarketDataLogNo.getString(buf);
	pLogger->output(indent+1,0,"MarketDataLogNo=%s 行情流水编号",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	pLogger->output(indent,0,"}");
}

CMarketDataLogIterator::~CMarketDataLogIterator(void)
{
}


void CMarketDataLogIterator::dump(FILE *output)
{
	CMarketDataLog *pMarketDataLog;
	
	while ((pMarketDataLog=next())!=NULL)
	{
		pMarketDataLog->dump(output);
	}
}



void CWriteableUserSession::writeCSVHead(FILE *output)
{
	fprintf(output,"FrontID,UserID,UserType,SessionID,LoginTime,ParticipantID,IPAddress,UserProductInfo,InterfaceProductInfo,ProtocolInfo,SessionType\n");
}
	
void CWriteableUserSession::init(void)
{
	FrontID.clear();
	UserID.clear();
	UserType.clear();
	SessionID.clear();
	LoginTime.clear();
	ParticipantID.clear();
	IPAddress.clear();
	UserProductInfo.clear();
	InterfaceProductInfo.clear();
	ProtocolInfo.clear();
	SessionType.clear();
	pUser=NULL;
}

int CWriteableUserSession::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUserSession),input)!=sizeof(CWriteableUserSession))
		return 0;
	else
		return 1;
}
	
int CWriteableUserSession::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			FrontID=token;
		}
		else
		{
			FrontID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserType=token;
		}
		else
		{
			UserType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionID=token;
		}
		else
		{
			SessionID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LoginTime=token;
		}
		else
		{
			LoginTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserProductInfo=token;
		}
		else
		{
			UserProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InterfaceProductInfo=token;
		}
		else
		{
			InterfaceProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProtocolInfo=token;
		}
		else
		{
			ProtocolInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionType=token;
		}
		else
		{
			SessionType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"FrontID"))
			{
				FrontID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"UserType"))
			{
				UserType=token;
			}
			else if (!strcmp(fieldName,"SessionID"))
			{
				SessionID=token;
			}
			else if (!strcmp(fieldName,"LoginTime"))
			{
				LoginTime=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"UserProductInfo"))
			{
				UserProductInfo=token;
			}
			else if (!strcmp(fieldName,"InterfaceProductInfo"))
			{
				InterfaceProductInfo=token;
			}
			else if (!strcmp(fieldName,"ProtocolInfo"))
			{
				ProtocolInfo=token;
			}
			else if (!strcmp(fieldName,"SessionType"))
			{
				SessionType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUserSession::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUserSession),output)!=sizeof(CWriteableUserSession))
		return 0;
	else
		return 1;
}

int CWriteableUserSession::writeCSV(FILE *output) const
{
	char buffer[1025];
	FrontID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LoginTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InterfaceProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProtocolInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUserSession::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUserSession%s = {\n", index_buf);
	FrontID.getString(buf);
	fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	UserType.getString(buf);
	fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);	
	SessionID.getString(buf);
	fprintf(fp,"\t\tSessionID = %s    [会话编号]\n",buf);	
	LoginTime.getString(buf);
	fprintf(fp,"\t\tLoginTime = %s    [登录时间]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);	
	SessionType.getString(buf);
	fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUserSession::dumpDiff(FILE *fp, const CWriteableUserSession *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUserSession = {\n");
	FrontID.getString(buf);
	if (compare(FrontID.getValue(),pOriginal->FrontID.getValue())!=0)
	{
		pOriginal->FrontID.getString(bufOriginal);
		fprintf(fp,"\t\tFrontID = %s -> %s    [前置编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	UserType.getString(buf);
	if (compare(UserType.getValue(),pOriginal->UserType.getValue())!=0)
	{
		pOriginal->UserType.getString(bufOriginal);
		fprintf(fp,"\t\tUserType = %s -> %s    [交易用户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);
	}
	SessionID.getString(buf);
	if (compare(SessionID.getValue(),pOriginal->SessionID.getValue())!=0)
	{
		pOriginal->SessionID.getString(bufOriginal);
		fprintf(fp,"\t\tSessionID = %s -> %s    [会话编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionID = %s    [会话编号]\n",buf);
	}
	LoginTime.getString(buf);
	if (compare(LoginTime.getValue(),pOriginal->LoginTime.getValue())!=0)
	{
		pOriginal->LoginTime.getString(bufOriginal);
		fprintf(fp,"\t\tLoginTime = %s -> %s    [登录时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLoginTime = %s    [登录时间]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	UserProductInfo.getString(buf);
	if (compare(UserProductInfo.getValue(),pOriginal->UserProductInfo.getValue())!=0)
	{
		pOriginal->UserProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tUserProductInfo = %s -> %s    [用户端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);
	}
	InterfaceProductInfo.getString(buf);
	if (compare(InterfaceProductInfo.getValue(),pOriginal->InterfaceProductInfo.getValue())!=0)
	{
		pOriginal->InterfaceProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tInterfaceProductInfo = %s -> %s    [接口端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);
	}
	ProtocolInfo.getString(buf);
	if (compare(ProtocolInfo.getValue(),pOriginal->ProtocolInfo.getValue())!=0)
	{
		pOriginal->ProtocolInfo.getString(bufOriginal);
		fprintf(fp,"\t\tProtocolInfo = %s -> %s    [协议信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);
	}
	SessionType.getString(buf);
	if (compare(SessionType.getValue(),pOriginal->SessionType.getValue())!=0)
	{
		pOriginal->SessionType.getString(bufOriginal);
		fprintf(fp,"\t\tSessionType = %s -> %s    [会话类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUserSession::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	FrontID.getString(buf);
	fprintf(fp,",FrontID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	UserType.getString(buf);
	fprintf(fp,",UserType,%s",buf);	
	SessionID.getString(buf);
	fprintf(fp,",SessionID,%s",buf);	
	LoginTime.getString(buf);
	fprintf(fp,",LoginTime,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,",UserProductInfo,%s",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,",InterfaceProductInfo,%s",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,",ProtocolInfo,%s",buf);	
	SessionType.getString(buf);
	fprintf(fp,",SessionType,%s",buf);	
}

void CWriteableUserSession::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	FrontID.getString(buf);
	sprintf(p,"FrontID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	UserType.getString(buf);
	sprintf(p,"UserType=%s,",buf);
	p+=strlen(p);
	SessionID.getString(buf);
	sprintf(p,"SessionID=%s,",buf);
	p+=strlen(p);
	LoginTime.getString(buf);
	sprintf(p,"LoginTime=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	UserProductInfo.getString(buf);
	sprintf(p,"UserProductInfo=%s,",buf);
	p+=strlen(p);
	InterfaceProductInfo.getString(buf);
	sprintf(p,"InterfaceProductInfo=%s,",buf);
	p+=strlen(p);
	ProtocolInfo.getString(buf);
	sprintf(p,"ProtocolInfo=%s,",buf);
	p+=strlen(p);
	SessionType.getString(buf);
	sprintf(p,"SessionType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUserSession::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUserSession");
	pLogger->output(indent,0,"{");
	FrontID.getString(buf);
	pLogger->output(indent+1,0,"FrontID=%s 前置编号",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	UserType.getString(buf);
	pLogger->output(indent+1,0,"UserType=%s 交易用户类型",buf);
	SessionID.getString(buf);
	pLogger->output(indent+1,0,"SessionID=%s 会话编号",buf);
	LoginTime.getString(buf);
	pLogger->output(indent+1,0,"LoginTime=%s 登录时间",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	UserProductInfo.getString(buf);
	pLogger->output(indent+1,0,"UserProductInfo=%s 用户端产品信息",buf);
	InterfaceProductInfo.getString(buf);
	pLogger->output(indent+1,0,"InterfaceProductInfo=%s 接口端产品信息",buf);
	ProtocolInfo.getString(buf);
	pLogger->output(indent+1,0,"ProtocolInfo=%s 协议信息",buf);
	SessionType.getString(buf);
	pLogger->output(indent+1,0,"SessionType=%s 会话类型",buf);
	pLogger->output(indent,0,"}");
}

CUserSessionIterator::~CUserSessionIterator(void)
{
}


void CUserSessionIterator::dump(FILE *output)
{
	CUserSession *pUserSession;
	
	while ((pUserSession=next())!=NULL)
	{
		pUserSession->dump(output);
	}
}



void CWriteableMDSession::writeCSVHead(FILE *output)
{
	fprintf(output,"FrontID,UserID,UserType,SessionID,LoginTime,ParticipantID,IPAddress,UserProductInfo,InterfaceProductInfo,ProtocolInfo,SessionType\n");
}
	
void CWriteableMDSession::init(void)
{
	FrontID.clear();
	UserID.clear();
	UserType.clear();
	SessionID.clear();
	LoginTime.clear();
	ParticipantID.clear();
	IPAddress.clear();
	UserProductInfo.clear();
	InterfaceProductInfo.clear();
	ProtocolInfo.clear();
	SessionType.clear();
}

int CWriteableMDSession::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMDSession),input)!=sizeof(CWriteableMDSession))
		return 0;
	else
		return 1;
}
	
int CWriteableMDSession::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			FrontID=token;
		}
		else
		{
			FrontID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserType=token;
		}
		else
		{
			UserType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionID=token;
		}
		else
		{
			SessionID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LoginTime=token;
		}
		else
		{
			LoginTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserProductInfo=token;
		}
		else
		{
			UserProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InterfaceProductInfo=token;
		}
		else
		{
			InterfaceProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProtocolInfo=token;
		}
		else
		{
			ProtocolInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionType=token;
		}
		else
		{
			SessionType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"FrontID"))
			{
				FrontID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"UserType"))
			{
				UserType=token;
			}
			else if (!strcmp(fieldName,"SessionID"))
			{
				SessionID=token;
			}
			else if (!strcmp(fieldName,"LoginTime"))
			{
				LoginTime=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"UserProductInfo"))
			{
				UserProductInfo=token;
			}
			else if (!strcmp(fieldName,"InterfaceProductInfo"))
			{
				InterfaceProductInfo=token;
			}
			else if (!strcmp(fieldName,"ProtocolInfo"))
			{
				ProtocolInfo=token;
			}
			else if (!strcmp(fieldName,"SessionType"))
			{
				SessionType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMDSession::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMDSession),output)!=sizeof(CWriteableMDSession))
		return 0;
	else
		return 1;
}

int CWriteableMDSession::writeCSV(FILE *output) const
{
	char buffer[1025];
	FrontID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LoginTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InterfaceProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProtocolInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMDSession::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMDSession%s = {\n", index_buf);
	FrontID.getString(buf);
	fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	UserType.getString(buf);
	fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);	
	SessionID.getString(buf);
	fprintf(fp,"\t\tSessionID = %s    [会话编号]\n",buf);	
	LoginTime.getString(buf);
	fprintf(fp,"\t\tLoginTime = %s    [登录时间]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);	
	SessionType.getString(buf);
	fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMDSession::dumpDiff(FILE *fp, const CWriteableMDSession *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMDSession = {\n");
	FrontID.getString(buf);
	if (compare(FrontID.getValue(),pOriginal->FrontID.getValue())!=0)
	{
		pOriginal->FrontID.getString(bufOriginal);
		fprintf(fp,"\t\tFrontID = %s -> %s    [前置编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	UserType.getString(buf);
	if (compare(UserType.getValue(),pOriginal->UserType.getValue())!=0)
	{
		pOriginal->UserType.getString(bufOriginal);
		fprintf(fp,"\t\tUserType = %s -> %s    [交易用户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserType = %s    [交易用户类型]\n",buf);
	}
	SessionID.getString(buf);
	if (compare(SessionID.getValue(),pOriginal->SessionID.getValue())!=0)
	{
		pOriginal->SessionID.getString(bufOriginal);
		fprintf(fp,"\t\tSessionID = %s -> %s    [会话编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionID = %s    [会话编号]\n",buf);
	}
	LoginTime.getString(buf);
	if (compare(LoginTime.getValue(),pOriginal->LoginTime.getValue())!=0)
	{
		pOriginal->LoginTime.getString(bufOriginal);
		fprintf(fp,"\t\tLoginTime = %s -> %s    [登录时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLoginTime = %s    [登录时间]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	UserProductInfo.getString(buf);
	if (compare(UserProductInfo.getValue(),pOriginal->UserProductInfo.getValue())!=0)
	{
		pOriginal->UserProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tUserProductInfo = %s -> %s    [用户端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);
	}
	InterfaceProductInfo.getString(buf);
	if (compare(InterfaceProductInfo.getValue(),pOriginal->InterfaceProductInfo.getValue())!=0)
	{
		pOriginal->InterfaceProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tInterfaceProductInfo = %s -> %s    [接口端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);
	}
	ProtocolInfo.getString(buf);
	if (compare(ProtocolInfo.getValue(),pOriginal->ProtocolInfo.getValue())!=0)
	{
		pOriginal->ProtocolInfo.getString(bufOriginal);
		fprintf(fp,"\t\tProtocolInfo = %s -> %s    [协议信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);
	}
	SessionType.getString(buf);
	if (compare(SessionType.getValue(),pOriginal->SessionType.getValue())!=0)
	{
		pOriginal->SessionType.getString(bufOriginal);
		fprintf(fp,"\t\tSessionType = %s -> %s    [会话类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMDSession::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	FrontID.getString(buf);
	fprintf(fp,",FrontID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	UserType.getString(buf);
	fprintf(fp,",UserType,%s",buf);	
	SessionID.getString(buf);
	fprintf(fp,",SessionID,%s",buf);	
	LoginTime.getString(buf);
	fprintf(fp,",LoginTime,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,",UserProductInfo,%s",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,",InterfaceProductInfo,%s",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,",ProtocolInfo,%s",buf);	
	SessionType.getString(buf);
	fprintf(fp,",SessionType,%s",buf);	
}

void CWriteableMDSession::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	FrontID.getString(buf);
	sprintf(p,"FrontID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	UserType.getString(buf);
	sprintf(p,"UserType=%s,",buf);
	p+=strlen(p);
	SessionID.getString(buf);
	sprintf(p,"SessionID=%s,",buf);
	p+=strlen(p);
	LoginTime.getString(buf);
	sprintf(p,"LoginTime=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	UserProductInfo.getString(buf);
	sprintf(p,"UserProductInfo=%s,",buf);
	p+=strlen(p);
	InterfaceProductInfo.getString(buf);
	sprintf(p,"InterfaceProductInfo=%s,",buf);
	p+=strlen(p);
	ProtocolInfo.getString(buf);
	sprintf(p,"ProtocolInfo=%s,",buf);
	p+=strlen(p);
	SessionType.getString(buf);
	sprintf(p,"SessionType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMDSession::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMDSession");
	pLogger->output(indent,0,"{");
	FrontID.getString(buf);
	pLogger->output(indent+1,0,"FrontID=%s 前置编号",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	UserType.getString(buf);
	pLogger->output(indent+1,0,"UserType=%s 交易用户类型",buf);
	SessionID.getString(buf);
	pLogger->output(indent+1,0,"SessionID=%s 会话编号",buf);
	LoginTime.getString(buf);
	pLogger->output(indent+1,0,"LoginTime=%s 登录时间",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	UserProductInfo.getString(buf);
	pLogger->output(indent+1,0,"UserProductInfo=%s 用户端产品信息",buf);
	InterfaceProductInfo.getString(buf);
	pLogger->output(indent+1,0,"InterfaceProductInfo=%s 接口端产品信息",buf);
	ProtocolInfo.getString(buf);
	pLogger->output(indent+1,0,"ProtocolInfo=%s 协议信息",buf);
	SessionType.getString(buf);
	pLogger->output(indent+1,0,"SessionType=%s 会话类型",buf);
	pLogger->output(indent,0,"}");
}

CMDSessionIterator::~CMDSessionIterator(void)
{
}


void CMDSessionIterator::dump(FILE *output)
{
	CMDSession *pMDSession;
	
	while ((pMDSession=next())!=NULL)
	{
		pMDSession->dump(output);
	}
}



void CWriteableLoginInfo::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SequenceNo,UserID,ParticipantID,UserProductInfo,InterfaceProductInfo,ProtocolInfo,IPAddress,LoginType,SessionType,ErrorID,UpdateDate,UpdateTime\n");
}
	
void CWriteableLoginInfo::init(void)
{
	TradingDay.clear();
	SequenceNo.clear();
	UserID.clear();
	ParticipantID.clear();
	UserProductInfo.clear();
	InterfaceProductInfo.clear();
	ProtocolInfo.clear();
	IPAddress.clear();
	LoginType.clear();
	SessionType.clear();
	ErrorID.clear();
	UpdateDate.clear();
	UpdateTime.clear();
}

int CWriteableLoginInfo::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableLoginInfo),input)!=sizeof(CWriteableLoginInfo))
		return 0;
	else
		return 1;
}
	
int CWriteableLoginInfo::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SequenceNo=token;
		}
		else
		{
			SequenceNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserProductInfo=token;
		}
		else
		{
			UserProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InterfaceProductInfo=token;
		}
		else
		{
			InterfaceProductInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProtocolInfo=token;
		}
		else
		{
			ProtocolInfo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IPAddress=token;
		}
		else
		{
			IPAddress="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LoginType=token;
		}
		else
		{
			LoginType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SessionType=token;
		}
		else
		{
			SessionType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ErrorID=token;
		}
		else
		{
			ErrorID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateDate=token;
		}
		else
		{
			UpdateDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SequenceNo"))
			{
				SequenceNo=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"UserProductInfo"))
			{
				UserProductInfo=token;
			}
			else if (!strcmp(fieldName,"InterfaceProductInfo"))
			{
				InterfaceProductInfo=token;
			}
			else if (!strcmp(fieldName,"ProtocolInfo"))
			{
				ProtocolInfo=token;
			}
			else if (!strcmp(fieldName,"IPAddress"))
			{
				IPAddress=token;
			}
			else if (!strcmp(fieldName,"LoginType"))
			{
				LoginType=token;
			}
			else if (!strcmp(fieldName,"SessionType"))
			{
				SessionType=token;
			}
			else if (!strcmp(fieldName,"ErrorID"))
			{
				ErrorID=token;
			}
			else if (!strcmp(fieldName,"UpdateDate"))
			{
				UpdateDate=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableLoginInfo::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableLoginInfo),output)!=sizeof(CWriteableLoginInfo))
		return 0;
	else
		return 1;
}

int CWriteableLoginInfo::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SequenceNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InterfaceProductInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProtocolInfo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IPAddress.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LoginType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SessionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ErrorID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableLoginInfo::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCLoginInfo%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,"\t\tSequenceNo = %s    [序号]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);	
	IPAddress.getString(buf);
	fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);	
	LoginType.getString(buf);
	fprintf(fp,"\t\tLoginType = %s    [登录类型]\n",buf);	
	SessionType.getString(buf);
	fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);	
	ErrorID.getString(buf);
	fprintf(fp,"\t\tErrorID = %s    [错误代码]\n",buf);	
	UpdateDate.getString(buf);
	fprintf(fp,"\t\tUpdateDate = %s    [更新日期]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [更新时间]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableLoginInfo::dumpDiff(FILE *fp, const CWriteableLoginInfo *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCLoginInfo = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SequenceNo.getString(buf);
	if (compare(SequenceNo.getValue(),pOriginal->SequenceNo.getValue())!=0)
	{
		pOriginal->SequenceNo.getString(bufOriginal);
		fprintf(fp,"\t\tSequenceNo = %s -> %s    [序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSequenceNo = %s    [序号]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	UserProductInfo.getString(buf);
	if (compare(UserProductInfo.getValue(),pOriginal->UserProductInfo.getValue())!=0)
	{
		pOriginal->UserProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tUserProductInfo = %s -> %s    [用户端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserProductInfo = %s    [用户端产品信息]\n",buf);
	}
	InterfaceProductInfo.getString(buf);
	if (compare(InterfaceProductInfo.getValue(),pOriginal->InterfaceProductInfo.getValue())!=0)
	{
		pOriginal->InterfaceProductInfo.getString(bufOriginal);
		fprintf(fp,"\t\tInterfaceProductInfo = %s -> %s    [接口端产品信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInterfaceProductInfo = %s    [接口端产品信息]\n",buf);
	}
	ProtocolInfo.getString(buf);
	if (compare(ProtocolInfo.getValue(),pOriginal->ProtocolInfo.getValue())!=0)
	{
		pOriginal->ProtocolInfo.getString(bufOriginal);
		fprintf(fp,"\t\tProtocolInfo = %s -> %s    [协议信息]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProtocolInfo = %s    [协议信息]\n",buf);
	}
	IPAddress.getString(buf);
	if (compare(IPAddress.getValue(),pOriginal->IPAddress.getValue())!=0)
	{
		pOriginal->IPAddress.getString(bufOriginal);
		fprintf(fp,"\t\tIPAddress = %s -> %s    [IP地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIPAddress = %s    [IP地址]\n",buf);
	}
	LoginType.getString(buf);
	if (compare(LoginType.getValue(),pOriginal->LoginType.getValue())!=0)
	{
		pOriginal->LoginType.getString(bufOriginal);
		fprintf(fp,"\t\tLoginType = %s -> %s    [登录类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLoginType = %s    [登录类型]\n",buf);
	}
	SessionType.getString(buf);
	if (compare(SessionType.getValue(),pOriginal->SessionType.getValue())!=0)
	{
		pOriginal->SessionType.getString(bufOriginal);
		fprintf(fp,"\t\tSessionType = %s -> %s    [会话类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSessionType = %s    [会话类型]\n",buf);
	}
	ErrorID.getString(buf);
	if (compare(ErrorID.getValue(),pOriginal->ErrorID.getValue())!=0)
	{
		pOriginal->ErrorID.getString(bufOriginal);
		fprintf(fp,"\t\tErrorID = %s -> %s    [错误代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tErrorID = %s    [错误代码]\n",buf);
	}
	UpdateDate.getString(buf);
	if (compare(UpdateDate.getValue(),pOriginal->UpdateDate.getValue())!=0)
	{
		pOriginal->UpdateDate.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateDate = %s -> %s    [更新日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateDate = %s    [更新日期]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [更新时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [更新时间]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableLoginInfo::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,",SequenceNo,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	UserProductInfo.getString(buf);
	fprintf(fp,",UserProductInfo,%s",buf);	
	InterfaceProductInfo.getString(buf);
	fprintf(fp,",InterfaceProductInfo,%s",buf);	
	ProtocolInfo.getString(buf);
	fprintf(fp,",ProtocolInfo,%s",buf);	
	IPAddress.getString(buf);
	fprintf(fp,",IPAddress,%s",buf);	
	LoginType.getString(buf);
	fprintf(fp,",LoginType,%s",buf);	
	SessionType.getString(buf);
	fprintf(fp,",SessionType,%s",buf);	
	ErrorID.getString(buf);
	fprintf(fp,",ErrorID,%s",buf);	
	UpdateDate.getString(buf);
	fprintf(fp,",UpdateDate,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
}

void CWriteableLoginInfo::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SequenceNo.getString(buf);
	sprintf(p,"SequenceNo=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	UserProductInfo.getString(buf);
	sprintf(p,"UserProductInfo=%s,",buf);
	p+=strlen(p);
	InterfaceProductInfo.getString(buf);
	sprintf(p,"InterfaceProductInfo=%s,",buf);
	p+=strlen(p);
	ProtocolInfo.getString(buf);
	sprintf(p,"ProtocolInfo=%s,",buf);
	p+=strlen(p);
	IPAddress.getString(buf);
	sprintf(p,"IPAddress=%s,",buf);
	p+=strlen(p);
	LoginType.getString(buf);
	sprintf(p,"LoginType=%s,",buf);
	p+=strlen(p);
	SessionType.getString(buf);
	sprintf(p,"SessionType=%s,",buf);
	p+=strlen(p);
	ErrorID.getString(buf);
	sprintf(p,"ErrorID=%s,",buf);
	p+=strlen(p);
	UpdateDate.getString(buf);
	sprintf(p,"UpdateDate=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableLoginInfo::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CLoginInfo");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SequenceNo.getString(buf);
	pLogger->output(indent+1,0,"SequenceNo=%s 序号",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	UserProductInfo.getString(buf);
	pLogger->output(indent+1,0,"UserProductInfo=%s 用户端产品信息",buf);
	InterfaceProductInfo.getString(buf);
	pLogger->output(indent+1,0,"InterfaceProductInfo=%s 接口端产品信息",buf);
	ProtocolInfo.getString(buf);
	pLogger->output(indent+1,0,"ProtocolInfo=%s 协议信息",buf);
	IPAddress.getString(buf);
	pLogger->output(indent+1,0,"IPAddress=%s IP地址",buf);
	LoginType.getString(buf);
	pLogger->output(indent+1,0,"LoginType=%s 登录类型",buf);
	SessionType.getString(buf);
	pLogger->output(indent+1,0,"SessionType=%s 会话类型",buf);
	ErrorID.getString(buf);
	pLogger->output(indent+1,0,"ErrorID=%s 错误代码",buf);
	UpdateDate.getString(buf);
	pLogger->output(indent+1,0,"UpdateDate=%s 更新日期",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 更新时间",buf);
	pLogger->output(indent,0,"}");
}

CLoginInfoIterator::~CLoginInfoIterator(void)
{
}


void CLoginInfoIterator::dump(FILE *output)
{
	CLoginInfo *pLoginInfo;
	
	while ((pLoginInfo=next())!=NULL)
	{
		pLoginInfo->dump(output);
	}
}



void CWriteableDepthMarketDataDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID,BidPrice1,BidVolume1,AskPrice1,AskVolume1,BidPrice2,BidVolume2,AskPrice2,AskVolume2,BidPrice3,BidVolume3,AskPrice3,AskVolume3,BidPrice4,BidVolume4,AskPrice4,AskVolume4,BidPrice5,BidVolume5,AskPrice5,AskVolume5,SequenceNo\n");
}
	
void CWriteableDepthMarketDataDetail::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
	BidPrice1.clear();
	BidVolume1.clear();
	AskPrice1.clear();
	AskVolume1.clear();
	BidPrice2.clear();
	BidVolume2.clear();
	AskPrice2.clear();
	AskVolume2.clear();
	BidPrice3.clear();
	BidVolume3.clear();
	AskPrice3.clear();
	AskVolume3.clear();
	BidPrice4.clear();
	BidVolume4.clear();
	AskPrice4.clear();
	AskVolume4.clear();
	BidPrice5.clear();
	BidVolume5.clear();
	AskPrice5.clear();
	AskVolume5.clear();
	SequenceNo.clear();
}

int CWriteableDepthMarketDataDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableDepthMarketDataDetail),input)!=sizeof(CWriteableDepthMarketDataDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableDepthMarketDataDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice1=token;
		}
		else
		{
			BidPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume1=token;
		}
		else
		{
			BidVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice1=token;
		}
		else
		{
			AskPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume1=token;
		}
		else
		{
			AskVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice2=token;
		}
		else
		{
			BidPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume2=token;
		}
		else
		{
			BidVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice2=token;
		}
		else
		{
			AskPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume2=token;
		}
		else
		{
			AskVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice3=token;
		}
		else
		{
			BidPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume3=token;
		}
		else
		{
			BidVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice3=token;
		}
		else
		{
			AskPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume3=token;
		}
		else
		{
			AskVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice4=token;
		}
		else
		{
			BidPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume4=token;
		}
		else
		{
			BidVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice4=token;
		}
		else
		{
			AskPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume4=token;
		}
		else
		{
			AskVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice5=token;
		}
		else
		{
			BidPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume5=token;
		}
		else
		{
			BidVolume5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice5=token;
		}
		else
		{
			AskPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume5=token;
		}
		else
		{
			AskVolume5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SequenceNo=token;
		}
		else
		{
			SequenceNo="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"BidPrice1"))
			{
				BidPrice1=token;
			}
			else if (!strcmp(fieldName,"BidVolume1"))
			{
				BidVolume1=token;
			}
			else if (!strcmp(fieldName,"AskPrice1"))
			{
				AskPrice1=token;
			}
			else if (!strcmp(fieldName,"AskVolume1"))
			{
				AskVolume1=token;
			}
			else if (!strcmp(fieldName,"BidPrice2"))
			{
				BidPrice2=token;
			}
			else if (!strcmp(fieldName,"BidVolume2"))
			{
				BidVolume2=token;
			}
			else if (!strcmp(fieldName,"AskPrice2"))
			{
				AskPrice2=token;
			}
			else if (!strcmp(fieldName,"AskVolume2"))
			{
				AskVolume2=token;
			}
			else if (!strcmp(fieldName,"BidPrice3"))
			{
				BidPrice3=token;
			}
			else if (!strcmp(fieldName,"BidVolume3"))
			{
				BidVolume3=token;
			}
			else if (!strcmp(fieldName,"AskPrice3"))
			{
				AskPrice3=token;
			}
			else if (!strcmp(fieldName,"AskVolume3"))
			{
				AskVolume3=token;
			}
			else if (!strcmp(fieldName,"BidPrice4"))
			{
				BidPrice4=token;
			}
			else if (!strcmp(fieldName,"BidVolume4"))
			{
				BidVolume4=token;
			}
			else if (!strcmp(fieldName,"AskPrice4"))
			{
				AskPrice4=token;
			}
			else if (!strcmp(fieldName,"AskVolume4"))
			{
				AskVolume4=token;
			}
			else if (!strcmp(fieldName,"BidPrice5"))
			{
				BidPrice5=token;
			}
			else if (!strcmp(fieldName,"BidVolume5"))
			{
				BidVolume5=token;
			}
			else if (!strcmp(fieldName,"AskPrice5"))
			{
				AskPrice5=token;
			}
			else if (!strcmp(fieldName,"AskVolume5"))
			{
				AskVolume5=token;
			}
			else if (!strcmp(fieldName,"SequenceNo"))
			{
				SequenceNo=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableDepthMarketDataDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableDepthMarketDataDetail),output)!=sizeof(CWriteableDepthMarketDataDetail))
		return 0;
	else
		return 1;
}

int CWriteableDepthMarketDataDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SequenceNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableDepthMarketDataDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCDepthMarketDataDetail%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,"\t\tSequenceNo = %s    [序号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableDepthMarketDataDetail::dumpDiff(FILE *fp, const CWriteableDepthMarketDataDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCDepthMarketDataDetail = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	BidPrice1.getString(buf);
	if (compare(BidPrice1.getValue(),pOriginal->BidPrice1.getValue())!=0)
	{
		pOriginal->BidPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice1 = %s -> %s    [申买价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);
	}
	BidVolume1.getString(buf);
	if (compare(BidVolume1.getValue(),pOriginal->BidVolume1.getValue())!=0)
	{
		pOriginal->BidVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume1 = %s -> %s    [申买量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);
	}
	AskPrice1.getString(buf);
	if (compare(AskPrice1.getValue(),pOriginal->AskPrice1.getValue())!=0)
	{
		pOriginal->AskPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice1 = %s -> %s    [申卖价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);
	}
	AskVolume1.getString(buf);
	if (compare(AskVolume1.getValue(),pOriginal->AskVolume1.getValue())!=0)
	{
		pOriginal->AskVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume1 = %s -> %s    [申卖量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);
	}
	BidPrice2.getString(buf);
	if (compare(BidPrice2.getValue(),pOriginal->BidPrice2.getValue())!=0)
	{
		pOriginal->BidPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice2 = %s -> %s    [申买价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);
	}
	BidVolume2.getString(buf);
	if (compare(BidVolume2.getValue(),pOriginal->BidVolume2.getValue())!=0)
	{
		pOriginal->BidVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume2 = %s -> %s    [申买量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);
	}
	AskPrice2.getString(buf);
	if (compare(AskPrice2.getValue(),pOriginal->AskPrice2.getValue())!=0)
	{
		pOriginal->AskPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice2 = %s -> %s    [申卖价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);
	}
	AskVolume2.getString(buf);
	if (compare(AskVolume2.getValue(),pOriginal->AskVolume2.getValue())!=0)
	{
		pOriginal->AskVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume2 = %s -> %s    [申卖量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);
	}
	BidPrice3.getString(buf);
	if (compare(BidPrice3.getValue(),pOriginal->BidPrice3.getValue())!=0)
	{
		pOriginal->BidPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice3 = %s -> %s    [申买价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);
	}
	BidVolume3.getString(buf);
	if (compare(BidVolume3.getValue(),pOriginal->BidVolume3.getValue())!=0)
	{
		pOriginal->BidVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume3 = %s -> %s    [申买量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);
	}
	AskPrice3.getString(buf);
	if (compare(AskPrice3.getValue(),pOriginal->AskPrice3.getValue())!=0)
	{
		pOriginal->AskPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice3 = %s -> %s    [申卖价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);
	}
	AskVolume3.getString(buf);
	if (compare(AskVolume3.getValue(),pOriginal->AskVolume3.getValue())!=0)
	{
		pOriginal->AskVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume3 = %s -> %s    [申卖量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);
	}
	BidPrice4.getString(buf);
	if (compare(BidPrice4.getValue(),pOriginal->BidPrice4.getValue())!=0)
	{
		pOriginal->BidPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice4 = %s -> %s    [申买价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);
	}
	BidVolume4.getString(buf);
	if (compare(BidVolume4.getValue(),pOriginal->BidVolume4.getValue())!=0)
	{
		pOriginal->BidVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume4 = %s -> %s    [申买量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);
	}
	AskPrice4.getString(buf);
	if (compare(AskPrice4.getValue(),pOriginal->AskPrice4.getValue())!=0)
	{
		pOriginal->AskPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice4 = %s -> %s    [申卖价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);
	}
	AskVolume4.getString(buf);
	if (compare(AskVolume4.getValue(),pOriginal->AskVolume4.getValue())!=0)
	{
		pOriginal->AskVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume4 = %s -> %s    [申卖量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);
	}
	BidPrice5.getString(buf);
	if (compare(BidPrice5.getValue(),pOriginal->BidPrice5.getValue())!=0)
	{
		pOriginal->BidPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice5 = %s -> %s    [申买价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);
	}
	BidVolume5.getString(buf);
	if (compare(BidVolume5.getValue(),pOriginal->BidVolume5.getValue())!=0)
	{
		pOriginal->BidVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume5 = %s -> %s    [申买量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);
	}
	AskPrice5.getString(buf);
	if (compare(AskPrice5.getValue(),pOriginal->AskPrice5.getValue())!=0)
	{
		pOriginal->AskPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice5 = %s -> %s    [申卖价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);
	}
	AskVolume5.getString(buf);
	if (compare(AskVolume5.getValue(),pOriginal->AskVolume5.getValue())!=0)
	{
		pOriginal->AskVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume5 = %s -> %s    [申卖量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);
	}
	SequenceNo.getString(buf);
	if (compare(SequenceNo.getValue(),pOriginal->SequenceNo.getValue())!=0)
	{
		pOriginal->SequenceNo.getString(bufOriginal);
		fprintf(fp,"\t\tSequenceNo = %s -> %s    [序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSequenceNo = %s    [序号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableDepthMarketDataDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,",BidPrice1,%s",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,",BidVolume1,%s",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,",AskPrice1,%s",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,",AskVolume1,%s",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,",BidPrice2,%s",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,",BidVolume2,%s",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,",AskPrice2,%s",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,",AskVolume2,%s",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,",BidPrice3,%s",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,",BidVolume3,%s",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,",AskPrice3,%s",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,",AskVolume3,%s",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,",BidPrice4,%s",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,",BidVolume4,%s",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,",AskPrice4,%s",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,",AskVolume4,%s",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,",BidPrice5,%s",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,",BidVolume5,%s",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,",AskPrice5,%s",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,",AskVolume5,%s",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,",SequenceNo,%s",buf);	
}

void CWriteableDepthMarketDataDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	BidPrice1.getString(buf);
	sprintf(p,"BidPrice1=%s,",buf);
	p+=strlen(p);
	BidVolume1.getString(buf);
	sprintf(p,"BidVolume1=%s,",buf);
	p+=strlen(p);
	AskPrice1.getString(buf);
	sprintf(p,"AskPrice1=%s,",buf);
	p+=strlen(p);
	AskVolume1.getString(buf);
	sprintf(p,"AskVolume1=%s,",buf);
	p+=strlen(p);
	BidPrice2.getString(buf);
	sprintf(p,"BidPrice2=%s,",buf);
	p+=strlen(p);
	BidVolume2.getString(buf);
	sprintf(p,"BidVolume2=%s,",buf);
	p+=strlen(p);
	AskPrice2.getString(buf);
	sprintf(p,"AskPrice2=%s,",buf);
	p+=strlen(p);
	AskVolume2.getString(buf);
	sprintf(p,"AskVolume2=%s,",buf);
	p+=strlen(p);
	BidPrice3.getString(buf);
	sprintf(p,"BidPrice3=%s,",buf);
	p+=strlen(p);
	BidVolume3.getString(buf);
	sprintf(p,"BidVolume3=%s,",buf);
	p+=strlen(p);
	AskPrice3.getString(buf);
	sprintf(p,"AskPrice3=%s,",buf);
	p+=strlen(p);
	AskVolume3.getString(buf);
	sprintf(p,"AskVolume3=%s,",buf);
	p+=strlen(p);
	BidPrice4.getString(buf);
	sprintf(p,"BidPrice4=%s,",buf);
	p+=strlen(p);
	BidVolume4.getString(buf);
	sprintf(p,"BidVolume4=%s,",buf);
	p+=strlen(p);
	AskPrice4.getString(buf);
	sprintf(p,"AskPrice4=%s,",buf);
	p+=strlen(p);
	AskVolume4.getString(buf);
	sprintf(p,"AskVolume4=%s,",buf);
	p+=strlen(p);
	BidPrice5.getString(buf);
	sprintf(p,"BidPrice5=%s,",buf);
	p+=strlen(p);
	BidVolume5.getString(buf);
	sprintf(p,"BidVolume5=%s,",buf);
	p+=strlen(p);
	AskPrice5.getString(buf);
	sprintf(p,"AskPrice5=%s,",buf);
	p+=strlen(p);
	AskVolume5.getString(buf);
	sprintf(p,"AskVolume5=%s,",buf);
	p+=strlen(p);
	SequenceNo.getString(buf);
	sprintf(p,"SequenceNo=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableDepthMarketDataDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CDepthMarketDataDetail");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	BidPrice1.getString(buf);
	pLogger->output(indent+1,0,"BidPrice1=%s 申买价一",buf);
	BidVolume1.getString(buf);
	pLogger->output(indent+1,0,"BidVolume1=%s 申买量一",buf);
	AskPrice1.getString(buf);
	pLogger->output(indent+1,0,"AskPrice1=%s 申卖价一",buf);
	AskVolume1.getString(buf);
	pLogger->output(indent+1,0,"AskVolume1=%s 申卖量一",buf);
	BidPrice2.getString(buf);
	pLogger->output(indent+1,0,"BidPrice2=%s 申买价二",buf);
	BidVolume2.getString(buf);
	pLogger->output(indent+1,0,"BidVolume2=%s 申买量二",buf);
	AskPrice2.getString(buf);
	pLogger->output(indent+1,0,"AskPrice2=%s 申卖价二",buf);
	AskVolume2.getString(buf);
	pLogger->output(indent+1,0,"AskVolume2=%s 申卖量二",buf);
	BidPrice3.getString(buf);
	pLogger->output(indent+1,0,"BidPrice3=%s 申买价三",buf);
	BidVolume3.getString(buf);
	pLogger->output(indent+1,0,"BidVolume3=%s 申买量三",buf);
	AskPrice3.getString(buf);
	pLogger->output(indent+1,0,"AskPrice3=%s 申卖价三",buf);
	AskVolume3.getString(buf);
	pLogger->output(indent+1,0,"AskVolume3=%s 申卖量三",buf);
	BidPrice4.getString(buf);
	pLogger->output(indent+1,0,"BidPrice4=%s 申买价四",buf);
	BidVolume4.getString(buf);
	pLogger->output(indent+1,0,"BidVolume4=%s 申买量四",buf);
	AskPrice4.getString(buf);
	pLogger->output(indent+1,0,"AskPrice4=%s 申卖价四",buf);
	AskVolume4.getString(buf);
	pLogger->output(indent+1,0,"AskVolume4=%s 申卖量四",buf);
	BidPrice5.getString(buf);
	pLogger->output(indent+1,0,"BidPrice5=%s 申买价五",buf);
	BidVolume5.getString(buf);
	pLogger->output(indent+1,0,"BidVolume5=%s 申买量五",buf);
	AskPrice5.getString(buf);
	pLogger->output(indent+1,0,"AskPrice5=%s 申卖价五",buf);
	AskVolume5.getString(buf);
	pLogger->output(indent+1,0,"AskVolume5=%s 申卖量五",buf);
	SequenceNo.getString(buf);
	pLogger->output(indent+1,0,"SequenceNo=%s 序号",buf);
	pLogger->output(indent,0,"}");
}

CDepthMarketDataDetailIterator::~CDepthMarketDataDetailIterator(void)
{
}


void CDepthMarketDataDetailIterator::dump(FILE *output)
{
	CDepthMarketDataDetail *pDepthMarketDataDetail;
	
	while ((pDepthMarketDataDetail=next())!=NULL)
	{
		pDepthMarketDataDetail->dump(output);
	}
}



void CWriteableInstrumentStatusDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,InstrumentID,InstrumentStatus,TradingSegmentSN,EnterTime,EnterReason,SettlementID,SequenceNo\n");
}
	
void CWriteableInstrumentStatusDetail::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	InstrumentID.clear();
	InstrumentStatus.clear();
	TradingSegmentSN.clear();
	EnterTime.clear();
	EnterReason.clear();
	SettlementID.clear();
	SequenceNo.clear();
}

int CWriteableInstrumentStatusDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableInstrumentStatusDetail),input)!=sizeof(CWriteableInstrumentStatusDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableInstrumentStatusDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterTime=token;
		}
		else
		{
			EnterTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterReason=token;
		}
		else
		{
			EnterReason="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SequenceNo=token;
		}
		else
		{
			SequenceNo="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			else if (!strcmp(fieldName,"EnterTime"))
			{
				EnterTime=token;
			}
			else if (!strcmp(fieldName,"EnterReason"))
			{
				EnterReason=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"SequenceNo"))
			{
				SequenceNo=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableInstrumentStatusDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableInstrumentStatusDetail),output)!=sizeof(CWriteableInstrumentStatusDetail))
		return 0;
	else
		return 1;
}

int CWriteableInstrumentStatusDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterReason.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SequenceNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableInstrumentStatusDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCInstrumentStatusDetail%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	EnterTime.getString(buf);
	fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);	
	EnterReason.getString(buf);
	fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableInstrumentStatusDetail::dumpDiff(FILE *fp, const CWriteableInstrumentStatusDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCInstrumentStatusDetail = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	EnterTime.getString(buf);
	if (compare(EnterTime.getValue(),pOriginal->EnterTime.getValue())!=0)
	{
		pOriginal->EnterTime.getString(bufOriginal);
		fprintf(fp,"\t\tEnterTime = %s -> %s    [进入本状态时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);
	}
	EnterReason.getString(buf);
	if (compare(EnterReason.getValue(),pOriginal->EnterReason.getValue())!=0)
	{
		pOriginal->EnterReason.getString(bufOriginal);
		fprintf(fp,"\t\tEnterReason = %s -> %s    [进入本状态原因]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	SequenceNo.getString(buf);
	if (compare(SequenceNo.getValue(),pOriginal->SequenceNo.getValue())!=0)
	{
		pOriginal->SequenceNo.getString(bufOriginal);
		fprintf(fp,"\t\tSequenceNo = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableInstrumentStatusDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
	EnterTime.getString(buf);
	fprintf(fp,",EnterTime,%s",buf);	
	EnterReason.getString(buf);
	fprintf(fp,",EnterReason,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,",SequenceNo,%s",buf);	
}

void CWriteableInstrumentStatusDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	EnterTime.getString(buf);
	sprintf(p,"EnterTime=%s,",buf);
	p+=strlen(p);
	EnterReason.getString(buf);
	sprintf(p,"EnterReason=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	SequenceNo.getString(buf);
	sprintf(p,"SequenceNo=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableInstrumentStatusDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CInstrumentStatusDetail");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	EnterTime.getString(buf);
	pLogger->output(indent+1,0,"EnterTime=%s 进入本状态时间",buf);
	EnterReason.getString(buf);
	pLogger->output(indent+1,0,"EnterReason=%s 进入本状态原因",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	SequenceNo.getString(buf);
	pLogger->output(indent+1,0,"SequenceNo=%s 序列号",buf);
	pLogger->output(indent,0,"}");
}

CInstrumentStatusDetailIterator::~CInstrumentStatusDetailIterator(void)
{
}


void CInstrumentStatusDetailIterator::dump(FILE *output)
{
	CInstrumentStatusDetail *pInstrumentStatusDetail;
	
	while ((pInstrumentStatusDetail=next())!=NULL)
	{
		pInstrumentStatusDetail->dump(output);
	}
}



void CWriteableFrontStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"FrontID,LastReportTime,IsActive\n");
}
	
void CWriteableFrontStatus::init(void)
{
	FrontID.clear();
	LastReportTime.clear();
	IsActive.clear();
}

int CWriteableFrontStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableFrontStatus),input)!=sizeof(CWriteableFrontStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableFrontStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			FrontID=token;
		}
		else
		{
			FrontID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastReportTime=token;
		}
		else
		{
			LastReportTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsActive=token;
		}
		else
		{
			IsActive="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"FrontID"))
			{
				FrontID=token;
			}
			else if (!strcmp(fieldName,"LastReportTime"))
			{
				LastReportTime=token;
			}
			else if (!strcmp(fieldName,"IsActive"))
			{
				IsActive=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableFrontStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableFrontStatus),output)!=sizeof(CWriteableFrontStatus))
		return 0;
	else
		return 1;
}

int CWriteableFrontStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	FrontID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastReportTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsActive.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableFrontStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCFrontStatus%s = {\n", index_buf);
	FrontID.getString(buf);
	fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);	
	LastReportTime.getString(buf);
	fprintf(fp,"\t\tLastReportTime = %s    [上次报告时间]\n",buf);	
	IsActive.getString(buf);
	fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableFrontStatus::dumpDiff(FILE *fp, const CWriteableFrontStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCFrontStatus = {\n");
	FrontID.getString(buf);
	if (compare(FrontID.getValue(),pOriginal->FrontID.getValue())!=0)
	{
		pOriginal->FrontID.getString(bufOriginal);
		fprintf(fp,"\t\tFrontID = %s -> %s    [前置编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrontID = %s    [前置编号]\n",buf);
	}
	LastReportTime.getString(buf);
	if (compare(LastReportTime.getValue(),pOriginal->LastReportTime.getValue())!=0)
	{
		pOriginal->LastReportTime.getString(bufOriginal);
		fprintf(fp,"\t\tLastReportTime = %s -> %s    [上次报告时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastReportTime = %s    [上次报告时间]\n",buf);
	}
	IsActive.getString(buf);
	if (compare(IsActive.getValue(),pOriginal->IsActive.getValue())!=0)
	{
		pOriginal->IsActive.getString(bufOriginal);
		fprintf(fp,"\t\tIsActive = %s -> %s    [是否活跃]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsActive = %s    [是否活跃]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableFrontStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	FrontID.getString(buf);
	fprintf(fp,",FrontID,%s",buf);	
	LastReportTime.getString(buf);
	fprintf(fp,",LastReportTime,%s",buf);	
	IsActive.getString(buf);
	fprintf(fp,",IsActive,%s",buf);	
}

void CWriteableFrontStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	FrontID.getString(buf);
	sprintf(p,"FrontID=%s,",buf);
	p+=strlen(p);
	LastReportTime.getString(buf);
	sprintf(p,"LastReportTime=%s,",buf);
	p+=strlen(p);
	IsActive.getString(buf);
	sprintf(p,"IsActive=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableFrontStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CFrontStatus");
	pLogger->output(indent,0,"{");
	FrontID.getString(buf);
	pLogger->output(indent+1,0,"FrontID=%s 前置编号",buf);
	LastReportTime.getString(buf);
	pLogger->output(indent+1,0,"LastReportTime=%s 上次报告时间",buf);
	IsActive.getString(buf);
	pLogger->output(indent+1,0,"IsActive=%s 是否活跃",buf);
	pLogger->output(indent,0,"}");
}

CFrontStatusIterator::~CFrontStatusIterator(void)
{
}


void CFrontStatusIterator::dump(FILE *output)
{
	CFrontStatus *pFrontStatus;
	
	while ((pFrontStatus=next())!=NULL)
	{
		pFrontStatus->dump(output);
	}
}



void CWriteableMaxLocalID::writeCSVHead(FILE *output)
{
	fprintf(output,"UserID,MaxOrderLocalID\n");
}
	
void CWriteableMaxLocalID::init(void)
{
	UserID.clear();
	MaxOrderLocalID.clear();
}

int CWriteableMaxLocalID::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMaxLocalID),input)!=sizeof(CWriteableMaxLocalID))
		return 0;
	else
		return 1;
}
	
int CWriteableMaxLocalID::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxOrderLocalID=token;
		}
		else
		{
			MaxOrderLocalID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"MaxOrderLocalID"))
			{
				MaxOrderLocalID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMaxLocalID::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMaxLocalID),output)!=sizeof(CWriteableMaxLocalID))
		return 0;
	else
		return 1;
}

int CWriteableMaxLocalID::writeCSV(FILE *output) const
{
	char buffer[1025];
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxOrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMaxLocalID::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMaxLocalID%s = {\n", index_buf);
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	MaxOrderLocalID.getString(buf);
	fprintf(fp,"\t\tMaxOrderLocalID = %s    [最大报单本地编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMaxLocalID::dumpDiff(FILE *fp, const CWriteableMaxLocalID *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMaxLocalID = {\n");
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	MaxOrderLocalID.getString(buf);
	if (compare(MaxOrderLocalID.getValue(),pOriginal->MaxOrderLocalID.getValue())!=0)
	{
		pOriginal->MaxOrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tMaxOrderLocalID = %s -> %s    [最大报单本地编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxOrderLocalID = %s    [最大报单本地编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMaxLocalID::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	MaxOrderLocalID.getString(buf);
	fprintf(fp,",MaxOrderLocalID,%s",buf);	
}

void CWriteableMaxLocalID::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	MaxOrderLocalID.getString(buf);
	sprintf(p,"MaxOrderLocalID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMaxLocalID::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMaxLocalID");
	pLogger->output(indent,0,"{");
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	MaxOrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"MaxOrderLocalID=%s 最大报单本地编号",buf);
	pLogger->output(indent,0,"}");
}

CMaxLocalIDIterator::~CMaxLocalIDIterator(void)
{
}


void CMaxLocalIDIterator::dump(FILE *output)
{
	CMaxLocalID *pMaxLocalID;
	
	while ((pMaxLocalID=next())!=NULL)
	{
		pMaxLocalID->dump(output);
	}
}



void CWriteableBulletin::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,BulletinID,SequenceNo,NewsType,NewsUrgency,SendTime,Abstract,ComeFrom,Content,URLLink,MarketID\n");
}
	
void CWriteableBulletin::init(void)
{
	TradingDay.clear();
	BulletinID.clear();
	SequenceNo.clear();
	NewsType.clear();
	NewsUrgency.clear();
	SendTime.clear();
	Abstract.clear();
	ComeFrom.clear();
	Content.clear();
	URLLink.clear();
	MarketID.clear();
}

int CWriteableBulletin::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableBulletin),input)!=sizeof(CWriteableBulletin))
		return 0;
	else
		return 1;
}
	
int CWriteableBulletin::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BulletinID=token;
		}
		else
		{
			BulletinID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SequenceNo=token;
		}
		else
		{
			SequenceNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NewsType=token;
		}
		else
		{
			NewsType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NewsUrgency=token;
		}
		else
		{
			NewsUrgency="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SendTime=token;
		}
		else
		{
			SendTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Abstract=token;
		}
		else
		{
			Abstract="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ComeFrom=token;
		}
		else
		{
			ComeFrom="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Content=token;
		}
		else
		{
			Content="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			URLLink=token;
		}
		else
		{
			URLLink="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketID=token;
		}
		else
		{
			MarketID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"BulletinID"))
			{
				BulletinID=token;
			}
			else if (!strcmp(fieldName,"SequenceNo"))
			{
				SequenceNo=token;
			}
			else if (!strcmp(fieldName,"NewsType"))
			{
				NewsType=token;
			}
			else if (!strcmp(fieldName,"NewsUrgency"))
			{
				NewsUrgency=token;
			}
			else if (!strcmp(fieldName,"SendTime"))
			{
				SendTime=token;
			}
			else if (!strcmp(fieldName,"Abstract"))
			{
				Abstract=token;
			}
			else if (!strcmp(fieldName,"ComeFrom"))
			{
				ComeFrom=token;
			}
			else if (!strcmp(fieldName,"Content"))
			{
				Content=token;
			}
			else if (!strcmp(fieldName,"URLLink"))
			{
				URLLink=token;
			}
			else if (!strcmp(fieldName,"MarketID"))
			{
				MarketID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableBulletin::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableBulletin),output)!=sizeof(CWriteableBulletin))
		return 0;
	else
		return 1;
}

int CWriteableBulletin::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BulletinID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SequenceNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NewsType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NewsUrgency.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SendTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Abstract.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ComeFrom.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Content.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	URLLink.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableBulletin::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCBulletin%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	BulletinID.getString(buf);
	fprintf(fp,"\t\tBulletinID = %s    [公告编号]\n",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);	
	NewsType.getString(buf);
	fprintf(fp,"\t\tNewsType = %s    [公告类型]\n",buf);	
	NewsUrgency.getString(buf);
	fprintf(fp,"\t\tNewsUrgency = %s    [紧急程度]\n",buf);	
	SendTime.getString(buf);
	fprintf(fp,"\t\tSendTime = %s    [发送时间]\n",buf);	
	Abstract.getString(buf);
	fprintf(fp,"\t\tAbstract = %s    [消息摘要]\n",buf);	
	ComeFrom.getString(buf);
	fprintf(fp,"\t\tComeFrom = %s    [消息来源]\n",buf);	
	Content.getString(buf);
	fprintf(fp,"\t\tContent = %s    [消息正文]\n",buf);	
	URLLink.getString(buf);
	fprintf(fp,"\t\tURLLink = %s    [WEB地址]\n",buf);	
	MarketID.getString(buf);
	fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableBulletin::dumpDiff(FILE *fp, const CWriteableBulletin *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCBulletin = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	BulletinID.getString(buf);
	if (compare(BulletinID.getValue(),pOriginal->BulletinID.getValue())!=0)
	{
		pOriginal->BulletinID.getString(bufOriginal);
		fprintf(fp,"\t\tBulletinID = %s -> %s    [公告编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBulletinID = %s    [公告编号]\n",buf);
	}
	SequenceNo.getString(buf);
	if (compare(SequenceNo.getValue(),pOriginal->SequenceNo.getValue())!=0)
	{
		pOriginal->SequenceNo.getString(bufOriginal);
		fprintf(fp,"\t\tSequenceNo = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);
	}
	NewsType.getString(buf);
	if (compare(NewsType.getValue(),pOriginal->NewsType.getValue())!=0)
	{
		pOriginal->NewsType.getString(bufOriginal);
		fprintf(fp,"\t\tNewsType = %s -> %s    [公告类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNewsType = %s    [公告类型]\n",buf);
	}
	NewsUrgency.getString(buf);
	if (compare(NewsUrgency.getValue(),pOriginal->NewsUrgency.getValue())!=0)
	{
		pOriginal->NewsUrgency.getString(bufOriginal);
		fprintf(fp,"\t\tNewsUrgency = %s -> %s    [紧急程度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNewsUrgency = %s    [紧急程度]\n",buf);
	}
	SendTime.getString(buf);
	if (compare(SendTime.getValue(),pOriginal->SendTime.getValue())!=0)
	{
		pOriginal->SendTime.getString(bufOriginal);
		fprintf(fp,"\t\tSendTime = %s -> %s    [发送时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSendTime = %s    [发送时间]\n",buf);
	}
	Abstract.getString(buf);
	if (compare(Abstract.getValue(),pOriginal->Abstract.getValue())!=0)
	{
		pOriginal->Abstract.getString(bufOriginal);
		fprintf(fp,"\t\tAbstract = %s -> %s    [消息摘要]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAbstract = %s    [消息摘要]\n",buf);
	}
	ComeFrom.getString(buf);
	if (compare(ComeFrom.getValue(),pOriginal->ComeFrom.getValue())!=0)
	{
		pOriginal->ComeFrom.getString(bufOriginal);
		fprintf(fp,"\t\tComeFrom = %s -> %s    [消息来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tComeFrom = %s    [消息来源]\n",buf);
	}
	Content.getString(buf);
	if (compare(Content.getValue(),pOriginal->Content.getValue())!=0)
	{
		pOriginal->Content.getString(bufOriginal);
		fprintf(fp,"\t\tContent = %s -> %s    [消息正文]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContent = %s    [消息正文]\n",buf);
	}
	URLLink.getString(buf);
	if (compare(URLLink.getValue(),pOriginal->URLLink.getValue())!=0)
	{
		pOriginal->URLLink.getString(bufOriginal);
		fprintf(fp,"\t\tURLLink = %s -> %s    [WEB地址]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tURLLink = %s    [WEB地址]\n",buf);
	}
	MarketID.getString(buf);
	if (compare(MarketID.getValue(),pOriginal->MarketID.getValue())!=0)
	{
		pOriginal->MarketID.getString(bufOriginal);
		fprintf(fp,"\t\tMarketID = %s -> %s    [市场代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketID = %s    [市场代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableBulletin::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	BulletinID.getString(buf);
	fprintf(fp,",BulletinID,%s",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,",SequenceNo,%s",buf);	
	NewsType.getString(buf);
	fprintf(fp,",NewsType,%s",buf);	
	NewsUrgency.getString(buf);
	fprintf(fp,",NewsUrgency,%s",buf);	
	SendTime.getString(buf);
	fprintf(fp,",SendTime,%s",buf);	
	Abstract.getString(buf);
	fprintf(fp,",Abstract,%s",buf);	
	ComeFrom.getString(buf);
	fprintf(fp,",ComeFrom,%s",buf);	
	Content.getString(buf);
	fprintf(fp,",Content,%s",buf);	
	URLLink.getString(buf);
	fprintf(fp,",URLLink,%s",buf);	
	MarketID.getString(buf);
	fprintf(fp,",MarketID,%s",buf);	
}

void CWriteableBulletin::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	BulletinID.getString(buf);
	sprintf(p,"BulletinID=%s,",buf);
	p+=strlen(p);
	SequenceNo.getString(buf);
	sprintf(p,"SequenceNo=%s,",buf);
	p+=strlen(p);
	NewsType.getString(buf);
	sprintf(p,"NewsType=%s,",buf);
	p+=strlen(p);
	NewsUrgency.getString(buf);
	sprintf(p,"NewsUrgency=%s,",buf);
	p+=strlen(p);
	SendTime.getString(buf);
	sprintf(p,"SendTime=%s,",buf);
	p+=strlen(p);
	Abstract.getString(buf);
	sprintf(p,"Abstract=%s,",buf);
	p+=strlen(p);
	ComeFrom.getString(buf);
	sprintf(p,"ComeFrom=%s,",buf);
	p+=strlen(p);
	Content.getString(buf);
	sprintf(p,"Content=%s,",buf);
	p+=strlen(p);
	URLLink.getString(buf);
	sprintf(p,"URLLink=%s,",buf);
	p+=strlen(p);
	MarketID.getString(buf);
	sprintf(p,"MarketID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableBulletin::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CBulletin");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	BulletinID.getString(buf);
	pLogger->output(indent+1,0,"BulletinID=%s 公告编号",buf);
	SequenceNo.getString(buf);
	pLogger->output(indent+1,0,"SequenceNo=%s 序列号",buf);
	NewsType.getString(buf);
	pLogger->output(indent+1,0,"NewsType=%s 公告类型",buf);
	NewsUrgency.getString(buf);
	pLogger->output(indent+1,0,"NewsUrgency=%s 紧急程度",buf);
	SendTime.getString(buf);
	pLogger->output(indent+1,0,"SendTime=%s 发送时间",buf);
	Abstract.getString(buf);
	pLogger->output(indent+1,0,"Abstract=%s 消息摘要",buf);
	ComeFrom.getString(buf);
	pLogger->output(indent+1,0,"ComeFrom=%s 消息来源",buf);
	Content.getString(buf);
	pLogger->output(indent+1,0,"Content=%s 消息正文",buf);
	URLLink.getString(buf);
	pLogger->output(indent+1,0,"URLLink=%s WEB地址",buf);
	MarketID.getString(buf);
	pLogger->output(indent+1,0,"MarketID=%s 市场代码",buf);
	pLogger->output(indent,0,"}");
}

CBulletinIterator::~CBulletinIterator(void)
{
}


void CBulletinIterator::dump(FILE *output)
{
	CBulletin *pBulletin;
	
	while ((pBulletin=next())!=NULL)
	{
		pBulletin->dump(output);
	}
}



void CWriteableMarketDataModify::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,ModifySequence\n");
}
	
void CWriteableMarketDataModify::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	ModifySequence.clear();
	pDepthMarketData=NULL;
}

int CWriteableMarketDataModify::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketDataModify),input)!=sizeof(CWriteableMarketDataModify))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketDataModify::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ModifySequence=token;
		}
		else
		{
			ModifySequence="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ModifySequence"))
			{
				ModifySequence=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketDataModify::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketDataModify),output)!=sizeof(CWriteableMarketDataModify))
		return 0;
	else
		return 1;
}

int CWriteableMarketDataModify::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ModifySequence.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketDataModify::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketDataModify%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ModifySequence.getString(buf);
	fprintf(fp,"\t\tModifySequence = %s    [行情变动序号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataModify::dumpDiff(FILE *fp, const CWriteableMarketDataModify *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketDataModify = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ModifySequence.getString(buf);
	if (compare(ModifySequence.getValue(),pOriginal->ModifySequence.getValue())!=0)
	{
		pOriginal->ModifySequence.getString(bufOriginal);
		fprintf(fp,"\t\tModifySequence = %s -> %s    [行情变动序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tModifySequence = %s    [行情变动序号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketDataModify::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ModifySequence.getString(buf);
	fprintf(fp,",ModifySequence,%s",buf);	
}

void CWriteableMarketDataModify::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ModifySequence.getString(buf);
	sprintf(p,"ModifySequence=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketDataModify::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketDataModify");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ModifySequence.getString(buf);
	pLogger->output(indent+1,0,"ModifySequence=%s 行情变动序号",buf);
	pLogger->output(indent,0,"}");
}

CMarketDataModifyIterator::~CMarketDataModifyIterator(void)
{
}


void CMarketDataModifyIterator::dump(FILE *output)
{
	CMarketDataModify *pMarketDataModify;
	
	while ((pMarketDataModify=next())!=NULL)
	{
		pMarketDataModify->dump(output);
	}
}



void CWriteableDepthMarketData::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID,BidPrice1,BidVolume1,AskPrice1,AskVolume1,BidPrice2,BidVolume2,AskPrice2,AskVolume2,BidPrice3,BidVolume3,AskPrice3,AskVolume3,BidPrice4,BidVolume4,AskPrice4,AskVolume4,BidPrice5,BidVolume5,AskPrice5,AskVolume5\n");
}
	
void CWriteableDepthMarketData::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
	BidPrice1.clear();
	BidVolume1.clear();
	AskPrice1.clear();
	AskVolume1.clear();
	BidPrice2.clear();
	BidVolume2.clear();
	AskPrice2.clear();
	AskVolume2.clear();
	BidPrice3.clear();
	BidVolume3.clear();
	AskPrice3.clear();
	AskVolume3.clear();
	BidPrice4.clear();
	BidVolume4.clear();
	AskPrice4.clear();
	AskVolume4.clear();
	BidPrice5.clear();
	BidVolume5.clear();
	AskPrice5.clear();
	AskVolume5.clear();
	pInstrument=NULL;
}

int CWriteableDepthMarketData::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableDepthMarketData),input)!=sizeof(CWriteableDepthMarketData))
		return 0;
	else
		return 1;
}
	
int CWriteableDepthMarketData::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice1=token;
		}
		else
		{
			BidPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume1=token;
		}
		else
		{
			BidVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice1=token;
		}
		else
		{
			AskPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume1=token;
		}
		else
		{
			AskVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice2=token;
		}
		else
		{
			BidPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume2=token;
		}
		else
		{
			BidVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice2=token;
		}
		else
		{
			AskPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume2=token;
		}
		else
		{
			AskVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice3=token;
		}
		else
		{
			BidPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume3=token;
		}
		else
		{
			BidVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice3=token;
		}
		else
		{
			AskPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume3=token;
		}
		else
		{
			AskVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice4=token;
		}
		else
		{
			BidPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume4=token;
		}
		else
		{
			BidVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice4=token;
		}
		else
		{
			AskPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume4=token;
		}
		else
		{
			AskVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice5=token;
		}
		else
		{
			BidPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume5=token;
		}
		else
		{
			BidVolume5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice5=token;
		}
		else
		{
			AskPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume5=token;
		}
		else
		{
			AskVolume5="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"BidPrice1"))
			{
				BidPrice1=token;
			}
			else if (!strcmp(fieldName,"BidVolume1"))
			{
				BidVolume1=token;
			}
			else if (!strcmp(fieldName,"AskPrice1"))
			{
				AskPrice1=token;
			}
			else if (!strcmp(fieldName,"AskVolume1"))
			{
				AskVolume1=token;
			}
			else if (!strcmp(fieldName,"BidPrice2"))
			{
				BidPrice2=token;
			}
			else if (!strcmp(fieldName,"BidVolume2"))
			{
				BidVolume2=token;
			}
			else if (!strcmp(fieldName,"AskPrice2"))
			{
				AskPrice2=token;
			}
			else if (!strcmp(fieldName,"AskVolume2"))
			{
				AskVolume2=token;
			}
			else if (!strcmp(fieldName,"BidPrice3"))
			{
				BidPrice3=token;
			}
			else if (!strcmp(fieldName,"BidVolume3"))
			{
				BidVolume3=token;
			}
			else if (!strcmp(fieldName,"AskPrice3"))
			{
				AskPrice3=token;
			}
			else if (!strcmp(fieldName,"AskVolume3"))
			{
				AskVolume3=token;
			}
			else if (!strcmp(fieldName,"BidPrice4"))
			{
				BidPrice4=token;
			}
			else if (!strcmp(fieldName,"BidVolume4"))
			{
				BidVolume4=token;
			}
			else if (!strcmp(fieldName,"AskPrice4"))
			{
				AskPrice4=token;
			}
			else if (!strcmp(fieldName,"AskVolume4"))
			{
				AskVolume4=token;
			}
			else if (!strcmp(fieldName,"BidPrice5"))
			{
				BidPrice5=token;
			}
			else if (!strcmp(fieldName,"BidVolume5"))
			{
				BidVolume5=token;
			}
			else if (!strcmp(fieldName,"AskPrice5"))
			{
				AskPrice5=token;
			}
			else if (!strcmp(fieldName,"AskVolume5"))
			{
				AskVolume5=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableDepthMarketData::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableDepthMarketData),output)!=sizeof(CWriteableDepthMarketData))
		return 0;
	else
		return 1;
}

int CWriteableDepthMarketData::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableDepthMarketData::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCDepthMarketData%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableDepthMarketData::dumpDiff(FILE *fp, const CWriteableDepthMarketData *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCDepthMarketData = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	BidPrice1.getString(buf);
	if (compare(BidPrice1.getValue(),pOriginal->BidPrice1.getValue())!=0)
	{
		pOriginal->BidPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice1 = %s -> %s    [申买价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);
	}
	BidVolume1.getString(buf);
	if (compare(BidVolume1.getValue(),pOriginal->BidVolume1.getValue())!=0)
	{
		pOriginal->BidVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume1 = %s -> %s    [申买量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);
	}
	AskPrice1.getString(buf);
	if (compare(AskPrice1.getValue(),pOriginal->AskPrice1.getValue())!=0)
	{
		pOriginal->AskPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice1 = %s -> %s    [申卖价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);
	}
	AskVolume1.getString(buf);
	if (compare(AskVolume1.getValue(),pOriginal->AskVolume1.getValue())!=0)
	{
		pOriginal->AskVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume1 = %s -> %s    [申卖量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);
	}
	BidPrice2.getString(buf);
	if (compare(BidPrice2.getValue(),pOriginal->BidPrice2.getValue())!=0)
	{
		pOriginal->BidPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice2 = %s -> %s    [申买价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);
	}
	BidVolume2.getString(buf);
	if (compare(BidVolume2.getValue(),pOriginal->BidVolume2.getValue())!=0)
	{
		pOriginal->BidVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume2 = %s -> %s    [申买量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);
	}
	AskPrice2.getString(buf);
	if (compare(AskPrice2.getValue(),pOriginal->AskPrice2.getValue())!=0)
	{
		pOriginal->AskPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice2 = %s -> %s    [申卖价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);
	}
	AskVolume2.getString(buf);
	if (compare(AskVolume2.getValue(),pOriginal->AskVolume2.getValue())!=0)
	{
		pOriginal->AskVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume2 = %s -> %s    [申卖量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);
	}
	BidPrice3.getString(buf);
	if (compare(BidPrice3.getValue(),pOriginal->BidPrice3.getValue())!=0)
	{
		pOriginal->BidPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice3 = %s -> %s    [申买价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);
	}
	BidVolume3.getString(buf);
	if (compare(BidVolume3.getValue(),pOriginal->BidVolume3.getValue())!=0)
	{
		pOriginal->BidVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume3 = %s -> %s    [申买量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);
	}
	AskPrice3.getString(buf);
	if (compare(AskPrice3.getValue(),pOriginal->AskPrice3.getValue())!=0)
	{
		pOriginal->AskPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice3 = %s -> %s    [申卖价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);
	}
	AskVolume3.getString(buf);
	if (compare(AskVolume3.getValue(),pOriginal->AskVolume3.getValue())!=0)
	{
		pOriginal->AskVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume3 = %s -> %s    [申卖量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);
	}
	BidPrice4.getString(buf);
	if (compare(BidPrice4.getValue(),pOriginal->BidPrice4.getValue())!=0)
	{
		pOriginal->BidPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice4 = %s -> %s    [申买价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);
	}
	BidVolume4.getString(buf);
	if (compare(BidVolume4.getValue(),pOriginal->BidVolume4.getValue())!=0)
	{
		pOriginal->BidVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume4 = %s -> %s    [申买量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);
	}
	AskPrice4.getString(buf);
	if (compare(AskPrice4.getValue(),pOriginal->AskPrice4.getValue())!=0)
	{
		pOriginal->AskPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice4 = %s -> %s    [申卖价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);
	}
	AskVolume4.getString(buf);
	if (compare(AskVolume4.getValue(),pOriginal->AskVolume4.getValue())!=0)
	{
		pOriginal->AskVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume4 = %s -> %s    [申卖量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);
	}
	BidPrice5.getString(buf);
	if (compare(BidPrice5.getValue(),pOriginal->BidPrice5.getValue())!=0)
	{
		pOriginal->BidPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice5 = %s -> %s    [申买价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);
	}
	BidVolume5.getString(buf);
	if (compare(BidVolume5.getValue(),pOriginal->BidVolume5.getValue())!=0)
	{
		pOriginal->BidVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume5 = %s -> %s    [申买量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);
	}
	AskPrice5.getString(buf);
	if (compare(AskPrice5.getValue(),pOriginal->AskPrice5.getValue())!=0)
	{
		pOriginal->AskPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice5 = %s -> %s    [申卖价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);
	}
	AskVolume5.getString(buf);
	if (compare(AskVolume5.getValue(),pOriginal->AskVolume5.getValue())!=0)
	{
		pOriginal->AskVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume5 = %s -> %s    [申卖量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableDepthMarketData::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,",BidPrice1,%s",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,",BidVolume1,%s",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,",AskPrice1,%s",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,",AskVolume1,%s",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,",BidPrice2,%s",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,",BidVolume2,%s",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,",AskPrice2,%s",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,",AskVolume2,%s",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,",BidPrice3,%s",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,",BidVolume3,%s",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,",AskPrice3,%s",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,",AskVolume3,%s",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,",BidPrice4,%s",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,",BidVolume4,%s",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,",AskPrice4,%s",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,",AskVolume4,%s",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,",BidPrice5,%s",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,",BidVolume5,%s",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,",AskPrice5,%s",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,",AskVolume5,%s",buf);	
}

void CWriteableDepthMarketData::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	BidPrice1.getString(buf);
	sprintf(p,"BidPrice1=%s,",buf);
	p+=strlen(p);
	BidVolume1.getString(buf);
	sprintf(p,"BidVolume1=%s,",buf);
	p+=strlen(p);
	AskPrice1.getString(buf);
	sprintf(p,"AskPrice1=%s,",buf);
	p+=strlen(p);
	AskVolume1.getString(buf);
	sprintf(p,"AskVolume1=%s,",buf);
	p+=strlen(p);
	BidPrice2.getString(buf);
	sprintf(p,"BidPrice2=%s,",buf);
	p+=strlen(p);
	BidVolume2.getString(buf);
	sprintf(p,"BidVolume2=%s,",buf);
	p+=strlen(p);
	AskPrice2.getString(buf);
	sprintf(p,"AskPrice2=%s,",buf);
	p+=strlen(p);
	AskVolume2.getString(buf);
	sprintf(p,"AskVolume2=%s,",buf);
	p+=strlen(p);
	BidPrice3.getString(buf);
	sprintf(p,"BidPrice3=%s,",buf);
	p+=strlen(p);
	BidVolume3.getString(buf);
	sprintf(p,"BidVolume3=%s,",buf);
	p+=strlen(p);
	AskPrice3.getString(buf);
	sprintf(p,"AskPrice3=%s,",buf);
	p+=strlen(p);
	AskVolume3.getString(buf);
	sprintf(p,"AskVolume3=%s,",buf);
	p+=strlen(p);
	BidPrice4.getString(buf);
	sprintf(p,"BidPrice4=%s,",buf);
	p+=strlen(p);
	BidVolume4.getString(buf);
	sprintf(p,"BidVolume4=%s,",buf);
	p+=strlen(p);
	AskPrice4.getString(buf);
	sprintf(p,"AskPrice4=%s,",buf);
	p+=strlen(p);
	AskVolume4.getString(buf);
	sprintf(p,"AskVolume4=%s,",buf);
	p+=strlen(p);
	BidPrice5.getString(buf);
	sprintf(p,"BidPrice5=%s,",buf);
	p+=strlen(p);
	BidVolume5.getString(buf);
	sprintf(p,"BidVolume5=%s,",buf);
	p+=strlen(p);
	AskPrice5.getString(buf);
	sprintf(p,"AskPrice5=%s,",buf);
	p+=strlen(p);
	AskVolume5.getString(buf);
	sprintf(p,"AskVolume5=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableDepthMarketData::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CDepthMarketData");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	BidPrice1.getString(buf);
	pLogger->output(indent+1,0,"BidPrice1=%s 申买价一",buf);
	BidVolume1.getString(buf);
	pLogger->output(indent+1,0,"BidVolume1=%s 申买量一",buf);
	AskPrice1.getString(buf);
	pLogger->output(indent+1,0,"AskPrice1=%s 申卖价一",buf);
	AskVolume1.getString(buf);
	pLogger->output(indent+1,0,"AskVolume1=%s 申卖量一",buf);
	BidPrice2.getString(buf);
	pLogger->output(indent+1,0,"BidPrice2=%s 申买价二",buf);
	BidVolume2.getString(buf);
	pLogger->output(indent+1,0,"BidVolume2=%s 申买量二",buf);
	AskPrice2.getString(buf);
	pLogger->output(indent+1,0,"AskPrice2=%s 申卖价二",buf);
	AskVolume2.getString(buf);
	pLogger->output(indent+1,0,"AskVolume2=%s 申卖量二",buf);
	BidPrice3.getString(buf);
	pLogger->output(indent+1,0,"BidPrice3=%s 申买价三",buf);
	BidVolume3.getString(buf);
	pLogger->output(indent+1,0,"BidVolume3=%s 申买量三",buf);
	AskPrice3.getString(buf);
	pLogger->output(indent+1,0,"AskPrice3=%s 申卖价三",buf);
	AskVolume3.getString(buf);
	pLogger->output(indent+1,0,"AskVolume3=%s 申卖量三",buf);
	BidPrice4.getString(buf);
	pLogger->output(indent+1,0,"BidPrice4=%s 申买价四",buf);
	BidVolume4.getString(buf);
	pLogger->output(indent+1,0,"BidVolume4=%s 申买量四",buf);
	AskPrice4.getString(buf);
	pLogger->output(indent+1,0,"AskPrice4=%s 申卖价四",buf);
	AskVolume4.getString(buf);
	pLogger->output(indent+1,0,"AskVolume4=%s 申卖量四",buf);
	BidPrice5.getString(buf);
	pLogger->output(indent+1,0,"BidPrice5=%s 申买价五",buf);
	BidVolume5.getString(buf);
	pLogger->output(indent+1,0,"BidVolume5=%s 申买量五",buf);
	AskPrice5.getString(buf);
	pLogger->output(indent+1,0,"AskPrice5=%s 申卖价五",buf);
	AskVolume5.getString(buf);
	pLogger->output(indent+1,0,"AskVolume5=%s 申卖量五",buf);
	pLogger->output(indent,0,"}");
}

CDepthMarketDataIterator::~CDepthMarketDataIterator(void)
{
}


void CDepthMarketDataIterator::dump(FILE *output)
{
	CDepthMarketData *pDepthMarketData;
	
	while ((pDepthMarketData=next())!=NULL)
	{
		pDepthMarketData->dump(output);
	}
}



void CWriteableTopicMarketData::writeCSVHead(FILE *output)
{
	fprintf(output,"TopicID,SnapShotFeq,MarketDataDepth,MarketDataMode,TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID,BidPrice1,BidVolume1,AskPrice1,AskVolume1,BidPrice2,BidVolume2,AskPrice2,AskVolume2,BidPrice3,BidVolume3,AskPrice3,AskVolume3,BidPrice4,BidVolume4,AskPrice4,AskVolume4,BidPrice5,BidVolume5,AskPrice5,AskVolume5\n");
}
	
void CWriteableTopicMarketData::init(void)
{
	TopicID.clear();
	SnapShotFeq.clear();
	MarketDataDepth.clear();
	MarketDataMode.clear();
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
	BidPrice1.clear();
	BidVolume1.clear();
	AskPrice1.clear();
	AskVolume1.clear();
	BidPrice2.clear();
	BidVolume2.clear();
	AskPrice2.clear();
	AskVolume2.clear();
	BidPrice3.clear();
	BidVolume3.clear();
	AskPrice3.clear();
	AskVolume3.clear();
	BidPrice4.clear();
	BidVolume4.clear();
	AskPrice4.clear();
	AskVolume4.clear();
	BidPrice5.clear();
	BidVolume5.clear();
	AskPrice5.clear();
	AskVolume5.clear();
}

int CWriteableTopicMarketData::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableTopicMarketData),input)!=sizeof(CWriteableTopicMarketData))
		return 0;
	else
		return 1;
}
	
int CWriteableTopicMarketData::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TopicID=token;
		}
		else
		{
			TopicID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SnapShotFeq=token;
		}
		else
		{
			SnapShotFeq="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketDataDepth=token;
		}
		else
		{
			MarketDataDepth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarketDataMode=token;
		}
		else
		{
			MarketDataMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice1=token;
		}
		else
		{
			BidPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume1=token;
		}
		else
		{
			BidVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice1=token;
		}
		else
		{
			AskPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume1=token;
		}
		else
		{
			AskVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice2=token;
		}
		else
		{
			BidPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume2=token;
		}
		else
		{
			BidVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice2=token;
		}
		else
		{
			AskPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume2=token;
		}
		else
		{
			AskVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice3=token;
		}
		else
		{
			BidPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume3=token;
		}
		else
		{
			BidVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice3=token;
		}
		else
		{
			AskPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume3=token;
		}
		else
		{
			AskVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice4=token;
		}
		else
		{
			BidPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume4=token;
		}
		else
		{
			BidVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice4=token;
		}
		else
		{
			AskPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume4=token;
		}
		else
		{
			AskVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice5=token;
		}
		else
		{
			BidPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume5=token;
		}
		else
		{
			BidVolume5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice5=token;
		}
		else
		{
			AskPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume5=token;
		}
		else
		{
			AskVolume5="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TopicID"))
			{
				TopicID=token;
			}
			else if (!strcmp(fieldName,"SnapShotFeq"))
			{
				SnapShotFeq=token;
			}
			else if (!strcmp(fieldName,"MarketDataDepth"))
			{
				MarketDataDepth=token;
			}
			else if (!strcmp(fieldName,"MarketDataMode"))
			{
				MarketDataMode=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"BidPrice1"))
			{
				BidPrice1=token;
			}
			else if (!strcmp(fieldName,"BidVolume1"))
			{
				BidVolume1=token;
			}
			else if (!strcmp(fieldName,"AskPrice1"))
			{
				AskPrice1=token;
			}
			else if (!strcmp(fieldName,"AskVolume1"))
			{
				AskVolume1=token;
			}
			else if (!strcmp(fieldName,"BidPrice2"))
			{
				BidPrice2=token;
			}
			else if (!strcmp(fieldName,"BidVolume2"))
			{
				BidVolume2=token;
			}
			else if (!strcmp(fieldName,"AskPrice2"))
			{
				AskPrice2=token;
			}
			else if (!strcmp(fieldName,"AskVolume2"))
			{
				AskVolume2=token;
			}
			else if (!strcmp(fieldName,"BidPrice3"))
			{
				BidPrice3=token;
			}
			else if (!strcmp(fieldName,"BidVolume3"))
			{
				BidVolume3=token;
			}
			else if (!strcmp(fieldName,"AskPrice3"))
			{
				AskPrice3=token;
			}
			else if (!strcmp(fieldName,"AskVolume3"))
			{
				AskVolume3=token;
			}
			else if (!strcmp(fieldName,"BidPrice4"))
			{
				BidPrice4=token;
			}
			else if (!strcmp(fieldName,"BidVolume4"))
			{
				BidVolume4=token;
			}
			else if (!strcmp(fieldName,"AskPrice4"))
			{
				AskPrice4=token;
			}
			else if (!strcmp(fieldName,"AskVolume4"))
			{
				AskVolume4=token;
			}
			else if (!strcmp(fieldName,"BidPrice5"))
			{
				BidPrice5=token;
			}
			else if (!strcmp(fieldName,"BidVolume5"))
			{
				BidVolume5=token;
			}
			else if (!strcmp(fieldName,"AskPrice5"))
			{
				AskPrice5=token;
			}
			else if (!strcmp(fieldName,"AskVolume5"))
			{
				AskVolume5=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableTopicMarketData::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableTopicMarketData),output)!=sizeof(CWriteableTopicMarketData))
		return 0;
	else
		return 1;
}

int CWriteableTopicMarketData::writeCSV(FILE *output) const
{
	char buffer[1025];
	TopicID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SnapShotFeq.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketDataDepth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarketDataMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableTopicMarketData::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCTopicMarketData%s = {\n", index_buf);
	TopicID.getString(buf);
	fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);	
	SnapShotFeq.getString(buf);
	fprintf(fp,"\t\tSnapShotFeq = %s    [采样频率]\n",buf);	
	MarketDataDepth.getString(buf);
	fprintf(fp,"\t\tMarketDataDepth = %s    [市场行情深度]\n",buf);	
	MarketDataMode.getString(buf);
	fprintf(fp,"\t\tMarketDataMode = %s    [行情模式]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableTopicMarketData::dumpDiff(FILE *fp, const CWriteableTopicMarketData *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCTopicMarketData = {\n");
	TopicID.getString(buf);
	if (compare(TopicID.getValue(),pOriginal->TopicID.getValue())!=0)
	{
		pOriginal->TopicID.getString(bufOriginal);
		fprintf(fp,"\t\tTopicID = %s -> %s    [主题代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);
	}
	SnapShotFeq.getString(buf);
	if (compare(SnapShotFeq.getValue(),pOriginal->SnapShotFeq.getValue())!=0)
	{
		pOriginal->SnapShotFeq.getString(bufOriginal);
		fprintf(fp,"\t\tSnapShotFeq = %s -> %s    [采样频率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSnapShotFeq = %s    [采样频率]\n",buf);
	}
	MarketDataDepth.getString(buf);
	if (compare(MarketDataDepth.getValue(),pOriginal->MarketDataDepth.getValue())!=0)
	{
		pOriginal->MarketDataDepth.getString(bufOriginal);
		fprintf(fp,"\t\tMarketDataDepth = %s -> %s    [市场行情深度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketDataDepth = %s    [市场行情深度]\n",buf);
	}
	MarketDataMode.getString(buf);
	if (compare(MarketDataMode.getValue(),pOriginal->MarketDataMode.getValue())!=0)
	{
		pOriginal->MarketDataMode.getString(bufOriginal);
		fprintf(fp,"\t\tMarketDataMode = %s -> %s    [行情模式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarketDataMode = %s    [行情模式]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	BidPrice1.getString(buf);
	if (compare(BidPrice1.getValue(),pOriginal->BidPrice1.getValue())!=0)
	{
		pOriginal->BidPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice1 = %s -> %s    [申买价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);
	}
	BidVolume1.getString(buf);
	if (compare(BidVolume1.getValue(),pOriginal->BidVolume1.getValue())!=0)
	{
		pOriginal->BidVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume1 = %s -> %s    [申买量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);
	}
	AskPrice1.getString(buf);
	if (compare(AskPrice1.getValue(),pOriginal->AskPrice1.getValue())!=0)
	{
		pOriginal->AskPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice1 = %s -> %s    [申卖价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);
	}
	AskVolume1.getString(buf);
	if (compare(AskVolume1.getValue(),pOriginal->AskVolume1.getValue())!=0)
	{
		pOriginal->AskVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume1 = %s -> %s    [申卖量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);
	}
	BidPrice2.getString(buf);
	if (compare(BidPrice2.getValue(),pOriginal->BidPrice2.getValue())!=0)
	{
		pOriginal->BidPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice2 = %s -> %s    [申买价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);
	}
	BidVolume2.getString(buf);
	if (compare(BidVolume2.getValue(),pOriginal->BidVolume2.getValue())!=0)
	{
		pOriginal->BidVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume2 = %s -> %s    [申买量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);
	}
	AskPrice2.getString(buf);
	if (compare(AskPrice2.getValue(),pOriginal->AskPrice2.getValue())!=0)
	{
		pOriginal->AskPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice2 = %s -> %s    [申卖价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);
	}
	AskVolume2.getString(buf);
	if (compare(AskVolume2.getValue(),pOriginal->AskVolume2.getValue())!=0)
	{
		pOriginal->AskVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume2 = %s -> %s    [申卖量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);
	}
	BidPrice3.getString(buf);
	if (compare(BidPrice3.getValue(),pOriginal->BidPrice3.getValue())!=0)
	{
		pOriginal->BidPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice3 = %s -> %s    [申买价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);
	}
	BidVolume3.getString(buf);
	if (compare(BidVolume3.getValue(),pOriginal->BidVolume3.getValue())!=0)
	{
		pOriginal->BidVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume3 = %s -> %s    [申买量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);
	}
	AskPrice3.getString(buf);
	if (compare(AskPrice3.getValue(),pOriginal->AskPrice3.getValue())!=0)
	{
		pOriginal->AskPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice3 = %s -> %s    [申卖价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);
	}
	AskVolume3.getString(buf);
	if (compare(AskVolume3.getValue(),pOriginal->AskVolume3.getValue())!=0)
	{
		pOriginal->AskVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume3 = %s -> %s    [申卖量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);
	}
	BidPrice4.getString(buf);
	if (compare(BidPrice4.getValue(),pOriginal->BidPrice4.getValue())!=0)
	{
		pOriginal->BidPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice4 = %s -> %s    [申买价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);
	}
	BidVolume4.getString(buf);
	if (compare(BidVolume4.getValue(),pOriginal->BidVolume4.getValue())!=0)
	{
		pOriginal->BidVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume4 = %s -> %s    [申买量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);
	}
	AskPrice4.getString(buf);
	if (compare(AskPrice4.getValue(),pOriginal->AskPrice4.getValue())!=0)
	{
		pOriginal->AskPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice4 = %s -> %s    [申卖价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);
	}
	AskVolume4.getString(buf);
	if (compare(AskVolume4.getValue(),pOriginal->AskVolume4.getValue())!=0)
	{
		pOriginal->AskVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume4 = %s -> %s    [申卖量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);
	}
	BidPrice5.getString(buf);
	if (compare(BidPrice5.getValue(),pOriginal->BidPrice5.getValue())!=0)
	{
		pOriginal->BidPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice5 = %s -> %s    [申买价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);
	}
	BidVolume5.getString(buf);
	if (compare(BidVolume5.getValue(),pOriginal->BidVolume5.getValue())!=0)
	{
		pOriginal->BidVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume5 = %s -> %s    [申买量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);
	}
	AskPrice5.getString(buf);
	if (compare(AskPrice5.getValue(),pOriginal->AskPrice5.getValue())!=0)
	{
		pOriginal->AskPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice5 = %s -> %s    [申卖价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);
	}
	AskVolume5.getString(buf);
	if (compare(AskVolume5.getValue(),pOriginal->AskVolume5.getValue())!=0)
	{
		pOriginal->AskVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume5 = %s -> %s    [申卖量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableTopicMarketData::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TopicID.getString(buf);
	fprintf(fp,",TopicID,%s",buf);	
	SnapShotFeq.getString(buf);
	fprintf(fp,",SnapShotFeq,%s",buf);	
	MarketDataDepth.getString(buf);
	fprintf(fp,",MarketDataDepth,%s",buf);	
	MarketDataMode.getString(buf);
	fprintf(fp,",MarketDataMode,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,",BidPrice1,%s",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,",BidVolume1,%s",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,",AskPrice1,%s",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,",AskVolume1,%s",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,",BidPrice2,%s",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,",BidVolume2,%s",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,",AskPrice2,%s",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,",AskVolume2,%s",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,",BidPrice3,%s",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,",BidVolume3,%s",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,",AskPrice3,%s",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,",AskVolume3,%s",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,",BidPrice4,%s",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,",BidVolume4,%s",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,",AskPrice4,%s",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,",AskVolume4,%s",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,",BidPrice5,%s",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,",BidVolume5,%s",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,",AskPrice5,%s",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,",AskVolume5,%s",buf);	
}

void CWriteableTopicMarketData::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TopicID.getString(buf);
	sprintf(p,"TopicID=%s,",buf);
	p+=strlen(p);
	SnapShotFeq.getString(buf);
	sprintf(p,"SnapShotFeq=%s,",buf);
	p+=strlen(p);
	MarketDataDepth.getString(buf);
	sprintf(p,"MarketDataDepth=%s,",buf);
	p+=strlen(p);
	MarketDataMode.getString(buf);
	sprintf(p,"MarketDataMode=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	BidPrice1.getString(buf);
	sprintf(p,"BidPrice1=%s,",buf);
	p+=strlen(p);
	BidVolume1.getString(buf);
	sprintf(p,"BidVolume1=%s,",buf);
	p+=strlen(p);
	AskPrice1.getString(buf);
	sprintf(p,"AskPrice1=%s,",buf);
	p+=strlen(p);
	AskVolume1.getString(buf);
	sprintf(p,"AskVolume1=%s,",buf);
	p+=strlen(p);
	BidPrice2.getString(buf);
	sprintf(p,"BidPrice2=%s,",buf);
	p+=strlen(p);
	BidVolume2.getString(buf);
	sprintf(p,"BidVolume2=%s,",buf);
	p+=strlen(p);
	AskPrice2.getString(buf);
	sprintf(p,"AskPrice2=%s,",buf);
	p+=strlen(p);
	AskVolume2.getString(buf);
	sprintf(p,"AskVolume2=%s,",buf);
	p+=strlen(p);
	BidPrice3.getString(buf);
	sprintf(p,"BidPrice3=%s,",buf);
	p+=strlen(p);
	BidVolume3.getString(buf);
	sprintf(p,"BidVolume3=%s,",buf);
	p+=strlen(p);
	AskPrice3.getString(buf);
	sprintf(p,"AskPrice3=%s,",buf);
	p+=strlen(p);
	AskVolume3.getString(buf);
	sprintf(p,"AskVolume3=%s,",buf);
	p+=strlen(p);
	BidPrice4.getString(buf);
	sprintf(p,"BidPrice4=%s,",buf);
	p+=strlen(p);
	BidVolume4.getString(buf);
	sprintf(p,"BidVolume4=%s,",buf);
	p+=strlen(p);
	AskPrice4.getString(buf);
	sprintf(p,"AskPrice4=%s,",buf);
	p+=strlen(p);
	AskVolume4.getString(buf);
	sprintf(p,"AskVolume4=%s,",buf);
	p+=strlen(p);
	BidPrice5.getString(buf);
	sprintf(p,"BidPrice5=%s,",buf);
	p+=strlen(p);
	BidVolume5.getString(buf);
	sprintf(p,"BidVolume5=%s,",buf);
	p+=strlen(p);
	AskPrice5.getString(buf);
	sprintf(p,"AskPrice5=%s,",buf);
	p+=strlen(p);
	AskVolume5.getString(buf);
	sprintf(p,"AskVolume5=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableTopicMarketData::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CTopicMarketData");
	pLogger->output(indent,0,"{");
	TopicID.getString(buf);
	pLogger->output(indent+1,0,"TopicID=%s 主题代码",buf);
	SnapShotFeq.getString(buf);
	pLogger->output(indent+1,0,"SnapShotFeq=%s 采样频率",buf);
	MarketDataDepth.getString(buf);
	pLogger->output(indent+1,0,"MarketDataDepth=%s 市场行情深度",buf);
	MarketDataMode.getString(buf);
	pLogger->output(indent+1,0,"MarketDataMode=%s 行情模式",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	BidPrice1.getString(buf);
	pLogger->output(indent+1,0,"BidPrice1=%s 申买价一",buf);
	BidVolume1.getString(buf);
	pLogger->output(indent+1,0,"BidVolume1=%s 申买量一",buf);
	AskPrice1.getString(buf);
	pLogger->output(indent+1,0,"AskPrice1=%s 申卖价一",buf);
	AskVolume1.getString(buf);
	pLogger->output(indent+1,0,"AskVolume1=%s 申卖量一",buf);
	BidPrice2.getString(buf);
	pLogger->output(indent+1,0,"BidPrice2=%s 申买价二",buf);
	BidVolume2.getString(buf);
	pLogger->output(indent+1,0,"BidVolume2=%s 申买量二",buf);
	AskPrice2.getString(buf);
	pLogger->output(indent+1,0,"AskPrice2=%s 申卖价二",buf);
	AskVolume2.getString(buf);
	pLogger->output(indent+1,0,"AskVolume2=%s 申卖量二",buf);
	BidPrice3.getString(buf);
	pLogger->output(indent+1,0,"BidPrice3=%s 申买价三",buf);
	BidVolume3.getString(buf);
	pLogger->output(indent+1,0,"BidVolume3=%s 申买量三",buf);
	AskPrice3.getString(buf);
	pLogger->output(indent+1,0,"AskPrice3=%s 申卖价三",buf);
	AskVolume3.getString(buf);
	pLogger->output(indent+1,0,"AskVolume3=%s 申卖量三",buf);
	BidPrice4.getString(buf);
	pLogger->output(indent+1,0,"BidPrice4=%s 申买价四",buf);
	BidVolume4.getString(buf);
	pLogger->output(indent+1,0,"BidVolume4=%s 申买量四",buf);
	AskPrice4.getString(buf);
	pLogger->output(indent+1,0,"AskPrice4=%s 申卖价四",buf);
	AskVolume4.getString(buf);
	pLogger->output(indent+1,0,"AskVolume4=%s 申卖量四",buf);
	BidPrice5.getString(buf);
	pLogger->output(indent+1,0,"BidPrice5=%s 申买价五",buf);
	BidVolume5.getString(buf);
	pLogger->output(indent+1,0,"BidVolume5=%s 申买量五",buf);
	AskPrice5.getString(buf);
	pLogger->output(indent+1,0,"AskPrice5=%s 申卖价五",buf);
	AskVolume5.getString(buf);
	pLogger->output(indent+1,0,"AskVolume5=%s 申卖量五",buf);
	pLogger->output(indent,0,"}");
}

CTopicMarketDataIterator::~CTopicMarketDataIterator(void)
{
}


void CTopicMarketDataIterator::dump(FILE *output)
{
	CTopicMarketData *pTopicMarketData;
	
	while ((pTopicMarketData=next())!=NULL)
	{
		pTopicMarketData->dump(output);
	}
}



void CWriteableTopicMarketDataVersion::writeCSVHead(FILE *output)
{
	fprintf(output,"TopicID,Version,TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID,BidPrice1,BidVolume1,AskPrice1,AskVolume1,BidPrice2,BidVolume2,AskPrice2,AskVolume2,BidPrice3,BidVolume3,AskPrice3,AskVolume3,BidPrice4,BidVolume4,AskPrice4,AskVolume4,BidPrice5,BidVolume5,AskPrice5,AskVolume5\n");
}
	
void CWriteableTopicMarketDataVersion::init(void)
{
	TopicID.clear();
	Version.clear();
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
	BidPrice1.clear();
	BidVolume1.clear();
	AskPrice1.clear();
	AskVolume1.clear();
	BidPrice2.clear();
	BidVolume2.clear();
	AskPrice2.clear();
	AskVolume2.clear();
	BidPrice3.clear();
	BidVolume3.clear();
	AskPrice3.clear();
	AskVolume3.clear();
	BidPrice4.clear();
	BidVolume4.clear();
	AskPrice4.clear();
	AskVolume4.clear();
	BidPrice5.clear();
	BidVolume5.clear();
	AskPrice5.clear();
	AskVolume5.clear();
}

int CWriteableTopicMarketDataVersion::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableTopicMarketDataVersion),input)!=sizeof(CWriteableTopicMarketDataVersion))
		return 0;
	else
		return 1;
}
	
int CWriteableTopicMarketDataVersion::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TopicID=token;
		}
		else
		{
			TopicID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Version=token;
		}
		else
		{
			Version="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice1=token;
		}
		else
		{
			BidPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume1=token;
		}
		else
		{
			BidVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice1=token;
		}
		else
		{
			AskPrice1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume1=token;
		}
		else
		{
			AskVolume1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice2=token;
		}
		else
		{
			BidPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume2=token;
		}
		else
		{
			BidVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice2=token;
		}
		else
		{
			AskPrice2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume2=token;
		}
		else
		{
			AskVolume2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice3=token;
		}
		else
		{
			BidPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume3=token;
		}
		else
		{
			BidVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice3=token;
		}
		else
		{
			AskPrice3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume3=token;
		}
		else
		{
			AskVolume3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice4=token;
		}
		else
		{
			BidPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume4=token;
		}
		else
		{
			BidVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice4=token;
		}
		else
		{
			AskPrice4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume4=token;
		}
		else
		{
			AskVolume4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice5=token;
		}
		else
		{
			BidPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidVolume5=token;
		}
		else
		{
			BidVolume5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice5=token;
		}
		else
		{
			AskPrice5="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskVolume5=token;
		}
		else
		{
			AskVolume5="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TopicID"))
			{
				TopicID=token;
			}
			else if (!strcmp(fieldName,"Version"))
			{
				Version=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"BidPrice1"))
			{
				BidPrice1=token;
			}
			else if (!strcmp(fieldName,"BidVolume1"))
			{
				BidVolume1=token;
			}
			else if (!strcmp(fieldName,"AskPrice1"))
			{
				AskPrice1=token;
			}
			else if (!strcmp(fieldName,"AskVolume1"))
			{
				AskVolume1=token;
			}
			else if (!strcmp(fieldName,"BidPrice2"))
			{
				BidPrice2=token;
			}
			else if (!strcmp(fieldName,"BidVolume2"))
			{
				BidVolume2=token;
			}
			else if (!strcmp(fieldName,"AskPrice2"))
			{
				AskPrice2=token;
			}
			else if (!strcmp(fieldName,"AskVolume2"))
			{
				AskVolume2=token;
			}
			else if (!strcmp(fieldName,"BidPrice3"))
			{
				BidPrice3=token;
			}
			else if (!strcmp(fieldName,"BidVolume3"))
			{
				BidVolume3=token;
			}
			else if (!strcmp(fieldName,"AskPrice3"))
			{
				AskPrice3=token;
			}
			else if (!strcmp(fieldName,"AskVolume3"))
			{
				AskVolume3=token;
			}
			else if (!strcmp(fieldName,"BidPrice4"))
			{
				BidPrice4=token;
			}
			else if (!strcmp(fieldName,"BidVolume4"))
			{
				BidVolume4=token;
			}
			else if (!strcmp(fieldName,"AskPrice4"))
			{
				AskPrice4=token;
			}
			else if (!strcmp(fieldName,"AskVolume4"))
			{
				AskVolume4=token;
			}
			else if (!strcmp(fieldName,"BidPrice5"))
			{
				BidPrice5=token;
			}
			else if (!strcmp(fieldName,"BidVolume5"))
			{
				BidVolume5=token;
			}
			else if (!strcmp(fieldName,"AskPrice5"))
			{
				AskPrice5=token;
			}
			else if (!strcmp(fieldName,"AskVolume5"))
			{
				AskVolume5=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableTopicMarketDataVersion::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableTopicMarketDataVersion),output)!=sizeof(CWriteableTopicMarketDataVersion))
		return 0;
	else
		return 1;
}

int CWriteableTopicMarketDataVersion::writeCSV(FILE *output) const
{
	char buffer[1025];
	TopicID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Version.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskVolume5.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableTopicMarketDataVersion::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCTopicMarketDataVersion%s = {\n", index_buf);
	TopicID.getString(buf);
	fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);	
	Version.getString(buf);
	fprintf(fp,"\t\tVersion = %s    [快照版本]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableTopicMarketDataVersion::dumpDiff(FILE *fp, const CWriteableTopicMarketDataVersion *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCTopicMarketDataVersion = {\n");
	TopicID.getString(buf);
	if (compare(TopicID.getValue(),pOriginal->TopicID.getValue())!=0)
	{
		pOriginal->TopicID.getString(bufOriginal);
		fprintf(fp,"\t\tTopicID = %s -> %s    [主题代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTopicID = %s    [主题代码]\n",buf);
	}
	Version.getString(buf);
	if (compare(Version.getValue(),pOriginal->Version.getValue())!=0)
	{
		pOriginal->Version.getString(bufOriginal);
		fprintf(fp,"\t\tVersion = %s -> %s    [快照版本]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVersion = %s    [快照版本]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	BidPrice1.getString(buf);
	if (compare(BidPrice1.getValue(),pOriginal->BidPrice1.getValue())!=0)
	{
		pOriginal->BidPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice1 = %s -> %s    [申买价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice1 = %s    [申买价一]\n",buf);
	}
	BidVolume1.getString(buf);
	if (compare(BidVolume1.getValue(),pOriginal->BidVolume1.getValue())!=0)
	{
		pOriginal->BidVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume1 = %s -> %s    [申买量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume1 = %s    [申买量一]\n",buf);
	}
	AskPrice1.getString(buf);
	if (compare(AskPrice1.getValue(),pOriginal->AskPrice1.getValue())!=0)
	{
		pOriginal->AskPrice1.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice1 = %s -> %s    [申卖价一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice1 = %s    [申卖价一]\n",buf);
	}
	AskVolume1.getString(buf);
	if (compare(AskVolume1.getValue(),pOriginal->AskVolume1.getValue())!=0)
	{
		pOriginal->AskVolume1.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume1 = %s -> %s    [申卖量一]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume1 = %s    [申卖量一]\n",buf);
	}
	BidPrice2.getString(buf);
	if (compare(BidPrice2.getValue(),pOriginal->BidPrice2.getValue())!=0)
	{
		pOriginal->BidPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice2 = %s -> %s    [申买价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice2 = %s    [申买价二]\n",buf);
	}
	BidVolume2.getString(buf);
	if (compare(BidVolume2.getValue(),pOriginal->BidVolume2.getValue())!=0)
	{
		pOriginal->BidVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume2 = %s -> %s    [申买量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume2 = %s    [申买量二]\n",buf);
	}
	AskPrice2.getString(buf);
	if (compare(AskPrice2.getValue(),pOriginal->AskPrice2.getValue())!=0)
	{
		pOriginal->AskPrice2.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice2 = %s -> %s    [申卖价二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice2 = %s    [申卖价二]\n",buf);
	}
	AskVolume2.getString(buf);
	if (compare(AskVolume2.getValue(),pOriginal->AskVolume2.getValue())!=0)
	{
		pOriginal->AskVolume2.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume2 = %s -> %s    [申卖量二]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume2 = %s    [申卖量二]\n",buf);
	}
	BidPrice3.getString(buf);
	if (compare(BidPrice3.getValue(),pOriginal->BidPrice3.getValue())!=0)
	{
		pOriginal->BidPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice3 = %s -> %s    [申买价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice3 = %s    [申买价三]\n",buf);
	}
	BidVolume3.getString(buf);
	if (compare(BidVolume3.getValue(),pOriginal->BidVolume3.getValue())!=0)
	{
		pOriginal->BidVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume3 = %s -> %s    [申买量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume3 = %s    [申买量三]\n",buf);
	}
	AskPrice3.getString(buf);
	if (compare(AskPrice3.getValue(),pOriginal->AskPrice3.getValue())!=0)
	{
		pOriginal->AskPrice3.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice3 = %s -> %s    [申卖价三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice3 = %s    [申卖价三]\n",buf);
	}
	AskVolume3.getString(buf);
	if (compare(AskVolume3.getValue(),pOriginal->AskVolume3.getValue())!=0)
	{
		pOriginal->AskVolume3.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume3 = %s -> %s    [申卖量三]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume3 = %s    [申卖量三]\n",buf);
	}
	BidPrice4.getString(buf);
	if (compare(BidPrice4.getValue(),pOriginal->BidPrice4.getValue())!=0)
	{
		pOriginal->BidPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice4 = %s -> %s    [申买价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice4 = %s    [申买价四]\n",buf);
	}
	BidVolume4.getString(buf);
	if (compare(BidVolume4.getValue(),pOriginal->BidVolume4.getValue())!=0)
	{
		pOriginal->BidVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume4 = %s -> %s    [申买量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume4 = %s    [申买量四]\n",buf);
	}
	AskPrice4.getString(buf);
	if (compare(AskPrice4.getValue(),pOriginal->AskPrice4.getValue())!=0)
	{
		pOriginal->AskPrice4.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice4 = %s -> %s    [申卖价四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice4 = %s    [申卖价四]\n",buf);
	}
	AskVolume4.getString(buf);
	if (compare(AskVolume4.getValue(),pOriginal->AskVolume4.getValue())!=0)
	{
		pOriginal->AskVolume4.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume4 = %s -> %s    [申卖量四]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume4 = %s    [申卖量四]\n",buf);
	}
	BidPrice5.getString(buf);
	if (compare(BidPrice5.getValue(),pOriginal->BidPrice5.getValue())!=0)
	{
		pOriginal->BidPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice5 = %s -> %s    [申买价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice5 = %s    [申买价五]\n",buf);
	}
	BidVolume5.getString(buf);
	if (compare(BidVolume5.getValue(),pOriginal->BidVolume5.getValue())!=0)
	{
		pOriginal->BidVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tBidVolume5 = %s -> %s    [申买量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidVolume5 = %s    [申买量五]\n",buf);
	}
	AskPrice5.getString(buf);
	if (compare(AskPrice5.getValue(),pOriginal->AskPrice5.getValue())!=0)
	{
		pOriginal->AskPrice5.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice5 = %s -> %s    [申卖价五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice5 = %s    [申卖价五]\n",buf);
	}
	AskVolume5.getString(buf);
	if (compare(AskVolume5.getValue(),pOriginal->AskVolume5.getValue())!=0)
	{
		pOriginal->AskVolume5.getString(bufOriginal);
		fprintf(fp,"\t\tAskVolume5 = %s -> %s    [申卖量五]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskVolume5 = %s    [申卖量五]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableTopicMarketDataVersion::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TopicID.getString(buf);
	fprintf(fp,",TopicID,%s",buf);	
	Version.getString(buf);
	fprintf(fp,",Version,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	BidPrice1.getString(buf);
	fprintf(fp,",BidPrice1,%s",buf);	
	BidVolume1.getString(buf);
	fprintf(fp,",BidVolume1,%s",buf);	
	AskPrice1.getString(buf);
	fprintf(fp,",AskPrice1,%s",buf);	
	AskVolume1.getString(buf);
	fprintf(fp,",AskVolume1,%s",buf);	
	BidPrice2.getString(buf);
	fprintf(fp,",BidPrice2,%s",buf);	
	BidVolume2.getString(buf);
	fprintf(fp,",BidVolume2,%s",buf);	
	AskPrice2.getString(buf);
	fprintf(fp,",AskPrice2,%s",buf);	
	AskVolume2.getString(buf);
	fprintf(fp,",AskVolume2,%s",buf);	
	BidPrice3.getString(buf);
	fprintf(fp,",BidPrice3,%s",buf);	
	BidVolume3.getString(buf);
	fprintf(fp,",BidVolume3,%s",buf);	
	AskPrice3.getString(buf);
	fprintf(fp,",AskPrice3,%s",buf);	
	AskVolume3.getString(buf);
	fprintf(fp,",AskVolume3,%s",buf);	
	BidPrice4.getString(buf);
	fprintf(fp,",BidPrice4,%s",buf);	
	BidVolume4.getString(buf);
	fprintf(fp,",BidVolume4,%s",buf);	
	AskPrice4.getString(buf);
	fprintf(fp,",AskPrice4,%s",buf);	
	AskVolume4.getString(buf);
	fprintf(fp,",AskVolume4,%s",buf);	
	BidPrice5.getString(buf);
	fprintf(fp,",BidPrice5,%s",buf);	
	BidVolume5.getString(buf);
	fprintf(fp,",BidVolume5,%s",buf);	
	AskPrice5.getString(buf);
	fprintf(fp,",AskPrice5,%s",buf);	
	AskVolume5.getString(buf);
	fprintf(fp,",AskVolume5,%s",buf);	
}

void CWriteableTopicMarketDataVersion::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TopicID.getString(buf);
	sprintf(p,"TopicID=%s,",buf);
	p+=strlen(p);
	Version.getString(buf);
	sprintf(p,"Version=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	BidPrice1.getString(buf);
	sprintf(p,"BidPrice1=%s,",buf);
	p+=strlen(p);
	BidVolume1.getString(buf);
	sprintf(p,"BidVolume1=%s,",buf);
	p+=strlen(p);
	AskPrice1.getString(buf);
	sprintf(p,"AskPrice1=%s,",buf);
	p+=strlen(p);
	AskVolume1.getString(buf);
	sprintf(p,"AskVolume1=%s,",buf);
	p+=strlen(p);
	BidPrice2.getString(buf);
	sprintf(p,"BidPrice2=%s,",buf);
	p+=strlen(p);
	BidVolume2.getString(buf);
	sprintf(p,"BidVolume2=%s,",buf);
	p+=strlen(p);
	AskPrice2.getString(buf);
	sprintf(p,"AskPrice2=%s,",buf);
	p+=strlen(p);
	AskVolume2.getString(buf);
	sprintf(p,"AskVolume2=%s,",buf);
	p+=strlen(p);
	BidPrice3.getString(buf);
	sprintf(p,"BidPrice3=%s,",buf);
	p+=strlen(p);
	BidVolume3.getString(buf);
	sprintf(p,"BidVolume3=%s,",buf);
	p+=strlen(p);
	AskPrice3.getString(buf);
	sprintf(p,"AskPrice3=%s,",buf);
	p+=strlen(p);
	AskVolume3.getString(buf);
	sprintf(p,"AskVolume3=%s,",buf);
	p+=strlen(p);
	BidPrice4.getString(buf);
	sprintf(p,"BidPrice4=%s,",buf);
	p+=strlen(p);
	BidVolume4.getString(buf);
	sprintf(p,"BidVolume4=%s,",buf);
	p+=strlen(p);
	AskPrice4.getString(buf);
	sprintf(p,"AskPrice4=%s,",buf);
	p+=strlen(p);
	AskVolume4.getString(buf);
	sprintf(p,"AskVolume4=%s,",buf);
	p+=strlen(p);
	BidPrice5.getString(buf);
	sprintf(p,"BidPrice5=%s,",buf);
	p+=strlen(p);
	BidVolume5.getString(buf);
	sprintf(p,"BidVolume5=%s,",buf);
	p+=strlen(p);
	AskPrice5.getString(buf);
	sprintf(p,"AskPrice5=%s,",buf);
	p+=strlen(p);
	AskVolume5.getString(buf);
	sprintf(p,"AskVolume5=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableTopicMarketDataVersion::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CTopicMarketDataVersion");
	pLogger->output(indent,0,"{");
	TopicID.getString(buf);
	pLogger->output(indent+1,0,"TopicID=%s 主题代码",buf);
	Version.getString(buf);
	pLogger->output(indent+1,0,"Version=%s 快照版本",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	BidPrice1.getString(buf);
	pLogger->output(indent+1,0,"BidPrice1=%s 申买价一",buf);
	BidVolume1.getString(buf);
	pLogger->output(indent+1,0,"BidVolume1=%s 申买量一",buf);
	AskPrice1.getString(buf);
	pLogger->output(indent+1,0,"AskPrice1=%s 申卖价一",buf);
	AskVolume1.getString(buf);
	pLogger->output(indent+1,0,"AskVolume1=%s 申卖量一",buf);
	BidPrice2.getString(buf);
	pLogger->output(indent+1,0,"BidPrice2=%s 申买价二",buf);
	BidVolume2.getString(buf);
	pLogger->output(indent+1,0,"BidVolume2=%s 申买量二",buf);
	AskPrice2.getString(buf);
	pLogger->output(indent+1,0,"AskPrice2=%s 申卖价二",buf);
	AskVolume2.getString(buf);
	pLogger->output(indent+1,0,"AskVolume2=%s 申卖量二",buf);
	BidPrice3.getString(buf);
	pLogger->output(indent+1,0,"BidPrice3=%s 申买价三",buf);
	BidVolume3.getString(buf);
	pLogger->output(indent+1,0,"BidVolume3=%s 申买量三",buf);
	AskPrice3.getString(buf);
	pLogger->output(indent+1,0,"AskPrice3=%s 申卖价三",buf);
	AskVolume3.getString(buf);
	pLogger->output(indent+1,0,"AskVolume3=%s 申卖量三",buf);
	BidPrice4.getString(buf);
	pLogger->output(indent+1,0,"BidPrice4=%s 申买价四",buf);
	BidVolume4.getString(buf);
	pLogger->output(indent+1,0,"BidVolume4=%s 申买量四",buf);
	AskPrice4.getString(buf);
	pLogger->output(indent+1,0,"AskPrice4=%s 申卖价四",buf);
	AskVolume4.getString(buf);
	pLogger->output(indent+1,0,"AskVolume4=%s 申卖量四",buf);
	BidPrice5.getString(buf);
	pLogger->output(indent+1,0,"BidPrice5=%s 申买价五",buf);
	BidVolume5.getString(buf);
	pLogger->output(indent+1,0,"BidVolume5=%s 申买量五",buf);
	AskPrice5.getString(buf);
	pLogger->output(indent+1,0,"AskPrice5=%s 申卖价五",buf);
	AskVolume5.getString(buf);
	pLogger->output(indent+1,0,"AskVolume5=%s 申卖量五",buf);
	pLogger->output(indent,0,"}");
}

CTopicMarketDataVersionIterator::~CTopicMarketDataVersionIterator(void)
{
}


void CTopicMarketDataVersionIterator::dump(FILE *output)
{
	CTopicMarketDataVersion *pTopicMarketDataVersion;
	
	while ((pTopicMarketDataVersion=next())!=NULL)
	{
		pTopicMarketDataVersion->dump(output);
	}
}



void CWriteableInformation::writeCSVHead(FILE *output)
{
	fprintf(output,"InformationID,SequenceNo,Content,ContentLength,IsAccomplished\n");
}
	
void CWriteableInformation::init(void)
{
	InformationID.clear();
	SequenceNo.clear();
	Content.clear();
	ContentLength.clear();
	IsAccomplished.clear();
}

int CWriteableInformation::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableInformation),input)!=sizeof(CWriteableInformation))
		return 0;
	else
		return 1;
}
	
int CWriteableInformation::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			InformationID=token;
		}
		else
		{
			InformationID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SequenceNo=token;
		}
		else
		{
			SequenceNo="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Content=token;
		}
		else
		{
			Content="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ContentLength=token;
		}
		else
		{
			ContentLength="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsAccomplished=token;
		}
		else
		{
			IsAccomplished="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"InformationID"))
			{
				InformationID=token;
			}
			else if (!strcmp(fieldName,"SequenceNo"))
			{
				SequenceNo=token;
			}
			else if (!strcmp(fieldName,"Content"))
			{
				Content=token;
			}
			else if (!strcmp(fieldName,"ContentLength"))
			{
				ContentLength=token;
			}
			else if (!strcmp(fieldName,"IsAccomplished"))
			{
				IsAccomplished=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableInformation::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableInformation),output)!=sizeof(CWriteableInformation))
		return 0;
	else
		return 1;
}

int CWriteableInformation::writeCSV(FILE *output) const
{
	char buffer[1025];
	InformationID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SequenceNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Content.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ContentLength.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsAccomplished.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableInformation::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCInformation%s = {\n", index_buf);
	InformationID.getString(buf);
	fprintf(fp,"\t\tInformationID = %s    [信息编号]\n",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);	
	Content.getString(buf);
	fprintf(fp,"\t\tContent = %s    [消息正文]\n",buf);	
	ContentLength.getString(buf);
	fprintf(fp,"\t\tContentLength = %s    [正文长度]\n",buf);	
	IsAccomplished.getString(buf);
	fprintf(fp,"\t\tIsAccomplished = %s    [是否完成]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableInformation::dumpDiff(FILE *fp, const CWriteableInformation *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCInformation = {\n");
	InformationID.getString(buf);
	if (compare(InformationID.getValue(),pOriginal->InformationID.getValue())!=0)
	{
		pOriginal->InformationID.getString(bufOriginal);
		fprintf(fp,"\t\tInformationID = %s -> %s    [信息编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInformationID = %s    [信息编号]\n",buf);
	}
	SequenceNo.getString(buf);
	if (compare(SequenceNo.getValue(),pOriginal->SequenceNo.getValue())!=0)
	{
		pOriginal->SequenceNo.getString(bufOriginal);
		fprintf(fp,"\t\tSequenceNo = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSequenceNo = %s    [序列号]\n",buf);
	}
	Content.getString(buf);
	if (compare(Content.getValue(),pOriginal->Content.getValue())!=0)
	{
		pOriginal->Content.getString(bufOriginal);
		fprintf(fp,"\t\tContent = %s -> %s    [消息正文]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContent = %s    [消息正文]\n",buf);
	}
	ContentLength.getString(buf);
	if (compare(ContentLength.getValue(),pOriginal->ContentLength.getValue())!=0)
	{
		pOriginal->ContentLength.getString(bufOriginal);
		fprintf(fp,"\t\tContentLength = %s -> %s    [正文长度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContentLength = %s    [正文长度]\n",buf);
	}
	IsAccomplished.getString(buf);
	if (compare(IsAccomplished.getValue(),pOriginal->IsAccomplished.getValue())!=0)
	{
		pOriginal->IsAccomplished.getString(bufOriginal);
		fprintf(fp,"\t\tIsAccomplished = %s -> %s    [是否完成]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsAccomplished = %s    [是否完成]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableInformation::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	InformationID.getString(buf);
	fprintf(fp,",InformationID,%s",buf);	
	SequenceNo.getString(buf);
	fprintf(fp,",SequenceNo,%s",buf);	
	Content.getString(buf);
	fprintf(fp,",Content,%s",buf);	
	ContentLength.getString(buf);
	fprintf(fp,",ContentLength,%s",buf);	
	IsAccomplished.getString(buf);
	fprintf(fp,",IsAccomplished,%s",buf);	
}

void CWriteableInformation::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	InformationID.getString(buf);
	sprintf(p,"InformationID=%s,",buf);
	p+=strlen(p);
	SequenceNo.getString(buf);
	sprintf(p,"SequenceNo=%s,",buf);
	p+=strlen(p);
	Content.getString(buf);
	sprintf(p,"Content=%s,",buf);
	p+=strlen(p);
	ContentLength.getString(buf);
	sprintf(p,"ContentLength=%s,",buf);
	p+=strlen(p);
	IsAccomplished.getString(buf);
	sprintf(p,"IsAccomplished=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableInformation::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CInformation");
	pLogger->output(indent,0,"{");
	InformationID.getString(buf);
	pLogger->output(indent+1,0,"InformationID=%s 信息编号",buf);
	SequenceNo.getString(buf);
	pLogger->output(indent+1,0,"SequenceNo=%s 序列号",buf);
	Content.getString(buf);
	pLogger->output(indent+1,0,"Content=%s 消息正文",buf);
	ContentLength.getString(buf);
	pLogger->output(indent+1,0,"ContentLength=%s 正文长度",buf);
	IsAccomplished.getString(buf);
	pLogger->output(indent+1,0,"IsAccomplished=%s 是否完成",buf);
	pLogger->output(indent,0,"}");
}

CInformationIterator::~CInformationIterator(void)
{
}


void CInformationIterator::dump(FILE *output)
{
	CInformation *pInformation;
	
	while ((pInformation=next())!=NULL)
	{
		pInformation->dump(output);
	}
}



void CWriteableOrderCount::writeCSVHead(FILE *output)
{
	fprintf(output,"ParticipantID,StopOrderCount\n");
}
	
void CWriteableOrderCount::init(void)
{
	ParticipantID.clear();
	StopOrderCount.clear();
}

int CWriteableOrderCount::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableOrderCount),input)!=sizeof(CWriteableOrderCount))
		return 0;
	else
		return 1;
}
	
int CWriteableOrderCount::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StopOrderCount=token;
		}
		else
		{
			StopOrderCount="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"StopOrderCount"))
			{
				StopOrderCount=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableOrderCount::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableOrderCount),output)!=sizeof(CWriteableOrderCount))
		return 0;
	else
		return 1;
}

int CWriteableOrderCount::writeCSV(FILE *output) const
{
	char buffer[1025];
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StopOrderCount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableOrderCount::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCOrderCount%s = {\n", index_buf);
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	StopOrderCount.getString(buf);
	fprintf(fp,"\t\tStopOrderCount = %s    [止损报单数量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableOrderCount::dumpDiff(FILE *fp, const CWriteableOrderCount *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCOrderCount = {\n");
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	StopOrderCount.getString(buf);
	if (compare(StopOrderCount.getValue(),pOriginal->StopOrderCount.getValue())!=0)
	{
		pOriginal->StopOrderCount.getString(bufOriginal);
		fprintf(fp,"\t\tStopOrderCount = %s -> %s    [止损报单数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStopOrderCount = %s    [止损报单数量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableOrderCount::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	StopOrderCount.getString(buf);
	fprintf(fp,",StopOrderCount,%s",buf);	
}

void CWriteableOrderCount::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	StopOrderCount.getString(buf);
	sprintf(p,"StopOrderCount=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableOrderCount::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"COrderCount");
	pLogger->output(indent,0,"{");
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	StopOrderCount.getString(buf);
	pLogger->output(indent+1,0,"StopOrderCount=%s 止损报单数量",buf);
	pLogger->output(indent,0,"}");
}

COrderCountIterator::~COrderCountIterator(void)
{
}


void COrderCountIterator::dump(FILE *output)
{
	COrderCount *pOrderCount;
	
	while ((pOrderCount=next())!=NULL)
	{
		pOrderCount->dump(output);
	}
}



void CWriteableInstrument::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ProductID,ProductGroupID,UnderlyingInstrID,ProductClass,PositionType,StrikePrice,OptionsType,VolumeMultiple,UnderlyingMultiple,InstrumentID,InstrumentName,DeliveryYear,DeliveryMonth,AdvanceMonth,IsTrading\n");
}
	
void CWriteableInstrument::init(void)
{
	SettlementGroupID.clear();
	ProductID.clear();
	ProductGroupID.clear();
	UnderlyingInstrID.clear();
	ProductClass.clear();
	PositionType.clear();
	StrikePrice.clear();
	OptionsType.clear();
	VolumeMultiple.clear();
	UnderlyingMultiple.clear();
	InstrumentID.clear();
	InstrumentName.clear();
	DeliveryYear.clear();
	DeliveryMonth.clear();
	AdvanceMonth.clear();
	IsTrading.clear();
	pBaseInstrument=NULL;
	pInstrumentProperty=NULL;
	pInstrumentStatus=NULL;
	pMarketData=NULL;
	pCurrHedgeRule=NULL;
	pCurrFuse=NULL;
	pFusePhase=NULL;
	pBasePriceLimit=NULL;
	pUniPressure=NULL;
	pSGDataSyncStatus=NULL;
}

int CWriteableInstrument::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableInstrument),input)!=sizeof(CWriteableInstrument))
		return 0;
	else
		return 1;
}
	
int CWriteableInstrument::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductGroupID=token;
		}
		else
		{
			ProductGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UnderlyingInstrID=token;
		}
		else
		{
			UnderlyingInstrID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductClass=token;
		}
		else
		{
			ProductClass="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PositionType=token;
		}
		else
		{
			PositionType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StrikePrice=token;
		}
		else
		{
			StrikePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OptionsType=token;
		}
		else
		{
			OptionsType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeMultiple=token;
		}
		else
		{
			VolumeMultiple="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UnderlyingMultiple=token;
		}
		else
		{
			UnderlyingMultiple="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentName=token;
		}
		else
		{
			InstrumentName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeliveryYear=token;
		}
		else
		{
			DeliveryYear="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			DeliveryMonth=token;
		}
		else
		{
			DeliveryMonth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AdvanceMonth=token;
		}
		else
		{
			AdvanceMonth="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsTrading=token;
		}
		else
		{
			IsTrading="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"ProductGroupID"))
			{
				ProductGroupID=token;
			}
			else if (!strcmp(fieldName,"UnderlyingInstrID"))
			{
				UnderlyingInstrID=token;
			}
			else if (!strcmp(fieldName,"ProductClass"))
			{
				ProductClass=token;
			}
			else if (!strcmp(fieldName,"PositionType"))
			{
				PositionType=token;
			}
			else if (!strcmp(fieldName,"StrikePrice"))
			{
				StrikePrice=token;
			}
			else if (!strcmp(fieldName,"OptionsType"))
			{
				OptionsType=token;
			}
			else if (!strcmp(fieldName,"VolumeMultiple"))
			{
				VolumeMultiple=token;
			}
			else if (!strcmp(fieldName,"UnderlyingMultiple"))
			{
				UnderlyingMultiple=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"InstrumentName"))
			{
				InstrumentName=token;
			}
			else if (!strcmp(fieldName,"DeliveryYear"))
			{
				DeliveryYear=token;
			}
			else if (!strcmp(fieldName,"DeliveryMonth"))
			{
				DeliveryMonth=token;
			}
			else if (!strcmp(fieldName,"AdvanceMonth"))
			{
				AdvanceMonth=token;
			}
			else if (!strcmp(fieldName,"IsTrading"))
			{
				IsTrading=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableInstrument::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableInstrument),output)!=sizeof(CWriteableInstrument))
		return 0;
	else
		return 1;
}

int CWriteableInstrument::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UnderlyingInstrID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductClass.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PositionType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StrikePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OptionsType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeMultiple.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UnderlyingMultiple.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeliveryYear.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	DeliveryMonth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AdvanceMonth.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsTrading.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableInstrument::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCInstrument%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	ProductGroupID.getString(buf);
	fprintf(fp,"\t\tProductGroupID = %s    [产品组代码]\n",buf);	
	UnderlyingInstrID.getString(buf);
	fprintf(fp,"\t\tUnderlyingInstrID = %s    [基础商品代码]\n",buf);	
	ProductClass.getString(buf);
	fprintf(fp,"\t\tProductClass = %s    [产品类型]\n",buf);	
	PositionType.getString(buf);
	fprintf(fp,"\t\tPositionType = %s    [持仓类型]\n",buf);	
	StrikePrice.getString(buf);
	fprintf(fp,"\t\tStrikePrice = %s    [执行价]\n",buf);	
	OptionsType.getString(buf);
	fprintf(fp,"\t\tOptionsType = %s    [期权类型]\n",buf);	
	VolumeMultiple.getString(buf);
	fprintf(fp,"\t\tVolumeMultiple = %s    [合约数量乘数]\n",buf);	
	UnderlyingMultiple.getString(buf);
	fprintf(fp,"\t\tUnderlyingMultiple = %s    [合约基础商品乘数]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	InstrumentName.getString(buf);
	fprintf(fp,"\t\tInstrumentName = %s    [合约名称]\n",buf);	
	DeliveryYear.getString(buf);
	fprintf(fp,"\t\tDeliveryYear = %s    [交割年份]\n",buf);	
	DeliveryMonth.getString(buf);
	fprintf(fp,"\t\tDeliveryMonth = %s    [交割月]\n",buf);	
	AdvanceMonth.getString(buf);
	fprintf(fp,"\t\tAdvanceMonth = %s    [提前月份]\n",buf);	
	IsTrading.getString(buf);
	fprintf(fp,"\t\tIsTrading = %s    [当前是否交易]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableInstrument::dumpDiff(FILE *fp, const CWriteableInstrument *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCInstrument = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	ProductGroupID.getString(buf);
	if (compare(ProductGroupID.getValue(),pOriginal->ProductGroupID.getValue())!=0)
	{
		pOriginal->ProductGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tProductGroupID = %s -> %s    [产品组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductGroupID = %s    [产品组代码]\n",buf);
	}
	UnderlyingInstrID.getString(buf);
	if (compare(UnderlyingInstrID.getValue(),pOriginal->UnderlyingInstrID.getValue())!=0)
	{
		pOriginal->UnderlyingInstrID.getString(bufOriginal);
		fprintf(fp,"\t\tUnderlyingInstrID = %s -> %s    [基础商品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnderlyingInstrID = %s    [基础商品代码]\n",buf);
	}
	ProductClass.getString(buf);
	if (compare(ProductClass.getValue(),pOriginal->ProductClass.getValue())!=0)
	{
		pOriginal->ProductClass.getString(bufOriginal);
		fprintf(fp,"\t\tProductClass = %s -> %s    [产品类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductClass = %s    [产品类型]\n",buf);
	}
	PositionType.getString(buf);
	if (compare(PositionType.getValue(),pOriginal->PositionType.getValue())!=0)
	{
		pOriginal->PositionType.getString(bufOriginal);
		fprintf(fp,"\t\tPositionType = %s -> %s    [持仓类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPositionType = %s    [持仓类型]\n",buf);
	}
	StrikePrice.getString(buf);
	if (compare(StrikePrice.getValue(),pOriginal->StrikePrice.getValue())!=0)
	{
		pOriginal->StrikePrice.getString(bufOriginal);
		fprintf(fp,"\t\tStrikePrice = %s -> %s    [执行价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStrikePrice = %s    [执行价]\n",buf);
	}
	OptionsType.getString(buf);
	if (compare(OptionsType.getValue(),pOriginal->OptionsType.getValue())!=0)
	{
		pOriginal->OptionsType.getString(bufOriginal);
		fprintf(fp,"\t\tOptionsType = %s -> %s    [期权类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOptionsType = %s    [期权类型]\n",buf);
	}
	VolumeMultiple.getString(buf);
	if (compare(VolumeMultiple.getValue(),pOriginal->VolumeMultiple.getValue())!=0)
	{
		pOriginal->VolumeMultiple.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeMultiple = %s -> %s    [合约数量乘数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeMultiple = %s    [合约数量乘数]\n",buf);
	}
	UnderlyingMultiple.getString(buf);
	if (compare(UnderlyingMultiple.getValue(),pOriginal->UnderlyingMultiple.getValue())!=0)
	{
		pOriginal->UnderlyingMultiple.getString(bufOriginal);
		fprintf(fp,"\t\tUnderlyingMultiple = %s -> %s    [合约基础商品乘数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUnderlyingMultiple = %s    [合约基础商品乘数]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	InstrumentName.getString(buf);
	if (compare(InstrumentName.getValue(),pOriginal->InstrumentName.getValue())!=0)
	{
		pOriginal->InstrumentName.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentName = %s -> %s    [合约名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentName = %s    [合约名称]\n",buf);
	}
	DeliveryYear.getString(buf);
	if (compare(DeliveryYear.getValue(),pOriginal->DeliveryYear.getValue())!=0)
	{
		pOriginal->DeliveryYear.getString(bufOriginal);
		fprintf(fp,"\t\tDeliveryYear = %s -> %s    [交割年份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeliveryYear = %s    [交割年份]\n",buf);
	}
	DeliveryMonth.getString(buf);
	if (compare(DeliveryMonth.getValue(),pOriginal->DeliveryMonth.getValue())!=0)
	{
		pOriginal->DeliveryMonth.getString(bufOriginal);
		fprintf(fp,"\t\tDeliveryMonth = %s -> %s    [交割月]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeliveryMonth = %s    [交割月]\n",buf);
	}
	AdvanceMonth.getString(buf);
	if (compare(AdvanceMonth.getValue(),pOriginal->AdvanceMonth.getValue())!=0)
	{
		pOriginal->AdvanceMonth.getString(bufOriginal);
		fprintf(fp,"\t\tAdvanceMonth = %s -> %s    [提前月份]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAdvanceMonth = %s    [提前月份]\n",buf);
	}
	IsTrading.getString(buf);
	if (compare(IsTrading.getValue(),pOriginal->IsTrading.getValue())!=0)
	{
		pOriginal->IsTrading.getString(bufOriginal);
		fprintf(fp,"\t\tIsTrading = %s -> %s    [当前是否交易]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsTrading = %s    [当前是否交易]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableInstrument::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	ProductGroupID.getString(buf);
	fprintf(fp,",ProductGroupID,%s",buf);	
	UnderlyingInstrID.getString(buf);
	fprintf(fp,",UnderlyingInstrID,%s",buf);	
	ProductClass.getString(buf);
	fprintf(fp,",ProductClass,%s",buf);	
	PositionType.getString(buf);
	fprintf(fp,",PositionType,%s",buf);	
	StrikePrice.getString(buf);
	fprintf(fp,",StrikePrice,%s",buf);	
	OptionsType.getString(buf);
	fprintf(fp,",OptionsType,%s",buf);	
	VolumeMultiple.getString(buf);
	fprintf(fp,",VolumeMultiple,%s",buf);	
	UnderlyingMultiple.getString(buf);
	fprintf(fp,",UnderlyingMultiple,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	InstrumentName.getString(buf);
	fprintf(fp,",InstrumentName,%s",buf);	
	DeliveryYear.getString(buf);
	fprintf(fp,",DeliveryYear,%s",buf);	
	DeliveryMonth.getString(buf);
	fprintf(fp,",DeliveryMonth,%s",buf);	
	AdvanceMonth.getString(buf);
	fprintf(fp,",AdvanceMonth,%s",buf);	
	IsTrading.getString(buf);
	fprintf(fp,",IsTrading,%s",buf);	
}

void CWriteableInstrument::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	ProductGroupID.getString(buf);
	sprintf(p,"ProductGroupID=%s,",buf);
	p+=strlen(p);
	UnderlyingInstrID.getString(buf);
	sprintf(p,"UnderlyingInstrID=%s,",buf);
	p+=strlen(p);
	ProductClass.getString(buf);
	sprintf(p,"ProductClass=%s,",buf);
	p+=strlen(p);
	PositionType.getString(buf);
	sprintf(p,"PositionType=%s,",buf);
	p+=strlen(p);
	StrikePrice.getString(buf);
	sprintf(p,"StrikePrice=%s,",buf);
	p+=strlen(p);
	OptionsType.getString(buf);
	sprintf(p,"OptionsType=%s,",buf);
	p+=strlen(p);
	VolumeMultiple.getString(buf);
	sprintf(p,"VolumeMultiple=%s,",buf);
	p+=strlen(p);
	UnderlyingMultiple.getString(buf);
	sprintf(p,"UnderlyingMultiple=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	InstrumentName.getString(buf);
	sprintf(p,"InstrumentName=%s,",buf);
	p+=strlen(p);
	DeliveryYear.getString(buf);
	sprintf(p,"DeliveryYear=%s,",buf);
	p+=strlen(p);
	DeliveryMonth.getString(buf);
	sprintf(p,"DeliveryMonth=%s,",buf);
	p+=strlen(p);
	AdvanceMonth.getString(buf);
	sprintf(p,"AdvanceMonth=%s,",buf);
	p+=strlen(p);
	IsTrading.getString(buf);
	sprintf(p,"IsTrading=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableInstrument::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CInstrument");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	ProductGroupID.getString(buf);
	pLogger->output(indent+1,0,"ProductGroupID=%s 产品组代码",buf);
	UnderlyingInstrID.getString(buf);
	pLogger->output(indent+1,0,"UnderlyingInstrID=%s 基础商品代码",buf);
	ProductClass.getString(buf);
	pLogger->output(indent+1,0,"ProductClass=%s 产品类型",buf);
	PositionType.getString(buf);
	pLogger->output(indent+1,0,"PositionType=%s 持仓类型",buf);
	StrikePrice.getString(buf);
	pLogger->output(indent+1,0,"StrikePrice=%s 执行价",buf);
	OptionsType.getString(buf);
	pLogger->output(indent+1,0,"OptionsType=%s 期权类型",buf);
	VolumeMultiple.getString(buf);
	pLogger->output(indent+1,0,"VolumeMultiple=%s 合约数量乘数",buf);
	UnderlyingMultiple.getString(buf);
	pLogger->output(indent+1,0,"UnderlyingMultiple=%s 合约基础商品乘数",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	InstrumentName.getString(buf);
	pLogger->output(indent+1,0,"InstrumentName=%s 合约名称",buf);
	DeliveryYear.getString(buf);
	pLogger->output(indent+1,0,"DeliveryYear=%s 交割年份",buf);
	DeliveryMonth.getString(buf);
	pLogger->output(indent+1,0,"DeliveryMonth=%s 交割月",buf);
	AdvanceMonth.getString(buf);
	pLogger->output(indent+1,0,"AdvanceMonth=%s 提前月份",buf);
	IsTrading.getString(buf);
	pLogger->output(indent+1,0,"IsTrading=%s 当前是否交易",buf);
	pLogger->output(indent,0,"}");
}

CInstrumentIterator::~CInstrumentIterator(void)
{
}


void CInstrumentIterator::dump(FILE *output)
{
	CInstrument *pInstrument;
	
	while ((pInstrument=next())!=NULL)
	{
		pInstrument->dump(output);
	}
}



void CWriteableCombinationLeg::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,CombInstrumentID,LegID,LegInstrumentID,Direction,LegMultiple,ImplyLevel\n");
}
	
void CWriteableCombinationLeg::init(void)
{
	SettlementGroupID.clear();
	CombInstrumentID.clear();
	LegID.clear();
	LegInstrumentID.clear();
	Direction.clear();
	LegMultiple.clear();
	ImplyLevel.clear();
	pCombinationInstrument=NULL;
	pLegInstrument=NULL;
}

int CWriteableCombinationLeg::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCombinationLeg),input)!=sizeof(CWriteableCombinationLeg))
		return 0;
	else
		return 1;
}
	
int CWriteableCombinationLeg::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombInstrumentID=token;
		}
		else
		{
			CombInstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegID=token;
		}
		else
		{
			LegID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegInstrumentID=token;
		}
		else
		{
			LegInstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegMultiple=token;
		}
		else
		{
			LegMultiple="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ImplyLevel=token;
		}
		else
		{
			ImplyLevel="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"CombInstrumentID"))
			{
				CombInstrumentID=token;
			}
			else if (!strcmp(fieldName,"LegID"))
			{
				LegID=token;
			}
			else if (!strcmp(fieldName,"LegInstrumentID"))
			{
				LegInstrumentID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"LegMultiple"))
			{
				LegMultiple=token;
			}
			else if (!strcmp(fieldName,"ImplyLevel"))
			{
				ImplyLevel=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCombinationLeg::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCombinationLeg),output)!=sizeof(CWriteableCombinationLeg))
		return 0;
	else
		return 1;
}

int CWriteableCombinationLeg::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombInstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegInstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegMultiple.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ImplyLevel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCombinationLeg::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCombinationLeg%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	CombInstrumentID.getString(buf);
	fprintf(fp,"\t\tCombInstrumentID = %s    [组合合约代码]\n",buf);	
	LegID.getString(buf);
	fprintf(fp,"\t\tLegID = %s    [单腿编号]\n",buf);	
	LegInstrumentID.getString(buf);
	fprintf(fp,"\t\tLegInstrumentID = %s    [单腿合约代码]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	LegMultiple.getString(buf);
	fprintf(fp,"\t\tLegMultiple = %s    [单腿乘数]\n",buf);	
	ImplyLevel.getString(buf);
	fprintf(fp,"\t\tImplyLevel = %s    [推导层数]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCombinationLeg::dumpDiff(FILE *fp, const CWriteableCombinationLeg *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCombinationLeg = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	CombInstrumentID.getString(buf);
	if (compare(CombInstrumentID.getValue(),pOriginal->CombInstrumentID.getValue())!=0)
	{
		pOriginal->CombInstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tCombInstrumentID = %s -> %s    [组合合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombInstrumentID = %s    [组合合约代码]\n",buf);
	}
	LegID.getString(buf);
	if (compare(LegID.getValue(),pOriginal->LegID.getValue())!=0)
	{
		pOriginal->LegID.getString(bufOriginal);
		fprintf(fp,"\t\tLegID = %s -> %s    [单腿编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegID = %s    [单腿编号]\n",buf);
	}
	LegInstrumentID.getString(buf);
	if (compare(LegInstrumentID.getValue(),pOriginal->LegInstrumentID.getValue())!=0)
	{
		pOriginal->LegInstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tLegInstrumentID = %s -> %s    [单腿合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegInstrumentID = %s    [单腿合约代码]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	LegMultiple.getString(buf);
	if (compare(LegMultiple.getValue(),pOriginal->LegMultiple.getValue())!=0)
	{
		pOriginal->LegMultiple.getString(bufOriginal);
		fprintf(fp,"\t\tLegMultiple = %s -> %s    [单腿乘数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegMultiple = %s    [单腿乘数]\n",buf);
	}
	ImplyLevel.getString(buf);
	if (compare(ImplyLevel.getValue(),pOriginal->ImplyLevel.getValue())!=0)
	{
		pOriginal->ImplyLevel.getString(bufOriginal);
		fprintf(fp,"\t\tImplyLevel = %s -> %s    [推导层数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tImplyLevel = %s    [推导层数]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCombinationLeg::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	CombInstrumentID.getString(buf);
	fprintf(fp,",CombInstrumentID,%s",buf);	
	LegID.getString(buf);
	fprintf(fp,",LegID,%s",buf);	
	LegInstrumentID.getString(buf);
	fprintf(fp,",LegInstrumentID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	LegMultiple.getString(buf);
	fprintf(fp,",LegMultiple,%s",buf);	
	ImplyLevel.getString(buf);
	fprintf(fp,",ImplyLevel,%s",buf);	
}

void CWriteableCombinationLeg::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	CombInstrumentID.getString(buf);
	sprintf(p,"CombInstrumentID=%s,",buf);
	p+=strlen(p);
	LegID.getString(buf);
	sprintf(p,"LegID=%s,",buf);
	p+=strlen(p);
	LegInstrumentID.getString(buf);
	sprintf(p,"LegInstrumentID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	LegMultiple.getString(buf);
	sprintf(p,"LegMultiple=%s,",buf);
	p+=strlen(p);
	ImplyLevel.getString(buf);
	sprintf(p,"ImplyLevel=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCombinationLeg::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCombinationLeg");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	CombInstrumentID.getString(buf);
	pLogger->output(indent+1,0,"CombInstrumentID=%s 组合合约代码",buf);
	LegID.getString(buf);
	pLogger->output(indent+1,0,"LegID=%s 单腿编号",buf);
	LegInstrumentID.getString(buf);
	pLogger->output(indent+1,0,"LegInstrumentID=%s 单腿合约代码",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	LegMultiple.getString(buf);
	pLogger->output(indent+1,0,"LegMultiple=%s 单腿乘数",buf);
	ImplyLevel.getString(buf);
	pLogger->output(indent+1,0,"ImplyLevel=%s 推导层数",buf);
	pLogger->output(indent,0,"}");
}

CCombinationLegIterator::~CCombinationLegIterator(void)
{
}


void CCombinationLegIterator::dump(FILE *output)
{
	CCombinationLeg *pCombinationLeg;
	
	while ((pCombinationLeg=next())!=NULL)
	{
		pCombinationLeg->dump(output);
	}
}



void CWriteablePartRoleAccount::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,ParticipantID,TradingRole,AccountID\n");
}
	
void CWriteablePartRoleAccount::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	ParticipantID.clear();
	TradingRole.clear();
	AccountID.clear();
	pTradingAccount=NULL;
}

int CWriteablePartRoleAccount::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartRoleAccount),input)!=sizeof(CWriteablePartRoleAccount))
		return 0;
	else
		return 1;
}
	
int CWriteablePartRoleAccount::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccountID=token;
		}
		else
		{
			AccountID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"AccountID"))
			{
				AccountID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartRoleAccount::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartRoleAccount),output)!=sizeof(CWriteablePartRoleAccount))
		return 0;
	else
		return 1;
}

int CWriteablePartRoleAccount::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccountID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartRoleAccount::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartRoleAccount%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	AccountID.getString(buf);
	fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartRoleAccount::dumpDiff(FILE *fp, const CWriteablePartRoleAccount *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartRoleAccount = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	AccountID.getString(buf);
	if (compare(AccountID.getValue(),pOriginal->AccountID.getValue())!=0)
	{
		pOriginal->AccountID.getString(bufOriginal);
		fprintf(fp,"\t\tAccountID = %s -> %s    [资金帐号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartRoleAccount::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	AccountID.getString(buf);
	fprintf(fp,",AccountID,%s",buf);	
}

void CWriteablePartRoleAccount::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	AccountID.getString(buf);
	sprintf(p,"AccountID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartRoleAccount::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartRoleAccount");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	AccountID.getString(buf);
	pLogger->output(indent+1,0,"AccountID=%s 资金帐号",buf);
	pLogger->output(indent,0,"}");
}

CPartRoleAccountIterator::~CPartRoleAccountIterator(void)
{
}


void CPartRoleAccountIterator::dump(FILE *output)
{
	CPartRoleAccount *pPartRoleAccount;
	
	while ((pPartRoleAccount=next())!=NULL)
	{
		pPartRoleAccount->dump(output);
	}
}



void CWriteablePartProductRole::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ParticipantID,ProductID,TradingRole\n");
}
	
void CWriteablePartProductRole::init(void)
{
	SettlementGroupID.clear();
	ParticipantID.clear();
	ProductID.clear();
	TradingRole.clear();
}

int CWriteablePartProductRole::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartProductRole),input)!=sizeof(CWriteablePartProductRole))
		return 0;
	else
		return 1;
}
	
int CWriteablePartProductRole::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartProductRole::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartProductRole),output)!=sizeof(CWriteablePartProductRole))
		return 0;
	else
		return 1;
}

int CWriteablePartProductRole::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartProductRole::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartProductRole%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartProductRole::dumpDiff(FILE *fp, const CWriteablePartProductRole *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartProductRole = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartProductRole::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
}

void CWriteablePartProductRole::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartProductRole::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartProductRole");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	pLogger->output(indent,0,"}");
}

CPartProductRoleIterator::~CPartProductRoleIterator(void)
{
}


void CPartProductRoleIterator::dump(FILE *output)
{
	CPartProductRole *pPartProductRole;
	
	while ((pPartProductRole=next())!=NULL)
	{
		pPartProductRole->dump(output);
	}
}



void CWriteablePartProductRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ProductID,ParticipantID,TradingRight\n");
}
	
void CWriteablePartProductRight::init(void)
{
	SettlementGroupID.clear();
	ProductID.clear();
	ParticipantID.clear();
	TradingRight.clear();
}

int CWriteablePartProductRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartProductRight),input)!=sizeof(CWriteablePartProductRight))
		return 0;
	else
		return 1;
}
	
int CWriteablePartProductRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartProductRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartProductRight),output)!=sizeof(CWriteablePartProductRight))
		return 0;
	else
		return 1;
}

int CWriteablePartProductRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartProductRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartProductRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartProductRight::dumpDiff(FILE *fp, const CWriteablePartProductRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartProductRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartProductRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteablePartProductRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartProductRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartProductRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CPartProductRightIterator::~CPartProductRightIterator(void)
{
}


void CPartProductRightIterator::dump(FILE *output)
{
	CPartProductRight *pPartProductRight;
	
	while ((pPartProductRight=next())!=NULL)
	{
		pPartProductRight->dump(output);
	}
}



void CWriteablePartInstrumentRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,ParticipantID,TradingRight\n");
}
	
void CWriteablePartInstrumentRight::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRight.clear();
}

int CWriteablePartInstrumentRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartInstrumentRight),input)!=sizeof(CWriteablePartInstrumentRight))
		return 0;
	else
		return 1;
}
	
int CWriteablePartInstrumentRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartInstrumentRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartInstrumentRight),output)!=sizeof(CWriteablePartInstrumentRight))
		return 0;
	else
		return 1;
}

int CWriteablePartInstrumentRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartInstrumentRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartInstrumentRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartInstrumentRight::dumpDiff(FILE *fp, const CWriteablePartInstrumentRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartInstrumentRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartInstrumentRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteablePartInstrumentRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartInstrumentRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartInstrumentRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CPartInstrumentRightIterator::~CPartInstrumentRightIterator(void)
{
}


void CPartInstrumentRightIterator::dump(FILE *output)
{
	CPartInstrumentRight *pPartInstrumentRight;
	
	while ((pPartInstrumentRight=next())!=NULL)
	{
		pPartInstrumentRight->dump(output);
	}
}



void CWriteableClientProductRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ProductID,ClientID,TradingRight\n");
}
	
void CWriteableClientProductRight::init(void)
{
	SettlementGroupID.clear();
	ProductID.clear();
	ClientID.clear();
	TradingRight.clear();
}

int CWriteableClientProductRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClientProductRight),input)!=sizeof(CWriteableClientProductRight))
		return 0;
	else
		return 1;
}
	
int CWriteableClientProductRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClientProductRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClientProductRight),output)!=sizeof(CWriteableClientProductRight))
		return 0;
	else
		return 1;
}

int CWriteableClientProductRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClientProductRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClientProductRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClientProductRight::dumpDiff(FILE *fp, const CWriteableClientProductRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClientProductRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClientProductRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteableClientProductRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClientProductRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClientProductRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CClientProductRightIterator::~CClientProductRightIterator(void)
{
}


void CClientProductRightIterator::dump(FILE *output)
{
	CClientProductRight *pClientProductRight;
	
	while ((pClientProductRight=next())!=NULL)
	{
		pClientProductRight->dump(output);
	}
}



void CWriteableClientInstrumentRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,ClientID,TradingRight\n");
}
	
void CWriteableClientInstrumentRight::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	ClientID.clear();
	TradingRight.clear();
}

int CWriteableClientInstrumentRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClientInstrumentRight),input)!=sizeof(CWriteableClientInstrumentRight))
		return 0;
	else
		return 1;
}
	
int CWriteableClientInstrumentRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClientInstrumentRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClientInstrumentRight),output)!=sizeof(CWriteableClientInstrumentRight))
		return 0;
	else
		return 1;
}

int CWriteableClientInstrumentRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClientInstrumentRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClientInstrumentRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClientInstrumentRight::dumpDiff(FILE *fp, const CWriteableClientInstrumentRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClientInstrumentRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClientInstrumentRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteableClientInstrumentRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClientInstrumentRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClientInstrumentRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CClientInstrumentRightIterator::~CClientInstrumentRightIterator(void)
{
}


void CClientInstrumentRightIterator::dump(FILE *output)
{
	CClientInstrumentRight *pClientInstrumentRight;
	
	while ((pClientInstrumentRight=next())!=NULL)
	{
		pClientInstrumentRight->dump(output);
	}
}



void CWriteablePartClientProductRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ProductID,ParticipantID,ClientID,TradingRight\n");
}
	
void CWriteablePartClientProductRight::init(void)
{
	SettlementGroupID.clear();
	ProductID.clear();
	ParticipantID.clear();
	ClientID.clear();
	TradingRight.clear();
}

int CWriteablePartClientProductRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartClientProductRight),input)!=sizeof(CWriteablePartClientProductRight))
		return 0;
	else
		return 1;
}
	
int CWriteablePartClientProductRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartClientProductRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartClientProductRight),output)!=sizeof(CWriteablePartClientProductRight))
		return 0;
	else
		return 1;
}

int CWriteablePartClientProductRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartClientProductRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartClientProductRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartClientProductRight::dumpDiff(FILE *fp, const CWriteablePartClientProductRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartClientProductRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartClientProductRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteablePartClientProductRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartClientProductRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartClientProductRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CPartClientProductRightIterator::~CPartClientProductRightIterator(void)
{
}


void CPartClientProductRightIterator::dump(FILE *output)
{
	CPartClientProductRight *pPartClientProductRight;
	
	while ((pPartClientProductRight=next())!=NULL)
	{
		pPartClientProductRight->dump(output);
	}
}



void CWriteablePartClientInstrumentRight::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,ParticipantID,ClientID,TradingRight\n");
}
	
void CWriteablePartClientInstrumentRight::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	ClientID.clear();
	TradingRight.clear();
}

int CWriteablePartClientInstrumentRight::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartClientInstrumentRight),input)!=sizeof(CWriteablePartClientInstrumentRight))
		return 0;
	else
		return 1;
}
	
int CWriteablePartClientInstrumentRight::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRight=token;
		}
		else
		{
			TradingRight="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRight"))
			{
				TradingRight=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartClientInstrumentRight::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartClientInstrumentRight),output)!=sizeof(CWriteablePartClientInstrumentRight))
		return 0;
	else
		return 1;
}

int CWriteablePartClientInstrumentRight::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRight.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartClientInstrumentRight::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartClientInstrumentRight%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRight.getString(buf);
	fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartClientInstrumentRight::dumpDiff(FILE *fp, const CWriteablePartClientInstrumentRight *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartClientInstrumentRight = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRight.getString(buf);
	if (compare(TradingRight.getValue(),pOriginal->TradingRight.getValue())!=0)
	{
		pOriginal->TradingRight.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRight = %s -> %s    [交易权限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRight = %s    [交易权限]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartClientInstrumentRight::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRight.getString(buf);
	fprintf(fp,",TradingRight,%s",buf);	
}

void CWriteablePartClientInstrumentRight::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRight.getString(buf);
	sprintf(p,"TradingRight=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartClientInstrumentRight::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartClientInstrumentRight");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRight.getString(buf);
	pLogger->output(indent+1,0,"TradingRight=%s 交易权限",buf);
	pLogger->output(indent,0,"}");
}

CPartClientInstrumentRightIterator::~CPartClientInstrumentRightIterator(void)
{
}


void CPartClientInstrumentRightIterator::dump(FILE *output)
{
	CPartClientInstrumentRight *pPartClientInstrumentRight;
	
	while ((pPartClientInstrumentRight=next())!=NULL)
	{
		pPartClientInstrumentRight->dump(output);
	}
}



void CWriteableCurrProductProperty::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ProductID,ProductLifePhase,TradingModel,OptionsLimitRatio,OptionsMgRatio,SettlePriceSeconds\n");
}
	
void CWriteableCurrProductProperty::init(void)
{
	SettlementGroupID.clear();
	ProductID.clear();
	ProductLifePhase.clear();
	TradingModel.clear();
	OptionsLimitRatio.clear();
	OptionsMgRatio.clear();
	SettlePriceSeconds.clear();
}

int CWriteableCurrProductProperty::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrProductProperty),input)!=sizeof(CWriteableCurrProductProperty))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrProductProperty::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductID=token;
		}
		else
		{
			ProductID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ProductLifePhase=token;
		}
		else
		{
			ProductLifePhase="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingModel=token;
		}
		else
		{
			TradingModel="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OptionsLimitRatio=token;
		}
		else
		{
			OptionsLimitRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OptionsMgRatio=token;
		}
		else
		{
			OptionsMgRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlePriceSeconds=token;
		}
		else
		{
			SettlePriceSeconds="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ProductID"))
			{
				ProductID=token;
			}
			else if (!strcmp(fieldName,"ProductLifePhase"))
			{
				ProductLifePhase=token;
			}
			else if (!strcmp(fieldName,"TradingModel"))
			{
				TradingModel=token;
			}
			else if (!strcmp(fieldName,"OptionsLimitRatio"))
			{
				OptionsLimitRatio=token;
			}
			else if (!strcmp(fieldName,"OptionsMgRatio"))
			{
				OptionsMgRatio=token;
			}
			else if (!strcmp(fieldName,"SettlePriceSeconds"))
			{
				SettlePriceSeconds=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrProductProperty::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrProductProperty),output)!=sizeof(CWriteableCurrProductProperty))
		return 0;
	else
		return 1;
}

int CWriteableCurrProductProperty::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ProductLifePhase.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingModel.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OptionsLimitRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OptionsMgRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlePriceSeconds.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrProductProperty::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrProductProperty%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ProductID.getString(buf);
	fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);	
	ProductLifePhase.getString(buf);
	fprintf(fp,"\t\tProductLifePhase = %s    [产品生命周期状态]\n",buf);	
	TradingModel.getString(buf);
	fprintf(fp,"\t\tTradingModel = %s    [交易模式]\n",buf);	
	OptionsLimitRatio.getString(buf);
	fprintf(fp,"\t\tOptionsLimitRatio = %s    [期权限仓系数]\n",buf);	
	OptionsMgRatio.getString(buf);
	fprintf(fp,"\t\tOptionsMgRatio = %s    [期权保证金调整系数]\n",buf);	
	SettlePriceSeconds.getString(buf);
	fprintf(fp,"\t\tSettlePriceSeconds = %s    [结算取样时间]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrProductProperty::dumpDiff(FILE *fp, const CWriteableCurrProductProperty *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrProductProperty = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ProductID.getString(buf);
	if (compare(ProductID.getValue(),pOriginal->ProductID.getValue())!=0)
	{
		pOriginal->ProductID.getString(bufOriginal);
		fprintf(fp,"\t\tProductID = %s -> %s    [产品代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductID = %s    [产品代码]\n",buf);
	}
	ProductLifePhase.getString(buf);
	if (compare(ProductLifePhase.getValue(),pOriginal->ProductLifePhase.getValue())!=0)
	{
		pOriginal->ProductLifePhase.getString(bufOriginal);
		fprintf(fp,"\t\tProductLifePhase = %s -> %s    [产品生命周期状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tProductLifePhase = %s    [产品生命周期状态]\n",buf);
	}
	TradingModel.getString(buf);
	if (compare(TradingModel.getValue(),pOriginal->TradingModel.getValue())!=0)
	{
		pOriginal->TradingModel.getString(bufOriginal);
		fprintf(fp,"\t\tTradingModel = %s -> %s    [交易模式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingModel = %s    [交易模式]\n",buf);
	}
	OptionsLimitRatio.getString(buf);
	if (compare(OptionsLimitRatio.getValue(),pOriginal->OptionsLimitRatio.getValue())!=0)
	{
		pOriginal->OptionsLimitRatio.getString(bufOriginal);
		fprintf(fp,"\t\tOptionsLimitRatio = %s -> %s    [期权限仓系数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOptionsLimitRatio = %s    [期权限仓系数]\n",buf);
	}
	OptionsMgRatio.getString(buf);
	if (compare(OptionsMgRatio.getValue(),pOriginal->OptionsMgRatio.getValue())!=0)
	{
		pOriginal->OptionsMgRatio.getString(bufOriginal);
		fprintf(fp,"\t\tOptionsMgRatio = %s -> %s    [期权保证金调整系数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOptionsMgRatio = %s    [期权保证金调整系数]\n",buf);
	}
	SettlePriceSeconds.getString(buf);
	if (compare(SettlePriceSeconds.getValue(),pOriginal->SettlePriceSeconds.getValue())!=0)
	{
		pOriginal->SettlePriceSeconds.getString(bufOriginal);
		fprintf(fp,"\t\tSettlePriceSeconds = %s -> %s    [结算取样时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlePriceSeconds = %s    [结算取样时间]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrProductProperty::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ProductID.getString(buf);
	fprintf(fp,",ProductID,%s",buf);	
	ProductLifePhase.getString(buf);
	fprintf(fp,",ProductLifePhase,%s",buf);	
	TradingModel.getString(buf);
	fprintf(fp,",TradingModel,%s",buf);	
	OptionsLimitRatio.getString(buf);
	fprintf(fp,",OptionsLimitRatio,%s",buf);	
	OptionsMgRatio.getString(buf);
	fprintf(fp,",OptionsMgRatio,%s",buf);	
	SettlePriceSeconds.getString(buf);
	fprintf(fp,",SettlePriceSeconds,%s",buf);	
}

void CWriteableCurrProductProperty::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ProductID.getString(buf);
	sprintf(p,"ProductID=%s,",buf);
	p+=strlen(p);
	ProductLifePhase.getString(buf);
	sprintf(p,"ProductLifePhase=%s,",buf);
	p+=strlen(p);
	TradingModel.getString(buf);
	sprintf(p,"TradingModel=%s,",buf);
	p+=strlen(p);
	OptionsLimitRatio.getString(buf);
	sprintf(p,"OptionsLimitRatio=%s,",buf);
	p+=strlen(p);
	OptionsMgRatio.getString(buf);
	sprintf(p,"OptionsMgRatio=%s,",buf);
	p+=strlen(p);
	SettlePriceSeconds.getString(buf);
	sprintf(p,"SettlePriceSeconds=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrProductProperty::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrProductProperty");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ProductID.getString(buf);
	pLogger->output(indent+1,0,"ProductID=%s 产品代码",buf);
	ProductLifePhase.getString(buf);
	pLogger->output(indent+1,0,"ProductLifePhase=%s 产品生命周期状态",buf);
	TradingModel.getString(buf);
	pLogger->output(indent+1,0,"TradingModel=%s 交易模式",buf);
	OptionsLimitRatio.getString(buf);
	pLogger->output(indent+1,0,"OptionsLimitRatio=%s 期权限仓系数",buf);
	OptionsMgRatio.getString(buf);
	pLogger->output(indent+1,0,"OptionsMgRatio=%s 期权保证金调整系数",buf);
	SettlePriceSeconds.getString(buf);
	pLogger->output(indent+1,0,"SettlePriceSeconds=%s 结算取样时间",buf);
	pLogger->output(indent,0,"}");
}

CCurrProductPropertyIterator::~CCurrProductPropertyIterator(void)
{
}


void CCurrProductPropertyIterator::dump(FILE *output)
{
	CCurrProductProperty *pCurrProductProperty;
	
	while ((pCurrProductProperty=next())!=NULL)
	{
		pCurrProductProperty->dump(output);
	}
}



void CWriteableCurrInstrumentProperty::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,CreateDate,OpenDate,ExpireDate,StartDelivDate,EndDelivDate,BasisPrice,MaxMarketOrderVolume,MinMarketOrderVolume,MaxLimitOrderVolume,MinLimitOrderVolume,PriceTick,AllowDelivPersonOpen,InstrumentID,InstLifePhase,IsFirstTradingDay\n");
}
	
void CWriteableCurrInstrumentProperty::init(void)
{
	SettlementGroupID.clear();
	CreateDate.clear();
	OpenDate.clear();
	ExpireDate.clear();
	StartDelivDate.clear();
	EndDelivDate.clear();
	BasisPrice.clear();
	MaxMarketOrderVolume.clear();
	MinMarketOrderVolume.clear();
	MaxLimitOrderVolume.clear();
	MinLimitOrderVolume.clear();
	PriceTick.clear();
	AllowDelivPersonOpen.clear();
	InstrumentID.clear();
	InstLifePhase.clear();
	IsFirstTradingDay.clear();
}

int CWriteableCurrInstrumentProperty::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrInstrumentProperty),input)!=sizeof(CWriteableCurrInstrumentProperty))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrInstrumentProperty::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CreateDate=token;
		}
		else
		{
			CreateDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenDate=token;
		}
		else
		{
			OpenDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExpireDate=token;
		}
		else
		{
			ExpireDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartDelivDate=token;
		}
		else
		{
			StartDelivDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EndDelivDate=token;
		}
		else
		{
			EndDelivDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BasisPrice=token;
		}
		else
		{
			BasisPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxMarketOrderVolume=token;
		}
		else
		{
			MaxMarketOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinMarketOrderVolume=token;
		}
		else
		{
			MinMarketOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MaxLimitOrderVolume=token;
		}
		else
		{
			MaxLimitOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinLimitOrderVolume=token;
		}
		else
		{
			MinLimitOrderVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceTick=token;
		}
		else
		{
			PriceTick="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AllowDelivPersonOpen=token;
		}
		else
		{
			AllowDelivPersonOpen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstLifePhase=token;
		}
		else
		{
			InstLifePhase="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsFirstTradingDay=token;
		}
		else
		{
			IsFirstTradingDay="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"CreateDate"))
			{
				CreateDate=token;
			}
			else if (!strcmp(fieldName,"OpenDate"))
			{
				OpenDate=token;
			}
			else if (!strcmp(fieldName,"ExpireDate"))
			{
				ExpireDate=token;
			}
			else if (!strcmp(fieldName,"StartDelivDate"))
			{
				StartDelivDate=token;
			}
			else if (!strcmp(fieldName,"EndDelivDate"))
			{
				EndDelivDate=token;
			}
			else if (!strcmp(fieldName,"BasisPrice"))
			{
				BasisPrice=token;
			}
			else if (!strcmp(fieldName,"MaxMarketOrderVolume"))
			{
				MaxMarketOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MinMarketOrderVolume"))
			{
				MinMarketOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MaxLimitOrderVolume"))
			{
				MaxLimitOrderVolume=token;
			}
			else if (!strcmp(fieldName,"MinLimitOrderVolume"))
			{
				MinLimitOrderVolume=token;
			}
			else if (!strcmp(fieldName,"PriceTick"))
			{
				PriceTick=token;
			}
			else if (!strcmp(fieldName,"AllowDelivPersonOpen"))
			{
				AllowDelivPersonOpen=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"InstLifePhase"))
			{
				InstLifePhase=token;
			}
			else if (!strcmp(fieldName,"IsFirstTradingDay"))
			{
				IsFirstTradingDay=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrInstrumentProperty::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrInstrumentProperty),output)!=sizeof(CWriteableCurrInstrumentProperty))
		return 0;
	else
		return 1;
}

int CWriteableCurrInstrumentProperty::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CreateDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExpireDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartDelivDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EndDelivDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BasisPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxMarketOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinMarketOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MaxLimitOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinLimitOrderVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceTick.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AllowDelivPersonOpen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstLifePhase.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsFirstTradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrInstrumentProperty::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrInstrumentProperty%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	CreateDate.getString(buf);
	fprintf(fp,"\t\tCreateDate = %s    [创建日]\n",buf);	
	OpenDate.getString(buf);
	fprintf(fp,"\t\tOpenDate = %s    [上市日]\n",buf);	
	ExpireDate.getString(buf);
	fprintf(fp,"\t\tExpireDate = %s    [到期日]\n",buf);	
	StartDelivDate.getString(buf);
	fprintf(fp,"\t\tStartDelivDate = %s    [开始交割日]\n",buf);	
	EndDelivDate.getString(buf);
	fprintf(fp,"\t\tEndDelivDate = %s    [最后交割日]\n",buf);	
	BasisPrice.getString(buf);
	fprintf(fp,"\t\tBasisPrice = %s    [挂牌基准价]\n",buf);	
	MaxMarketOrderVolume.getString(buf);
	fprintf(fp,"\t\tMaxMarketOrderVolume = %s    [市价单最大下单量]\n",buf);	
	MinMarketOrderVolume.getString(buf);
	fprintf(fp,"\t\tMinMarketOrderVolume = %s    [市价单最小下单量]\n",buf);	
	MaxLimitOrderVolume.getString(buf);
	fprintf(fp,"\t\tMaxLimitOrderVolume = %s    [限价单最大下单量]\n",buf);	
	MinLimitOrderVolume.getString(buf);
	fprintf(fp,"\t\tMinLimitOrderVolume = %s    [限价单最小下单量]\n",buf);	
	PriceTick.getString(buf);
	fprintf(fp,"\t\tPriceTick = %s    [最小变动价位]\n",buf);	
	AllowDelivPersonOpen.getString(buf);
	fprintf(fp,"\t\tAllowDelivPersonOpen = %s    [交割月自然人开仓]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	InstLifePhase.getString(buf);
	fprintf(fp,"\t\tInstLifePhase = %s    [合约生命周期状态]\n",buf);	
	IsFirstTradingDay.getString(buf);
	fprintf(fp,"\t\tIsFirstTradingDay = %s    [是否首交易日]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrInstrumentProperty::dumpDiff(FILE *fp, const CWriteableCurrInstrumentProperty *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrInstrumentProperty = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	CreateDate.getString(buf);
	if (compare(CreateDate.getValue(),pOriginal->CreateDate.getValue())!=0)
	{
		pOriginal->CreateDate.getString(bufOriginal);
		fprintf(fp,"\t\tCreateDate = %s -> %s    [创建日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCreateDate = %s    [创建日]\n",buf);
	}
	OpenDate.getString(buf);
	if (compare(OpenDate.getValue(),pOriginal->OpenDate.getValue())!=0)
	{
		pOriginal->OpenDate.getString(bufOriginal);
		fprintf(fp,"\t\tOpenDate = %s -> %s    [上市日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenDate = %s    [上市日]\n",buf);
	}
	ExpireDate.getString(buf);
	if (compare(ExpireDate.getValue(),pOriginal->ExpireDate.getValue())!=0)
	{
		pOriginal->ExpireDate.getString(bufOriginal);
		fprintf(fp,"\t\tExpireDate = %s -> %s    [到期日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExpireDate = %s    [到期日]\n",buf);
	}
	StartDelivDate.getString(buf);
	if (compare(StartDelivDate.getValue(),pOriginal->StartDelivDate.getValue())!=0)
	{
		pOriginal->StartDelivDate.getString(bufOriginal);
		fprintf(fp,"\t\tStartDelivDate = %s -> %s    [开始交割日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartDelivDate = %s    [开始交割日]\n",buf);
	}
	EndDelivDate.getString(buf);
	if (compare(EndDelivDate.getValue(),pOriginal->EndDelivDate.getValue())!=0)
	{
		pOriginal->EndDelivDate.getString(bufOriginal);
		fprintf(fp,"\t\tEndDelivDate = %s -> %s    [最后交割日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEndDelivDate = %s    [最后交割日]\n",buf);
	}
	BasisPrice.getString(buf);
	if (compare(BasisPrice.getValue(),pOriginal->BasisPrice.getValue())!=0)
	{
		pOriginal->BasisPrice.getString(bufOriginal);
		fprintf(fp,"\t\tBasisPrice = %s -> %s    [挂牌基准价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBasisPrice = %s    [挂牌基准价]\n",buf);
	}
	MaxMarketOrderVolume.getString(buf);
	if (compare(MaxMarketOrderVolume.getValue(),pOriginal->MaxMarketOrderVolume.getValue())!=0)
	{
		pOriginal->MaxMarketOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMaxMarketOrderVolume = %s -> %s    [市价单最大下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxMarketOrderVolume = %s    [市价单最大下单量]\n",buf);
	}
	MinMarketOrderVolume.getString(buf);
	if (compare(MinMarketOrderVolume.getValue(),pOriginal->MinMarketOrderVolume.getValue())!=0)
	{
		pOriginal->MinMarketOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinMarketOrderVolume = %s -> %s    [市价单最小下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinMarketOrderVolume = %s    [市价单最小下单量]\n",buf);
	}
	MaxLimitOrderVolume.getString(buf);
	if (compare(MaxLimitOrderVolume.getValue(),pOriginal->MaxLimitOrderVolume.getValue())!=0)
	{
		pOriginal->MaxLimitOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMaxLimitOrderVolume = %s -> %s    [限价单最大下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMaxLimitOrderVolume = %s    [限价单最大下单量]\n",buf);
	}
	MinLimitOrderVolume.getString(buf);
	if (compare(MinLimitOrderVolume.getValue(),pOriginal->MinLimitOrderVolume.getValue())!=0)
	{
		pOriginal->MinLimitOrderVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinLimitOrderVolume = %s -> %s    [限价单最小下单量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinLimitOrderVolume = %s    [限价单最小下单量]\n",buf);
	}
	PriceTick.getString(buf);
	if (compare(PriceTick.getValue(),pOriginal->PriceTick.getValue())!=0)
	{
		pOriginal->PriceTick.getString(bufOriginal);
		fprintf(fp,"\t\tPriceTick = %s -> %s    [最小变动价位]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceTick = %s    [最小变动价位]\n",buf);
	}
	AllowDelivPersonOpen.getString(buf);
	if (compare(AllowDelivPersonOpen.getValue(),pOriginal->AllowDelivPersonOpen.getValue())!=0)
	{
		pOriginal->AllowDelivPersonOpen.getString(bufOriginal);
		fprintf(fp,"\t\tAllowDelivPersonOpen = %s -> %s    [交割月自然人开仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAllowDelivPersonOpen = %s    [交割月自然人开仓]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	InstLifePhase.getString(buf);
	if (compare(InstLifePhase.getValue(),pOriginal->InstLifePhase.getValue())!=0)
	{
		pOriginal->InstLifePhase.getString(bufOriginal);
		fprintf(fp,"\t\tInstLifePhase = %s -> %s    [合约生命周期状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstLifePhase = %s    [合约生命周期状态]\n",buf);
	}
	IsFirstTradingDay.getString(buf);
	if (compare(IsFirstTradingDay.getValue(),pOriginal->IsFirstTradingDay.getValue())!=0)
	{
		pOriginal->IsFirstTradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tIsFirstTradingDay = %s -> %s    [是否首交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsFirstTradingDay = %s    [是否首交易日]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrInstrumentProperty::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	CreateDate.getString(buf);
	fprintf(fp,",CreateDate,%s",buf);	
	OpenDate.getString(buf);
	fprintf(fp,",OpenDate,%s",buf);	
	ExpireDate.getString(buf);
	fprintf(fp,",ExpireDate,%s",buf);	
	StartDelivDate.getString(buf);
	fprintf(fp,",StartDelivDate,%s",buf);	
	EndDelivDate.getString(buf);
	fprintf(fp,",EndDelivDate,%s",buf);	
	BasisPrice.getString(buf);
	fprintf(fp,",BasisPrice,%s",buf);	
	MaxMarketOrderVolume.getString(buf);
	fprintf(fp,",MaxMarketOrderVolume,%s",buf);	
	MinMarketOrderVolume.getString(buf);
	fprintf(fp,",MinMarketOrderVolume,%s",buf);	
	MaxLimitOrderVolume.getString(buf);
	fprintf(fp,",MaxLimitOrderVolume,%s",buf);	
	MinLimitOrderVolume.getString(buf);
	fprintf(fp,",MinLimitOrderVolume,%s",buf);	
	PriceTick.getString(buf);
	fprintf(fp,",PriceTick,%s",buf);	
	AllowDelivPersonOpen.getString(buf);
	fprintf(fp,",AllowDelivPersonOpen,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	InstLifePhase.getString(buf);
	fprintf(fp,",InstLifePhase,%s",buf);	
	IsFirstTradingDay.getString(buf);
	fprintf(fp,",IsFirstTradingDay,%s",buf);	
}

void CWriteableCurrInstrumentProperty::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	CreateDate.getString(buf);
	sprintf(p,"CreateDate=%s,",buf);
	p+=strlen(p);
	OpenDate.getString(buf);
	sprintf(p,"OpenDate=%s,",buf);
	p+=strlen(p);
	ExpireDate.getString(buf);
	sprintf(p,"ExpireDate=%s,",buf);
	p+=strlen(p);
	StartDelivDate.getString(buf);
	sprintf(p,"StartDelivDate=%s,",buf);
	p+=strlen(p);
	EndDelivDate.getString(buf);
	sprintf(p,"EndDelivDate=%s,",buf);
	p+=strlen(p);
	BasisPrice.getString(buf);
	sprintf(p,"BasisPrice=%s,",buf);
	p+=strlen(p);
	MaxMarketOrderVolume.getString(buf);
	sprintf(p,"MaxMarketOrderVolume=%s,",buf);
	p+=strlen(p);
	MinMarketOrderVolume.getString(buf);
	sprintf(p,"MinMarketOrderVolume=%s,",buf);
	p+=strlen(p);
	MaxLimitOrderVolume.getString(buf);
	sprintf(p,"MaxLimitOrderVolume=%s,",buf);
	p+=strlen(p);
	MinLimitOrderVolume.getString(buf);
	sprintf(p,"MinLimitOrderVolume=%s,",buf);
	p+=strlen(p);
	PriceTick.getString(buf);
	sprintf(p,"PriceTick=%s,",buf);
	p+=strlen(p);
	AllowDelivPersonOpen.getString(buf);
	sprintf(p,"AllowDelivPersonOpen=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	InstLifePhase.getString(buf);
	sprintf(p,"InstLifePhase=%s,",buf);
	p+=strlen(p);
	IsFirstTradingDay.getString(buf);
	sprintf(p,"IsFirstTradingDay=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrInstrumentProperty::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrInstrumentProperty");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	CreateDate.getString(buf);
	pLogger->output(indent+1,0,"CreateDate=%s 创建日",buf);
	OpenDate.getString(buf);
	pLogger->output(indent+1,0,"OpenDate=%s 上市日",buf);
	ExpireDate.getString(buf);
	pLogger->output(indent+1,0,"ExpireDate=%s 到期日",buf);
	StartDelivDate.getString(buf);
	pLogger->output(indent+1,0,"StartDelivDate=%s 开始交割日",buf);
	EndDelivDate.getString(buf);
	pLogger->output(indent+1,0,"EndDelivDate=%s 最后交割日",buf);
	BasisPrice.getString(buf);
	pLogger->output(indent+1,0,"BasisPrice=%s 挂牌基准价",buf);
	MaxMarketOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MaxMarketOrderVolume=%s 市价单最大下单量",buf);
	MinMarketOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MinMarketOrderVolume=%s 市价单最小下单量",buf);
	MaxLimitOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MaxLimitOrderVolume=%s 限价单最大下单量",buf);
	MinLimitOrderVolume.getString(buf);
	pLogger->output(indent+1,0,"MinLimitOrderVolume=%s 限价单最小下单量",buf);
	PriceTick.getString(buf);
	pLogger->output(indent+1,0,"PriceTick=%s 最小变动价位",buf);
	AllowDelivPersonOpen.getString(buf);
	pLogger->output(indent+1,0,"AllowDelivPersonOpen=%s 交割月自然人开仓",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	InstLifePhase.getString(buf);
	pLogger->output(indent+1,0,"InstLifePhase=%s 合约生命周期状态",buf);
	IsFirstTradingDay.getString(buf);
	pLogger->output(indent+1,0,"IsFirstTradingDay=%s 是否首交易日",buf);
	pLogger->output(indent,0,"}");
}

CCurrInstrumentPropertyIterator::~CCurrInstrumentPropertyIterator(void)
{
}


void CCurrInstrumentPropertyIterator::dump(FILE *output)
{
	CCurrInstrumentProperty *pCurrInstrumentProperty;
	
	while ((pCurrInstrumentProperty=next())!=NULL)
	{
		pCurrInstrumentProperty->dump(output);
	}
}



void CWriteableCurrPriceBanding::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,PriceLimitType,ValueMode,RoundingMode,UpperValue,LowerValue,InstrumentID,TradingSegmentSN\n");
}
	
void CWriteableCurrPriceBanding::init(void)
{
	SettlementGroupID.clear();
	PriceLimitType.clear();
	ValueMode.clear();
	RoundingMode.clear();
	UpperValue.clear();
	LowerValue.clear();
	InstrumentID.clear();
	TradingSegmentSN.clear();
}

int CWriteableCurrPriceBanding::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrPriceBanding),input)!=sizeof(CWriteableCurrPriceBanding))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrPriceBanding::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceLimitType=token;
		}
		else
		{
			PriceLimitType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RoundingMode=token;
		}
		else
		{
			RoundingMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperValue=token;
		}
		else
		{
			UpperValue="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerValue=token;
		}
		else
		{
			LowerValue="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"PriceLimitType"))
			{
				PriceLimitType=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"RoundingMode"))
			{
				RoundingMode=token;
			}
			else if (!strcmp(fieldName,"UpperValue"))
			{
				UpperValue=token;
			}
			else if (!strcmp(fieldName,"LowerValue"))
			{
				LowerValue=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrPriceBanding::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrPriceBanding),output)!=sizeof(CWriteableCurrPriceBanding))
		return 0;
	else
		return 1;
}

int CWriteableCurrPriceBanding::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceLimitType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RoundingMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrPriceBanding::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrPriceBanding%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	PriceLimitType.getString(buf);
	fprintf(fp,"\t\tPriceLimitType = %s    [限价类型]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);	
	UpperValue.getString(buf);
	fprintf(fp,"\t\tUpperValue = %s    [上限]\n",buf);	
	LowerValue.getString(buf);
	fprintf(fp,"\t\tLowerValue = %s    [下限]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPriceBanding::dumpDiff(FILE *fp, const CWriteableCurrPriceBanding *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrPriceBanding = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	PriceLimitType.getString(buf);
	if (compare(PriceLimitType.getValue(),pOriginal->PriceLimitType.getValue())!=0)
	{
		pOriginal->PriceLimitType.getString(bufOriginal);
		fprintf(fp,"\t\tPriceLimitType = %s -> %s    [限价类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceLimitType = %s    [限价类型]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	RoundingMode.getString(buf);
	if (compare(RoundingMode.getValue(),pOriginal->RoundingMode.getValue())!=0)
	{
		pOriginal->RoundingMode.getString(bufOriginal);
		fprintf(fp,"\t\tRoundingMode = %s -> %s    [舍入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);
	}
	UpperValue.getString(buf);
	if (compare(UpperValue.getValue(),pOriginal->UpperValue.getValue())!=0)
	{
		pOriginal->UpperValue.getString(bufOriginal);
		fprintf(fp,"\t\tUpperValue = %s -> %s    [上限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperValue = %s    [上限]\n",buf);
	}
	LowerValue.getString(buf);
	if (compare(LowerValue.getValue(),pOriginal->LowerValue.getValue())!=0)
	{
		pOriginal->LowerValue.getString(bufOriginal);
		fprintf(fp,"\t\tLowerValue = %s -> %s    [下限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerValue = %s    [下限]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPriceBanding::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	PriceLimitType.getString(buf);
	fprintf(fp,",PriceLimitType,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,",RoundingMode,%s",buf);	
	UpperValue.getString(buf);
	fprintf(fp,",UpperValue,%s",buf);	
	LowerValue.getString(buf);
	fprintf(fp,",LowerValue,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
}

void CWriteableCurrPriceBanding::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	PriceLimitType.getString(buf);
	sprintf(p,"PriceLimitType=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	RoundingMode.getString(buf);
	sprintf(p,"RoundingMode=%s,",buf);
	p+=strlen(p);
	UpperValue.getString(buf);
	sprintf(p,"UpperValue=%s,",buf);
	p+=strlen(p);
	LowerValue.getString(buf);
	sprintf(p,"LowerValue=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrPriceBanding::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrPriceBanding");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	PriceLimitType.getString(buf);
	pLogger->output(indent+1,0,"PriceLimitType=%s 限价类型",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	RoundingMode.getString(buf);
	pLogger->output(indent+1,0,"RoundingMode=%s 舍入方式",buf);
	UpperValue.getString(buf);
	pLogger->output(indent+1,0,"UpperValue=%s 上限",buf);
	LowerValue.getString(buf);
	pLogger->output(indent+1,0,"LowerValue=%s 下限",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	pLogger->output(indent,0,"}");
}

CCurrPriceBandingIterator::~CCurrPriceBandingIterator(void)
{
}


void CCurrPriceBandingIterator::dump(FILE *output)
{
	CCurrPriceBanding *pCurrPriceBanding;
	
	while ((pCurrPriceBanding=next())!=NULL)
	{
		pCurrPriceBanding->dump(output);
	}
}



void CWriteableCurrMarginRate::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,MarginCalcID,InstrumentID,ParticipantID\n");
}
	
void CWriteableCurrMarginRate::init(void)
{
	SettlementGroupID.clear();
	MarginCalcID.clear();
	InstrumentID.clear();
	ParticipantID.clear();
}

int CWriteableCurrMarginRate::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrMarginRate),input)!=sizeof(CWriteableCurrMarginRate))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrMarginRate::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MarginCalcID=token;
		}
		else
		{
			MarginCalcID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"MarginCalcID"))
			{
				MarginCalcID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrMarginRate::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrMarginRate),output)!=sizeof(CWriteableCurrMarginRate))
		return 0;
	else
		return 1;
}

int CWriteableCurrMarginRate::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MarginCalcID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrMarginRate::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrMarginRate%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	MarginCalcID.getString(buf);
	fprintf(fp,"\t\tMarginCalcID = %s    [保证金算法代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrMarginRate::dumpDiff(FILE *fp, const CWriteableCurrMarginRate *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrMarginRate = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	MarginCalcID.getString(buf);
	if (compare(MarginCalcID.getValue(),pOriginal->MarginCalcID.getValue())!=0)
	{
		pOriginal->MarginCalcID.getString(bufOriginal);
		fprintf(fp,"\t\tMarginCalcID = %s -> %s    [保证金算法代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMarginCalcID = %s    [保证金算法代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrMarginRate::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	MarginCalcID.getString(buf);
	fprintf(fp,",MarginCalcID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
}

void CWriteableCurrMarginRate::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	MarginCalcID.getString(buf);
	sprintf(p,"MarginCalcID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrMarginRate::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrMarginRate");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	MarginCalcID.getString(buf);
	pLogger->output(indent+1,0,"MarginCalcID=%s 保证金算法代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrMarginRateIterator::~CCurrMarginRateIterator(void)
{
}


void CCurrMarginRateIterator::dump(FILE *output)
{
	CCurrMarginRate *pCurrMarginRate;
	
	while ((pCurrMarginRate=next())!=NULL)
	{
		pCurrMarginRate->dump(output);
	}
}



void CWriteableCurrMarginRateDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,TradingRole,HedgeFlag,ValueMode,LongMarginRatio,ShortMarginRatio,InstrumentID,ParticipantID\n");
}
	
void CWriteableCurrMarginRateDetail::init(void)
{
	SettlementGroupID.clear();
	TradingRole.clear();
	HedgeFlag.clear();
	ValueMode.clear();
	LongMarginRatio.clear();
	ShortMarginRatio.clear();
	InstrumentID.clear();
	ParticipantID.clear();
}

int CWriteableCurrMarginRateDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrMarginRateDetail),input)!=sizeof(CWriteableCurrMarginRateDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrMarginRateDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongMarginRatio=token;
		}
		else
		{
			LongMarginRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortMarginRatio=token;
		}
		else
		{
			ShortMarginRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongMarginRatio"))
			{
				LongMarginRatio=token;
			}
			else if (!strcmp(fieldName,"ShortMarginRatio"))
			{
				ShortMarginRatio=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrMarginRateDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrMarginRateDetail),output)!=sizeof(CWriteableCurrMarginRateDetail))
		return 0;
	else
		return 1;
}

int CWriteableCurrMarginRateDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortMarginRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrMarginRateDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrMarginRateDetail%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrMarginRateDetail::dumpDiff(FILE *fp, const CWriteableCurrMarginRateDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrMarginRateDetail = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongMarginRatio.getString(buf);
	if (compare(LongMarginRatio.getValue(),pOriginal->LongMarginRatio.getValue())!=0)
	{
		pOriginal->LongMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tLongMarginRatio = %s -> %s    [多头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongMarginRatio = %s    [多头保证金率]\n",buf);
	}
	ShortMarginRatio.getString(buf);
	if (compare(ShortMarginRatio.getValue(),pOriginal->ShortMarginRatio.getValue())!=0)
	{
		pOriginal->ShortMarginRatio.getString(bufOriginal);
		fprintf(fp,"\t\tShortMarginRatio = %s -> %s    [空头保证金率]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortMarginRatio = %s    [空头保证金率]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrMarginRateDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongMarginRatio.getString(buf);
	fprintf(fp,",LongMarginRatio,%s",buf);	
	ShortMarginRatio.getString(buf);
	fprintf(fp,",ShortMarginRatio,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
}

void CWriteableCurrMarginRateDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongMarginRatio.getString(buf);
	sprintf(p,"LongMarginRatio=%s,",buf);
	p+=strlen(p);
	ShortMarginRatio.getString(buf);
	sprintf(p,"ShortMarginRatio=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrMarginRateDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrMarginRateDetail");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"LongMarginRatio=%s 多头保证金率",buf);
	ShortMarginRatio.getString(buf);
	pLogger->output(indent+1,0,"ShortMarginRatio=%s 空头保证金率",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrMarginRateDetailIterator::~CCurrMarginRateDetailIterator(void)
{
}


void CCurrMarginRateDetailIterator::dump(FILE *output)
{
	CCurrMarginRateDetail *pCurrMarginRateDetail;
	
	while ((pCurrMarginRateDetail=next())!=NULL)
	{
		pCurrMarginRateDetail->dump(output);
	}
}



void CWriteableCurrPartPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,PartPosiLimitCalcID,InstrumentID,ParticipantID\n");
}
	
void CWriteableCurrPartPosiLimit::init(void)
{
	SettlementGroupID.clear();
	PartPosiLimitCalcID.clear();
	InstrumentID.clear();
	ParticipantID.clear();
}

int CWriteableCurrPartPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrPartPosiLimit),input)!=sizeof(CWriteableCurrPartPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrPartPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PartPosiLimitCalcID=token;
		}
		else
		{
			PartPosiLimitCalcID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"PartPosiLimitCalcID"))
			{
				PartPosiLimitCalcID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrPartPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrPartPosiLimit),output)!=sizeof(CWriteableCurrPartPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableCurrPartPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PartPosiLimitCalcID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrPartPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrPartPosiLimit%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	PartPosiLimitCalcID.getString(buf);
	fprintf(fp,"\t\tPartPosiLimitCalcID = %s    [会员限仓算法代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPartPosiLimit::dumpDiff(FILE *fp, const CWriteableCurrPartPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrPartPosiLimit = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	PartPosiLimitCalcID.getString(buf);
	if (compare(PartPosiLimitCalcID.getValue(),pOriginal->PartPosiLimitCalcID.getValue())!=0)
	{
		pOriginal->PartPosiLimitCalcID.getString(bufOriginal);
		fprintf(fp,"\t\tPartPosiLimitCalcID = %s -> %s    [会员限仓算法代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPartPosiLimitCalcID = %s    [会员限仓算法代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPartPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	PartPosiLimitCalcID.getString(buf);
	fprintf(fp,",PartPosiLimitCalcID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
}

void CWriteableCurrPartPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	PartPosiLimitCalcID.getString(buf);
	sprintf(p,"PartPosiLimitCalcID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrPartPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrPartPosiLimit");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	PartPosiLimitCalcID.getString(buf);
	pLogger->output(indent+1,0,"PartPosiLimitCalcID=%s 会员限仓算法代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrPartPosiLimitIterator::~CCurrPartPosiLimitIterator(void)
{
}


void CCurrPartPosiLimitIterator::dump(FILE *output)
{
	CCurrPartPosiLimit *pCurrPartPosiLimit;
	
	while ((pCurrPartPosiLimit=next())!=NULL)
	{
		pCurrPartPosiLimit->dump(output);
	}
}



void CWriteableCurrPartPosiLimitDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,InstrumentID,ParticipantID,TradingRole\n");
}
	
void CWriteableCurrPartPosiLimitDetail::init(void)
{
	SettlementGroupID.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
}

int CWriteableCurrPartPosiLimitDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrPartPosiLimitDetail),input)!=sizeof(CWriteableCurrPartPosiLimitDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrPartPosiLimitDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrPartPosiLimitDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrPartPosiLimitDetail),output)!=sizeof(CWriteableCurrPartPosiLimitDetail))
		return 0;
	else
		return 1;
}

int CWriteableCurrPartPosiLimitDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrPartPosiLimitDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrPartPosiLimitDetail%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPartPosiLimitDetail::dumpDiff(FILE *fp, const CWriteableCurrPartPosiLimitDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrPartPosiLimitDetail = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrPartPosiLimitDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
}

void CWriteableCurrPartPosiLimitDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrPartPosiLimitDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrPartPosiLimitDetail");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	pLogger->output(indent,0,"}");
}

CCurrPartPosiLimitDetailIterator::~CCurrPartPosiLimitDetailIterator(void)
{
}


void CCurrPartPosiLimitDetailIterator::dump(FILE *output)
{
	CCurrPartPosiLimitDetail *pCurrPartPosiLimitDetail;
	
	while ((pCurrPartPosiLimitDetail=next())!=NULL)
	{
		pCurrPartPosiLimitDetail->dump(output);
	}
}



void CWriteableCurrClientPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ClientPosiLimitCalcID,InstrumentID\n");
}
	
void CWriteableCurrClientPosiLimit::init(void)
{
	SettlementGroupID.clear();
	ClientPosiLimitCalcID.clear();
	InstrumentID.clear();
}

int CWriteableCurrClientPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrClientPosiLimit),input)!=sizeof(CWriteableCurrClientPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrClientPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientPosiLimitCalcID=token;
		}
		else
		{
			ClientPosiLimitCalcID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ClientPosiLimitCalcID"))
			{
				ClientPosiLimitCalcID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrClientPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrClientPosiLimit),output)!=sizeof(CWriteableCurrClientPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableCurrClientPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientPosiLimitCalcID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrClientPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrClientPosiLimit%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ClientPosiLimitCalcID.getString(buf);
	fprintf(fp,"\t\tClientPosiLimitCalcID = %s    [客户限仓算法代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrClientPosiLimit::dumpDiff(FILE *fp, const CWriteableCurrClientPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrClientPosiLimit = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ClientPosiLimitCalcID.getString(buf);
	if (compare(ClientPosiLimitCalcID.getValue(),pOriginal->ClientPosiLimitCalcID.getValue())!=0)
	{
		pOriginal->ClientPosiLimitCalcID.getString(bufOriginal);
		fprintf(fp,"\t\tClientPosiLimitCalcID = %s -> %s    [客户限仓算法代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientPosiLimitCalcID = %s    [客户限仓算法代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrClientPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ClientPosiLimitCalcID.getString(buf);
	fprintf(fp,",ClientPosiLimitCalcID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
}

void CWriteableCurrClientPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ClientPosiLimitCalcID.getString(buf);
	sprintf(p,"ClientPosiLimitCalcID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrClientPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrClientPosiLimit");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ClientPosiLimitCalcID.getString(buf);
	pLogger->output(indent+1,0,"ClientPosiLimitCalcID=%s 客户限仓算法代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrClientPosiLimitIterator::~CCurrClientPosiLimitIterator(void)
{
}


void CCurrClientPosiLimitIterator::dump(FILE *output)
{
	CCurrClientPosiLimit *pCurrClientPosiLimit;
	
	while ((pCurrClientPosiLimit=next())!=NULL)
	{
		pCurrClientPosiLimit->dump(output);
	}
}



void CWriteableCurrClientPosiLimitDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,InstrumentID,ClientType\n");
}
	
void CWriteableCurrClientPosiLimitDetail::init(void)
{
	SettlementGroupID.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	InstrumentID.clear();
	ClientType.clear();
}

int CWriteableCurrClientPosiLimitDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrClientPosiLimitDetail),input)!=sizeof(CWriteableCurrClientPosiLimitDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrClientPosiLimitDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientType=token;
		}
		else
		{
			ClientType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientType"))
			{
				ClientType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrClientPosiLimitDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrClientPosiLimitDetail),output)!=sizeof(CWriteableCurrClientPosiLimitDetail))
		return 0;
	else
		return 1;
}

int CWriteableCurrClientPosiLimitDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrClientPosiLimitDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrClientPosiLimitDetail%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientType.getString(buf);
	fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrClientPosiLimitDetail::dumpDiff(FILE *fp, const CWriteableCurrClientPosiLimitDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrClientPosiLimitDetail = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientType.getString(buf);
	if (compare(ClientType.getValue(),pOriginal->ClientType.getValue())!=0)
	{
		pOriginal->ClientType.getString(bufOriginal);
		fprintf(fp,"\t\tClientType = %s -> %s    [客户类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientType = %s    [客户类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrClientPosiLimitDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientType.getString(buf);
	fprintf(fp,",ClientType,%s",buf);	
}

void CWriteableCurrClientPosiLimitDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientType.getString(buf);
	sprintf(p,"ClientType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrClientPosiLimitDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrClientPosiLimitDetail");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientType.getString(buf);
	pLogger->output(indent+1,0,"ClientType=%s 客户类型",buf);
	pLogger->output(indent,0,"}");
}

CCurrClientPosiLimitDetailIterator::~CCurrClientPosiLimitDetailIterator(void)
{
}


void CCurrClientPosiLimitDetailIterator::dump(FILE *output)
{
	CCurrClientPosiLimitDetail *pCurrClientPosiLimitDetail;
	
	while ((pCurrClientPosiLimitDetail=next())!=NULL)
	{
		pCurrClientPosiLimitDetail->dump(output);
	}
}



void CWriteableCurrSpecialPosiLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,ClientPosiLimitCalcID,InstrumentID,ClientID\n");
}
	
void CWriteableCurrSpecialPosiLimit::init(void)
{
	SettlementGroupID.clear();
	ClientPosiLimitCalcID.clear();
	InstrumentID.clear();
	ClientID.clear();
}

int CWriteableCurrSpecialPosiLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrSpecialPosiLimit),input)!=sizeof(CWriteableCurrSpecialPosiLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrSpecialPosiLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientPosiLimitCalcID=token;
		}
		else
		{
			ClientPosiLimitCalcID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"ClientPosiLimitCalcID"))
			{
				ClientPosiLimitCalcID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrSpecialPosiLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrSpecialPosiLimit),output)!=sizeof(CWriteableCurrSpecialPosiLimit))
		return 0;
	else
		return 1;
}

int CWriteableCurrSpecialPosiLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientPosiLimitCalcID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrSpecialPosiLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrSpecialPosiLimit%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	ClientPosiLimitCalcID.getString(buf);
	fprintf(fp,"\t\tClientPosiLimitCalcID = %s    [客户限仓算法代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrSpecialPosiLimit::dumpDiff(FILE *fp, const CWriteableCurrSpecialPosiLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrSpecialPosiLimit = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	ClientPosiLimitCalcID.getString(buf);
	if (compare(ClientPosiLimitCalcID.getValue(),pOriginal->ClientPosiLimitCalcID.getValue())!=0)
	{
		pOriginal->ClientPosiLimitCalcID.getString(bufOriginal);
		fprintf(fp,"\t\tClientPosiLimitCalcID = %s -> %s    [客户限仓算法代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientPosiLimitCalcID = %s    [客户限仓算法代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrSpecialPosiLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	ClientPosiLimitCalcID.getString(buf);
	fprintf(fp,",ClientPosiLimitCalcID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableCurrSpecialPosiLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	ClientPosiLimitCalcID.getString(buf);
	sprintf(p,"ClientPosiLimitCalcID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrSpecialPosiLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrSpecialPosiLimit");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	ClientPosiLimitCalcID.getString(buf);
	pLogger->output(indent+1,0,"ClientPosiLimitCalcID=%s 客户限仓算法代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrSpecialPosiLimitIterator::~CCurrSpecialPosiLimitIterator(void)
{
}


void CCurrSpecialPosiLimitIterator::dump(FILE *output)
{
	CCurrSpecialPosiLimit *pCurrSpecialPosiLimit;
	
	while ((pCurrSpecialPosiLimit=next())!=NULL)
	{
		pCurrSpecialPosiLimit->dump(output);
	}
}



void CWriteableCurrSpecialPosiLimitDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,StartTotalPosition,ValueMode,LongPosLimit,ShortPosLimit,InstrumentID,ClientID\n");
}
	
void CWriteableCurrSpecialPosiLimitDetail::init(void)
{
	SettlementGroupID.clear();
	StartTotalPosition.clear();
	ValueMode.clear();
	LongPosLimit.clear();
	ShortPosLimit.clear();
	InstrumentID.clear();
	ClientID.clear();
}

int CWriteableCurrSpecialPosiLimitDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrSpecialPosiLimitDetail),input)!=sizeof(CWriteableCurrSpecialPosiLimitDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrSpecialPosiLimitDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTotalPosition=token;
		}
		else
		{
			StartTotalPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongPosLimit=token;
		}
		else
		{
			LongPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortPosLimit=token;
		}
		else
		{
			ShortPosLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"StartTotalPosition"))
			{
				StartTotalPosition=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"LongPosLimit"))
			{
				LongPosLimit=token;
			}
			else if (!strcmp(fieldName,"ShortPosLimit"))
			{
				ShortPosLimit=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrSpecialPosiLimitDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrSpecialPosiLimitDetail),output)!=sizeof(CWriteableCurrSpecialPosiLimitDetail))
		return 0;
	else
		return 1;
}

int CWriteableCurrSpecialPosiLimitDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTotalPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortPosLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrSpecialPosiLimitDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrSpecialPosiLimitDetail%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrSpecialPosiLimitDetail::dumpDiff(FILE *fp, const CWriteableCurrSpecialPosiLimitDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrSpecialPosiLimitDetail = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	StartTotalPosition.getString(buf);
	if (compare(StartTotalPosition.getValue(),pOriginal->StartTotalPosition.getValue())!=0)
	{
		pOriginal->StartTotalPosition.getString(bufOriginal);
		fprintf(fp,"\t\tStartTotalPosition = %s -> %s    [限仓起点]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTotalPosition = %s    [限仓起点]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	LongPosLimit.getString(buf);
	if (compare(LongPosLimit.getValue(),pOriginal->LongPosLimit.getValue())!=0)
	{
		pOriginal->LongPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongPosLimit = %s -> %s    [多头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongPosLimit = %s    [多头限仓]\n",buf);
	}
	ShortPosLimit.getString(buf);
	if (compare(ShortPosLimit.getValue(),pOriginal->ShortPosLimit.getValue())!=0)
	{
		pOriginal->ShortPosLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortPosLimit = %s -> %s    [空头限仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortPosLimit = %s    [空头限仓]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrSpecialPosiLimitDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	StartTotalPosition.getString(buf);
	fprintf(fp,",StartTotalPosition,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	LongPosLimit.getString(buf);
	fprintf(fp,",LongPosLimit,%s",buf);	
	ShortPosLimit.getString(buf);
	fprintf(fp,",ShortPosLimit,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableCurrSpecialPosiLimitDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	StartTotalPosition.getString(buf);
	sprintf(p,"StartTotalPosition=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	LongPosLimit.getString(buf);
	sprintf(p,"LongPosLimit=%s,",buf);
	p+=strlen(p);
	ShortPosLimit.getString(buf);
	sprintf(p,"ShortPosLimit=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrSpecialPosiLimitDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrSpecialPosiLimitDetail");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	StartTotalPosition.getString(buf);
	pLogger->output(indent+1,0,"StartTotalPosition=%s 限仓起点",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	LongPosLimit.getString(buf);
	pLogger->output(indent+1,0,"LongPosLimit=%s 多头限仓",buf);
	ShortPosLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortPosLimit=%s 空头限仓",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrSpecialPosiLimitDetailIterator::~CCurrSpecialPosiLimitDetailIterator(void)
{
}


void CCurrSpecialPosiLimitDetailIterator::dump(FILE *output)
{
	CCurrSpecialPosiLimitDetail *pCurrSpecialPosiLimitDetail;
	
	while ((pCurrSpecialPosiLimitDetail=next())!=NULL)
	{
		pCurrSpecialPosiLimitDetail->dump(output);
	}
}



void CWriteableCurrHedgeRule::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeUsageType,InstrumentID,HedgeCloseTodayType\n");
}
	
void CWriteableCurrHedgeRule::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeUsageType.clear();
	InstrumentID.clear();
	HedgeCloseTodayType.clear();
}

int CWriteableCurrHedgeRule::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrHedgeRule),input)!=sizeof(CWriteableCurrHedgeRule))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrHedgeRule::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeUsageType=token;
		}
		else
		{
			HedgeUsageType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeCloseTodayType=token;
		}
		else
		{
			HedgeCloseTodayType="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeUsageType"))
			{
				HedgeUsageType=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"HedgeCloseTodayType"))
			{
				HedgeCloseTodayType=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrHedgeRule::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrHedgeRule),output)!=sizeof(CWriteableCurrHedgeRule))
		return 0;
	else
		return 1;
}

int CWriteableCurrHedgeRule::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeUsageType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeCloseTodayType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrHedgeRule::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrHedgeRule%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeUsageType.getString(buf);
	fprintf(fp,"\t\tHedgeUsageType = %s    [套保额度使用类型]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	HedgeCloseTodayType.getString(buf);
	fprintf(fp,"\t\tHedgeCloseTodayType = %s    [套保额度平今仓类型]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrHedgeRule::dumpDiff(FILE *fp, const CWriteableCurrHedgeRule *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrHedgeRule = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeUsageType.getString(buf);
	if (compare(HedgeUsageType.getValue(),pOriginal->HedgeUsageType.getValue())!=0)
	{
		pOriginal->HedgeUsageType.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeUsageType = %s -> %s    [套保额度使用类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeUsageType = %s    [套保额度使用类型]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	HedgeCloseTodayType.getString(buf);
	if (compare(HedgeCloseTodayType.getValue(),pOriginal->HedgeCloseTodayType.getValue())!=0)
	{
		pOriginal->HedgeCloseTodayType.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeCloseTodayType = %s -> %s    [套保额度平今仓类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeCloseTodayType = %s    [套保额度平今仓类型]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrHedgeRule::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeUsageType.getString(buf);
	fprintf(fp,",HedgeUsageType,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	HedgeCloseTodayType.getString(buf);
	fprintf(fp,",HedgeCloseTodayType,%s",buf);	
}

void CWriteableCurrHedgeRule::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeUsageType.getString(buf);
	sprintf(p,"HedgeUsageType=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	HedgeCloseTodayType.getString(buf);
	sprintf(p,"HedgeCloseTodayType=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrHedgeRule::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrHedgeRule");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeUsageType.getString(buf);
	pLogger->output(indent+1,0,"HedgeUsageType=%s 套保额度使用类型",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	HedgeCloseTodayType.getString(buf);
	pLogger->output(indent+1,0,"HedgeCloseTodayType=%s 套保额度平今仓类型",buf);
	pLogger->output(indent,0,"}");
}

CCurrHedgeRuleIterator::~CCurrHedgeRuleIterator(void)
{
}


void CCurrHedgeRuleIterator::dump(FILE *output)
{
	CCurrHedgeRule *pCurrHedgeRule;
	
	while ((pCurrHedgeRule=next())!=NULL)
	{
		pCurrHedgeRule->dump(output);
	}
}



void CWriteableCurrTradingSegmentAttr::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,TradingSegmentSN,TradingSegmentName,StartTime,InstrumentStatus,InstrumentID\n");
}
	
void CWriteableCurrTradingSegmentAttr::init(void)
{
	SettlementGroupID.clear();
	TradingSegmentSN.clear();
	TradingSegmentName.clear();
	StartTime.clear();
	InstrumentStatus.clear();
	InstrumentID.clear();
}

int CWriteableCurrTradingSegmentAttr::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrTradingSegmentAttr),input)!=sizeof(CWriteableCurrTradingSegmentAttr))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrTradingSegmentAttr::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentName=token;
		}
		else
		{
			TradingSegmentName="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StartTime=token;
		}
		else
		{
			StartTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentName"))
			{
				TradingSegmentName=token;
			}
			else if (!strcmp(fieldName,"StartTime"))
			{
				StartTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrTradingSegmentAttr::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrTradingSegmentAttr),output)!=sizeof(CWriteableCurrTradingSegmentAttr))
		return 0;
	else
		return 1;
}

int CWriteableCurrTradingSegmentAttr::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentName.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StartTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrTradingSegmentAttr::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrTradingSegmentAttr%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	TradingSegmentName.getString(buf);
	fprintf(fp,"\t\tTradingSegmentName = %s    [交易阶段名称]\n",buf);	
	StartTime.getString(buf);
	fprintf(fp,"\t\tStartTime = %s    [起始时间]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrTradingSegmentAttr::dumpDiff(FILE *fp, const CWriteableCurrTradingSegmentAttr *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrTradingSegmentAttr = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	TradingSegmentName.getString(buf);
	if (compare(TradingSegmentName.getValue(),pOriginal->TradingSegmentName.getValue())!=0)
	{
		pOriginal->TradingSegmentName.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentName = %s -> %s    [交易阶段名称]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentName = %s    [交易阶段名称]\n",buf);
	}
	StartTime.getString(buf);
	if (compare(StartTime.getValue(),pOriginal->StartTime.getValue())!=0)
	{
		pOriginal->StartTime.getString(bufOriginal);
		fprintf(fp,"\t\tStartTime = %s -> %s    [起始时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStartTime = %s    [起始时间]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrTradingSegmentAttr::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
	TradingSegmentName.getString(buf);
	fprintf(fp,",TradingSegmentName,%s",buf);	
	StartTime.getString(buf);
	fprintf(fp,",StartTime,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
}

void CWriteableCurrTradingSegmentAttr::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	TradingSegmentName.getString(buf);
	sprintf(p,"TradingSegmentName=%s,",buf);
	p+=strlen(p);
	StartTime.getString(buf);
	sprintf(p,"StartTime=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrTradingSegmentAttr::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrTradingSegmentAttr");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	TradingSegmentName.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentName=%s 交易阶段名称",buf);
	StartTime.getString(buf);
	pLogger->output(indent+1,0,"StartTime=%s 起始时间",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrTradingSegmentAttrIterator::~CCurrTradingSegmentAttrIterator(void)
{
}


void CCurrTradingSegmentAttrIterator::dump(FILE *output)
{
	CCurrTradingSegmentAttr *pCurrTradingSegmentAttr;
	
	while ((pCurrTradingSegmentAttr=next())!=NULL)
	{
		pCurrTradingSegmentAttr->dump(output);
	}
}



void CWriteableCurrFuse::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,PriceLimitType,ValueMode,RoundingMode,UpperValue,LowerValue,PriceLimitDuration,FuseDuration,TradingFlag,NoFuseTime,InstrumentID\n");
}
	
void CWriteableCurrFuse::init(void)
{
	SettlementGroupID.clear();
	PriceLimitType.clear();
	ValueMode.clear();
	RoundingMode.clear();
	UpperValue.clear();
	LowerValue.clear();
	PriceLimitDuration.clear();
	FuseDuration.clear();
	TradingFlag.clear();
	NoFuseTime.clear();
	InstrumentID.clear();
}

int CWriteableCurrFuse::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrFuse),input)!=sizeof(CWriteableCurrFuse))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrFuse::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceLimitType=token;
		}
		else
		{
			PriceLimitType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ValueMode=token;
		}
		else
		{
			ValueMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			RoundingMode=token;
		}
		else
		{
			RoundingMode="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperValue=token;
		}
		else
		{
			UpperValue="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerValue=token;
		}
		else
		{
			LowerValue="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceLimitDuration=token;
		}
		else
		{
			PriceLimitDuration="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FuseDuration=token;
		}
		else
		{
			FuseDuration="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingFlag=token;
		}
		else
		{
			TradingFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			NoFuseTime=token;
		}
		else
		{
			NoFuseTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"PriceLimitType"))
			{
				PriceLimitType=token;
			}
			else if (!strcmp(fieldName,"ValueMode"))
			{
				ValueMode=token;
			}
			else if (!strcmp(fieldName,"RoundingMode"))
			{
				RoundingMode=token;
			}
			else if (!strcmp(fieldName,"UpperValue"))
			{
				UpperValue=token;
			}
			else if (!strcmp(fieldName,"LowerValue"))
			{
				LowerValue=token;
			}
			else if (!strcmp(fieldName,"PriceLimitDuration"))
			{
				PriceLimitDuration=token;
			}
			else if (!strcmp(fieldName,"FuseDuration"))
			{
				FuseDuration=token;
			}
			else if (!strcmp(fieldName,"TradingFlag"))
			{
				TradingFlag=token;
			}
			else if (!strcmp(fieldName,"NoFuseTime"))
			{
				NoFuseTime=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrFuse::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrFuse),output)!=sizeof(CWriteableCurrFuse))
		return 0;
	else
		return 1;
}

int CWriteableCurrFuse::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceLimitType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ValueMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	RoundingMode.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerValue.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceLimitDuration.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FuseDuration.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	NoFuseTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrFuse::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrFuse%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	PriceLimitType.getString(buf);
	fprintf(fp,"\t\tPriceLimitType = %s    [限价类型]\n",buf);	
	ValueMode.getString(buf);
	fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);	
	UpperValue.getString(buf);
	fprintf(fp,"\t\tUpperValue = %s    [上限]\n",buf);	
	LowerValue.getString(buf);
	fprintf(fp,"\t\tLowerValue = %s    [下限]\n",buf);	
	PriceLimitDuration.getString(buf);
	fprintf(fp,"\t\tPriceLimitDuration = %s    [停板持续时间]\n",buf);	
	FuseDuration.getString(buf);
	fprintf(fp,"\t\tFuseDuration = %s    [熔断期]\n",buf);	
	TradingFlag.getString(buf);
	fprintf(fp,"\t\tTradingFlag = %s    [熔断期是否交易]\n",buf);	
	NoFuseTime.getString(buf);
	fprintf(fp,"\t\tNoFuseTime = %s    [不启动熔断时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrFuse::dumpDiff(FILE *fp, const CWriteableCurrFuse *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrFuse = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	PriceLimitType.getString(buf);
	if (compare(PriceLimitType.getValue(),pOriginal->PriceLimitType.getValue())!=0)
	{
		pOriginal->PriceLimitType.getString(bufOriginal);
		fprintf(fp,"\t\tPriceLimitType = %s -> %s    [限价类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceLimitType = %s    [限价类型]\n",buf);
	}
	ValueMode.getString(buf);
	if (compare(ValueMode.getValue(),pOriginal->ValueMode.getValue())!=0)
	{
		pOriginal->ValueMode.getString(bufOriginal);
		fprintf(fp,"\t\tValueMode = %s -> %s    [取值方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tValueMode = %s    [取值方式]\n",buf);
	}
	RoundingMode.getString(buf);
	if (compare(RoundingMode.getValue(),pOriginal->RoundingMode.getValue())!=0)
	{
		pOriginal->RoundingMode.getString(bufOriginal);
		fprintf(fp,"\t\tRoundingMode = %s -> %s    [舍入方式]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tRoundingMode = %s    [舍入方式]\n",buf);
	}
	UpperValue.getString(buf);
	if (compare(UpperValue.getValue(),pOriginal->UpperValue.getValue())!=0)
	{
		pOriginal->UpperValue.getString(bufOriginal);
		fprintf(fp,"\t\tUpperValue = %s -> %s    [上限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperValue = %s    [上限]\n",buf);
	}
	LowerValue.getString(buf);
	if (compare(LowerValue.getValue(),pOriginal->LowerValue.getValue())!=0)
	{
		pOriginal->LowerValue.getString(bufOriginal);
		fprintf(fp,"\t\tLowerValue = %s -> %s    [下限]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerValue = %s    [下限]\n",buf);
	}
	PriceLimitDuration.getString(buf);
	if (compare(PriceLimitDuration.getValue(),pOriginal->PriceLimitDuration.getValue())!=0)
	{
		pOriginal->PriceLimitDuration.getString(bufOriginal);
		fprintf(fp,"\t\tPriceLimitDuration = %s -> %s    [停板持续时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceLimitDuration = %s    [停板持续时间]\n",buf);
	}
	FuseDuration.getString(buf);
	if (compare(FuseDuration.getValue(),pOriginal->FuseDuration.getValue())!=0)
	{
		pOriginal->FuseDuration.getString(bufOriginal);
		fprintf(fp,"\t\tFuseDuration = %s -> %s    [熔断期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFuseDuration = %s    [熔断期]\n",buf);
	}
	TradingFlag.getString(buf);
	if (compare(TradingFlag.getValue(),pOriginal->TradingFlag.getValue())!=0)
	{
		pOriginal->TradingFlag.getString(bufOriginal);
		fprintf(fp,"\t\tTradingFlag = %s -> %s    [熔断期是否交易]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingFlag = %s    [熔断期是否交易]\n",buf);
	}
	NoFuseTime.getString(buf);
	if (compare(NoFuseTime.getValue(),pOriginal->NoFuseTime.getValue())!=0)
	{
		pOriginal->NoFuseTime.getString(bufOriginal);
		fprintf(fp,"\t\tNoFuseTime = %s -> %s    [不启动熔断时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tNoFuseTime = %s    [不启动熔断时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrFuse::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	PriceLimitType.getString(buf);
	fprintf(fp,",PriceLimitType,%s",buf);	
	ValueMode.getString(buf);
	fprintf(fp,",ValueMode,%s",buf);	
	RoundingMode.getString(buf);
	fprintf(fp,",RoundingMode,%s",buf);	
	UpperValue.getString(buf);
	fprintf(fp,",UpperValue,%s",buf);	
	LowerValue.getString(buf);
	fprintf(fp,",LowerValue,%s",buf);	
	PriceLimitDuration.getString(buf);
	fprintf(fp,",PriceLimitDuration,%s",buf);	
	FuseDuration.getString(buf);
	fprintf(fp,",FuseDuration,%s",buf);	
	TradingFlag.getString(buf);
	fprintf(fp,",TradingFlag,%s",buf);	
	NoFuseTime.getString(buf);
	fprintf(fp,",NoFuseTime,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
}

void CWriteableCurrFuse::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	PriceLimitType.getString(buf);
	sprintf(p,"PriceLimitType=%s,",buf);
	p+=strlen(p);
	ValueMode.getString(buf);
	sprintf(p,"ValueMode=%s,",buf);
	p+=strlen(p);
	RoundingMode.getString(buf);
	sprintf(p,"RoundingMode=%s,",buf);
	p+=strlen(p);
	UpperValue.getString(buf);
	sprintf(p,"UpperValue=%s,",buf);
	p+=strlen(p);
	LowerValue.getString(buf);
	sprintf(p,"LowerValue=%s,",buf);
	p+=strlen(p);
	PriceLimitDuration.getString(buf);
	sprintf(p,"PriceLimitDuration=%s,",buf);
	p+=strlen(p);
	FuseDuration.getString(buf);
	sprintf(p,"FuseDuration=%s,",buf);
	p+=strlen(p);
	TradingFlag.getString(buf);
	sprintf(p,"TradingFlag=%s,",buf);
	p+=strlen(p);
	NoFuseTime.getString(buf);
	sprintf(p,"NoFuseTime=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrFuse::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrFuse");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	PriceLimitType.getString(buf);
	pLogger->output(indent+1,0,"PriceLimitType=%s 限价类型",buf);
	ValueMode.getString(buf);
	pLogger->output(indent+1,0,"ValueMode=%s 取值方式",buf);
	RoundingMode.getString(buf);
	pLogger->output(indent+1,0,"RoundingMode=%s 舍入方式",buf);
	UpperValue.getString(buf);
	pLogger->output(indent+1,0,"UpperValue=%s 上限",buf);
	LowerValue.getString(buf);
	pLogger->output(indent+1,0,"LowerValue=%s 下限",buf);
	PriceLimitDuration.getString(buf);
	pLogger->output(indent+1,0,"PriceLimitDuration=%s 停板持续时间",buf);
	FuseDuration.getString(buf);
	pLogger->output(indent+1,0,"FuseDuration=%s 熔断期",buf);
	TradingFlag.getString(buf);
	pLogger->output(indent+1,0,"TradingFlag=%s 熔断期是否交易",buf);
	NoFuseTime.getString(buf);
	pLogger->output(indent+1,0,"NoFuseTime=%s 不启动熔断时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	pLogger->output(indent,0,"}");
}

CCurrFuseIterator::~CCurrFuseIterator(void)
{
}


void CCurrFuseIterator::dump(FILE *output)
{
	CCurrFuse *pCurrFuse;
	
	while ((pCurrFuse=next())!=NULL)
	{
		pCurrFuse->dump(output);
	}
}



void CWriteableTradingAccount::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,PreBalance,CurrMargin,CloseProfit,Premium,Deposit,Withdraw,Balance,Available,AccountID,FrozenMargin,FrozenPremium\n");
}
	
void CWriteableTradingAccount::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	PreBalance.clear();
	CurrMargin.clear();
	CloseProfit.clear();
	Premium.clear();
	Deposit.clear();
	Withdraw.clear();
	Balance.clear();
	Available.clear();
	AccountID.clear();
	FrozenMargin.clear();
	FrozenPremium.clear();
	pBaseReserveAccount=NULL;
}

int CWriteableTradingAccount::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableTradingAccount),input)!=sizeof(CWriteableTradingAccount))
		return 0;
	else
		return 1;
}
	
int CWriteableTradingAccount::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreBalance=token;
		}
		else
		{
			PreBalance="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrMargin=token;
		}
		else
		{
			CurrMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CloseProfit=token;
		}
		else
		{
			CloseProfit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Premium=token;
		}
		else
		{
			Premium="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Deposit=token;
		}
		else
		{
			Deposit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Withdraw=token;
		}
		else
		{
			Withdraw="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Balance=token;
		}
		else
		{
			Balance="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Available=token;
		}
		else
		{
			Available="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccountID=token;
		}
		else
		{
			AccountID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenMargin=token;
		}
		else
		{
			FrozenMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenPremium=token;
		}
		else
		{
			FrozenPremium="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"PreBalance"))
			{
				PreBalance=token;
			}
			else if (!strcmp(fieldName,"CurrMargin"))
			{
				CurrMargin=token;
			}
			else if (!strcmp(fieldName,"CloseProfit"))
			{
				CloseProfit=token;
			}
			else if (!strcmp(fieldName,"Premium"))
			{
				Premium=token;
			}
			else if (!strcmp(fieldName,"Deposit"))
			{
				Deposit=token;
			}
			else if (!strcmp(fieldName,"Withdraw"))
			{
				Withdraw=token;
			}
			else if (!strcmp(fieldName,"Balance"))
			{
				Balance=token;
			}
			else if (!strcmp(fieldName,"Available"))
			{
				Available=token;
			}
			else if (!strcmp(fieldName,"AccountID"))
			{
				AccountID=token;
			}
			else if (!strcmp(fieldName,"FrozenMargin"))
			{
				FrozenMargin=token;
			}
			else if (!strcmp(fieldName,"FrozenPremium"))
			{
				FrozenPremium=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableTradingAccount::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableTradingAccount),output)!=sizeof(CWriteableTradingAccount))
		return 0;
	else
		return 1;
}

int CWriteableTradingAccount::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreBalance.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CloseProfit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Premium.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Deposit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Withdraw.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Balance.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Available.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccountID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenPremium.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableTradingAccount::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCTradingAccount%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	PreBalance.getString(buf);
	fprintf(fp,"\t\tPreBalance = %s    [上次结算准备金]\n",buf);	
	CurrMargin.getString(buf);
	fprintf(fp,"\t\tCurrMargin = %s    [当前保证金总额]\n",buf);	
	CloseProfit.getString(buf);
	fprintf(fp,"\t\tCloseProfit = %s    [平仓盈亏]\n",buf);	
	Premium.getString(buf);
	fprintf(fp,"\t\tPremium = %s    [期权权利金收支]\n",buf);	
	Deposit.getString(buf);
	fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);	
	Withdraw.getString(buf);
	fprintf(fp,"\t\tWithdraw = %s    [出金金额]\n",buf);	
	Balance.getString(buf);
	fprintf(fp,"\t\tBalance = %s    [期货结算准备金]\n",buf);	
	Available.getString(buf);
	fprintf(fp,"\t\tAvailable = %s    [可提资金]\n",buf);	
	AccountID.getString(buf);
	fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableTradingAccount::dumpDiff(FILE *fp, const CWriteableTradingAccount *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCTradingAccount = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	PreBalance.getString(buf);
	if (compare(PreBalance.getValue(),pOriginal->PreBalance.getValue())!=0)
	{
		pOriginal->PreBalance.getString(bufOriginal);
		fprintf(fp,"\t\tPreBalance = %s -> %s    [上次结算准备金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreBalance = %s    [上次结算准备金]\n",buf);
	}
	CurrMargin.getString(buf);
	if (compare(CurrMargin.getValue(),pOriginal->CurrMargin.getValue())!=0)
	{
		pOriginal->CurrMargin.getString(bufOriginal);
		fprintf(fp,"\t\tCurrMargin = %s -> %s    [当前保证金总额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrMargin = %s    [当前保证金总额]\n",buf);
	}
	CloseProfit.getString(buf);
	if (compare(CloseProfit.getValue(),pOriginal->CloseProfit.getValue())!=0)
	{
		pOriginal->CloseProfit.getString(bufOriginal);
		fprintf(fp,"\t\tCloseProfit = %s -> %s    [平仓盈亏]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCloseProfit = %s    [平仓盈亏]\n",buf);
	}
	Premium.getString(buf);
	if (compare(Premium.getValue(),pOriginal->Premium.getValue())!=0)
	{
		pOriginal->Premium.getString(bufOriginal);
		fprintf(fp,"\t\tPremium = %s -> %s    [期权权利金收支]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPremium = %s    [期权权利金收支]\n",buf);
	}
	Deposit.getString(buf);
	if (compare(Deposit.getValue(),pOriginal->Deposit.getValue())!=0)
	{
		pOriginal->Deposit.getString(bufOriginal);
		fprintf(fp,"\t\tDeposit = %s -> %s    [入金金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);
	}
	Withdraw.getString(buf);
	if (compare(Withdraw.getValue(),pOriginal->Withdraw.getValue())!=0)
	{
		pOriginal->Withdraw.getString(bufOriginal);
		fprintf(fp,"\t\tWithdraw = %s -> %s    [出金金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWithdraw = %s    [出金金额]\n",buf);
	}
	Balance.getString(buf);
	if (compare(Balance.getValue(),pOriginal->Balance.getValue())!=0)
	{
		pOriginal->Balance.getString(bufOriginal);
		fprintf(fp,"\t\tBalance = %s -> %s    [期货结算准备金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBalance = %s    [期货结算准备金]\n",buf);
	}
	Available.getString(buf);
	if (compare(Available.getValue(),pOriginal->Available.getValue())!=0)
	{
		pOriginal->Available.getString(bufOriginal);
		fprintf(fp,"\t\tAvailable = %s -> %s    [可提资金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAvailable = %s    [可提资金]\n",buf);
	}
	AccountID.getString(buf);
	if (compare(AccountID.getValue(),pOriginal->AccountID.getValue())!=0)
	{
		pOriginal->AccountID.getString(bufOriginal);
		fprintf(fp,"\t\tAccountID = %s -> %s    [资金帐号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);
	}
	FrozenMargin.getString(buf);
	if (compare(FrozenMargin.getValue(),pOriginal->FrozenMargin.getValue())!=0)
	{
		pOriginal->FrozenMargin.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenMargin = %s -> %s    [冻结的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);
	}
	FrozenPremium.getString(buf);
	if (compare(FrozenPremium.getValue(),pOriginal->FrozenPremium.getValue())!=0)
	{
		pOriginal->FrozenPremium.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenPremium = %s -> %s    [冻结的权利金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableTradingAccount::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	PreBalance.getString(buf);
	fprintf(fp,",PreBalance,%s",buf);	
	CurrMargin.getString(buf);
	fprintf(fp,",CurrMargin,%s",buf);	
	CloseProfit.getString(buf);
	fprintf(fp,",CloseProfit,%s",buf);	
	Premium.getString(buf);
	fprintf(fp,",Premium,%s",buf);	
	Deposit.getString(buf);
	fprintf(fp,",Deposit,%s",buf);	
	Withdraw.getString(buf);
	fprintf(fp,",Withdraw,%s",buf);	
	Balance.getString(buf);
	fprintf(fp,",Balance,%s",buf);	
	Available.getString(buf);
	fprintf(fp,",Available,%s",buf);	
	AccountID.getString(buf);
	fprintf(fp,",AccountID,%s",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,",FrozenMargin,%s",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,",FrozenPremium,%s",buf);	
}

void CWriteableTradingAccount::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	PreBalance.getString(buf);
	sprintf(p,"PreBalance=%s,",buf);
	p+=strlen(p);
	CurrMargin.getString(buf);
	sprintf(p,"CurrMargin=%s,",buf);
	p+=strlen(p);
	CloseProfit.getString(buf);
	sprintf(p,"CloseProfit=%s,",buf);
	p+=strlen(p);
	Premium.getString(buf);
	sprintf(p,"Premium=%s,",buf);
	p+=strlen(p);
	Deposit.getString(buf);
	sprintf(p,"Deposit=%s,",buf);
	p+=strlen(p);
	Withdraw.getString(buf);
	sprintf(p,"Withdraw=%s,",buf);
	p+=strlen(p);
	Balance.getString(buf);
	sprintf(p,"Balance=%s,",buf);
	p+=strlen(p);
	Available.getString(buf);
	sprintf(p,"Available=%s,",buf);
	p+=strlen(p);
	AccountID.getString(buf);
	sprintf(p,"AccountID=%s,",buf);
	p+=strlen(p);
	FrozenMargin.getString(buf);
	sprintf(p,"FrozenMargin=%s,",buf);
	p+=strlen(p);
	FrozenPremium.getString(buf);
	sprintf(p,"FrozenPremium=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableTradingAccount::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CTradingAccount");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	PreBalance.getString(buf);
	pLogger->output(indent+1,0,"PreBalance=%s 上次结算准备金",buf);
	CurrMargin.getString(buf);
	pLogger->output(indent+1,0,"CurrMargin=%s 当前保证金总额",buf);
	CloseProfit.getString(buf);
	pLogger->output(indent+1,0,"CloseProfit=%s 平仓盈亏",buf);
	Premium.getString(buf);
	pLogger->output(indent+1,0,"Premium=%s 期权权利金收支",buf);
	Deposit.getString(buf);
	pLogger->output(indent+1,0,"Deposit=%s 入金金额",buf);
	Withdraw.getString(buf);
	pLogger->output(indent+1,0,"Withdraw=%s 出金金额",buf);
	Balance.getString(buf);
	pLogger->output(indent+1,0,"Balance=%s 期货结算准备金",buf);
	Available.getString(buf);
	pLogger->output(indent+1,0,"Available=%s 可提资金",buf);
	AccountID.getString(buf);
	pLogger->output(indent+1,0,"AccountID=%s 资金帐号",buf);
	FrozenMargin.getString(buf);
	pLogger->output(indent+1,0,"FrozenMargin=%s 冻结的保证金",buf);
	FrozenPremium.getString(buf);
	pLogger->output(indent+1,0,"FrozenPremium=%s 冻结的权利金",buf);
	pLogger->output(indent,0,"}");
}

CTradingAccountIterator::~CTradingAccountIterator(void)
{
}


void CTradingAccountIterator::dump(FILE *output)
{
	CTradingAccount *pTradingAccount;
	
	while ((pTradingAccount=next())!=NULL)
	{
		pTradingAccount->dump(output);
	}
}



void CWriteableBaseReserveAccount::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,ParticipantID,AccountID,Reserve\n");
}
	
void CWriteableBaseReserveAccount::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	ParticipantID.clear();
	AccountID.clear();
	Reserve.clear();
}

int CWriteableBaseReserveAccount::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableBaseReserveAccount),input)!=sizeof(CWriteableBaseReserveAccount))
		return 0;
	else
		return 1;
}
	
int CWriteableBaseReserveAccount::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccountID=token;
		}
		else
		{
			AccountID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Reserve=token;
		}
		else
		{
			Reserve="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"AccountID"))
			{
				AccountID=token;
			}
			else if (!strcmp(fieldName,"Reserve"))
			{
				Reserve=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableBaseReserveAccount::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableBaseReserveAccount),output)!=sizeof(CWriteableBaseReserveAccount))
		return 0;
	else
		return 1;
}

int CWriteableBaseReserveAccount::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccountID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Reserve.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableBaseReserveAccount::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCBaseReserveAccount%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	AccountID.getString(buf);
	fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);	
	Reserve.getString(buf);
	fprintf(fp,"\t\tReserve = %s    [基本准备金]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableBaseReserveAccount::dumpDiff(FILE *fp, const CWriteableBaseReserveAccount *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCBaseReserveAccount = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	AccountID.getString(buf);
	if (compare(AccountID.getValue(),pOriginal->AccountID.getValue())!=0)
	{
		pOriginal->AccountID.getString(bufOriginal);
		fprintf(fp,"\t\tAccountID = %s -> %s    [资金帐号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);
	}
	Reserve.getString(buf);
	if (compare(Reserve.getValue(),pOriginal->Reserve.getValue())!=0)
	{
		pOriginal->Reserve.getString(bufOriginal);
		fprintf(fp,"\t\tReserve = %s -> %s    [基本准备金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tReserve = %s    [基本准备金]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableBaseReserveAccount::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	AccountID.getString(buf);
	fprintf(fp,",AccountID,%s",buf);	
	Reserve.getString(buf);
	fprintf(fp,",Reserve,%s",buf);	
}

void CWriteableBaseReserveAccount::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	AccountID.getString(buf);
	sprintf(p,"AccountID=%s,",buf);
	p+=strlen(p);
	Reserve.getString(buf);
	sprintf(p,"Reserve=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableBaseReserveAccount::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CBaseReserveAccount");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	AccountID.getString(buf);
	pLogger->output(indent+1,0,"AccountID=%s 资金帐号",buf);
	Reserve.getString(buf);
	pLogger->output(indent+1,0,"Reserve=%s 基本准备金",buf);
	pLogger->output(indent,0,"}");
}

CBaseReserveAccountIterator::~CBaseReserveAccountIterator(void)
{
}


void CBaseReserveAccountIterator::dump(FILE *output)
{
	CBaseReserveAccount *pBaseReserveAccount;
	
	while ((pBaseReserveAccount=next())!=NULL)
	{
		pBaseReserveAccount->dump(output);
	}
}



void CWriteablePartPosition::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeFlag,PosiDirection,YdPosition,Position,LongFrozen,ShortFrozen,YdLongFrozen,YdShortFrozen,InstrumentID,ParticipantID,TradingRole\n");
}
	
void CWriteablePartPosition::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeFlag.clear();
	PosiDirection.clear();
	YdPosition.clear();
	Position.clear();
	LongFrozen.clear();
	ShortFrozen.clear();
	YdLongFrozen.clear();
	YdShortFrozen.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
}

int CWriteablePartPosition::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteablePartPosition),input)!=sizeof(CWriteablePartPosition))
		return 0;
	else
		return 1;
}
	
int CWriteablePartPosition::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdPosition=token;
		}
		else
		{
			YdPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Position=token;
		}
		else
		{
			Position="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongFrozen=token;
		}
		else
		{
			LongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortFrozen=token;
		}
		else
		{
			ShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdLongFrozen=token;
		}
		else
		{
			YdLongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdShortFrozen=token;
		}
		else
		{
			YdShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"YdPosition"))
			{
				YdPosition=token;
			}
			else if (!strcmp(fieldName,"Position"))
			{
				Position=token;
			}
			else if (!strcmp(fieldName,"LongFrozen"))
			{
				LongFrozen=token;
			}
			else if (!strcmp(fieldName,"ShortFrozen"))
			{
				ShortFrozen=token;
			}
			else if (!strcmp(fieldName,"YdLongFrozen"))
			{
				YdLongFrozen=token;
			}
			else if (!strcmp(fieldName,"YdShortFrozen"))
			{
				YdShortFrozen=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteablePartPosition::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteablePartPosition),output)!=sizeof(CWriteablePartPosition))
		return 0;
	else
		return 1;
}

int CWriteablePartPosition::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Position.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdLongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteablePartPosition::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCPartPosition%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	YdPosition.getString(buf);
	fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);	
	Position.getString(buf);
	fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteablePartPosition::dumpDiff(FILE *fp, const CWriteablePartPosition *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCPartPosition = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	YdPosition.getString(buf);
	if (compare(YdPosition.getValue(),pOriginal->YdPosition.getValue())!=0)
	{
		pOriginal->YdPosition.getString(bufOriginal);
		fprintf(fp,"\t\tYdPosition = %s -> %s    [上日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);
	}
	Position.getString(buf);
	if (compare(Position.getValue(),pOriginal->Position.getValue())!=0)
	{
		pOriginal->Position.getString(bufOriginal);
		fprintf(fp,"\t\tPosition = %s -> %s    [今日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);
	}
	LongFrozen.getString(buf);
	if (compare(LongFrozen.getValue(),pOriginal->LongFrozen.getValue())!=0)
	{
		pOriginal->LongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tLongFrozen = %s -> %s    [多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);
	}
	ShortFrozen.getString(buf);
	if (compare(ShortFrozen.getValue(),pOriginal->ShortFrozen.getValue())!=0)
	{
		pOriginal->ShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tShortFrozen = %s -> %s    [空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);
	}
	YdLongFrozen.getString(buf);
	if (compare(YdLongFrozen.getValue(),pOriginal->YdLongFrozen.getValue())!=0)
	{
		pOriginal->YdLongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdLongFrozen = %s -> %s    [昨日多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);
	}
	YdShortFrozen.getString(buf);
	if (compare(YdShortFrozen.getValue(),pOriginal->YdShortFrozen.getValue())!=0)
	{
		pOriginal->YdShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdShortFrozen = %s -> %s    [昨日空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteablePartPosition::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	YdPosition.getString(buf);
	fprintf(fp,",YdPosition,%s",buf);	
	Position.getString(buf);
	fprintf(fp,",Position,%s",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,",LongFrozen,%s",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,",ShortFrozen,%s",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,",YdLongFrozen,%s",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,",YdShortFrozen,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
}

void CWriteablePartPosition::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	YdPosition.getString(buf);
	sprintf(p,"YdPosition=%s,",buf);
	p+=strlen(p);
	Position.getString(buf);
	sprintf(p,"Position=%s,",buf);
	p+=strlen(p);
	LongFrozen.getString(buf);
	sprintf(p,"LongFrozen=%s,",buf);
	p+=strlen(p);
	ShortFrozen.getString(buf);
	sprintf(p,"ShortFrozen=%s,",buf);
	p+=strlen(p);
	YdLongFrozen.getString(buf);
	sprintf(p,"YdLongFrozen=%s,",buf);
	p+=strlen(p);
	YdShortFrozen.getString(buf);
	sprintf(p,"YdShortFrozen=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteablePartPosition::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CPartPosition");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	YdPosition.getString(buf);
	pLogger->output(indent+1,0,"YdPosition=%s 上日持仓",buf);
	Position.getString(buf);
	pLogger->output(indent+1,0,"Position=%s 今日持仓",buf);
	LongFrozen.getString(buf);
	pLogger->output(indent+1,0,"LongFrozen=%s 多头冻结",buf);
	ShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"ShortFrozen=%s 空头冻结",buf);
	YdLongFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdLongFrozen=%s 昨日多头冻结",buf);
	YdShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdShortFrozen=%s 昨日空头冻结",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	pLogger->output(indent,0,"}");
}

CPartPositionIterator::~CPartPositionIterator(void)
{
}


void CPartPositionIterator::dump(FILE *output)
{
	CPartPosition *pPartPosition;
	
	while ((pPartPosition=next())!=NULL)
	{
		pPartPosition->dump(output);
	}
}



void CWriteableClientPosition::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeFlag,PosiDirection,YdPosition,Position,LongFrozen,ShortFrozen,YdLongFrozen,YdShortFrozen,BuyTradeVolume,SellTradeVolume,PositionCost,YdPositionCost,UseMargin,FrozenMargin,LongFrozenMargin,ShortFrozenMargin,FrozenPremium,InstrumentID,ParticipantID,ClientID\n");
}
	
void CWriteableClientPosition::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeFlag.clear();
	PosiDirection.clear();
	YdPosition.clear();
	Position.clear();
	LongFrozen.clear();
	ShortFrozen.clear();
	YdLongFrozen.clear();
	YdShortFrozen.clear();
	BuyTradeVolume.clear();
	SellTradeVolume.clear();
	PositionCost.clear();
	YdPositionCost.clear();
	UseMargin.clear();
	FrozenMargin.clear();
	LongFrozenMargin.clear();
	ShortFrozenMargin.clear();
	FrozenPremium.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	ClientID.clear();
	pCreditLimit=NULL;
	pPartRoleAccount=NULL;
}

int CWriteableClientPosition::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClientPosition),input)!=sizeof(CWriteableClientPosition))
		return 0;
	else
		return 1;
}
	
int CWriteableClientPosition::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdPosition=token;
		}
		else
		{
			YdPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Position=token;
		}
		else
		{
			Position="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongFrozen=token;
		}
		else
		{
			LongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortFrozen=token;
		}
		else
		{
			ShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdLongFrozen=token;
		}
		else
		{
			YdLongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdShortFrozen=token;
		}
		else
		{
			YdShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BuyTradeVolume=token;
		}
		else
		{
			BuyTradeVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SellTradeVolume=token;
		}
		else
		{
			SellTradeVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PositionCost=token;
		}
		else
		{
			PositionCost="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdPositionCost=token;
		}
		else
		{
			YdPositionCost="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UseMargin=token;
		}
		else
		{
			UseMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenMargin=token;
		}
		else
		{
			FrozenMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongFrozenMargin=token;
		}
		else
		{
			LongFrozenMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortFrozenMargin=token;
		}
		else
		{
			ShortFrozenMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenPremium=token;
		}
		else
		{
			FrozenPremium="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"YdPosition"))
			{
				YdPosition=token;
			}
			else if (!strcmp(fieldName,"Position"))
			{
				Position=token;
			}
			else if (!strcmp(fieldName,"LongFrozen"))
			{
				LongFrozen=token;
			}
			else if (!strcmp(fieldName,"ShortFrozen"))
			{
				ShortFrozen=token;
			}
			else if (!strcmp(fieldName,"YdLongFrozen"))
			{
				YdLongFrozen=token;
			}
			else if (!strcmp(fieldName,"YdShortFrozen"))
			{
				YdShortFrozen=token;
			}
			else if (!strcmp(fieldName,"BuyTradeVolume"))
			{
				BuyTradeVolume=token;
			}
			else if (!strcmp(fieldName,"SellTradeVolume"))
			{
				SellTradeVolume=token;
			}
			else if (!strcmp(fieldName,"PositionCost"))
			{
				PositionCost=token;
			}
			else if (!strcmp(fieldName,"YdPositionCost"))
			{
				YdPositionCost=token;
			}
			else if (!strcmp(fieldName,"UseMargin"))
			{
				UseMargin=token;
			}
			else if (!strcmp(fieldName,"FrozenMargin"))
			{
				FrozenMargin=token;
			}
			else if (!strcmp(fieldName,"LongFrozenMargin"))
			{
				LongFrozenMargin=token;
			}
			else if (!strcmp(fieldName,"ShortFrozenMargin"))
			{
				ShortFrozenMargin=token;
			}
			else if (!strcmp(fieldName,"FrozenPremium"))
			{
				FrozenPremium=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClientPosition::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClientPosition),output)!=sizeof(CWriteableClientPosition))
		return 0;
	else
		return 1;
}

int CWriteableClientPosition::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Position.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdLongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BuyTradeVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SellTradeVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PositionCost.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdPositionCost.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UseMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongFrozenMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortFrozenMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenPremium.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClientPosition::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClientPosition%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	YdPosition.getString(buf);
	fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);	
	Position.getString(buf);
	fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);	
	BuyTradeVolume.getString(buf);
	fprintf(fp,"\t\tBuyTradeVolume = %s    [当日买成交量]\n",buf);	
	SellTradeVolume.getString(buf);
	fprintf(fp,"\t\tSellTradeVolume = %s    [当日卖成交量]\n",buf);	
	PositionCost.getString(buf);
	fprintf(fp,"\t\tPositionCost = %s    [持仓成本]\n",buf);	
	YdPositionCost.getString(buf);
	fprintf(fp,"\t\tYdPositionCost = %s    [昨日持仓成本]\n",buf);	
	UseMargin.getString(buf);
	fprintf(fp,"\t\tUseMargin = %s    [占用的保证金]\n",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);	
	LongFrozenMargin.getString(buf);
	fprintf(fp,"\t\tLongFrozenMargin = %s    [多头冻结的保证金]\n",buf);	
	ShortFrozenMargin.getString(buf);
	fprintf(fp,"\t\tShortFrozenMargin = %s    [空头冻结的保证金]\n",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClientPosition::dumpDiff(FILE *fp, const CWriteableClientPosition *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClientPosition = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	YdPosition.getString(buf);
	if (compare(YdPosition.getValue(),pOriginal->YdPosition.getValue())!=0)
	{
		pOriginal->YdPosition.getString(bufOriginal);
		fprintf(fp,"\t\tYdPosition = %s -> %s    [上日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);
	}
	Position.getString(buf);
	if (compare(Position.getValue(),pOriginal->Position.getValue())!=0)
	{
		pOriginal->Position.getString(bufOriginal);
		fprintf(fp,"\t\tPosition = %s -> %s    [今日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);
	}
	LongFrozen.getString(buf);
	if (compare(LongFrozen.getValue(),pOriginal->LongFrozen.getValue())!=0)
	{
		pOriginal->LongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tLongFrozen = %s -> %s    [多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);
	}
	ShortFrozen.getString(buf);
	if (compare(ShortFrozen.getValue(),pOriginal->ShortFrozen.getValue())!=0)
	{
		pOriginal->ShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tShortFrozen = %s -> %s    [空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);
	}
	YdLongFrozen.getString(buf);
	if (compare(YdLongFrozen.getValue(),pOriginal->YdLongFrozen.getValue())!=0)
	{
		pOriginal->YdLongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdLongFrozen = %s -> %s    [昨日多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);
	}
	YdShortFrozen.getString(buf);
	if (compare(YdShortFrozen.getValue(),pOriginal->YdShortFrozen.getValue())!=0)
	{
		pOriginal->YdShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdShortFrozen = %s -> %s    [昨日空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);
	}
	BuyTradeVolume.getString(buf);
	if (compare(BuyTradeVolume.getValue(),pOriginal->BuyTradeVolume.getValue())!=0)
	{
		pOriginal->BuyTradeVolume.getString(bufOriginal);
		fprintf(fp,"\t\tBuyTradeVolume = %s -> %s    [当日买成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBuyTradeVolume = %s    [当日买成交量]\n",buf);
	}
	SellTradeVolume.getString(buf);
	if (compare(SellTradeVolume.getValue(),pOriginal->SellTradeVolume.getValue())!=0)
	{
		pOriginal->SellTradeVolume.getString(bufOriginal);
		fprintf(fp,"\t\tSellTradeVolume = %s -> %s    [当日卖成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSellTradeVolume = %s    [当日卖成交量]\n",buf);
	}
	PositionCost.getString(buf);
	if (compare(PositionCost.getValue(),pOriginal->PositionCost.getValue())!=0)
	{
		pOriginal->PositionCost.getString(bufOriginal);
		fprintf(fp,"\t\tPositionCost = %s -> %s    [持仓成本]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPositionCost = %s    [持仓成本]\n",buf);
	}
	YdPositionCost.getString(buf);
	if (compare(YdPositionCost.getValue(),pOriginal->YdPositionCost.getValue())!=0)
	{
		pOriginal->YdPositionCost.getString(bufOriginal);
		fprintf(fp,"\t\tYdPositionCost = %s -> %s    [昨日持仓成本]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdPositionCost = %s    [昨日持仓成本]\n",buf);
	}
	UseMargin.getString(buf);
	if (compare(UseMargin.getValue(),pOriginal->UseMargin.getValue())!=0)
	{
		pOriginal->UseMargin.getString(bufOriginal);
		fprintf(fp,"\t\tUseMargin = %s -> %s    [占用的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUseMargin = %s    [占用的保证金]\n",buf);
	}
	FrozenMargin.getString(buf);
	if (compare(FrozenMargin.getValue(),pOriginal->FrozenMargin.getValue())!=0)
	{
		pOriginal->FrozenMargin.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenMargin = %s -> %s    [冻结的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);
	}
	LongFrozenMargin.getString(buf);
	if (compare(LongFrozenMargin.getValue(),pOriginal->LongFrozenMargin.getValue())!=0)
	{
		pOriginal->LongFrozenMargin.getString(bufOriginal);
		fprintf(fp,"\t\tLongFrozenMargin = %s -> %s    [多头冻结的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongFrozenMargin = %s    [多头冻结的保证金]\n",buf);
	}
	ShortFrozenMargin.getString(buf);
	if (compare(ShortFrozenMargin.getValue(),pOriginal->ShortFrozenMargin.getValue())!=0)
	{
		pOriginal->ShortFrozenMargin.getString(bufOriginal);
		fprintf(fp,"\t\tShortFrozenMargin = %s -> %s    [空头冻结的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortFrozenMargin = %s    [空头冻结的保证金]\n",buf);
	}
	FrozenPremium.getString(buf);
	if (compare(FrozenPremium.getValue(),pOriginal->FrozenPremium.getValue())!=0)
	{
		pOriginal->FrozenPremium.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenPremium = %s -> %s    [冻结的权利金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClientPosition::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	YdPosition.getString(buf);
	fprintf(fp,",YdPosition,%s",buf);	
	Position.getString(buf);
	fprintf(fp,",Position,%s",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,",LongFrozen,%s",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,",ShortFrozen,%s",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,",YdLongFrozen,%s",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,",YdShortFrozen,%s",buf);	
	BuyTradeVolume.getString(buf);
	fprintf(fp,",BuyTradeVolume,%s",buf);	
	SellTradeVolume.getString(buf);
	fprintf(fp,",SellTradeVolume,%s",buf);	
	PositionCost.getString(buf);
	fprintf(fp,",PositionCost,%s",buf);	
	YdPositionCost.getString(buf);
	fprintf(fp,",YdPositionCost,%s",buf);	
	UseMargin.getString(buf);
	fprintf(fp,",UseMargin,%s",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,",FrozenMargin,%s",buf);	
	LongFrozenMargin.getString(buf);
	fprintf(fp,",LongFrozenMargin,%s",buf);	
	ShortFrozenMargin.getString(buf);
	fprintf(fp,",ShortFrozenMargin,%s",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,",FrozenPremium,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableClientPosition::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	YdPosition.getString(buf);
	sprintf(p,"YdPosition=%s,",buf);
	p+=strlen(p);
	Position.getString(buf);
	sprintf(p,"Position=%s,",buf);
	p+=strlen(p);
	LongFrozen.getString(buf);
	sprintf(p,"LongFrozen=%s,",buf);
	p+=strlen(p);
	ShortFrozen.getString(buf);
	sprintf(p,"ShortFrozen=%s,",buf);
	p+=strlen(p);
	YdLongFrozen.getString(buf);
	sprintf(p,"YdLongFrozen=%s,",buf);
	p+=strlen(p);
	YdShortFrozen.getString(buf);
	sprintf(p,"YdShortFrozen=%s,",buf);
	p+=strlen(p);
	BuyTradeVolume.getString(buf);
	sprintf(p,"BuyTradeVolume=%s,",buf);
	p+=strlen(p);
	SellTradeVolume.getString(buf);
	sprintf(p,"SellTradeVolume=%s,",buf);
	p+=strlen(p);
	PositionCost.getString(buf);
	sprintf(p,"PositionCost=%s,",buf);
	p+=strlen(p);
	YdPositionCost.getString(buf);
	sprintf(p,"YdPositionCost=%s,",buf);
	p+=strlen(p);
	UseMargin.getString(buf);
	sprintf(p,"UseMargin=%s,",buf);
	p+=strlen(p);
	FrozenMargin.getString(buf);
	sprintf(p,"FrozenMargin=%s,",buf);
	p+=strlen(p);
	LongFrozenMargin.getString(buf);
	sprintf(p,"LongFrozenMargin=%s,",buf);
	p+=strlen(p);
	ShortFrozenMargin.getString(buf);
	sprintf(p,"ShortFrozenMargin=%s,",buf);
	p+=strlen(p);
	FrozenPremium.getString(buf);
	sprintf(p,"FrozenPremium=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClientPosition::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClientPosition");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	YdPosition.getString(buf);
	pLogger->output(indent+1,0,"YdPosition=%s 上日持仓",buf);
	Position.getString(buf);
	pLogger->output(indent+1,0,"Position=%s 今日持仓",buf);
	LongFrozen.getString(buf);
	pLogger->output(indent+1,0,"LongFrozen=%s 多头冻结",buf);
	ShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"ShortFrozen=%s 空头冻结",buf);
	YdLongFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdLongFrozen=%s 昨日多头冻结",buf);
	YdShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdShortFrozen=%s 昨日空头冻结",buf);
	BuyTradeVolume.getString(buf);
	pLogger->output(indent+1,0,"BuyTradeVolume=%s 当日买成交量",buf);
	SellTradeVolume.getString(buf);
	pLogger->output(indent+1,0,"SellTradeVolume=%s 当日卖成交量",buf);
	PositionCost.getString(buf);
	pLogger->output(indent+1,0,"PositionCost=%s 持仓成本",buf);
	YdPositionCost.getString(buf);
	pLogger->output(indent+1,0,"YdPositionCost=%s 昨日持仓成本",buf);
	UseMargin.getString(buf);
	pLogger->output(indent+1,0,"UseMargin=%s 占用的保证金",buf);
	FrozenMargin.getString(buf);
	pLogger->output(indent+1,0,"FrozenMargin=%s 冻结的保证金",buf);
	LongFrozenMargin.getString(buf);
	pLogger->output(indent+1,0,"LongFrozenMargin=%s 多头冻结的保证金",buf);
	ShortFrozenMargin.getString(buf);
	pLogger->output(indent+1,0,"ShortFrozenMargin=%s 空头冻结的保证金",buf);
	FrozenPremium.getString(buf);
	pLogger->output(indent+1,0,"FrozenPremium=%s 冻结的权利金",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}

CClientPositionIterator::~CClientPositionIterator(void)
{
}


void CClientPositionIterator::dump(FILE *output)
{
	CClientPosition *pClientPosition;
	
	while ((pClientPosition=next())!=NULL)
	{
		pClientPosition->dump(output);
	}
}



void CWriteableHedgeVolume::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,ParticipantID,ClientID,InstrumentID,LongVolumeOriginal,ShortVolumeOriginal,LongVolume,ShortVolume,LongLimit,ShortLimit\n");
}
	
void CWriteableHedgeVolume::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	ParticipantID.clear();
	ClientID.clear();
	InstrumentID.clear();
	LongVolumeOriginal.clear();
	ShortVolumeOriginal.clear();
	LongVolume.clear();
	ShortVolume.clear();
	LongLimit.clear();
	ShortLimit.clear();
}

int CWriteableHedgeVolume::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableHedgeVolume),input)!=sizeof(CWriteableHedgeVolume))
		return 0;
	else
		return 1;
}
	
int CWriteableHedgeVolume::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongVolumeOriginal=token;
		}
		else
		{
			LongVolumeOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortVolumeOriginal=token;
		}
		else
		{
			ShortVolumeOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongVolume=token;
		}
		else
		{
			LongVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortVolume=token;
		}
		else
		{
			ShortVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongLimit=token;
		}
		else
		{
			LongLimit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortLimit=token;
		}
		else
		{
			ShortLimit="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"LongVolumeOriginal"))
			{
				LongVolumeOriginal=token;
			}
			else if (!strcmp(fieldName,"ShortVolumeOriginal"))
			{
				ShortVolumeOriginal=token;
			}
			else if (!strcmp(fieldName,"LongVolume"))
			{
				LongVolume=token;
			}
			else if (!strcmp(fieldName,"ShortVolume"))
			{
				ShortVolume=token;
			}
			else if (!strcmp(fieldName,"LongLimit"))
			{
				LongLimit=token;
			}
			else if (!strcmp(fieldName,"ShortLimit"))
			{
				ShortLimit=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableHedgeVolume::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableHedgeVolume),output)!=sizeof(CWriteableHedgeVolume))
		return 0;
	else
		return 1;
}

int CWriteableHedgeVolume::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongVolumeOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortVolumeOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortLimit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableHedgeVolume::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCHedgeVolume%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	LongVolumeOriginal.getString(buf);
	fprintf(fp,"\t\tLongVolumeOriginal = %s    [多头保值额度最初申请量]\n",buf);	
	ShortVolumeOriginal.getString(buf);
	fprintf(fp,"\t\tShortVolumeOriginal = %s    [空头保值额度最初申请量]\n",buf);	
	LongVolume.getString(buf);
	fprintf(fp,"\t\tLongVolume = %s    [多头保值额度]\n",buf);	
	ShortVolume.getString(buf);
	fprintf(fp,"\t\tShortVolume = %s    [空头保值额度]\n",buf);	
	LongLimit.getString(buf);
	fprintf(fp,"\t\tLongLimit = %s    [多头限额]\n",buf);	
	ShortLimit.getString(buf);
	fprintf(fp,"\t\tShortLimit = %s    [空头限额]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableHedgeVolume::dumpDiff(FILE *fp, const CWriteableHedgeVolume *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCHedgeVolume = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	LongVolumeOriginal.getString(buf);
	if (compare(LongVolumeOriginal.getValue(),pOriginal->LongVolumeOriginal.getValue())!=0)
	{
		pOriginal->LongVolumeOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tLongVolumeOriginal = %s -> %s    [多头保值额度最初申请量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongVolumeOriginal = %s    [多头保值额度最初申请量]\n",buf);
	}
	ShortVolumeOriginal.getString(buf);
	if (compare(ShortVolumeOriginal.getValue(),pOriginal->ShortVolumeOriginal.getValue())!=0)
	{
		pOriginal->ShortVolumeOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tShortVolumeOriginal = %s -> %s    [空头保值额度最初申请量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortVolumeOriginal = %s    [空头保值额度最初申请量]\n",buf);
	}
	LongVolume.getString(buf);
	if (compare(LongVolume.getValue(),pOriginal->LongVolume.getValue())!=0)
	{
		pOriginal->LongVolume.getString(bufOriginal);
		fprintf(fp,"\t\tLongVolume = %s -> %s    [多头保值额度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongVolume = %s    [多头保值额度]\n",buf);
	}
	ShortVolume.getString(buf);
	if (compare(ShortVolume.getValue(),pOriginal->ShortVolume.getValue())!=0)
	{
		pOriginal->ShortVolume.getString(bufOriginal);
		fprintf(fp,"\t\tShortVolume = %s -> %s    [空头保值额度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortVolume = %s    [空头保值额度]\n",buf);
	}
	LongLimit.getString(buf);
	if (compare(LongLimit.getValue(),pOriginal->LongLimit.getValue())!=0)
	{
		pOriginal->LongLimit.getString(bufOriginal);
		fprintf(fp,"\t\tLongLimit = %s -> %s    [多头限额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongLimit = %s    [多头限额]\n",buf);
	}
	ShortLimit.getString(buf);
	if (compare(ShortLimit.getValue(),pOriginal->ShortLimit.getValue())!=0)
	{
		pOriginal->ShortLimit.getString(bufOriginal);
		fprintf(fp,"\t\tShortLimit = %s -> %s    [空头限额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortLimit = %s    [空头限额]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableHedgeVolume::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	LongVolumeOriginal.getString(buf);
	fprintf(fp,",LongVolumeOriginal,%s",buf);	
	ShortVolumeOriginal.getString(buf);
	fprintf(fp,",ShortVolumeOriginal,%s",buf);	
	LongVolume.getString(buf);
	fprintf(fp,",LongVolume,%s",buf);	
	ShortVolume.getString(buf);
	fprintf(fp,",ShortVolume,%s",buf);	
	LongLimit.getString(buf);
	fprintf(fp,",LongLimit,%s",buf);	
	ShortLimit.getString(buf);
	fprintf(fp,",ShortLimit,%s",buf);	
}

void CWriteableHedgeVolume::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	LongVolumeOriginal.getString(buf);
	sprintf(p,"LongVolumeOriginal=%s,",buf);
	p+=strlen(p);
	ShortVolumeOriginal.getString(buf);
	sprintf(p,"ShortVolumeOriginal=%s,",buf);
	p+=strlen(p);
	LongVolume.getString(buf);
	sprintf(p,"LongVolume=%s,",buf);
	p+=strlen(p);
	ShortVolume.getString(buf);
	sprintf(p,"ShortVolume=%s,",buf);
	p+=strlen(p);
	LongLimit.getString(buf);
	sprintf(p,"LongLimit=%s,",buf);
	p+=strlen(p);
	ShortLimit.getString(buf);
	sprintf(p,"ShortLimit=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableHedgeVolume::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CHedgeVolume");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	LongVolumeOriginal.getString(buf);
	pLogger->output(indent+1,0,"LongVolumeOriginal=%s 多头保值额度最初申请量",buf);
	ShortVolumeOriginal.getString(buf);
	pLogger->output(indent+1,0,"ShortVolumeOriginal=%s 空头保值额度最初申请量",buf);
	LongVolume.getString(buf);
	pLogger->output(indent+1,0,"LongVolume=%s 多头保值额度",buf);
	ShortVolume.getString(buf);
	pLogger->output(indent+1,0,"ShortVolume=%s 空头保值额度",buf);
	LongLimit.getString(buf);
	pLogger->output(indent+1,0,"LongLimit=%s 多头限额",buf);
	ShortLimit.getString(buf);
	pLogger->output(indent+1,0,"ShortLimit=%s 空头限额",buf);
	pLogger->output(indent,0,"}");
}

CHedgeVolumeIterator::~CHedgeVolumeIterator(void)
{
}


void CHedgeVolumeIterator::dump(FILE *output)
{
	CHedgeVolume *pHedgeVolume;
	
	while ((pHedgeVolume=next())!=NULL)
	{
		pHedgeVolume->dump(output);
	}
}



void CWriteableRemainOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"Tradable,TradingDay,SettlementGroupID,SettlementID,OrderSysID,ParticipantID,ClientID,UserID,InstrumentID,OrderPriceType,Direction,CombOffsetFlag,CombHedgeFlag,LimitPrice,VolumeTotalOriginal,TimeCondition,GTDDate,VolumeCondition,MinVolume,ContingentCondition,StopPrice,ForceCloseReason,OrderLocalID,IsAutoSuspend,OrderSource,OrderStatus,OrderType,VolumeTraded,VolumeTotal,InsertDate,InsertTime,ActiveTime,SuspendTime,UpdateTime,CancelTime,ActiveUserID,Priority,TimeSortID,ClearingPartID,BusinessUnit\n");
}
	
void CWriteableRemainOrder::init(void)
{
	Tradable.clear();
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	OrderSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	InstrumentID.clear();
	OrderPriceType.clear();
	Direction.clear();
	CombOffsetFlag.clear();
	CombHedgeFlag.clear();
	LimitPrice.clear();
	VolumeTotalOriginal.clear();
	TimeCondition.clear();
	GTDDate.clear();
	VolumeCondition.clear();
	MinVolume.clear();
	ContingentCondition.clear();
	StopPrice.clear();
	ForceCloseReason.clear();
	OrderLocalID.clear();
	IsAutoSuspend.clear();
	OrderSource.clear();
	OrderStatus.clear();
	OrderType.clear();
	VolumeTraded.clear();
	VolumeTotal.clear();
	InsertDate.clear();
	InsertTime.clear();
	ActiveTime.clear();
	SuspendTime.clear();
	UpdateTime.clear();
	CancelTime.clear();
	ActiveUserID.clear();
	Priority.clear();
	TimeSortID.clear();
	ClearingPartID.clear();
	BusinessUnit.clear();
}

int CWriteableRemainOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableRemainOrder),input)!=sizeof(CWriteableRemainOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableRemainOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			Tradable=token;
		}
		else
		{
			Tradable="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderPriceType=token;
		}
		else
		{
			OrderPriceType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOffsetFlag=token;
		}
		else
		{
			CombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombHedgeFlag=token;
		}
		else
		{
			CombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotalOriginal=token;
		}
		else
		{
			VolumeTotalOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeCondition=token;
		}
		else
		{
			TimeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GTDDate=token;
		}
		else
		{
			GTDDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeCondition=token;
		}
		else
		{
			VolumeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinVolume=token;
		}
		else
		{
			MinVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ContingentCondition=token;
		}
		else
		{
			ContingentCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StopPrice=token;
		}
		else
		{
			StopPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ForceCloseReason=token;
		}
		else
		{
			ForceCloseReason="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsAutoSuspend=token;
		}
		else
		{
			IsAutoSuspend="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSource=token;
		}
		else
		{
			OrderSource="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderStatus=token;
		}
		else
		{
			OrderStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderType=token;
		}
		else
		{
			OrderType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTraded=token;
		}
		else
		{
			VolumeTraded="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotal=token;
		}
		else
		{
			VolumeTotal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertDate=token;
		}
		else
		{
			InsertDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActiveTime=token;
		}
		else
		{
			ActiveTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SuspendTime=token;
		}
		else
		{
			SuspendTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancelTime=token;
		}
		else
		{
			CancelTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActiveUserID=token;
		}
		else
		{
			ActiveUserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Priority=token;
		}
		else
		{
			Priority="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeSortID=token;
		}
		else
		{
			TimeSortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"Tradable"))
			{
				Tradable=token;
			}
			else if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"OrderPriceType"))
			{
				OrderPriceType=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"CombOffsetFlag"))
			{
				CombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"CombHedgeFlag"))
			{
				CombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeTotalOriginal"))
			{
				VolumeTotalOriginal=token;
			}
			else if (!strcmp(fieldName,"TimeCondition"))
			{
				TimeCondition=token;
			}
			else if (!strcmp(fieldName,"GTDDate"))
			{
				GTDDate=token;
			}
			else if (!strcmp(fieldName,"VolumeCondition"))
			{
				VolumeCondition=token;
			}
			else if (!strcmp(fieldName,"MinVolume"))
			{
				MinVolume=token;
			}
			else if (!strcmp(fieldName,"ContingentCondition"))
			{
				ContingentCondition=token;
			}
			else if (!strcmp(fieldName,"StopPrice"))
			{
				StopPrice=token;
			}
			else if (!strcmp(fieldName,"ForceCloseReason"))
			{
				ForceCloseReason=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"IsAutoSuspend"))
			{
				IsAutoSuspend=token;
			}
			else if (!strcmp(fieldName,"OrderSource"))
			{
				OrderSource=token;
			}
			else if (!strcmp(fieldName,"OrderStatus"))
			{
				OrderStatus=token;
			}
			else if (!strcmp(fieldName,"OrderType"))
			{
				OrderType=token;
			}
			else if (!strcmp(fieldName,"VolumeTraded"))
			{
				VolumeTraded=token;
			}
			else if (!strcmp(fieldName,"VolumeTotal"))
			{
				VolumeTotal=token;
			}
			else if (!strcmp(fieldName,"InsertDate"))
			{
				InsertDate=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"ActiveTime"))
			{
				ActiveTime=token;
			}
			else if (!strcmp(fieldName,"SuspendTime"))
			{
				SuspendTime=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"CancelTime"))
			{
				CancelTime=token;
			}
			else if (!strcmp(fieldName,"ActiveUserID"))
			{
				ActiveUserID=token;
			}
			else if (!strcmp(fieldName,"Priority"))
			{
				Priority=token;
			}
			else if (!strcmp(fieldName,"TimeSortID"))
			{
				TimeSortID=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableRemainOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableRemainOrder),output)!=sizeof(CWriteableRemainOrder))
		return 0;
	else
		return 1;
}

int CWriteableRemainOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	Tradable.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderPriceType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotalOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GTDDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ContingentCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StopPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ForceCloseReason.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsAutoSuspend.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTraded.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActiveTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SuspendTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancelTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActiveUserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Priority.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeSortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableRemainOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCRemainOrder%s = {\n", index_buf);
	Tradable.getString(buf);
	fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);	
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	OrderPriceType.getString(buf);
	fprintf(fp,"\t\tOrderPriceType = %s    [报单价格条件]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);	
	GTDDate.getString(buf);
	fprintf(fp,"\t\tGTDDate = %s    [GTD日期]\n",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);	
	MinVolume.getString(buf);
	fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);	
	ContingentCondition.getString(buf);
	fprintf(fp,"\t\tContingentCondition = %s    [触发条件]\n",buf);	
	StopPrice.getString(buf);
	fprintf(fp,"\t\tStopPrice = %s    [止损价]\n",buf);	
	ForceCloseReason.getString(buf);
	fprintf(fp,"\t\tForceCloseReason = %s    [强平原因]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	IsAutoSuspend.getString(buf);
	fprintf(fp,"\t\tIsAutoSuspend = %s    [自动挂起标志]\n",buf);	
	OrderSource.getString(buf);
	fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);	
	OrderType.getString(buf);
	fprintf(fp,"\t\tOrderType = %s    [报单类型]\n",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);	
	InsertDate.getString(buf);
	fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	ActiveTime.getString(buf);
	fprintf(fp,"\t\tActiveTime = %s    [激活时间]\n",buf);	
	SuspendTime.getString(buf);
	fprintf(fp,"\t\tSuspendTime = %s    [挂起时间]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	CancelTime.getString(buf);
	fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);	
	ActiveUserID.getString(buf);
	fprintf(fp,"\t\tActiveUserID = %s    [最后修改交易用户代码]\n",buf);	
	Priority.getString(buf);
	fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);	
	TimeSortID.getString(buf);
	fprintf(fp,"\t\tTimeSortID = %s    [按时间排队的序号]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableRemainOrder::dumpDiff(FILE *fp, const CWriteableRemainOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCRemainOrder = {\n");
	Tradable.getString(buf);
	if (compare(Tradable.getValue(),pOriginal->Tradable.getValue())!=0)
	{
		pOriginal->Tradable.getString(bufOriginal);
		fprintf(fp,"\t\tTradable = %s -> %s    [是否可以参加交易]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);
	}
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	OrderPriceType.getString(buf);
	if (compare(OrderPriceType.getValue(),pOriginal->OrderPriceType.getValue())!=0)
	{
		pOriginal->OrderPriceType.getString(bufOriginal);
		fprintf(fp,"\t\tOrderPriceType = %s -> %s    [报单价格条件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderPriceType = %s    [报单价格条件]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	CombOffsetFlag.getString(buf);
	if (compare(CombOffsetFlag.getValue(),pOriginal->CombOffsetFlag.getValue())!=0)
	{
		pOriginal->CombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombOffsetFlag = %s -> %s    [组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);
	}
	CombHedgeFlag.getString(buf);
	if (compare(CombHedgeFlag.getValue(),pOriginal->CombHedgeFlag.getValue())!=0)
	{
		pOriginal->CombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombHedgeFlag = %s -> %s    [组合投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeTotalOriginal.getString(buf);
	if (compare(VolumeTotalOriginal.getValue(),pOriginal->VolumeTotalOriginal.getValue())!=0)
	{
		pOriginal->VolumeTotalOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotalOriginal = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);
	}
	TimeCondition.getString(buf);
	if (compare(TimeCondition.getValue(),pOriginal->TimeCondition.getValue())!=0)
	{
		pOriginal->TimeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tTimeCondition = %s -> %s    [有效期类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);
	}
	GTDDate.getString(buf);
	if (compare(GTDDate.getValue(),pOriginal->GTDDate.getValue())!=0)
	{
		pOriginal->GTDDate.getString(bufOriginal);
		fprintf(fp,"\t\tGTDDate = %s -> %s    [GTD日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGTDDate = %s    [GTD日期]\n",buf);
	}
	VolumeCondition.getString(buf);
	if (compare(VolumeCondition.getValue(),pOriginal->VolumeCondition.getValue())!=0)
	{
		pOriginal->VolumeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeCondition = %s -> %s    [成交量类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);
	}
	MinVolume.getString(buf);
	if (compare(MinVolume.getValue(),pOriginal->MinVolume.getValue())!=0)
	{
		pOriginal->MinVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinVolume = %s -> %s    [最小成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);
	}
	ContingentCondition.getString(buf);
	if (compare(ContingentCondition.getValue(),pOriginal->ContingentCondition.getValue())!=0)
	{
		pOriginal->ContingentCondition.getString(bufOriginal);
		fprintf(fp,"\t\tContingentCondition = %s -> %s    [触发条件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContingentCondition = %s    [触发条件]\n",buf);
	}
	StopPrice.getString(buf);
	if (compare(StopPrice.getValue(),pOriginal->StopPrice.getValue())!=0)
	{
		pOriginal->StopPrice.getString(bufOriginal);
		fprintf(fp,"\t\tStopPrice = %s -> %s    [止损价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStopPrice = %s    [止损价]\n",buf);
	}
	ForceCloseReason.getString(buf);
	if (compare(ForceCloseReason.getValue(),pOriginal->ForceCloseReason.getValue())!=0)
	{
		pOriginal->ForceCloseReason.getString(bufOriginal);
		fprintf(fp,"\t\tForceCloseReason = %s -> %s    [强平原因]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tForceCloseReason = %s    [强平原因]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	IsAutoSuspend.getString(buf);
	if (compare(IsAutoSuspend.getValue(),pOriginal->IsAutoSuspend.getValue())!=0)
	{
		pOriginal->IsAutoSuspend.getString(bufOriginal);
		fprintf(fp,"\t\tIsAutoSuspend = %s -> %s    [自动挂起标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsAutoSuspend = %s    [自动挂起标志]\n",buf);
	}
	OrderSource.getString(buf);
	if (compare(OrderSource.getValue(),pOriginal->OrderSource.getValue())!=0)
	{
		pOriginal->OrderSource.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSource = %s -> %s    [报单来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);
	}
	OrderStatus.getString(buf);
	if (compare(OrderStatus.getValue(),pOriginal->OrderStatus.getValue())!=0)
	{
		pOriginal->OrderStatus.getString(bufOriginal);
		fprintf(fp,"\t\tOrderStatus = %s -> %s    [报单状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);
	}
	OrderType.getString(buf);
	if (compare(OrderType.getValue(),pOriginal->OrderType.getValue())!=0)
	{
		pOriginal->OrderType.getString(bufOriginal);
		fprintf(fp,"\t\tOrderType = %s -> %s    [报单类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderType = %s    [报单类型]\n",buf);
	}
	VolumeTraded.getString(buf);
	if (compare(VolumeTraded.getValue(),pOriginal->VolumeTraded.getValue())!=0)
	{
		pOriginal->VolumeTraded.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTraded = %s -> %s    [今成交数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);
	}
	VolumeTotal.getString(buf);
	if (compare(VolumeTotal.getValue(),pOriginal->VolumeTotal.getValue())!=0)
	{
		pOriginal->VolumeTotal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotal = %s -> %s    [剩余数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);
	}
	InsertDate.getString(buf);
	if (compare(InsertDate.getValue(),pOriginal->InsertDate.getValue())!=0)
	{
		pOriginal->InsertDate.getString(bufOriginal);
		fprintf(fp,"\t\tInsertDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	ActiveTime.getString(buf);
	if (compare(ActiveTime.getValue(),pOriginal->ActiveTime.getValue())!=0)
	{
		pOriginal->ActiveTime.getString(bufOriginal);
		fprintf(fp,"\t\tActiveTime = %s -> %s    [激活时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActiveTime = %s    [激活时间]\n",buf);
	}
	SuspendTime.getString(buf);
	if (compare(SuspendTime.getValue(),pOriginal->SuspendTime.getValue())!=0)
	{
		pOriginal->SuspendTime.getString(bufOriginal);
		fprintf(fp,"\t\tSuspendTime = %s -> %s    [挂起时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSuspendTime = %s    [挂起时间]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	CancelTime.getString(buf);
	if (compare(CancelTime.getValue(),pOriginal->CancelTime.getValue())!=0)
	{
		pOriginal->CancelTime.getString(bufOriginal);
		fprintf(fp,"\t\tCancelTime = %s -> %s    [撤销时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);
	}
	ActiveUserID.getString(buf);
	if (compare(ActiveUserID.getValue(),pOriginal->ActiveUserID.getValue())!=0)
	{
		pOriginal->ActiveUserID.getString(bufOriginal);
		fprintf(fp,"\t\tActiveUserID = %s -> %s    [最后修改交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActiveUserID = %s    [最后修改交易用户代码]\n",buf);
	}
	Priority.getString(buf);
	if (compare(Priority.getValue(),pOriginal->Priority.getValue())!=0)
	{
		pOriginal->Priority.getString(bufOriginal);
		fprintf(fp,"\t\tPriority = %s -> %s    [优先权]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);
	}
	TimeSortID.getString(buf);
	if (compare(TimeSortID.getValue(),pOriginal->TimeSortID.getValue())!=0)
	{
		pOriginal->TimeSortID.getString(bufOriginal);
		fprintf(fp,"\t\tTimeSortID = %s -> %s    [按时间排队的序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeSortID = %s    [按时间排队的序号]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableRemainOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	Tradable.getString(buf);
	fprintf(fp,",Tradable,%s",buf);	
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	OrderPriceType.getString(buf);
	fprintf(fp,",OrderPriceType,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,",CombOffsetFlag,%s",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,",CombHedgeFlag,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,",VolumeTotalOriginal,%s",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,",TimeCondition,%s",buf);	
	GTDDate.getString(buf);
	fprintf(fp,",GTDDate,%s",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,",VolumeCondition,%s",buf);	
	MinVolume.getString(buf);
	fprintf(fp,",MinVolume,%s",buf);	
	ContingentCondition.getString(buf);
	fprintf(fp,",ContingentCondition,%s",buf);	
	StopPrice.getString(buf);
	fprintf(fp,",StopPrice,%s",buf);	
	ForceCloseReason.getString(buf);
	fprintf(fp,",ForceCloseReason,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	IsAutoSuspend.getString(buf);
	fprintf(fp,",IsAutoSuspend,%s",buf);	
	OrderSource.getString(buf);
	fprintf(fp,",OrderSource,%s",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,",OrderStatus,%s",buf);	
	OrderType.getString(buf);
	fprintf(fp,",OrderType,%s",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,",VolumeTraded,%s",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,",VolumeTotal,%s",buf);	
	InsertDate.getString(buf);
	fprintf(fp,",InsertDate,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	ActiveTime.getString(buf);
	fprintf(fp,",ActiveTime,%s",buf);	
	SuspendTime.getString(buf);
	fprintf(fp,",SuspendTime,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	CancelTime.getString(buf);
	fprintf(fp,",CancelTime,%s",buf);	
	ActiveUserID.getString(buf);
	fprintf(fp,",ActiveUserID,%s",buf);	
	Priority.getString(buf);
	fprintf(fp,",Priority,%s",buf);	
	TimeSortID.getString(buf);
	fprintf(fp,",TimeSortID,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
}

void CWriteableRemainOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	Tradable.getString(buf);
	sprintf(p,"Tradable=%s,",buf);
	p+=strlen(p);
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	OrderPriceType.getString(buf);
	sprintf(p,"OrderPriceType=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	CombOffsetFlag.getString(buf);
	sprintf(p,"CombOffsetFlag=%s,",buf);
	p+=strlen(p);
	CombHedgeFlag.getString(buf);
	sprintf(p,"CombHedgeFlag=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeTotalOriginal.getString(buf);
	sprintf(p,"VolumeTotalOriginal=%s,",buf);
	p+=strlen(p);
	TimeCondition.getString(buf);
	sprintf(p,"TimeCondition=%s,",buf);
	p+=strlen(p);
	GTDDate.getString(buf);
	sprintf(p,"GTDDate=%s,",buf);
	p+=strlen(p);
	VolumeCondition.getString(buf);
	sprintf(p,"VolumeCondition=%s,",buf);
	p+=strlen(p);
	MinVolume.getString(buf);
	sprintf(p,"MinVolume=%s,",buf);
	p+=strlen(p);
	ContingentCondition.getString(buf);
	sprintf(p,"ContingentCondition=%s,",buf);
	p+=strlen(p);
	StopPrice.getString(buf);
	sprintf(p,"StopPrice=%s,",buf);
	p+=strlen(p);
	ForceCloseReason.getString(buf);
	sprintf(p,"ForceCloseReason=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	IsAutoSuspend.getString(buf);
	sprintf(p,"IsAutoSuspend=%s,",buf);
	p+=strlen(p);
	OrderSource.getString(buf);
	sprintf(p,"OrderSource=%s,",buf);
	p+=strlen(p);
	OrderStatus.getString(buf);
	sprintf(p,"OrderStatus=%s,",buf);
	p+=strlen(p);
	OrderType.getString(buf);
	sprintf(p,"OrderType=%s,",buf);
	p+=strlen(p);
	VolumeTraded.getString(buf);
	sprintf(p,"VolumeTraded=%s,",buf);
	p+=strlen(p);
	VolumeTotal.getString(buf);
	sprintf(p,"VolumeTotal=%s,",buf);
	p+=strlen(p);
	InsertDate.getString(buf);
	sprintf(p,"InsertDate=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	ActiveTime.getString(buf);
	sprintf(p,"ActiveTime=%s,",buf);
	p+=strlen(p);
	SuspendTime.getString(buf);
	sprintf(p,"SuspendTime=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	CancelTime.getString(buf);
	sprintf(p,"CancelTime=%s,",buf);
	p+=strlen(p);
	ActiveUserID.getString(buf);
	sprintf(p,"ActiveUserID=%s,",buf);
	p+=strlen(p);
	Priority.getString(buf);
	sprintf(p,"Priority=%s,",buf);
	p+=strlen(p);
	TimeSortID.getString(buf);
	sprintf(p,"TimeSortID=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableRemainOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CRemainOrder");
	pLogger->output(indent,0,"{");
	Tradable.getString(buf);
	pLogger->output(indent+1,0,"Tradable=%s 是否可以参加交易",buf);
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	OrderPriceType.getString(buf);
	pLogger->output(indent+1,0,"OrderPriceType=%s 报单价格条件",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	CombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"CombOffsetFlag=%s 组合开平标志",buf);
	CombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"CombHedgeFlag=%s 组合投机套保标志",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeTotalOriginal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotalOriginal=%s 数量",buf);
	TimeCondition.getString(buf);
	pLogger->output(indent+1,0,"TimeCondition=%s 有效期类型",buf);
	GTDDate.getString(buf);
	pLogger->output(indent+1,0,"GTDDate=%s GTD日期",buf);
	VolumeCondition.getString(buf);
	pLogger->output(indent+1,0,"VolumeCondition=%s 成交量类型",buf);
	MinVolume.getString(buf);
	pLogger->output(indent+1,0,"MinVolume=%s 最小成交量",buf);
	ContingentCondition.getString(buf);
	pLogger->output(indent+1,0,"ContingentCondition=%s 触发条件",buf);
	StopPrice.getString(buf);
	pLogger->output(indent+1,0,"StopPrice=%s 止损价",buf);
	ForceCloseReason.getString(buf);
	pLogger->output(indent+1,0,"ForceCloseReason=%s 强平原因",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	IsAutoSuspend.getString(buf);
	pLogger->output(indent+1,0,"IsAutoSuspend=%s 自动挂起标志",buf);
	OrderSource.getString(buf);
	pLogger->output(indent+1,0,"OrderSource=%s 报单来源",buf);
	OrderStatus.getString(buf);
	pLogger->output(indent+1,0,"OrderStatus=%s 报单状态",buf);
	OrderType.getString(buf);
	pLogger->output(indent+1,0,"OrderType=%s 报单类型",buf);
	VolumeTraded.getString(buf);
	pLogger->output(indent+1,0,"VolumeTraded=%s 今成交数量",buf);
	VolumeTotal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotal=%s 剩余数量",buf);
	InsertDate.getString(buf);
	pLogger->output(indent+1,0,"InsertDate=%s 报单日期",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	ActiveTime.getString(buf);
	pLogger->output(indent+1,0,"ActiveTime=%s 激活时间",buf);
	SuspendTime.getString(buf);
	pLogger->output(indent+1,0,"SuspendTime=%s 挂起时间",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	CancelTime.getString(buf);
	pLogger->output(indent+1,0,"CancelTime=%s 撤销时间",buf);
	ActiveUserID.getString(buf);
	pLogger->output(indent+1,0,"ActiveUserID=%s 最后修改交易用户代码",buf);
	Priority.getString(buf);
	pLogger->output(indent+1,0,"Priority=%s 优先权",buf);
	TimeSortID.getString(buf);
	pLogger->output(indent+1,0,"TimeSortID=%s 按时间排队的序号",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	pLogger->output(indent,0,"}");
}

CRemainOrderIterator::~CRemainOrderIterator(void)
{
}


void CRemainOrderIterator::dump(FILE *output)
{
	CRemainOrder *pRemainOrder;
	
	while ((pRemainOrder=next())!=NULL)
	{
		pRemainOrder->dump(output);
	}
}



void CWriteableMarketData::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,LastPrice,PreSettlementPrice,PreClosePrice,PreOpenInterest,OpenPrice,HighestPrice,LowestPrice,Volume,Turnover,OpenInterest,ClosePrice,SettlementPrice,UpperLimitPrice,LowerLimitPrice,PreDelta,CurrDelta,UpdateTime,UpdateMillisec,InstrumentID,TID\n");
}
	
void CWriteableMarketData::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	LastPrice.clear();
	PreSettlementPrice.clear();
	PreClosePrice.clear();
	PreOpenInterest.clear();
	OpenPrice.clear();
	HighestPrice.clear();
	LowestPrice.clear();
	Volume.clear();
	Turnover.clear();
	OpenInterest.clear();
	ClosePrice.clear();
	SettlementPrice.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
	PreDelta.clear();
	CurrDelta.clear();
	UpdateTime.clear();
	UpdateMillisec.clear();
	InstrumentID.clear();
	TID.clear();
}

int CWriteableMarketData::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMarketData),input)!=sizeof(CWriteableMarketData))
		return 0;
	else
		return 1;
}
	
int CWriteableMarketData::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LastPrice=token;
		}
		else
		{
			LastPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreSettlementPrice=token;
		}
		else
		{
			PreSettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreClosePrice=token;
		}
		else
		{
			PreClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreOpenInterest=token;
		}
		else
		{
			PreOpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenPrice=token;
		}
		else
		{
			OpenPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HighestPrice=token;
		}
		else
		{
			HighestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowestPrice=token;
		}
		else
		{
			LowestPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Turnover=token;
		}
		else
		{
			Turnover="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OpenInterest=token;
		}
		else
		{
			OpenInterest="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClosePrice=token;
		}
		else
		{
			ClosePrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementPrice=token;
		}
		else
		{
			SettlementPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreDelta=token;
		}
		else
		{
			PreDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrDelta=token;
		}
		else
		{
			CurrDelta="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateMillisec=token;
		}
		else
		{
			UpdateMillisec="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TID=token;
		}
		else
		{
			TID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"LastPrice"))
			{
				LastPrice=token;
			}
			else if (!strcmp(fieldName,"PreSettlementPrice"))
			{
				PreSettlementPrice=token;
			}
			else if (!strcmp(fieldName,"PreClosePrice"))
			{
				PreClosePrice=token;
			}
			else if (!strcmp(fieldName,"PreOpenInterest"))
			{
				PreOpenInterest=token;
			}
			else if (!strcmp(fieldName,"OpenPrice"))
			{
				OpenPrice=token;
			}
			else if (!strcmp(fieldName,"HighestPrice"))
			{
				HighestPrice=token;
			}
			else if (!strcmp(fieldName,"LowestPrice"))
			{
				LowestPrice=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Turnover"))
			{
				Turnover=token;
			}
			else if (!strcmp(fieldName,"OpenInterest"))
			{
				OpenInterest=token;
			}
			else if (!strcmp(fieldName,"ClosePrice"))
			{
				ClosePrice=token;
			}
			else if (!strcmp(fieldName,"SettlementPrice"))
			{
				SettlementPrice=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			else if (!strcmp(fieldName,"PreDelta"))
			{
				PreDelta=token;
			}
			else if (!strcmp(fieldName,"CurrDelta"))
			{
				CurrDelta=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"UpdateMillisec"))
			{
				UpdateMillisec=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"TID"))
			{
				TID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMarketData::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMarketData),output)!=sizeof(CWriteableMarketData))
		return 0;
	else
		return 1;
}

int CWriteableMarketData::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LastPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreSettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreOpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HighestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowestPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Turnover.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OpenInterest.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClosePrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrDelta.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateMillisec.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMarketData::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMarketData%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	LastPrice.getString(buf);
	fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Turnover.getString(buf);
	fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	PreDelta.getString(buf);
	fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	TID.getString(buf);
	fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMarketData::dumpDiff(FILE *fp, const CWriteableMarketData *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMarketData = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	LastPrice.getString(buf);
	if (compare(LastPrice.getValue(),pOriginal->LastPrice.getValue())!=0)
	{
		pOriginal->LastPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLastPrice = %s -> %s    [最新价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLastPrice = %s    [最新价]\n",buf);
	}
	PreSettlementPrice.getString(buf);
	if (compare(PreSettlementPrice.getValue(),pOriginal->PreSettlementPrice.getValue())!=0)
	{
		pOriginal->PreSettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreSettlementPrice = %s -> %s    [昨结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreSettlementPrice = %s    [昨结算]\n",buf);
	}
	PreClosePrice.getString(buf);
	if (compare(PreClosePrice.getValue(),pOriginal->PreClosePrice.getValue())!=0)
	{
		pOriginal->PreClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tPreClosePrice = %s -> %s    [昨收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreClosePrice = %s    [昨收盘]\n",buf);
	}
	PreOpenInterest.getString(buf);
	if (compare(PreOpenInterest.getValue(),pOriginal->PreOpenInterest.getValue())!=0)
	{
		pOriginal->PreOpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tPreOpenInterest = %s -> %s    [昨持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreOpenInterest = %s    [昨持仓量]\n",buf);
	}
	OpenPrice.getString(buf);
	if (compare(OpenPrice.getValue(),pOriginal->OpenPrice.getValue())!=0)
	{
		pOriginal->OpenPrice.getString(bufOriginal);
		fprintf(fp,"\t\tOpenPrice = %s -> %s    [今开盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenPrice = %s    [今开盘]\n",buf);
	}
	HighestPrice.getString(buf);
	if (compare(HighestPrice.getValue(),pOriginal->HighestPrice.getValue())!=0)
	{
		pOriginal->HighestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tHighestPrice = %s -> %s    [最高价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHighestPrice = %s    [最高价]\n",buf);
	}
	LowestPrice.getString(buf);
	if (compare(LowestPrice.getValue(),pOriginal->LowestPrice.getValue())!=0)
	{
		pOriginal->LowestPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowestPrice = %s -> %s    [最低价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowestPrice = %s    [最低价]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Turnover.getString(buf);
	if (compare(Turnover.getValue(),pOriginal->Turnover.getValue())!=0)
	{
		pOriginal->Turnover.getString(bufOriginal);
		fprintf(fp,"\t\tTurnover = %s -> %s    [成交金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTurnover = %s    [成交金额]\n",buf);
	}
	OpenInterest.getString(buf);
	if (compare(OpenInterest.getValue(),pOriginal->OpenInterest.getValue())!=0)
	{
		pOriginal->OpenInterest.getString(bufOriginal);
		fprintf(fp,"\t\tOpenInterest = %s -> %s    [持仓量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOpenInterest = %s    [持仓量]\n",buf);
	}
	ClosePrice.getString(buf);
	if (compare(ClosePrice.getValue(),pOriginal->ClosePrice.getValue())!=0)
	{
		pOriginal->ClosePrice.getString(bufOriginal);
		fprintf(fp,"\t\tClosePrice = %s -> %s    [今收盘]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClosePrice = %s    [今收盘]\n",buf);
	}
	SettlementPrice.getString(buf);
	if (compare(SettlementPrice.getValue(),pOriginal->SettlementPrice.getValue())!=0)
	{
		pOriginal->SettlementPrice.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementPrice = %s -> %s    [今结算]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementPrice = %s    [今结算]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	PreDelta.getString(buf);
	if (compare(PreDelta.getValue(),pOriginal->PreDelta.getValue())!=0)
	{
		pOriginal->PreDelta.getString(bufOriginal);
		fprintf(fp,"\t\tPreDelta = %s -> %s    [昨虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreDelta = %s    [昨虚实度]\n",buf);
	}
	CurrDelta.getString(buf);
	if (compare(CurrDelta.getValue(),pOriginal->CurrDelta.getValue())!=0)
	{
		pOriginal->CurrDelta.getString(bufOriginal);
		fprintf(fp,"\t\tCurrDelta = %s -> %s    [今虚实度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrDelta = %s    [今虚实度]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	UpdateMillisec.getString(buf);
	if (compare(UpdateMillisec.getValue(),pOriginal->UpdateMillisec.getValue())!=0)
	{
		pOriginal->UpdateMillisec.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateMillisec = %s -> %s    [最后修改毫秒]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateMillisec = %s    [最后修改毫秒]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	TID.getString(buf);
	if (compare(TID.getValue(),pOriginal->TID.getValue())!=0)
	{
		pOriginal->TID.getString(bufOriginal);
		fprintf(fp,"\t\tTID = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMarketData::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	LastPrice.getString(buf);
	fprintf(fp,",LastPrice,%s",buf);	
	PreSettlementPrice.getString(buf);
	fprintf(fp,",PreSettlementPrice,%s",buf);	
	PreClosePrice.getString(buf);
	fprintf(fp,",PreClosePrice,%s",buf);	
	PreOpenInterest.getString(buf);
	fprintf(fp,",PreOpenInterest,%s",buf);	
	OpenPrice.getString(buf);
	fprintf(fp,",OpenPrice,%s",buf);	
	HighestPrice.getString(buf);
	fprintf(fp,",HighestPrice,%s",buf);	
	LowestPrice.getString(buf);
	fprintf(fp,",LowestPrice,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Turnover.getString(buf);
	fprintf(fp,",Turnover,%s",buf);	
	OpenInterest.getString(buf);
	fprintf(fp,",OpenInterest,%s",buf);	
	ClosePrice.getString(buf);
	fprintf(fp,",ClosePrice,%s",buf);	
	SettlementPrice.getString(buf);
	fprintf(fp,",SettlementPrice,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
	PreDelta.getString(buf);
	fprintf(fp,",PreDelta,%s",buf);	
	CurrDelta.getString(buf);
	fprintf(fp,",CurrDelta,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	UpdateMillisec.getString(buf);
	fprintf(fp,",UpdateMillisec,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	TID.getString(buf);
	fprintf(fp,",TID,%s",buf);	
}

void CWriteableMarketData::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	LastPrice.getString(buf);
	sprintf(p,"LastPrice=%s,",buf);
	p+=strlen(p);
	PreSettlementPrice.getString(buf);
	sprintf(p,"PreSettlementPrice=%s,",buf);
	p+=strlen(p);
	PreClosePrice.getString(buf);
	sprintf(p,"PreClosePrice=%s,",buf);
	p+=strlen(p);
	PreOpenInterest.getString(buf);
	sprintf(p,"PreOpenInterest=%s,",buf);
	p+=strlen(p);
	OpenPrice.getString(buf);
	sprintf(p,"OpenPrice=%s,",buf);
	p+=strlen(p);
	HighestPrice.getString(buf);
	sprintf(p,"HighestPrice=%s,",buf);
	p+=strlen(p);
	LowestPrice.getString(buf);
	sprintf(p,"LowestPrice=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Turnover.getString(buf);
	sprintf(p,"Turnover=%s,",buf);
	p+=strlen(p);
	OpenInterest.getString(buf);
	sprintf(p,"OpenInterest=%s,",buf);
	p+=strlen(p);
	ClosePrice.getString(buf);
	sprintf(p,"ClosePrice=%s,",buf);
	p+=strlen(p);
	SettlementPrice.getString(buf);
	sprintf(p,"SettlementPrice=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	PreDelta.getString(buf);
	sprintf(p,"PreDelta=%s,",buf);
	p+=strlen(p);
	CurrDelta.getString(buf);
	sprintf(p,"CurrDelta=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	UpdateMillisec.getString(buf);
	sprintf(p,"UpdateMillisec=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	TID.getString(buf);
	sprintf(p,"TID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMarketData::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMarketData");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	LastPrice.getString(buf);
	pLogger->output(indent+1,0,"LastPrice=%s 最新价",buf);
	PreSettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"PreSettlementPrice=%s 昨结算",buf);
	PreClosePrice.getString(buf);
	pLogger->output(indent+1,0,"PreClosePrice=%s 昨收盘",buf);
	PreOpenInterest.getString(buf);
	pLogger->output(indent+1,0,"PreOpenInterest=%s 昨持仓量",buf);
	OpenPrice.getString(buf);
	pLogger->output(indent+1,0,"OpenPrice=%s 今开盘",buf);
	HighestPrice.getString(buf);
	pLogger->output(indent+1,0,"HighestPrice=%s 最高价",buf);
	LowestPrice.getString(buf);
	pLogger->output(indent+1,0,"LowestPrice=%s 最低价",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Turnover.getString(buf);
	pLogger->output(indent+1,0,"Turnover=%s 成交金额",buf);
	OpenInterest.getString(buf);
	pLogger->output(indent+1,0,"OpenInterest=%s 持仓量",buf);
	ClosePrice.getString(buf);
	pLogger->output(indent+1,0,"ClosePrice=%s 今收盘",buf);
	SettlementPrice.getString(buf);
	pLogger->output(indent+1,0,"SettlementPrice=%s 今结算",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	PreDelta.getString(buf);
	pLogger->output(indent+1,0,"PreDelta=%s 昨虚实度",buf);
	CurrDelta.getString(buf);
	pLogger->output(indent+1,0,"CurrDelta=%s 今虚实度",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	UpdateMillisec.getString(buf);
	pLogger->output(indent+1,0,"UpdateMillisec=%s 最后修改毫秒",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	TID.getString(buf);
	pLogger->output(indent+1,0,"TID=%s 序列号",buf);
	pLogger->output(indent,0,"}");
}

CMarketDataIterator::~CMarketDataIterator(void)
{
}


void CMarketDataIterator::dump(FILE *output)
{
	CMarketData *pMarketData;
	
	while ((pMarketData=next())!=NULL)
	{
		pMarketData->dump(output);
	}
}



void CWriteableClearingPartPosition::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeFlag,PosiDirection,YdPosition,Position,LongFrozen,ShortFrozen,YdLongFrozen,YdShortFrozen,InstrumentID,ParticipantID,TradingRole\n");
}
	
void CWriteableClearingPartPosition::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeFlag.clear();
	PosiDirection.clear();
	YdPosition.clear();
	Position.clear();
	LongFrozen.clear();
	ShortFrozen.clear();
	YdLongFrozen.clear();
	YdShortFrozen.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	TradingRole.clear();
}

int CWriteableClearingPartPosition::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableClearingPartPosition),input)!=sizeof(CWriteableClearingPartPosition))
		return 0;
	else
		return 1;
}
	
int CWriteableClearingPartPosition::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdPosition=token;
		}
		else
		{
			YdPosition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Position=token;
		}
		else
		{
			Position="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LongFrozen=token;
		}
		else
		{
			LongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ShortFrozen=token;
		}
		else
		{
			ShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdLongFrozen=token;
		}
		else
		{
			YdLongFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			YdShortFrozen=token;
		}
		else
		{
			YdShortFrozen="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"YdPosition"))
			{
				YdPosition=token;
			}
			else if (!strcmp(fieldName,"Position"))
			{
				Position=token;
			}
			else if (!strcmp(fieldName,"LongFrozen"))
			{
				LongFrozen=token;
			}
			else if (!strcmp(fieldName,"ShortFrozen"))
			{
				ShortFrozen=token;
			}
			else if (!strcmp(fieldName,"YdLongFrozen"))
			{
				YdLongFrozen=token;
			}
			else if (!strcmp(fieldName,"YdShortFrozen"))
			{
				YdShortFrozen=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableClearingPartPosition::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableClearingPartPosition),output)!=sizeof(CWriteableClearingPartPosition))
		return 0;
	else
		return 1;
}

int CWriteableClearingPartPosition::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdPosition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Position.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdLongFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	YdShortFrozen.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableClearingPartPosition::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCClearingPartPosition%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	YdPosition.getString(buf);
	fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);	
	Position.getString(buf);
	fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableClearingPartPosition::dumpDiff(FILE *fp, const CWriteableClearingPartPosition *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCClearingPartPosition = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	YdPosition.getString(buf);
	if (compare(YdPosition.getValue(),pOriginal->YdPosition.getValue())!=0)
	{
		pOriginal->YdPosition.getString(bufOriginal);
		fprintf(fp,"\t\tYdPosition = %s -> %s    [上日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdPosition = %s    [上日持仓]\n",buf);
	}
	Position.getString(buf);
	if (compare(Position.getValue(),pOriginal->Position.getValue())!=0)
	{
		pOriginal->Position.getString(bufOriginal);
		fprintf(fp,"\t\tPosition = %s -> %s    [今日持仓]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosition = %s    [今日持仓]\n",buf);
	}
	LongFrozen.getString(buf);
	if (compare(LongFrozen.getValue(),pOriginal->LongFrozen.getValue())!=0)
	{
		pOriginal->LongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tLongFrozen = %s -> %s    [多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLongFrozen = %s    [多头冻结]\n",buf);
	}
	ShortFrozen.getString(buf);
	if (compare(ShortFrozen.getValue(),pOriginal->ShortFrozen.getValue())!=0)
	{
		pOriginal->ShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tShortFrozen = %s -> %s    [空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tShortFrozen = %s    [空头冻结]\n",buf);
	}
	YdLongFrozen.getString(buf);
	if (compare(YdLongFrozen.getValue(),pOriginal->YdLongFrozen.getValue())!=0)
	{
		pOriginal->YdLongFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdLongFrozen = %s -> %s    [昨日多头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdLongFrozen = %s    [昨日多头冻结]\n",buf);
	}
	YdShortFrozen.getString(buf);
	if (compare(YdShortFrozen.getValue(),pOriginal->YdShortFrozen.getValue())!=0)
	{
		pOriginal->YdShortFrozen.getString(bufOriginal);
		fprintf(fp,"\t\tYdShortFrozen = %s -> %s    [昨日空头冻结]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tYdShortFrozen = %s    [昨日空头冻结]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableClearingPartPosition::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	YdPosition.getString(buf);
	fprintf(fp,",YdPosition,%s",buf);	
	Position.getString(buf);
	fprintf(fp,",Position,%s",buf);	
	LongFrozen.getString(buf);
	fprintf(fp,",LongFrozen,%s",buf);	
	ShortFrozen.getString(buf);
	fprintf(fp,",ShortFrozen,%s",buf);	
	YdLongFrozen.getString(buf);
	fprintf(fp,",YdLongFrozen,%s",buf);	
	YdShortFrozen.getString(buf);
	fprintf(fp,",YdShortFrozen,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
}

void CWriteableClearingPartPosition::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	YdPosition.getString(buf);
	sprintf(p,"YdPosition=%s,",buf);
	p+=strlen(p);
	Position.getString(buf);
	sprintf(p,"Position=%s,",buf);
	p+=strlen(p);
	LongFrozen.getString(buf);
	sprintf(p,"LongFrozen=%s,",buf);
	p+=strlen(p);
	ShortFrozen.getString(buf);
	sprintf(p,"ShortFrozen=%s,",buf);
	p+=strlen(p);
	YdLongFrozen.getString(buf);
	sprintf(p,"YdLongFrozen=%s,",buf);
	p+=strlen(p);
	YdShortFrozen.getString(buf);
	sprintf(p,"YdShortFrozen=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableClearingPartPosition::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CClearingPartPosition");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	YdPosition.getString(buf);
	pLogger->output(indent+1,0,"YdPosition=%s 上日持仓",buf);
	Position.getString(buf);
	pLogger->output(indent+1,0,"Position=%s 今日持仓",buf);
	LongFrozen.getString(buf);
	pLogger->output(indent+1,0,"LongFrozen=%s 多头冻结",buf);
	ShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"ShortFrozen=%s 空头冻结",buf);
	YdLongFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdLongFrozen=%s 昨日多头冻结",buf);
	YdShortFrozen.getString(buf);
	pLogger->output(indent+1,0,"YdShortFrozen=%s 昨日空头冻结",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	pLogger->output(indent,0,"}");
}

CClearingPartPositionIterator::~CClearingPartPositionIterator(void)
{
}


void CClearingPartPositionIterator::dump(FILE *output)
{
	CClearingPartPosition *pClearingPartPosition;
	
	while ((pClearingPartPosition=next())!=NULL)
	{
		pClearingPartPosition->dump(output);
	}
}



void CWriteableInstrumentStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,InstrumentStatus,TradingSegmentSN,EnterTime,EnterReason\n");
}
	
void CWriteableInstrumentStatus::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	InstrumentStatus.clear();
	TradingSegmentSN.clear();
	EnterTime.clear();
	EnterReason.clear();
	pInstrument=NULL;
	pCurrPriceBanding=NULL;
	pMdPubStatus=NULL;
}

int CWriteableInstrumentStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableInstrumentStatus),input)!=sizeof(CWriteableInstrumentStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableInstrumentStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingSegmentSN=token;
		}
		else
		{
			TradingSegmentSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterTime=token;
		}
		else
		{
			EnterTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterReason=token;
		}
		else
		{
			EnterReason="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			else if (!strcmp(fieldName,"TradingSegmentSN"))
			{
				TradingSegmentSN=token;
			}
			else if (!strcmp(fieldName,"EnterTime"))
			{
				EnterTime=token;
			}
			else if (!strcmp(fieldName,"EnterReason"))
			{
				EnterReason=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableInstrumentStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableInstrumentStatus),output)!=sizeof(CWriteableInstrumentStatus))
		return 0;
	else
		return 1;
}

int CWriteableInstrumentStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingSegmentSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterReason.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableInstrumentStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCInstrumentStatus%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);	
	EnterTime.getString(buf);
	fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);	
	EnterReason.getString(buf);
	fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableInstrumentStatus::dumpDiff(FILE *fp, const CWriteableInstrumentStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCInstrumentStatus = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约交易状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约交易状态]\n",buf);
	}
	TradingSegmentSN.getString(buf);
	if (compare(TradingSegmentSN.getValue(),pOriginal->TradingSegmentSN.getValue())!=0)
	{
		pOriginal->TradingSegmentSN.getString(bufOriginal);
		fprintf(fp,"\t\tTradingSegmentSN = %s -> %s    [交易阶段编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingSegmentSN = %s    [交易阶段编号]\n",buf);
	}
	EnterTime.getString(buf);
	if (compare(EnterTime.getValue(),pOriginal->EnterTime.getValue())!=0)
	{
		pOriginal->EnterTime.getString(bufOriginal);
		fprintf(fp,"\t\tEnterTime = %s -> %s    [进入本状态时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);
	}
	EnterReason.getString(buf);
	if (compare(EnterReason.getValue(),pOriginal->EnterReason.getValue())!=0)
	{
		pOriginal->EnterReason.getString(bufOriginal);
		fprintf(fp,"\t\tEnterReason = %s -> %s    [进入本状态原因]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterReason = %s    [进入本状态原因]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableInstrumentStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
	TradingSegmentSN.getString(buf);
	fprintf(fp,",TradingSegmentSN,%s",buf);	
	EnterTime.getString(buf);
	fprintf(fp,",EnterTime,%s",buf);	
	EnterReason.getString(buf);
	fprintf(fp,",EnterReason,%s",buf);	
}

void CWriteableInstrumentStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	TradingSegmentSN.getString(buf);
	sprintf(p,"TradingSegmentSN=%s,",buf);
	p+=strlen(p);
	EnterTime.getString(buf);
	sprintf(p,"EnterTime=%s,",buf);
	p+=strlen(p);
	EnterReason.getString(buf);
	sprintf(p,"EnterReason=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableInstrumentStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CInstrumentStatus");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约交易状态",buf);
	TradingSegmentSN.getString(buf);
	pLogger->output(indent+1,0,"TradingSegmentSN=%s 交易阶段编号",buf);
	EnterTime.getString(buf);
	pLogger->output(indent+1,0,"EnterTime=%s 进入本状态时间",buf);
	EnterReason.getString(buf);
	pLogger->output(indent+1,0,"EnterReason=%s 进入本状态原因",buf);
	pLogger->output(indent,0,"}");
}

CInstrumentStatusIterator::~CInstrumentStatusIterator(void)
{
}


void CInstrumentStatusIterator::dump(FILE *output)
{
	CInstrumentStatus *pInstrumentStatus;
	
	while ((pInstrumentStatus=next())!=NULL)
	{
		pInstrumentStatus->dump(output);
	}
}



void CWriteableOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,OrderSysID,ParticipantID,ClientID,UserID,InstrumentID,OrderPriceType,Direction,CombOffsetFlag,CombHedgeFlag,LimitPrice,VolumeTotalOriginal,TimeCondition,GTDDate,VolumeCondition,MinVolume,ContingentCondition,StopPrice,ForceCloseReason,OrderLocalID,IsAutoSuspend,OrderSource,OrderStatus,OrderType,VolumeTraded,VolumeTotal,InsertDate,InsertTime,ActiveTime,SuspendTime,UpdateTime,CancelTime,ActiveUserID,Priority,TimeSortID,ClearingPartID,BusinessUnit,Tradable,ImplySortID,TID\n");
}
	
void CWriteableOrder::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	OrderSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	InstrumentID.clear();
	OrderPriceType.clear();
	Direction.clear();
	CombOffsetFlag.clear();
	CombHedgeFlag.clear();
	LimitPrice.clear();
	VolumeTotalOriginal.clear();
	TimeCondition.clear();
	GTDDate.clear();
	VolumeCondition.clear();
	MinVolume.clear();
	ContingentCondition.clear();
	StopPrice.clear();
	ForceCloseReason.clear();
	OrderLocalID.clear();
	IsAutoSuspend.clear();
	OrderSource.clear();
	OrderStatus.clear();
	OrderType.clear();
	VolumeTraded.clear();
	VolumeTotal.clear();
	InsertDate.clear();
	InsertTime.clear();
	ActiveTime.clear();
	SuspendTime.clear();
	UpdateTime.clear();
	CancelTime.clear();
	ActiveUserID.clear();
	Priority.clear();
	TimeSortID.clear();
	ClearingPartID.clear();
	BusinessUnit.clear();
	Tradable.clear();
	ImplySortID.clear();
	TID.clear();
	pInstrument=NULL;
	pPartClient=NULL;
	pClientPosition=NULL;
}

int CWriteableOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableOrder),input)!=sizeof(CWriteableOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderPriceType=token;
		}
		else
		{
			OrderPriceType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOffsetFlag=token;
		}
		else
		{
			CombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombHedgeFlag=token;
		}
		else
		{
			CombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotalOriginal=token;
		}
		else
		{
			VolumeTotalOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeCondition=token;
		}
		else
		{
			TimeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			GTDDate=token;
		}
		else
		{
			GTDDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeCondition=token;
		}
		else
		{
			VolumeCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MinVolume=token;
		}
		else
		{
			MinVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ContingentCondition=token;
		}
		else
		{
			ContingentCondition="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			StopPrice=token;
		}
		else
		{
			StopPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ForceCloseReason=token;
		}
		else
		{
			ForceCloseReason="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			IsAutoSuspend=token;
		}
		else
		{
			IsAutoSuspend="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSource=token;
		}
		else
		{
			OrderSource="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderStatus=token;
		}
		else
		{
			OrderStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderType=token;
		}
		else
		{
			OrderType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTraded=token;
		}
		else
		{
			VolumeTraded="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotal=token;
		}
		else
		{
			VolumeTotal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertDate=token;
		}
		else
		{
			InsertDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActiveTime=token;
		}
		else
		{
			ActiveTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SuspendTime=token;
		}
		else
		{
			SuspendTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpdateTime=token;
		}
		else
		{
			UpdateTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancelTime=token;
		}
		else
		{
			CancelTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActiveUserID=token;
		}
		else
		{
			ActiveUserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Priority=token;
		}
		else
		{
			Priority="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TimeSortID=token;
		}
		else
		{
			TimeSortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Tradable=token;
		}
		else
		{
			Tradable="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ImplySortID=token;
		}
		else
		{
			ImplySortID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TID=token;
		}
		else
		{
			TID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"OrderPriceType"))
			{
				OrderPriceType=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"CombOffsetFlag"))
			{
				CombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"CombHedgeFlag"))
			{
				CombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeTotalOriginal"))
			{
				VolumeTotalOriginal=token;
			}
			else if (!strcmp(fieldName,"TimeCondition"))
			{
				TimeCondition=token;
			}
			else if (!strcmp(fieldName,"GTDDate"))
			{
				GTDDate=token;
			}
			else if (!strcmp(fieldName,"VolumeCondition"))
			{
				VolumeCondition=token;
			}
			else if (!strcmp(fieldName,"MinVolume"))
			{
				MinVolume=token;
			}
			else if (!strcmp(fieldName,"ContingentCondition"))
			{
				ContingentCondition=token;
			}
			else if (!strcmp(fieldName,"StopPrice"))
			{
				StopPrice=token;
			}
			else if (!strcmp(fieldName,"ForceCloseReason"))
			{
				ForceCloseReason=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"IsAutoSuspend"))
			{
				IsAutoSuspend=token;
			}
			else if (!strcmp(fieldName,"OrderSource"))
			{
				OrderSource=token;
			}
			else if (!strcmp(fieldName,"OrderStatus"))
			{
				OrderStatus=token;
			}
			else if (!strcmp(fieldName,"OrderType"))
			{
				OrderType=token;
			}
			else if (!strcmp(fieldName,"VolumeTraded"))
			{
				VolumeTraded=token;
			}
			else if (!strcmp(fieldName,"VolumeTotal"))
			{
				VolumeTotal=token;
			}
			else if (!strcmp(fieldName,"InsertDate"))
			{
				InsertDate=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"ActiveTime"))
			{
				ActiveTime=token;
			}
			else if (!strcmp(fieldName,"SuspendTime"))
			{
				SuspendTime=token;
			}
			else if (!strcmp(fieldName,"UpdateTime"))
			{
				UpdateTime=token;
			}
			else if (!strcmp(fieldName,"CancelTime"))
			{
				CancelTime=token;
			}
			else if (!strcmp(fieldName,"ActiveUserID"))
			{
				ActiveUserID=token;
			}
			else if (!strcmp(fieldName,"Priority"))
			{
				Priority=token;
			}
			else if (!strcmp(fieldName,"TimeSortID"))
			{
				TimeSortID=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"Tradable"))
			{
				Tradable=token;
			}
			else if (!strcmp(fieldName,"ImplySortID"))
			{
				ImplySortID=token;
			}
			else if (!strcmp(fieldName,"TID"))
			{
				TID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableOrder),output)!=sizeof(CWriteableOrder))
		return 0;
	else
		return 1;
}

int CWriteableOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderPriceType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotalOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	GTDDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MinVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ContingentCondition.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	StopPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ForceCloseReason.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	IsAutoSuspend.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTraded.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActiveTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SuspendTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpdateTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancelTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActiveUserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Priority.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TimeSortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Tradable.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ImplySortID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCOrder%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	OrderPriceType.getString(buf);
	fprintf(fp,"\t\tOrderPriceType = %s    [报单价格条件]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);	
	GTDDate.getString(buf);
	fprintf(fp,"\t\tGTDDate = %s    [GTD日期]\n",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);	
	MinVolume.getString(buf);
	fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);	
	ContingentCondition.getString(buf);
	fprintf(fp,"\t\tContingentCondition = %s    [触发条件]\n",buf);	
	StopPrice.getString(buf);
	fprintf(fp,"\t\tStopPrice = %s    [止损价]\n",buf);	
	ForceCloseReason.getString(buf);
	fprintf(fp,"\t\tForceCloseReason = %s    [强平原因]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	IsAutoSuspend.getString(buf);
	fprintf(fp,"\t\tIsAutoSuspend = %s    [自动挂起标志]\n",buf);	
	OrderSource.getString(buf);
	fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);	
	OrderType.getString(buf);
	fprintf(fp,"\t\tOrderType = %s    [报单类型]\n",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);	
	InsertDate.getString(buf);
	fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	ActiveTime.getString(buf);
	fprintf(fp,"\t\tActiveTime = %s    [激活时间]\n",buf);	
	SuspendTime.getString(buf);
	fprintf(fp,"\t\tSuspendTime = %s    [挂起时间]\n",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);	
	CancelTime.getString(buf);
	fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);	
	ActiveUserID.getString(buf);
	fprintf(fp,"\t\tActiveUserID = %s    [最后修改交易用户代码]\n",buf);	
	Priority.getString(buf);
	fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);	
	TimeSortID.getString(buf);
	fprintf(fp,"\t\tTimeSortID = %s    [按时间排队的序号]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	Tradable.getString(buf);
	fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);	
	ImplySortID.getString(buf);
	fprintf(fp,"\t\tImplySortID = %s    [隐式推导时的次序]\n",buf);	
	TID.getString(buf);
	fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableOrder::dumpDiff(FILE *fp, const CWriteableOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCOrder = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	OrderPriceType.getString(buf);
	if (compare(OrderPriceType.getValue(),pOriginal->OrderPriceType.getValue())!=0)
	{
		pOriginal->OrderPriceType.getString(bufOriginal);
		fprintf(fp,"\t\tOrderPriceType = %s -> %s    [报单价格条件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderPriceType = %s    [报单价格条件]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	CombOffsetFlag.getString(buf);
	if (compare(CombOffsetFlag.getValue(),pOriginal->CombOffsetFlag.getValue())!=0)
	{
		pOriginal->CombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombOffsetFlag = %s -> %s    [组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOffsetFlag = %s    [组合开平标志]\n",buf);
	}
	CombHedgeFlag.getString(buf);
	if (compare(CombHedgeFlag.getValue(),pOriginal->CombHedgeFlag.getValue())!=0)
	{
		pOriginal->CombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tCombHedgeFlag = %s -> %s    [组合投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombHedgeFlag = %s    [组合投机套保标志]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeTotalOriginal.getString(buf);
	if (compare(VolumeTotalOriginal.getValue(),pOriginal->VolumeTotalOriginal.getValue())!=0)
	{
		pOriginal->VolumeTotalOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotalOriginal = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);
	}
	TimeCondition.getString(buf);
	if (compare(TimeCondition.getValue(),pOriginal->TimeCondition.getValue())!=0)
	{
		pOriginal->TimeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tTimeCondition = %s -> %s    [有效期类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeCondition = %s    [有效期类型]\n",buf);
	}
	GTDDate.getString(buf);
	if (compare(GTDDate.getValue(),pOriginal->GTDDate.getValue())!=0)
	{
		pOriginal->GTDDate.getString(bufOriginal);
		fprintf(fp,"\t\tGTDDate = %s -> %s    [GTD日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tGTDDate = %s    [GTD日期]\n",buf);
	}
	VolumeCondition.getString(buf);
	if (compare(VolumeCondition.getValue(),pOriginal->VolumeCondition.getValue())!=0)
	{
		pOriginal->VolumeCondition.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeCondition = %s -> %s    [成交量类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeCondition = %s    [成交量类型]\n",buf);
	}
	MinVolume.getString(buf);
	if (compare(MinVolume.getValue(),pOriginal->MinVolume.getValue())!=0)
	{
		pOriginal->MinVolume.getString(bufOriginal);
		fprintf(fp,"\t\tMinVolume = %s -> %s    [最小成交量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMinVolume = %s    [最小成交量]\n",buf);
	}
	ContingentCondition.getString(buf);
	if (compare(ContingentCondition.getValue(),pOriginal->ContingentCondition.getValue())!=0)
	{
		pOriginal->ContingentCondition.getString(bufOriginal);
		fprintf(fp,"\t\tContingentCondition = %s -> %s    [触发条件]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tContingentCondition = %s    [触发条件]\n",buf);
	}
	StopPrice.getString(buf);
	if (compare(StopPrice.getValue(),pOriginal->StopPrice.getValue())!=0)
	{
		pOriginal->StopPrice.getString(bufOriginal);
		fprintf(fp,"\t\tStopPrice = %s -> %s    [止损价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tStopPrice = %s    [止损价]\n",buf);
	}
	ForceCloseReason.getString(buf);
	if (compare(ForceCloseReason.getValue(),pOriginal->ForceCloseReason.getValue())!=0)
	{
		pOriginal->ForceCloseReason.getString(bufOriginal);
		fprintf(fp,"\t\tForceCloseReason = %s -> %s    [强平原因]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tForceCloseReason = %s    [强平原因]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	IsAutoSuspend.getString(buf);
	if (compare(IsAutoSuspend.getValue(),pOriginal->IsAutoSuspend.getValue())!=0)
	{
		pOriginal->IsAutoSuspend.getString(bufOriginal);
		fprintf(fp,"\t\tIsAutoSuspend = %s -> %s    [自动挂起标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tIsAutoSuspend = %s    [自动挂起标志]\n",buf);
	}
	OrderSource.getString(buf);
	if (compare(OrderSource.getValue(),pOriginal->OrderSource.getValue())!=0)
	{
		pOriginal->OrderSource.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSource = %s -> %s    [报单来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);
	}
	OrderStatus.getString(buf);
	if (compare(OrderStatus.getValue(),pOriginal->OrderStatus.getValue())!=0)
	{
		pOriginal->OrderStatus.getString(bufOriginal);
		fprintf(fp,"\t\tOrderStatus = %s -> %s    [报单状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderStatus = %s    [报单状态]\n",buf);
	}
	OrderType.getString(buf);
	if (compare(OrderType.getValue(),pOriginal->OrderType.getValue())!=0)
	{
		pOriginal->OrderType.getString(bufOriginal);
		fprintf(fp,"\t\tOrderType = %s -> %s    [报单类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderType = %s    [报单类型]\n",buf);
	}
	VolumeTraded.getString(buf);
	if (compare(VolumeTraded.getValue(),pOriginal->VolumeTraded.getValue())!=0)
	{
		pOriginal->VolumeTraded.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTraded = %s -> %s    [今成交数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);
	}
	VolumeTotal.getString(buf);
	if (compare(VolumeTotal.getValue(),pOriginal->VolumeTotal.getValue())!=0)
	{
		pOriginal->VolumeTotal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotal = %s -> %s    [剩余数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);
	}
	InsertDate.getString(buf);
	if (compare(InsertDate.getValue(),pOriginal->InsertDate.getValue())!=0)
	{
		pOriginal->InsertDate.getString(bufOriginal);
		fprintf(fp,"\t\tInsertDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	ActiveTime.getString(buf);
	if (compare(ActiveTime.getValue(),pOriginal->ActiveTime.getValue())!=0)
	{
		pOriginal->ActiveTime.getString(bufOriginal);
		fprintf(fp,"\t\tActiveTime = %s -> %s    [激活时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActiveTime = %s    [激活时间]\n",buf);
	}
	SuspendTime.getString(buf);
	if (compare(SuspendTime.getValue(),pOriginal->SuspendTime.getValue())!=0)
	{
		pOriginal->SuspendTime.getString(bufOriginal);
		fprintf(fp,"\t\tSuspendTime = %s -> %s    [挂起时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSuspendTime = %s    [挂起时间]\n",buf);
	}
	UpdateTime.getString(buf);
	if (compare(UpdateTime.getValue(),pOriginal->UpdateTime.getValue())!=0)
	{
		pOriginal->UpdateTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpdateTime = %s -> %s    [最后修改时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpdateTime = %s    [最后修改时间]\n",buf);
	}
	CancelTime.getString(buf);
	if (compare(CancelTime.getValue(),pOriginal->CancelTime.getValue())!=0)
	{
		pOriginal->CancelTime.getString(bufOriginal);
		fprintf(fp,"\t\tCancelTime = %s -> %s    [撤销时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);
	}
	ActiveUserID.getString(buf);
	if (compare(ActiveUserID.getValue(),pOriginal->ActiveUserID.getValue())!=0)
	{
		pOriginal->ActiveUserID.getString(bufOriginal);
		fprintf(fp,"\t\tActiveUserID = %s -> %s    [最后修改交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActiveUserID = %s    [最后修改交易用户代码]\n",buf);
	}
	Priority.getString(buf);
	if (compare(Priority.getValue(),pOriginal->Priority.getValue())!=0)
	{
		pOriginal->Priority.getString(bufOriginal);
		fprintf(fp,"\t\tPriority = %s -> %s    [优先权]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);
	}
	TimeSortID.getString(buf);
	if (compare(TimeSortID.getValue(),pOriginal->TimeSortID.getValue())!=0)
	{
		pOriginal->TimeSortID.getString(bufOriginal);
		fprintf(fp,"\t\tTimeSortID = %s -> %s    [按时间排队的序号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTimeSortID = %s    [按时间排队的序号]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	Tradable.getString(buf);
	if (compare(Tradable.getValue(),pOriginal->Tradable.getValue())!=0)
	{
		pOriginal->Tradable.getString(bufOriginal);
		fprintf(fp,"\t\tTradable = %s -> %s    [是否可以参加交易]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);
	}
	ImplySortID.getString(buf);
	if (compare(ImplySortID.getValue(),pOriginal->ImplySortID.getValue())!=0)
	{
		pOriginal->ImplySortID.getString(bufOriginal);
		fprintf(fp,"\t\tImplySortID = %s -> %s    [隐式推导时的次序]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tImplySortID = %s    [隐式推导时的次序]\n",buf);
	}
	TID.getString(buf);
	if (compare(TID.getValue(),pOriginal->TID.getValue())!=0)
	{
		pOriginal->TID.getString(bufOriginal);
		fprintf(fp,"\t\tTID = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	OrderPriceType.getString(buf);
	fprintf(fp,",OrderPriceType,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	CombOffsetFlag.getString(buf);
	fprintf(fp,",CombOffsetFlag,%s",buf);	
	CombHedgeFlag.getString(buf);
	fprintf(fp,",CombHedgeFlag,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,",VolumeTotalOriginal,%s",buf);	
	TimeCondition.getString(buf);
	fprintf(fp,",TimeCondition,%s",buf);	
	GTDDate.getString(buf);
	fprintf(fp,",GTDDate,%s",buf);	
	VolumeCondition.getString(buf);
	fprintf(fp,",VolumeCondition,%s",buf);	
	MinVolume.getString(buf);
	fprintf(fp,",MinVolume,%s",buf);	
	ContingentCondition.getString(buf);
	fprintf(fp,",ContingentCondition,%s",buf);	
	StopPrice.getString(buf);
	fprintf(fp,",StopPrice,%s",buf);	
	ForceCloseReason.getString(buf);
	fprintf(fp,",ForceCloseReason,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	IsAutoSuspend.getString(buf);
	fprintf(fp,",IsAutoSuspend,%s",buf);	
	OrderSource.getString(buf);
	fprintf(fp,",OrderSource,%s",buf);	
	OrderStatus.getString(buf);
	fprintf(fp,",OrderStatus,%s",buf);	
	OrderType.getString(buf);
	fprintf(fp,",OrderType,%s",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,",VolumeTraded,%s",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,",VolumeTotal,%s",buf);	
	InsertDate.getString(buf);
	fprintf(fp,",InsertDate,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	ActiveTime.getString(buf);
	fprintf(fp,",ActiveTime,%s",buf);	
	SuspendTime.getString(buf);
	fprintf(fp,",SuspendTime,%s",buf);	
	UpdateTime.getString(buf);
	fprintf(fp,",UpdateTime,%s",buf);	
	CancelTime.getString(buf);
	fprintf(fp,",CancelTime,%s",buf);	
	ActiveUserID.getString(buf);
	fprintf(fp,",ActiveUserID,%s",buf);	
	Priority.getString(buf);
	fprintf(fp,",Priority,%s",buf);	
	TimeSortID.getString(buf);
	fprintf(fp,",TimeSortID,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	Tradable.getString(buf);
	fprintf(fp,",Tradable,%s",buf);	
	ImplySortID.getString(buf);
	fprintf(fp,",ImplySortID,%s",buf);	
	TID.getString(buf);
	fprintf(fp,",TID,%s",buf);	
}

void CWriteableOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	OrderPriceType.getString(buf);
	sprintf(p,"OrderPriceType=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	CombOffsetFlag.getString(buf);
	sprintf(p,"CombOffsetFlag=%s,",buf);
	p+=strlen(p);
	CombHedgeFlag.getString(buf);
	sprintf(p,"CombHedgeFlag=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeTotalOriginal.getString(buf);
	sprintf(p,"VolumeTotalOriginal=%s,",buf);
	p+=strlen(p);
	TimeCondition.getString(buf);
	sprintf(p,"TimeCondition=%s,",buf);
	p+=strlen(p);
	GTDDate.getString(buf);
	sprintf(p,"GTDDate=%s,",buf);
	p+=strlen(p);
	VolumeCondition.getString(buf);
	sprintf(p,"VolumeCondition=%s,",buf);
	p+=strlen(p);
	MinVolume.getString(buf);
	sprintf(p,"MinVolume=%s,",buf);
	p+=strlen(p);
	ContingentCondition.getString(buf);
	sprintf(p,"ContingentCondition=%s,",buf);
	p+=strlen(p);
	StopPrice.getString(buf);
	sprintf(p,"StopPrice=%s,",buf);
	p+=strlen(p);
	ForceCloseReason.getString(buf);
	sprintf(p,"ForceCloseReason=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	IsAutoSuspend.getString(buf);
	sprintf(p,"IsAutoSuspend=%s,",buf);
	p+=strlen(p);
	OrderSource.getString(buf);
	sprintf(p,"OrderSource=%s,",buf);
	p+=strlen(p);
	OrderStatus.getString(buf);
	sprintf(p,"OrderStatus=%s,",buf);
	p+=strlen(p);
	OrderType.getString(buf);
	sprintf(p,"OrderType=%s,",buf);
	p+=strlen(p);
	VolumeTraded.getString(buf);
	sprintf(p,"VolumeTraded=%s,",buf);
	p+=strlen(p);
	VolumeTotal.getString(buf);
	sprintf(p,"VolumeTotal=%s,",buf);
	p+=strlen(p);
	InsertDate.getString(buf);
	sprintf(p,"InsertDate=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	ActiveTime.getString(buf);
	sprintf(p,"ActiveTime=%s,",buf);
	p+=strlen(p);
	SuspendTime.getString(buf);
	sprintf(p,"SuspendTime=%s,",buf);
	p+=strlen(p);
	UpdateTime.getString(buf);
	sprintf(p,"UpdateTime=%s,",buf);
	p+=strlen(p);
	CancelTime.getString(buf);
	sprintf(p,"CancelTime=%s,",buf);
	p+=strlen(p);
	ActiveUserID.getString(buf);
	sprintf(p,"ActiveUserID=%s,",buf);
	p+=strlen(p);
	Priority.getString(buf);
	sprintf(p,"Priority=%s,",buf);
	p+=strlen(p);
	TimeSortID.getString(buf);
	sprintf(p,"TimeSortID=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	Tradable.getString(buf);
	sprintf(p,"Tradable=%s,",buf);
	p+=strlen(p);
	ImplySortID.getString(buf);
	sprintf(p,"ImplySortID=%s,",buf);
	p+=strlen(p);
	TID.getString(buf);
	sprintf(p,"TID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"COrder");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	OrderPriceType.getString(buf);
	pLogger->output(indent+1,0,"OrderPriceType=%s 报单价格条件",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	CombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"CombOffsetFlag=%s 组合开平标志",buf);
	CombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"CombHedgeFlag=%s 组合投机套保标志",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeTotalOriginal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotalOriginal=%s 数量",buf);
	TimeCondition.getString(buf);
	pLogger->output(indent+1,0,"TimeCondition=%s 有效期类型",buf);
	GTDDate.getString(buf);
	pLogger->output(indent+1,0,"GTDDate=%s GTD日期",buf);
	VolumeCondition.getString(buf);
	pLogger->output(indent+1,0,"VolumeCondition=%s 成交量类型",buf);
	MinVolume.getString(buf);
	pLogger->output(indent+1,0,"MinVolume=%s 最小成交量",buf);
	ContingentCondition.getString(buf);
	pLogger->output(indent+1,0,"ContingentCondition=%s 触发条件",buf);
	StopPrice.getString(buf);
	pLogger->output(indent+1,0,"StopPrice=%s 止损价",buf);
	ForceCloseReason.getString(buf);
	pLogger->output(indent+1,0,"ForceCloseReason=%s 强平原因",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	IsAutoSuspend.getString(buf);
	pLogger->output(indent+1,0,"IsAutoSuspend=%s 自动挂起标志",buf);
	OrderSource.getString(buf);
	pLogger->output(indent+1,0,"OrderSource=%s 报单来源",buf);
	OrderStatus.getString(buf);
	pLogger->output(indent+1,0,"OrderStatus=%s 报单状态",buf);
	OrderType.getString(buf);
	pLogger->output(indent+1,0,"OrderType=%s 报单类型",buf);
	VolumeTraded.getString(buf);
	pLogger->output(indent+1,0,"VolumeTraded=%s 今成交数量",buf);
	VolumeTotal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotal=%s 剩余数量",buf);
	InsertDate.getString(buf);
	pLogger->output(indent+1,0,"InsertDate=%s 报单日期",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	ActiveTime.getString(buf);
	pLogger->output(indent+1,0,"ActiveTime=%s 激活时间",buf);
	SuspendTime.getString(buf);
	pLogger->output(indent+1,0,"SuspendTime=%s 挂起时间",buf);
	UpdateTime.getString(buf);
	pLogger->output(indent+1,0,"UpdateTime=%s 最后修改时间",buf);
	CancelTime.getString(buf);
	pLogger->output(indent+1,0,"CancelTime=%s 撤销时间",buf);
	ActiveUserID.getString(buf);
	pLogger->output(indent+1,0,"ActiveUserID=%s 最后修改交易用户代码",buf);
	Priority.getString(buf);
	pLogger->output(indent+1,0,"Priority=%s 优先权",buf);
	TimeSortID.getString(buf);
	pLogger->output(indent+1,0,"TimeSortID=%s 按时间排队的序号",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	Tradable.getString(buf);
	pLogger->output(indent+1,0,"Tradable=%s 是否可以参加交易",buf);
	ImplySortID.getString(buf);
	pLogger->output(indent+1,0,"ImplySortID=%s 隐式推导时的次序",buf);
	TID.getString(buf);
	pLogger->output(indent+1,0,"TID=%s 序列号",buf);
	pLogger->output(indent,0,"}");
}

COrderIterator::~COrderIterator(void)
{
}


void COrderIterator::dump(FILE *output)
{
	COrder *pOrder;
	
	while ((pOrder=next())!=NULL)
	{
		pOrder->dump(output);
	}
}



void CWriteableCombOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,CombOrderSysID,ParticipantID,ClientID,UserID,LimitPrice,VolumeTotalOriginal,CombOrderLocalID,BusinessUnit,InstrumentID1,Direction1,LegMultiple1,OffsetFlag1,HedgeFlag1,InstrumentID2,Direction2,LegMultiple2,OffsetFlag2,HedgeFlag2,InstrumentID3,Direction3,LegMultiple3,OffsetFlag3,HedgeFlag3,InstrumentID4,Direction4,LegMultiple4,OffsetFlag4,HedgeFlag4,OrderSource,VolumeTraded,VolumeTotal,InsertDate,InsertTime,ClearingPartID\n");
}
	
void CWriteableCombOrder::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	CombOrderSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	LimitPrice.clear();
	VolumeTotalOriginal.clear();
	CombOrderLocalID.clear();
	BusinessUnit.clear();
	InstrumentID1.clear();
	Direction1.clear();
	LegMultiple1.clear();
	OffsetFlag1.clear();
	HedgeFlag1.clear();
	InstrumentID2.clear();
	Direction2.clear();
	LegMultiple2.clear();
	OffsetFlag2.clear();
	HedgeFlag2.clear();
	InstrumentID3.clear();
	Direction3.clear();
	LegMultiple3.clear();
	OffsetFlag3.clear();
	HedgeFlag3.clear();
	InstrumentID4.clear();
	Direction4.clear();
	LegMultiple4.clear();
	OffsetFlag4.clear();
	HedgeFlag4.clear();
	OrderSource.clear();
	VolumeTraded.clear();
	VolumeTotal.clear();
	InsertDate.clear();
	InsertTime.clear();
	ClearingPartID.clear();
	pPartClient=NULL;
	pInstrument1=NULL;
	pInstrument2=NULL;
	pInstrument3=NULL;
	pInstrument4=NULL;
}

int CWriteableCombOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCombOrder),input)!=sizeof(CWriteableCombOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableCombOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOrderSysID=token;
		}
		else
		{
			CombOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotalOriginal=token;
		}
		else
		{
			VolumeTotalOriginal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombOrderLocalID=token;
		}
		else
		{
			CombOrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID1=token;
		}
		else
		{
			InstrumentID1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction1=token;
		}
		else
		{
			Direction1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegMultiple1=token;
		}
		else
		{
			LegMultiple1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag1=token;
		}
		else
		{
			OffsetFlag1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag1=token;
		}
		else
		{
			HedgeFlag1="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID2=token;
		}
		else
		{
			InstrumentID2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction2=token;
		}
		else
		{
			Direction2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegMultiple2=token;
		}
		else
		{
			LegMultiple2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag2=token;
		}
		else
		{
			OffsetFlag2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag2=token;
		}
		else
		{
			HedgeFlag2="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID3=token;
		}
		else
		{
			InstrumentID3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction3=token;
		}
		else
		{
			Direction3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegMultiple3=token;
		}
		else
		{
			LegMultiple3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag3=token;
		}
		else
		{
			OffsetFlag3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag3=token;
		}
		else
		{
			HedgeFlag3="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID4=token;
		}
		else
		{
			InstrumentID4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction4=token;
		}
		else
		{
			Direction4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LegMultiple4=token;
		}
		else
		{
			LegMultiple4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag4=token;
		}
		else
		{
			OffsetFlag4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag4=token;
		}
		else
		{
			HedgeFlag4="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSource=token;
		}
		else
		{
			OrderSource="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTraded=token;
		}
		else
		{
			VolumeTraded="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeTotal=token;
		}
		else
		{
			VolumeTotal="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertDate=token;
		}
		else
		{
			InsertDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"CombOrderSysID"))
			{
				CombOrderSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeTotalOriginal"))
			{
				VolumeTotalOriginal=token;
			}
			else if (!strcmp(fieldName,"CombOrderLocalID"))
			{
				CombOrderLocalID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"InstrumentID1"))
			{
				InstrumentID1=token;
			}
			else if (!strcmp(fieldName,"Direction1"))
			{
				Direction1=token;
			}
			else if (!strcmp(fieldName,"LegMultiple1"))
			{
				LegMultiple1=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag1"))
			{
				OffsetFlag1=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag1"))
			{
				HedgeFlag1=token;
			}
			else if (!strcmp(fieldName,"InstrumentID2"))
			{
				InstrumentID2=token;
			}
			else if (!strcmp(fieldName,"Direction2"))
			{
				Direction2=token;
			}
			else if (!strcmp(fieldName,"LegMultiple2"))
			{
				LegMultiple2=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag2"))
			{
				OffsetFlag2=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag2"))
			{
				HedgeFlag2=token;
			}
			else if (!strcmp(fieldName,"InstrumentID3"))
			{
				InstrumentID3=token;
			}
			else if (!strcmp(fieldName,"Direction3"))
			{
				Direction3=token;
			}
			else if (!strcmp(fieldName,"LegMultiple3"))
			{
				LegMultiple3=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag3"))
			{
				OffsetFlag3=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag3"))
			{
				HedgeFlag3=token;
			}
			else if (!strcmp(fieldName,"InstrumentID4"))
			{
				InstrumentID4=token;
			}
			else if (!strcmp(fieldName,"Direction4"))
			{
				Direction4=token;
			}
			else if (!strcmp(fieldName,"LegMultiple4"))
			{
				LegMultiple4=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag4"))
			{
				OffsetFlag4=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag4"))
			{
				HedgeFlag4=token;
			}
			else if (!strcmp(fieldName,"OrderSource"))
			{
				OrderSource=token;
			}
			else if (!strcmp(fieldName,"VolumeTraded"))
			{
				VolumeTraded=token;
			}
			else if (!strcmp(fieldName,"VolumeTotal"))
			{
				VolumeTotal=token;
			}
			else if (!strcmp(fieldName,"InsertDate"))
			{
				InsertDate=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCombOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCombOrder),output)!=sizeof(CWriteableCombOrder))
		return 0;
	else
		return 1;
}

int CWriteableCombOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotalOriginal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombOrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegMultiple1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag1.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegMultiple2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag2.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegMultiple3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag3.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LegMultiple4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag4.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTraded.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeTotal.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCombOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCombOrder%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	CombOrderSysID.getString(buf);
	fprintf(fp,"\t\tCombOrderSysID = %s    [组合报单编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);	
	CombOrderLocalID.getString(buf);
	fprintf(fp,"\t\tCombOrderLocalID = %s    [本地报单编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	InstrumentID1.getString(buf);
	fprintf(fp,"\t\tInstrumentID1 = %s    [合约代码1]\n",buf);	
	Direction1.getString(buf);
	fprintf(fp,"\t\tDirection1 = %s    [买卖方向1]\n",buf);	
	LegMultiple1.getString(buf);
	fprintf(fp,"\t\tLegMultiple1 = %s    [分腿乘数1]\n",buf);	
	OffsetFlag1.getString(buf);
	fprintf(fp,"\t\tOffsetFlag1 = %s    [开平标志1]\n",buf);	
	HedgeFlag1.getString(buf);
	fprintf(fp,"\t\tHedgeFlag1 = %s    [投机套保标志1]\n",buf);	
	InstrumentID2.getString(buf);
	fprintf(fp,"\t\tInstrumentID2 = %s    [合约代码2]\n",buf);	
	Direction2.getString(buf);
	fprintf(fp,"\t\tDirection2 = %s    [买卖方向2]\n",buf);	
	LegMultiple2.getString(buf);
	fprintf(fp,"\t\tLegMultiple2 = %s    [分腿乘数2]\n",buf);	
	OffsetFlag2.getString(buf);
	fprintf(fp,"\t\tOffsetFlag2 = %s    [开平标志2]\n",buf);	
	HedgeFlag2.getString(buf);
	fprintf(fp,"\t\tHedgeFlag2 = %s    [投机套保标志2]\n",buf);	
	InstrumentID3.getString(buf);
	fprintf(fp,"\t\tInstrumentID3 = %s    [合约代码3]\n",buf);	
	Direction3.getString(buf);
	fprintf(fp,"\t\tDirection3 = %s    [买卖方向3]\n",buf);	
	LegMultiple3.getString(buf);
	fprintf(fp,"\t\tLegMultiple3 = %s    [分腿乘数3]\n",buf);	
	OffsetFlag3.getString(buf);
	fprintf(fp,"\t\tOffsetFlag3 = %s    [开平标志3]\n",buf);	
	HedgeFlag3.getString(buf);
	fprintf(fp,"\t\tHedgeFlag3 = %s    [投机套保标志3]\n",buf);	
	InstrumentID4.getString(buf);
	fprintf(fp,"\t\tInstrumentID4 = %s    [合约代码4]\n",buf);	
	Direction4.getString(buf);
	fprintf(fp,"\t\tDirection4 = %s    [买卖方向4]\n",buf);	
	LegMultiple4.getString(buf);
	fprintf(fp,"\t\tLegMultiple4 = %s    [分腿乘数4]\n",buf);	
	OffsetFlag4.getString(buf);
	fprintf(fp,"\t\tOffsetFlag4 = %s    [开平标志4]\n",buf);	
	HedgeFlag4.getString(buf);
	fprintf(fp,"\t\tHedgeFlag4 = %s    [投机套保标志4]\n",buf);	
	OrderSource.getString(buf);
	fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);	
	InsertDate.getString(buf);
	fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCombOrder::dumpDiff(FILE *fp, const CWriteableCombOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCombOrder = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	CombOrderSysID.getString(buf);
	if (compare(CombOrderSysID.getValue(),pOriginal->CombOrderSysID.getValue())!=0)
	{
		pOriginal->CombOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tCombOrderSysID = %s -> %s    [组合报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOrderSysID = %s    [组合报单编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeTotalOriginal.getString(buf);
	if (compare(VolumeTotalOriginal.getValue(),pOriginal->VolumeTotalOriginal.getValue())!=0)
	{
		pOriginal->VolumeTotalOriginal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotalOriginal = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotalOriginal = %s    [数量]\n",buf);
	}
	CombOrderLocalID.getString(buf);
	if (compare(CombOrderLocalID.getValue(),pOriginal->CombOrderLocalID.getValue())!=0)
	{
		pOriginal->CombOrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tCombOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	InstrumentID1.getString(buf);
	if (compare(InstrumentID1.getValue(),pOriginal->InstrumentID1.getValue())!=0)
	{
		pOriginal->InstrumentID1.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID1 = %s -> %s    [合约代码1]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID1 = %s    [合约代码1]\n",buf);
	}
	Direction1.getString(buf);
	if (compare(Direction1.getValue(),pOriginal->Direction1.getValue())!=0)
	{
		pOriginal->Direction1.getString(bufOriginal);
		fprintf(fp,"\t\tDirection1 = %s -> %s    [买卖方向1]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection1 = %s    [买卖方向1]\n",buf);
	}
	LegMultiple1.getString(buf);
	if (compare(LegMultiple1.getValue(),pOriginal->LegMultiple1.getValue())!=0)
	{
		pOriginal->LegMultiple1.getString(bufOriginal);
		fprintf(fp,"\t\tLegMultiple1 = %s -> %s    [分腿乘数1]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegMultiple1 = %s    [分腿乘数1]\n",buf);
	}
	OffsetFlag1.getString(buf);
	if (compare(OffsetFlag1.getValue(),pOriginal->OffsetFlag1.getValue())!=0)
	{
		pOriginal->OffsetFlag1.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag1 = %s -> %s    [开平标志1]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag1 = %s    [开平标志1]\n",buf);
	}
	HedgeFlag1.getString(buf);
	if (compare(HedgeFlag1.getValue(),pOriginal->HedgeFlag1.getValue())!=0)
	{
		pOriginal->HedgeFlag1.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag1 = %s -> %s    [投机套保标志1]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag1 = %s    [投机套保标志1]\n",buf);
	}
	InstrumentID2.getString(buf);
	if (compare(InstrumentID2.getValue(),pOriginal->InstrumentID2.getValue())!=0)
	{
		pOriginal->InstrumentID2.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID2 = %s -> %s    [合约代码2]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID2 = %s    [合约代码2]\n",buf);
	}
	Direction2.getString(buf);
	if (compare(Direction2.getValue(),pOriginal->Direction2.getValue())!=0)
	{
		pOriginal->Direction2.getString(bufOriginal);
		fprintf(fp,"\t\tDirection2 = %s -> %s    [买卖方向2]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection2 = %s    [买卖方向2]\n",buf);
	}
	LegMultiple2.getString(buf);
	if (compare(LegMultiple2.getValue(),pOriginal->LegMultiple2.getValue())!=0)
	{
		pOriginal->LegMultiple2.getString(bufOriginal);
		fprintf(fp,"\t\tLegMultiple2 = %s -> %s    [分腿乘数2]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegMultiple2 = %s    [分腿乘数2]\n",buf);
	}
	OffsetFlag2.getString(buf);
	if (compare(OffsetFlag2.getValue(),pOriginal->OffsetFlag2.getValue())!=0)
	{
		pOriginal->OffsetFlag2.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag2 = %s -> %s    [开平标志2]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag2 = %s    [开平标志2]\n",buf);
	}
	HedgeFlag2.getString(buf);
	if (compare(HedgeFlag2.getValue(),pOriginal->HedgeFlag2.getValue())!=0)
	{
		pOriginal->HedgeFlag2.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag2 = %s -> %s    [投机套保标志2]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag2 = %s    [投机套保标志2]\n",buf);
	}
	InstrumentID3.getString(buf);
	if (compare(InstrumentID3.getValue(),pOriginal->InstrumentID3.getValue())!=0)
	{
		pOriginal->InstrumentID3.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID3 = %s -> %s    [合约代码3]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID3 = %s    [合约代码3]\n",buf);
	}
	Direction3.getString(buf);
	if (compare(Direction3.getValue(),pOriginal->Direction3.getValue())!=0)
	{
		pOriginal->Direction3.getString(bufOriginal);
		fprintf(fp,"\t\tDirection3 = %s -> %s    [买卖方向3]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection3 = %s    [买卖方向3]\n",buf);
	}
	LegMultiple3.getString(buf);
	if (compare(LegMultiple3.getValue(),pOriginal->LegMultiple3.getValue())!=0)
	{
		pOriginal->LegMultiple3.getString(bufOriginal);
		fprintf(fp,"\t\tLegMultiple3 = %s -> %s    [分腿乘数3]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegMultiple3 = %s    [分腿乘数3]\n",buf);
	}
	OffsetFlag3.getString(buf);
	if (compare(OffsetFlag3.getValue(),pOriginal->OffsetFlag3.getValue())!=0)
	{
		pOriginal->OffsetFlag3.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag3 = %s -> %s    [开平标志3]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag3 = %s    [开平标志3]\n",buf);
	}
	HedgeFlag3.getString(buf);
	if (compare(HedgeFlag3.getValue(),pOriginal->HedgeFlag3.getValue())!=0)
	{
		pOriginal->HedgeFlag3.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag3 = %s -> %s    [投机套保标志3]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag3 = %s    [投机套保标志3]\n",buf);
	}
	InstrumentID4.getString(buf);
	if (compare(InstrumentID4.getValue(),pOriginal->InstrumentID4.getValue())!=0)
	{
		pOriginal->InstrumentID4.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID4 = %s -> %s    [合约代码4]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID4 = %s    [合约代码4]\n",buf);
	}
	Direction4.getString(buf);
	if (compare(Direction4.getValue(),pOriginal->Direction4.getValue())!=0)
	{
		pOriginal->Direction4.getString(bufOriginal);
		fprintf(fp,"\t\tDirection4 = %s -> %s    [买卖方向4]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection4 = %s    [买卖方向4]\n",buf);
	}
	LegMultiple4.getString(buf);
	if (compare(LegMultiple4.getValue(),pOriginal->LegMultiple4.getValue())!=0)
	{
		pOriginal->LegMultiple4.getString(bufOriginal);
		fprintf(fp,"\t\tLegMultiple4 = %s -> %s    [分腿乘数4]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLegMultiple4 = %s    [分腿乘数4]\n",buf);
	}
	OffsetFlag4.getString(buf);
	if (compare(OffsetFlag4.getValue(),pOriginal->OffsetFlag4.getValue())!=0)
	{
		pOriginal->OffsetFlag4.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag4 = %s -> %s    [开平标志4]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag4 = %s    [开平标志4]\n",buf);
	}
	HedgeFlag4.getString(buf);
	if (compare(HedgeFlag4.getValue(),pOriginal->HedgeFlag4.getValue())!=0)
	{
		pOriginal->HedgeFlag4.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag4 = %s -> %s    [投机套保标志4]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag4 = %s    [投机套保标志4]\n",buf);
	}
	OrderSource.getString(buf);
	if (compare(OrderSource.getValue(),pOriginal->OrderSource.getValue())!=0)
	{
		pOriginal->OrderSource.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSource = %s -> %s    [报单来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSource = %s    [报单来源]\n",buf);
	}
	VolumeTraded.getString(buf);
	if (compare(VolumeTraded.getValue(),pOriginal->VolumeTraded.getValue())!=0)
	{
		pOriginal->VolumeTraded.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTraded = %s -> %s    [今成交数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTraded = %s    [今成交数量]\n",buf);
	}
	VolumeTotal.getString(buf);
	if (compare(VolumeTotal.getValue(),pOriginal->VolumeTotal.getValue())!=0)
	{
		pOriginal->VolumeTotal.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeTotal = %s -> %s    [剩余数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeTotal = %s    [剩余数量]\n",buf);
	}
	InsertDate.getString(buf);
	if (compare(InsertDate.getValue(),pOriginal->InsertDate.getValue())!=0)
	{
		pOriginal->InsertDate.getString(bufOriginal);
		fprintf(fp,"\t\tInsertDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCombOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	CombOrderSysID.getString(buf);
	fprintf(fp,",CombOrderSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeTotalOriginal.getString(buf);
	fprintf(fp,",VolumeTotalOriginal,%s",buf);	
	CombOrderLocalID.getString(buf);
	fprintf(fp,",CombOrderLocalID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	InstrumentID1.getString(buf);
	fprintf(fp,",InstrumentID1,%s",buf);	
	Direction1.getString(buf);
	fprintf(fp,",Direction1,%s",buf);	
	LegMultiple1.getString(buf);
	fprintf(fp,",LegMultiple1,%s",buf);	
	OffsetFlag1.getString(buf);
	fprintf(fp,",OffsetFlag1,%s",buf);	
	HedgeFlag1.getString(buf);
	fprintf(fp,",HedgeFlag1,%s",buf);	
	InstrumentID2.getString(buf);
	fprintf(fp,",InstrumentID2,%s",buf);	
	Direction2.getString(buf);
	fprintf(fp,",Direction2,%s",buf);	
	LegMultiple2.getString(buf);
	fprintf(fp,",LegMultiple2,%s",buf);	
	OffsetFlag2.getString(buf);
	fprintf(fp,",OffsetFlag2,%s",buf);	
	HedgeFlag2.getString(buf);
	fprintf(fp,",HedgeFlag2,%s",buf);	
	InstrumentID3.getString(buf);
	fprintf(fp,",InstrumentID3,%s",buf);	
	Direction3.getString(buf);
	fprintf(fp,",Direction3,%s",buf);	
	LegMultiple3.getString(buf);
	fprintf(fp,",LegMultiple3,%s",buf);	
	OffsetFlag3.getString(buf);
	fprintf(fp,",OffsetFlag3,%s",buf);	
	HedgeFlag3.getString(buf);
	fprintf(fp,",HedgeFlag3,%s",buf);	
	InstrumentID4.getString(buf);
	fprintf(fp,",InstrumentID4,%s",buf);	
	Direction4.getString(buf);
	fprintf(fp,",Direction4,%s",buf);	
	LegMultiple4.getString(buf);
	fprintf(fp,",LegMultiple4,%s",buf);	
	OffsetFlag4.getString(buf);
	fprintf(fp,",OffsetFlag4,%s",buf);	
	HedgeFlag4.getString(buf);
	fprintf(fp,",HedgeFlag4,%s",buf);	
	OrderSource.getString(buf);
	fprintf(fp,",OrderSource,%s",buf);	
	VolumeTraded.getString(buf);
	fprintf(fp,",VolumeTraded,%s",buf);	
	VolumeTotal.getString(buf);
	fprintf(fp,",VolumeTotal,%s",buf);	
	InsertDate.getString(buf);
	fprintf(fp,",InsertDate,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
}

void CWriteableCombOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	CombOrderSysID.getString(buf);
	sprintf(p,"CombOrderSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeTotalOriginal.getString(buf);
	sprintf(p,"VolumeTotalOriginal=%s,",buf);
	p+=strlen(p);
	CombOrderLocalID.getString(buf);
	sprintf(p,"CombOrderLocalID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	InstrumentID1.getString(buf);
	sprintf(p,"InstrumentID1=%s,",buf);
	p+=strlen(p);
	Direction1.getString(buf);
	sprintf(p,"Direction1=%s,",buf);
	p+=strlen(p);
	LegMultiple1.getString(buf);
	sprintf(p,"LegMultiple1=%s,",buf);
	p+=strlen(p);
	OffsetFlag1.getString(buf);
	sprintf(p,"OffsetFlag1=%s,",buf);
	p+=strlen(p);
	HedgeFlag1.getString(buf);
	sprintf(p,"HedgeFlag1=%s,",buf);
	p+=strlen(p);
	InstrumentID2.getString(buf);
	sprintf(p,"InstrumentID2=%s,",buf);
	p+=strlen(p);
	Direction2.getString(buf);
	sprintf(p,"Direction2=%s,",buf);
	p+=strlen(p);
	LegMultiple2.getString(buf);
	sprintf(p,"LegMultiple2=%s,",buf);
	p+=strlen(p);
	OffsetFlag2.getString(buf);
	sprintf(p,"OffsetFlag2=%s,",buf);
	p+=strlen(p);
	HedgeFlag2.getString(buf);
	sprintf(p,"HedgeFlag2=%s,",buf);
	p+=strlen(p);
	InstrumentID3.getString(buf);
	sprintf(p,"InstrumentID3=%s,",buf);
	p+=strlen(p);
	Direction3.getString(buf);
	sprintf(p,"Direction3=%s,",buf);
	p+=strlen(p);
	LegMultiple3.getString(buf);
	sprintf(p,"LegMultiple3=%s,",buf);
	p+=strlen(p);
	OffsetFlag3.getString(buf);
	sprintf(p,"OffsetFlag3=%s,",buf);
	p+=strlen(p);
	HedgeFlag3.getString(buf);
	sprintf(p,"HedgeFlag3=%s,",buf);
	p+=strlen(p);
	InstrumentID4.getString(buf);
	sprintf(p,"InstrumentID4=%s,",buf);
	p+=strlen(p);
	Direction4.getString(buf);
	sprintf(p,"Direction4=%s,",buf);
	p+=strlen(p);
	LegMultiple4.getString(buf);
	sprintf(p,"LegMultiple4=%s,",buf);
	p+=strlen(p);
	OffsetFlag4.getString(buf);
	sprintf(p,"OffsetFlag4=%s,",buf);
	p+=strlen(p);
	HedgeFlag4.getString(buf);
	sprintf(p,"HedgeFlag4=%s,",buf);
	p+=strlen(p);
	OrderSource.getString(buf);
	sprintf(p,"OrderSource=%s,",buf);
	p+=strlen(p);
	VolumeTraded.getString(buf);
	sprintf(p,"VolumeTraded=%s,",buf);
	p+=strlen(p);
	VolumeTotal.getString(buf);
	sprintf(p,"VolumeTotal=%s,",buf);
	p+=strlen(p);
	InsertDate.getString(buf);
	sprintf(p,"InsertDate=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCombOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCombOrder");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	CombOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"CombOrderSysID=%s 组合报单编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeTotalOriginal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotalOriginal=%s 数量",buf);
	CombOrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"CombOrderLocalID=%s 本地报单编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	InstrumentID1.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID1=%s 合约代码1",buf);
	Direction1.getString(buf);
	pLogger->output(indent+1,0,"Direction1=%s 买卖方向1",buf);
	LegMultiple1.getString(buf);
	pLogger->output(indent+1,0,"LegMultiple1=%s 分腿乘数1",buf);
	OffsetFlag1.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag1=%s 开平标志1",buf);
	HedgeFlag1.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag1=%s 投机套保标志1",buf);
	InstrumentID2.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID2=%s 合约代码2",buf);
	Direction2.getString(buf);
	pLogger->output(indent+1,0,"Direction2=%s 买卖方向2",buf);
	LegMultiple2.getString(buf);
	pLogger->output(indent+1,0,"LegMultiple2=%s 分腿乘数2",buf);
	OffsetFlag2.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag2=%s 开平标志2",buf);
	HedgeFlag2.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag2=%s 投机套保标志2",buf);
	InstrumentID3.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID3=%s 合约代码3",buf);
	Direction3.getString(buf);
	pLogger->output(indent+1,0,"Direction3=%s 买卖方向3",buf);
	LegMultiple3.getString(buf);
	pLogger->output(indent+1,0,"LegMultiple3=%s 分腿乘数3",buf);
	OffsetFlag3.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag3=%s 开平标志3",buf);
	HedgeFlag3.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag3=%s 投机套保标志3",buf);
	InstrumentID4.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID4=%s 合约代码4",buf);
	Direction4.getString(buf);
	pLogger->output(indent+1,0,"Direction4=%s 买卖方向4",buf);
	LegMultiple4.getString(buf);
	pLogger->output(indent+1,0,"LegMultiple4=%s 分腿乘数4",buf);
	OffsetFlag4.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag4=%s 开平标志4",buf);
	HedgeFlag4.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag4=%s 投机套保标志4",buf);
	OrderSource.getString(buf);
	pLogger->output(indent+1,0,"OrderSource=%s 报单来源",buf);
	VolumeTraded.getString(buf);
	pLogger->output(indent+1,0,"VolumeTraded=%s 今成交数量",buf);
	VolumeTotal.getString(buf);
	pLogger->output(indent+1,0,"VolumeTotal=%s 剩余数量",buf);
	InsertDate.getString(buf);
	pLogger->output(indent+1,0,"InsertDate=%s 报单日期",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	pLogger->output(indent,0,"}");
}

CCombOrderIterator::~CCombOrderIterator(void)
{
}


void CCombOrderIterator::dump(FILE *output)
{
	CCombOrder *pCombOrder;
	
	while ((pCombOrder=next())!=NULL)
	{
		pCombOrder->dump(output);
	}
}



void CWriteableOTCOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,OTCOrderSysID,ParticipantID,ClientID,UserID,InstrumentID,Direction,OffsetFlag,HedgeFlag,Price,Volume,OtherParticipantID,OtherClientID,OtherUserID,OtherOffsetFlag,OtherHedgeFlag,OTCOrderLocalID,OTCOrderStatus,InsertTime,CancelTime,ClearingPartID,OtherClearingPartID\n");
}
	
void CWriteableOTCOrder::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	OTCOrderSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	InstrumentID.clear();
	Direction.clear();
	OffsetFlag.clear();
	HedgeFlag.clear();
	Price.clear();
	Volume.clear();
	OtherParticipantID.clear();
	OtherClientID.clear();
	OtherUserID.clear();
	OtherOffsetFlag.clear();
	OtherHedgeFlag.clear();
	OTCOrderLocalID.clear();
	OTCOrderStatus.clear();
	InsertTime.clear();
	CancelTime.clear();
	ClearingPartID.clear();
	OtherClearingPartID.clear();
	pInstrument=NULL;
}

int CWriteableOTCOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableOTCOrder),input)!=sizeof(CWriteableOTCOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableOTCOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OTCOrderSysID=token;
		}
		else
		{
			OTCOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag=token;
		}
		else
		{
			OffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Price=token;
		}
		else
		{
			Price="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherParticipantID=token;
		}
		else
		{
			OtherParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherClientID=token;
		}
		else
		{
			OtherClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherUserID=token;
		}
		else
		{
			OtherUserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherOffsetFlag=token;
		}
		else
		{
			OtherOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherHedgeFlag=token;
		}
		else
		{
			OtherHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OTCOrderLocalID=token;
		}
		else
		{
			OTCOrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OTCOrderStatus=token;
		}
		else
		{
			OTCOrderStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancelTime=token;
		}
		else
		{
			CancelTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OtherClearingPartID=token;
		}
		else
		{
			OtherClearingPartID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"OTCOrderSysID"))
			{
				OTCOrderSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag"))
			{
				OffsetFlag=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"Price"))
			{
				Price=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"OtherParticipantID"))
			{
				OtherParticipantID=token;
			}
			else if (!strcmp(fieldName,"OtherClientID"))
			{
				OtherClientID=token;
			}
			else if (!strcmp(fieldName,"OtherUserID"))
			{
				OtherUserID=token;
			}
			else if (!strcmp(fieldName,"OtherOffsetFlag"))
			{
				OtherOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"OtherHedgeFlag"))
			{
				OtherHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"OTCOrderLocalID"))
			{
				OTCOrderLocalID=token;
			}
			else if (!strcmp(fieldName,"OTCOrderStatus"))
			{
				OTCOrderStatus=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"CancelTime"))
			{
				CancelTime=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"OtherClearingPartID"))
			{
				OtherClearingPartID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableOTCOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableOTCOrder),output)!=sizeof(CWriteableOTCOrder))
		return 0;
	else
		return 1;
}

int CWriteableOTCOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OTCOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Price.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherUserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OTCOrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OTCOrderStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancelTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OtherClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableOTCOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCOTCOrder%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	OTCOrderSysID.getString(buf);
	fprintf(fp,"\t\tOTCOrderSysID = %s    [OTC报单编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	OffsetFlag.getString(buf);
	fprintf(fp,"\t\tOffsetFlag = %s    [开平标志]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	Price.getString(buf);
	fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	OtherParticipantID.getString(buf);
	fprintf(fp,"\t\tOtherParticipantID = %s    [对手方会员代码]\n",buf);	
	OtherClientID.getString(buf);
	fprintf(fp,"\t\tOtherClientID = %s    [对手方客户代码]\n",buf);	
	OtherUserID.getString(buf);
	fprintf(fp,"\t\tOtherUserID = %s    [对手方交易用户代码]\n",buf);	
	OtherOffsetFlag.getString(buf);
	fprintf(fp,"\t\tOtherOffsetFlag = %s    [对手方开平标志]\n",buf);	
	OtherHedgeFlag.getString(buf);
	fprintf(fp,"\t\tOtherHedgeFlag = %s    [对手方套保标志]\n",buf);	
	OTCOrderLocalID.getString(buf);
	fprintf(fp,"\t\tOTCOrderLocalID = %s    [本地OTC报单编号]\n",buf);	
	OTCOrderStatus.getString(buf);
	fprintf(fp,"\t\tOTCOrderStatus = %s    [OTC报单状态]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	CancelTime.getString(buf);
	fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	OtherClearingPartID.getString(buf);
	fprintf(fp,"\t\tOtherClearingPartID = %s    [对手方结算会员编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableOTCOrder::dumpDiff(FILE *fp, const CWriteableOTCOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCOTCOrder = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	OTCOrderSysID.getString(buf);
	if (compare(OTCOrderSysID.getValue(),pOriginal->OTCOrderSysID.getValue())!=0)
	{
		pOriginal->OTCOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOTCOrderSysID = %s -> %s    [OTC报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOTCOrderSysID = %s    [OTC报单编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	OffsetFlag.getString(buf);
	if (compare(OffsetFlag.getValue(),pOriginal->OffsetFlag.getValue())!=0)
	{
		pOriginal->OffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag = %s -> %s    [开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag = %s    [开平标志]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	Price.getString(buf);
	if (compare(Price.getValue(),pOriginal->Price.getValue())!=0)
	{
		pOriginal->Price.getString(bufOriginal);
		fprintf(fp,"\t\tPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	OtherParticipantID.getString(buf);
	if (compare(OtherParticipantID.getValue(),pOriginal->OtherParticipantID.getValue())!=0)
	{
		pOriginal->OtherParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tOtherParticipantID = %s -> %s    [对手方会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherParticipantID = %s    [对手方会员代码]\n",buf);
	}
	OtherClientID.getString(buf);
	if (compare(OtherClientID.getValue(),pOriginal->OtherClientID.getValue())!=0)
	{
		pOriginal->OtherClientID.getString(bufOriginal);
		fprintf(fp,"\t\tOtherClientID = %s -> %s    [对手方客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherClientID = %s    [对手方客户代码]\n",buf);
	}
	OtherUserID.getString(buf);
	if (compare(OtherUserID.getValue(),pOriginal->OtherUserID.getValue())!=0)
	{
		pOriginal->OtherUserID.getString(bufOriginal);
		fprintf(fp,"\t\tOtherUserID = %s -> %s    [对手方交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherUserID = %s    [对手方交易用户代码]\n",buf);
	}
	OtherOffsetFlag.getString(buf);
	if (compare(OtherOffsetFlag.getValue(),pOriginal->OtherOffsetFlag.getValue())!=0)
	{
		pOriginal->OtherOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tOtherOffsetFlag = %s -> %s    [对手方开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherOffsetFlag = %s    [对手方开平标志]\n",buf);
	}
	OtherHedgeFlag.getString(buf);
	if (compare(OtherHedgeFlag.getValue(),pOriginal->OtherHedgeFlag.getValue())!=0)
	{
		pOriginal->OtherHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tOtherHedgeFlag = %s -> %s    [对手方套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherHedgeFlag = %s    [对手方套保标志]\n",buf);
	}
	OTCOrderLocalID.getString(buf);
	if (compare(OTCOrderLocalID.getValue(),pOriginal->OTCOrderLocalID.getValue())!=0)
	{
		pOriginal->OTCOrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOTCOrderLocalID = %s -> %s    [本地OTC报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOTCOrderLocalID = %s    [本地OTC报单编号]\n",buf);
	}
	OTCOrderStatus.getString(buf);
	if (compare(OTCOrderStatus.getValue(),pOriginal->OTCOrderStatus.getValue())!=0)
	{
		pOriginal->OTCOrderStatus.getString(bufOriginal);
		fprintf(fp,"\t\tOTCOrderStatus = %s -> %s    [OTC报单状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOTCOrderStatus = %s    [OTC报单状态]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	CancelTime.getString(buf);
	if (compare(CancelTime.getValue(),pOriginal->CancelTime.getValue())!=0)
	{
		pOriginal->CancelTime.getString(bufOriginal);
		fprintf(fp,"\t\tCancelTime = %s -> %s    [撤销时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	OtherClearingPartID.getString(buf);
	if (compare(OtherClearingPartID.getValue(),pOriginal->OtherClearingPartID.getValue())!=0)
	{
		pOriginal->OtherClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tOtherClearingPartID = %s -> %s    [对手方结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOtherClearingPartID = %s    [对手方结算会员编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableOTCOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	OTCOrderSysID.getString(buf);
	fprintf(fp,",OTCOrderSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	OffsetFlag.getString(buf);
	fprintf(fp,",OffsetFlag,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	Price.getString(buf);
	fprintf(fp,",Price,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	OtherParticipantID.getString(buf);
	fprintf(fp,",OtherParticipantID,%s",buf);	
	OtherClientID.getString(buf);
	fprintf(fp,",OtherClientID,%s",buf);	
	OtherUserID.getString(buf);
	fprintf(fp,",OtherUserID,%s",buf);	
	OtherOffsetFlag.getString(buf);
	fprintf(fp,",OtherOffsetFlag,%s",buf);	
	OtherHedgeFlag.getString(buf);
	fprintf(fp,",OtherHedgeFlag,%s",buf);	
	OTCOrderLocalID.getString(buf);
	fprintf(fp,",OTCOrderLocalID,%s",buf);	
	OTCOrderStatus.getString(buf);
	fprintf(fp,",OTCOrderStatus,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	CancelTime.getString(buf);
	fprintf(fp,",CancelTime,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	OtherClearingPartID.getString(buf);
	fprintf(fp,",OtherClearingPartID,%s",buf);	
}

void CWriteableOTCOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	OTCOrderSysID.getString(buf);
	sprintf(p,"OTCOrderSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	OffsetFlag.getString(buf);
	sprintf(p,"OffsetFlag=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	Price.getString(buf);
	sprintf(p,"Price=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	OtherParticipantID.getString(buf);
	sprintf(p,"OtherParticipantID=%s,",buf);
	p+=strlen(p);
	OtherClientID.getString(buf);
	sprintf(p,"OtherClientID=%s,",buf);
	p+=strlen(p);
	OtherUserID.getString(buf);
	sprintf(p,"OtherUserID=%s,",buf);
	p+=strlen(p);
	OtherOffsetFlag.getString(buf);
	sprintf(p,"OtherOffsetFlag=%s,",buf);
	p+=strlen(p);
	OtherHedgeFlag.getString(buf);
	sprintf(p,"OtherHedgeFlag=%s,",buf);
	p+=strlen(p);
	OTCOrderLocalID.getString(buf);
	sprintf(p,"OTCOrderLocalID=%s,",buf);
	p+=strlen(p);
	OTCOrderStatus.getString(buf);
	sprintf(p,"OTCOrderStatus=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	CancelTime.getString(buf);
	sprintf(p,"CancelTime=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	OtherClearingPartID.getString(buf);
	sprintf(p,"OtherClearingPartID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableOTCOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"COTCOrder");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	OTCOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OTCOrderSysID=%s OTC报单编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	OffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag=%s 开平标志",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	Price.getString(buf);
	pLogger->output(indent+1,0,"Price=%s 价格",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	OtherParticipantID.getString(buf);
	pLogger->output(indent+1,0,"OtherParticipantID=%s 对手方会员代码",buf);
	OtherClientID.getString(buf);
	pLogger->output(indent+1,0,"OtherClientID=%s 对手方客户代码",buf);
	OtherUserID.getString(buf);
	pLogger->output(indent+1,0,"OtherUserID=%s 对手方交易用户代码",buf);
	OtherOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"OtherOffsetFlag=%s 对手方开平标志",buf);
	OtherHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"OtherHedgeFlag=%s 对手方套保标志",buf);
	OTCOrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OTCOrderLocalID=%s 本地OTC报单编号",buf);
	OTCOrderStatus.getString(buf);
	pLogger->output(indent+1,0,"OTCOrderStatus=%s OTC报单状态",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	CancelTime.getString(buf);
	pLogger->output(indent+1,0,"CancelTime=%s 撤销时间",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	OtherClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"OtherClearingPartID=%s 对手方结算会员编号",buf);
	pLogger->output(indent,0,"}");
}

COTCOrderIterator::~COTCOrderIterator(void)
{
}


void COTCOrderIterator::dump(FILE *output)
{
	COTCOrder *pOTCOrder;
	
	while ((pOTCOrder=next())!=NULL)
	{
		pOTCOrder->dump(output);
	}
}



void CWriteableImplyOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"AnchorOrderID,ImplyOrderID,CombInstrumentID,AnchorLegID,ImplyLegID,Direction,Volume,Priority\n");
}
	
void CWriteableImplyOrder::init(void)
{
	AnchorOrderID.clear();
	ImplyOrderID.clear();
	CombInstrumentID.clear();
	AnchorLegID.clear();
	ImplyLegID.clear();
	Direction.clear();
	Volume.clear();
	Priority.clear();
}

int CWriteableImplyOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableImplyOrder),input)!=sizeof(CWriteableImplyOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableImplyOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			AnchorOrderID=token;
		}
		else
		{
			AnchorOrderID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ImplyOrderID=token;
		}
		else
		{
			ImplyOrderID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CombInstrumentID=token;
		}
		else
		{
			CombInstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AnchorLegID=token;
		}
		else
		{
			AnchorLegID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ImplyLegID=token;
		}
		else
		{
			ImplyLegID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Priority=token;
		}
		else
		{
			Priority="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"AnchorOrderID"))
			{
				AnchorOrderID=token;
			}
			else if (!strcmp(fieldName,"ImplyOrderID"))
			{
				ImplyOrderID=token;
			}
			else if (!strcmp(fieldName,"CombInstrumentID"))
			{
				CombInstrumentID=token;
			}
			else if (!strcmp(fieldName,"AnchorLegID"))
			{
				AnchorLegID=token;
			}
			else if (!strcmp(fieldName,"ImplyLegID"))
			{
				ImplyLegID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"Priority"))
			{
				Priority=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableImplyOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableImplyOrder),output)!=sizeof(CWriteableImplyOrder))
		return 0;
	else
		return 1;
}

int CWriteableImplyOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	AnchorOrderID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ImplyOrderID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CombInstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AnchorLegID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ImplyLegID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Priority.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableImplyOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCImplyOrder%s = {\n", index_buf);
	AnchorOrderID.getString(buf);
	fprintf(fp,"\t\tAnchorOrderID = %s    [锚报单号]\n",buf);	
	ImplyOrderID.getString(buf);
	fprintf(fp,"\t\tImplyOrderID = %s    [派生报单号]\n",buf);	
	CombInstrumentID.getString(buf);
	fprintf(fp,"\t\tCombInstrumentID = %s    [组合合约代码]\n",buf);	
	AnchorLegID.getString(buf);
	fprintf(fp,"\t\tAnchorLegID = %s    [锚报单单腿编号]\n",buf);	
	ImplyLegID.getString(buf);
	fprintf(fp,"\t\tImplyLegID = %s    [派生报单单腿编号]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	Priority.getString(buf);
	fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableImplyOrder::dumpDiff(FILE *fp, const CWriteableImplyOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCImplyOrder = {\n");
	AnchorOrderID.getString(buf);
	if (compare(AnchorOrderID.getValue(),pOriginal->AnchorOrderID.getValue())!=0)
	{
		pOriginal->AnchorOrderID.getString(bufOriginal);
		fprintf(fp,"\t\tAnchorOrderID = %s -> %s    [锚报单号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAnchorOrderID = %s    [锚报单号]\n",buf);
	}
	ImplyOrderID.getString(buf);
	if (compare(ImplyOrderID.getValue(),pOriginal->ImplyOrderID.getValue())!=0)
	{
		pOriginal->ImplyOrderID.getString(bufOriginal);
		fprintf(fp,"\t\tImplyOrderID = %s -> %s    [派生报单号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tImplyOrderID = %s    [派生报单号]\n",buf);
	}
	CombInstrumentID.getString(buf);
	if (compare(CombInstrumentID.getValue(),pOriginal->CombInstrumentID.getValue())!=0)
	{
		pOriginal->CombInstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tCombInstrumentID = %s -> %s    [组合合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCombInstrumentID = %s    [组合合约代码]\n",buf);
	}
	AnchorLegID.getString(buf);
	if (compare(AnchorLegID.getValue(),pOriginal->AnchorLegID.getValue())!=0)
	{
		pOriginal->AnchorLegID.getString(bufOriginal);
		fprintf(fp,"\t\tAnchorLegID = %s -> %s    [锚报单单腿编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAnchorLegID = %s    [锚报单单腿编号]\n",buf);
	}
	ImplyLegID.getString(buf);
	if (compare(ImplyLegID.getValue(),pOriginal->ImplyLegID.getValue())!=0)
	{
		pOriginal->ImplyLegID.getString(bufOriginal);
		fprintf(fp,"\t\tImplyLegID = %s -> %s    [派生报单单腿编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tImplyLegID = %s    [派生报单单腿编号]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	Priority.getString(buf);
	if (compare(Priority.getValue(),pOriginal->Priority.getValue())!=0)
	{
		pOriginal->Priority.getString(bufOriginal);
		fprintf(fp,"\t\tPriority = %s -> %s    [优先权]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriority = %s    [优先权]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableImplyOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	AnchorOrderID.getString(buf);
	fprintf(fp,",AnchorOrderID,%s",buf);	
	ImplyOrderID.getString(buf);
	fprintf(fp,",ImplyOrderID,%s",buf);	
	CombInstrumentID.getString(buf);
	fprintf(fp,",CombInstrumentID,%s",buf);	
	AnchorLegID.getString(buf);
	fprintf(fp,",AnchorLegID,%s",buf);	
	ImplyLegID.getString(buf);
	fprintf(fp,",ImplyLegID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	Priority.getString(buf);
	fprintf(fp,",Priority,%s",buf);	
}

void CWriteableImplyOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	AnchorOrderID.getString(buf);
	sprintf(p,"AnchorOrderID=%s,",buf);
	p+=strlen(p);
	ImplyOrderID.getString(buf);
	sprintf(p,"ImplyOrderID=%s,",buf);
	p+=strlen(p);
	CombInstrumentID.getString(buf);
	sprintf(p,"CombInstrumentID=%s,",buf);
	p+=strlen(p);
	AnchorLegID.getString(buf);
	sprintf(p,"AnchorLegID=%s,",buf);
	p+=strlen(p);
	ImplyLegID.getString(buf);
	sprintf(p,"ImplyLegID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	Priority.getString(buf);
	sprintf(p,"Priority=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableImplyOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CImplyOrder");
	pLogger->output(indent,0,"{");
	AnchorOrderID.getString(buf);
	pLogger->output(indent+1,0,"AnchorOrderID=%s 锚报单号",buf);
	ImplyOrderID.getString(buf);
	pLogger->output(indent+1,0,"ImplyOrderID=%s 派生报单号",buf);
	CombInstrumentID.getString(buf);
	pLogger->output(indent+1,0,"CombInstrumentID=%s 组合合约代码",buf);
	AnchorLegID.getString(buf);
	pLogger->output(indent+1,0,"AnchorLegID=%s 锚报单单腿编号",buf);
	ImplyLegID.getString(buf);
	pLogger->output(indent+1,0,"ImplyLegID=%s 派生报单单腿编号",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	Priority.getString(buf);
	pLogger->output(indent+1,0,"Priority=%s 优先权",buf);
	pLogger->output(indent,0,"}");
}

CImplyOrderIterator::~CImplyOrderIterator(void)
{
}


void CImplyOrderIterator::dump(FILE *output)
{
	CImplyOrder *pImplyOrder;
	
	while ((pImplyOrder=next())!=NULL)
	{
		pImplyOrder->dump(output);
	}
}



void CWriteableQuote::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,QuoteSysID,ParticipantID,ClientID,UserID,Volume,InstrumentID,QuoteLocalID,BusinessUnit,BidCombOffsetFlag,BidCombHedgeFlag,BidPrice,AskCombOffsetFlag,AskCombHedgeFlag,AskPrice,InsertTime,CancelTime,TradeTime,BidOrderSysID,AskOrderSysID,ClearingPartID\n");
}
	
void CWriteableQuote::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	QuoteSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	Volume.clear();
	InstrumentID.clear();
	QuoteLocalID.clear();
	BusinessUnit.clear();
	BidCombOffsetFlag.clear();
	BidCombHedgeFlag.clear();
	BidPrice.clear();
	AskCombOffsetFlag.clear();
	AskCombHedgeFlag.clear();
	AskPrice.clear();
	InsertTime.clear();
	CancelTime.clear();
	TradeTime.clear();
	BidOrderSysID.clear();
	AskOrderSysID.clear();
	ClearingPartID.clear();
	pInstrument=NULL;
	pPartClient=NULL;
}

int CWriteableQuote::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableQuote),input)!=sizeof(CWriteableQuote))
		return 0;
	else
		return 1;
}
	
int CWriteableQuote::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QuoteSysID=token;
		}
		else
		{
			QuoteSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QuoteLocalID=token;
		}
		else
		{
			QuoteLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidCombOffsetFlag=token;
		}
		else
		{
			BidCombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidCombHedgeFlag=token;
		}
		else
		{
			BidCombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidPrice=token;
		}
		else
		{
			BidPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskCombOffsetFlag=token;
		}
		else
		{
			AskCombOffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskCombHedgeFlag=token;
		}
		else
		{
			AskCombHedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskPrice=token;
		}
		else
		{
			AskPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancelTime=token;
		}
		else
		{
			CancelTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeTime=token;
		}
		else
		{
			TradeTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BidOrderSysID=token;
		}
		else
		{
			BidOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AskOrderSysID=token;
		}
		else
		{
			AskOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"QuoteSysID"))
			{
				QuoteSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"QuoteLocalID"))
			{
				QuoteLocalID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"BidCombOffsetFlag"))
			{
				BidCombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"BidCombHedgeFlag"))
			{
				BidCombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"BidPrice"))
			{
				BidPrice=token;
			}
			else if (!strcmp(fieldName,"AskCombOffsetFlag"))
			{
				AskCombOffsetFlag=token;
			}
			else if (!strcmp(fieldName,"AskCombHedgeFlag"))
			{
				AskCombHedgeFlag=token;
			}
			else if (!strcmp(fieldName,"AskPrice"))
			{
				AskPrice=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"CancelTime"))
			{
				CancelTime=token;
			}
			else if (!strcmp(fieldName,"TradeTime"))
			{
				TradeTime=token;
			}
			else if (!strcmp(fieldName,"BidOrderSysID"))
			{
				BidOrderSysID=token;
			}
			else if (!strcmp(fieldName,"AskOrderSysID"))
			{
				AskOrderSysID=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableQuote::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableQuote),output)!=sizeof(CWriteableQuote))
		return 0;
	else
		return 1;
}

int CWriteableQuote::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QuoteSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QuoteLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidCombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidCombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskCombOffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskCombHedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancelTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BidOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AskOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableQuote::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCQuote%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	QuoteSysID.getString(buf);
	fprintf(fp,"\t\tQuoteSysID = %s    [报价编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	QuoteLocalID.getString(buf);
	fprintf(fp,"\t\tQuoteLocalID = %s    [本地报价编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	BidCombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tBidCombOffsetFlag = %s    [买方组合开平标志]\n",buf);	
	BidCombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tBidCombHedgeFlag = %s    [买方组合套保标志]\n",buf);	
	BidPrice.getString(buf);
	fprintf(fp,"\t\tBidPrice = %s    [买方价格]\n",buf);	
	AskCombOffsetFlag.getString(buf);
	fprintf(fp,"\t\tAskCombOffsetFlag = %s    [卖方组合开平标志]\n",buf);	
	AskCombHedgeFlag.getString(buf);
	fprintf(fp,"\t\tAskCombHedgeFlag = %s    [卖方组合套保标志]\n",buf);	
	AskPrice.getString(buf);
	fprintf(fp,"\t\tAskPrice = %s    [卖方价格]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	CancelTime.getString(buf);
	fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);	
	TradeTime.getString(buf);
	fprintf(fp,"\t\tTradeTime = %s    [成交时间]\n",buf);	
	BidOrderSysID.getString(buf);
	fprintf(fp,"\t\tBidOrderSysID = %s    [买方报单编号]\n",buf);	
	AskOrderSysID.getString(buf);
	fprintf(fp,"\t\tAskOrderSysID = %s    [卖方报单编号]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableQuote::dumpDiff(FILE *fp, const CWriteableQuote *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCQuote = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	QuoteSysID.getString(buf);
	if (compare(QuoteSysID.getValue(),pOriginal->QuoteSysID.getValue())!=0)
	{
		pOriginal->QuoteSysID.getString(bufOriginal);
		fprintf(fp,"\t\tQuoteSysID = %s -> %s    [报价编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQuoteSysID = %s    [报价编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	QuoteLocalID.getString(buf);
	if (compare(QuoteLocalID.getValue(),pOriginal->QuoteLocalID.getValue())!=0)
	{
		pOriginal->QuoteLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tQuoteLocalID = %s -> %s    [本地报价编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQuoteLocalID = %s    [本地报价编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	BidCombOffsetFlag.getString(buf);
	if (compare(BidCombOffsetFlag.getValue(),pOriginal->BidCombOffsetFlag.getValue())!=0)
	{
		pOriginal->BidCombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tBidCombOffsetFlag = %s -> %s    [买方组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidCombOffsetFlag = %s    [买方组合开平标志]\n",buf);
	}
	BidCombHedgeFlag.getString(buf);
	if (compare(BidCombHedgeFlag.getValue(),pOriginal->BidCombHedgeFlag.getValue())!=0)
	{
		pOriginal->BidCombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tBidCombHedgeFlag = %s -> %s    [买方组合套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidCombHedgeFlag = %s    [买方组合套保标志]\n",buf);
	}
	BidPrice.getString(buf);
	if (compare(BidPrice.getValue(),pOriginal->BidPrice.getValue())!=0)
	{
		pOriginal->BidPrice.getString(bufOriginal);
		fprintf(fp,"\t\tBidPrice = %s -> %s    [买方价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidPrice = %s    [买方价格]\n",buf);
	}
	AskCombOffsetFlag.getString(buf);
	if (compare(AskCombOffsetFlag.getValue(),pOriginal->AskCombOffsetFlag.getValue())!=0)
	{
		pOriginal->AskCombOffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tAskCombOffsetFlag = %s -> %s    [卖方组合开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskCombOffsetFlag = %s    [卖方组合开平标志]\n",buf);
	}
	AskCombHedgeFlag.getString(buf);
	if (compare(AskCombHedgeFlag.getValue(),pOriginal->AskCombHedgeFlag.getValue())!=0)
	{
		pOriginal->AskCombHedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tAskCombHedgeFlag = %s -> %s    [卖方组合套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskCombHedgeFlag = %s    [卖方组合套保标志]\n",buf);
	}
	AskPrice.getString(buf);
	if (compare(AskPrice.getValue(),pOriginal->AskPrice.getValue())!=0)
	{
		pOriginal->AskPrice.getString(bufOriginal);
		fprintf(fp,"\t\tAskPrice = %s -> %s    [卖方价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskPrice = %s    [卖方价格]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	CancelTime.getString(buf);
	if (compare(CancelTime.getValue(),pOriginal->CancelTime.getValue())!=0)
	{
		pOriginal->CancelTime.getString(bufOriginal);
		fprintf(fp,"\t\tCancelTime = %s -> %s    [撤销时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);
	}
	TradeTime.getString(buf);
	if (compare(TradeTime.getValue(),pOriginal->TradeTime.getValue())!=0)
	{
		pOriginal->TradeTime.getString(bufOriginal);
		fprintf(fp,"\t\tTradeTime = %s -> %s    [成交时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeTime = %s    [成交时间]\n",buf);
	}
	BidOrderSysID.getString(buf);
	if (compare(BidOrderSysID.getValue(),pOriginal->BidOrderSysID.getValue())!=0)
	{
		pOriginal->BidOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tBidOrderSysID = %s -> %s    [买方报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBidOrderSysID = %s    [买方报单编号]\n",buf);
	}
	AskOrderSysID.getString(buf);
	if (compare(AskOrderSysID.getValue(),pOriginal->AskOrderSysID.getValue())!=0)
	{
		pOriginal->AskOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tAskOrderSysID = %s -> %s    [卖方报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAskOrderSysID = %s    [卖方报单编号]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableQuote::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	QuoteSysID.getString(buf);
	fprintf(fp,",QuoteSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	QuoteLocalID.getString(buf);
	fprintf(fp,",QuoteLocalID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	BidCombOffsetFlag.getString(buf);
	fprintf(fp,",BidCombOffsetFlag,%s",buf);	
	BidCombHedgeFlag.getString(buf);
	fprintf(fp,",BidCombHedgeFlag,%s",buf);	
	BidPrice.getString(buf);
	fprintf(fp,",BidPrice,%s",buf);	
	AskCombOffsetFlag.getString(buf);
	fprintf(fp,",AskCombOffsetFlag,%s",buf);	
	AskCombHedgeFlag.getString(buf);
	fprintf(fp,",AskCombHedgeFlag,%s",buf);	
	AskPrice.getString(buf);
	fprintf(fp,",AskPrice,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	CancelTime.getString(buf);
	fprintf(fp,",CancelTime,%s",buf);	
	TradeTime.getString(buf);
	fprintf(fp,",TradeTime,%s",buf);	
	BidOrderSysID.getString(buf);
	fprintf(fp,",BidOrderSysID,%s",buf);	
	AskOrderSysID.getString(buf);
	fprintf(fp,",AskOrderSysID,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
}

void CWriteableQuote::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	QuoteSysID.getString(buf);
	sprintf(p,"QuoteSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	QuoteLocalID.getString(buf);
	sprintf(p,"QuoteLocalID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	BidCombOffsetFlag.getString(buf);
	sprintf(p,"BidCombOffsetFlag=%s,",buf);
	p+=strlen(p);
	BidCombHedgeFlag.getString(buf);
	sprintf(p,"BidCombHedgeFlag=%s,",buf);
	p+=strlen(p);
	BidPrice.getString(buf);
	sprintf(p,"BidPrice=%s,",buf);
	p+=strlen(p);
	AskCombOffsetFlag.getString(buf);
	sprintf(p,"AskCombOffsetFlag=%s,",buf);
	p+=strlen(p);
	AskCombHedgeFlag.getString(buf);
	sprintf(p,"AskCombHedgeFlag=%s,",buf);
	p+=strlen(p);
	AskPrice.getString(buf);
	sprintf(p,"AskPrice=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	CancelTime.getString(buf);
	sprintf(p,"CancelTime=%s,",buf);
	p+=strlen(p);
	TradeTime.getString(buf);
	sprintf(p,"TradeTime=%s,",buf);
	p+=strlen(p);
	BidOrderSysID.getString(buf);
	sprintf(p,"BidOrderSysID=%s,",buf);
	p+=strlen(p);
	AskOrderSysID.getString(buf);
	sprintf(p,"AskOrderSysID=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableQuote::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CQuote");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	QuoteSysID.getString(buf);
	pLogger->output(indent+1,0,"QuoteSysID=%s 报价编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	QuoteLocalID.getString(buf);
	pLogger->output(indent+1,0,"QuoteLocalID=%s 本地报价编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	BidCombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"BidCombOffsetFlag=%s 买方组合开平标志",buf);
	BidCombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"BidCombHedgeFlag=%s 买方组合套保标志",buf);
	BidPrice.getString(buf);
	pLogger->output(indent+1,0,"BidPrice=%s 买方价格",buf);
	AskCombOffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"AskCombOffsetFlag=%s 卖方组合开平标志",buf);
	AskCombHedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"AskCombHedgeFlag=%s 卖方组合套保标志",buf);
	AskPrice.getString(buf);
	pLogger->output(indent+1,0,"AskPrice=%s 卖方价格",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	CancelTime.getString(buf);
	pLogger->output(indent+1,0,"CancelTime=%s 撤销时间",buf);
	TradeTime.getString(buf);
	pLogger->output(indent+1,0,"TradeTime=%s 成交时间",buf);
	BidOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"BidOrderSysID=%s 买方报单编号",buf);
	AskOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"AskOrderSysID=%s 卖方报单编号",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	pLogger->output(indent,0,"}");
}

CQuoteIterator::~CQuoteIterator(void)
{
}


void CQuoteIterator::dump(FILE *output)
{
	CQuote *pQuote;
	
	while ((pQuote=next())!=NULL)
	{
		pQuote->dump(output);
	}
}



void CWriteableMBLMarketData::writeCSVHead(FILE *output)
{
	fprintf(output,"InstrumentID,Direction,Price,Volume\n");
}
	
void CWriteableMBLMarketData::init(void)
{
	InstrumentID.clear();
	Direction.clear();
	Price.clear();
	Volume.clear();
}

int CWriteableMBLMarketData::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableMBLMarketData),input)!=sizeof(CWriteableMBLMarketData))
		return 0;
	else
		return 1;
}
	
int CWriteableMBLMarketData::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Price=token;
		}
		else
		{
			Price="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"Price"))
			{
				Price=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableMBLMarketData::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableMBLMarketData),output)!=sizeof(CWriteableMBLMarketData))
		return 0;
	else
		return 1;
}

int CWriteableMBLMarketData::writeCSV(FILE *output) const
{
	char buffer[1025];
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Price.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableMBLMarketData::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCMBLMarketData%s = {\n", index_buf);
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	Price.getString(buf);
	fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableMBLMarketData::dumpDiff(FILE *fp, const CWriteableMBLMarketData *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCMBLMarketData = {\n");
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	Price.getString(buf);
	if (compare(Price.getValue(),pOriginal->Price.getValue())!=0)
	{
		pOriginal->Price.getString(bufOriginal);
		fprintf(fp,"\t\tPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableMBLMarketData::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	Price.getString(buf);
	fprintf(fp,",Price,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
}

void CWriteableMBLMarketData::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	Price.getString(buf);
	sprintf(p,"Price=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableMBLMarketData::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CMBLMarketData");
	pLogger->output(indent,0,"{");
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	Price.getString(buf);
	pLogger->output(indent+1,0,"Price=%s 价格",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	pLogger->output(indent,0,"}");
}

CMBLMarketDataIterator::~CMBLMarketDataIterator(void)
{
}


void CMBLMarketDataIterator::dump(FILE *output)
{
	CMBLMarketData *pMBLMarketData;
	
	while ((pMBLMarketData=next())!=NULL)
	{
		pMBLMarketData->dump(output);
	}
}



void CWriteableTrade::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,TradeID,Direction,OrderSysID,ParticipantID,ClientID,TradingRole,AccountID,InstrumentID,OffsetFlag,HedgeFlag,Price,Volume,TradeTime,TradeType,PriceSource,UserID,OrderLocalID,ClearingPartID,BusinessUnit,TID\n");
}
	
void CWriteableTrade::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	TradeID.clear();
	Direction.clear();
	OrderSysID.clear();
	ParticipantID.clear();
	ClientID.clear();
	TradingRole.clear();
	AccountID.clear();
	InstrumentID.clear();
	OffsetFlag.clear();
	HedgeFlag.clear();
	Price.clear();
	Volume.clear();
	TradeTime.clear();
	TradeType.clear();
	PriceSource.clear();
	UserID.clear();
	OrderLocalID.clear();
	ClearingPartID.clear();
	BusinessUnit.clear();
	TID.clear();
	pInstrument=NULL;
	pPartClient=NULL;
}

int CWriteableTrade::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableTrade),input)!=sizeof(CWriteableTrade))
		return 0;
	else
		return 1;
}
	
int CWriteableTrade::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeID=token;
		}
		else
		{
			TradeID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Direction=token;
		}
		else
		{
			Direction="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingRole=token;
		}
		else
		{
			TradingRole="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AccountID=token;
		}
		else
		{
			AccountID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OffsetFlag=token;
		}
		else
		{
			OffsetFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeFlag=token;
		}
		else
		{
			HedgeFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Price=token;
		}
		else
		{
			Price="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeTime=token;
		}
		else
		{
			TradeTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradeType=token;
		}
		else
		{
			TradeType="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PriceSource=token;
		}
		else
		{
			PriceSource="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TID=token;
		}
		else
		{
			TID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"TradeID"))
			{
				TradeID=token;
			}
			else if (!strcmp(fieldName,"Direction"))
			{
				Direction=token;
			}
			else if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"TradingRole"))
			{
				TradingRole=token;
			}
			else if (!strcmp(fieldName,"AccountID"))
			{
				AccountID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"OffsetFlag"))
			{
				OffsetFlag=token;
			}
			else if (!strcmp(fieldName,"HedgeFlag"))
			{
				HedgeFlag=token;
			}
			else if (!strcmp(fieldName,"Price"))
			{
				Price=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"TradeTime"))
			{
				TradeTime=token;
			}
			else if (!strcmp(fieldName,"TradeType"))
			{
				TradeType=token;
			}
			else if (!strcmp(fieldName,"PriceSource"))
			{
				PriceSource=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"TID"))
			{
				TID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableTrade::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableTrade),output)!=sizeof(CWriteableTrade))
		return 0;
	else
		return 1;
}

int CWriteableTrade::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Direction.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingRole.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AccountID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OffsetFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Price.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradeType.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PriceSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableTrade::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCTrade%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	TradeID.getString(buf);
	fprintf(fp,"\t\tTradeID = %s    [成交编号]\n",buf);	
	Direction.getString(buf);
	fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	TradingRole.getString(buf);
	fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);	
	AccountID.getString(buf);
	fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	OffsetFlag.getString(buf);
	fprintf(fp,"\t\tOffsetFlag = %s    [开平标志]\n",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);	
	Price.getString(buf);
	fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	TradeTime.getString(buf);
	fprintf(fp,"\t\tTradeTime = %s    [成交时间]\n",buf);	
	TradeType.getString(buf);
	fprintf(fp,"\t\tTradeType = %s    [成交类型]\n",buf);	
	PriceSource.getString(buf);
	fprintf(fp,"\t\tPriceSource = %s    [成交价来源]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	TID.getString(buf);
	fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableTrade::dumpDiff(FILE *fp, const CWriteableTrade *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCTrade = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	TradeID.getString(buf);
	if (compare(TradeID.getValue(),pOriginal->TradeID.getValue())!=0)
	{
		pOriginal->TradeID.getString(bufOriginal);
		fprintf(fp,"\t\tTradeID = %s -> %s    [成交编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeID = %s    [成交编号]\n",buf);
	}
	Direction.getString(buf);
	if (compare(Direction.getValue(),pOriginal->Direction.getValue())!=0)
	{
		pOriginal->Direction.getString(bufOriginal);
		fprintf(fp,"\t\tDirection = %s -> %s    [买卖方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDirection = %s    [买卖方向]\n",buf);
	}
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	TradingRole.getString(buf);
	if (compare(TradingRole.getValue(),pOriginal->TradingRole.getValue())!=0)
	{
		pOriginal->TradingRole.getString(bufOriginal);
		fprintf(fp,"\t\tTradingRole = %s -> %s    [交易角色]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingRole = %s    [交易角色]\n",buf);
	}
	AccountID.getString(buf);
	if (compare(AccountID.getValue(),pOriginal->AccountID.getValue())!=0)
	{
		pOriginal->AccountID.getString(bufOriginal);
		fprintf(fp,"\t\tAccountID = %s -> %s    [资金帐号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccountID = %s    [资金帐号]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	OffsetFlag.getString(buf);
	if (compare(OffsetFlag.getValue(),pOriginal->OffsetFlag.getValue())!=0)
	{
		pOriginal->OffsetFlag.getString(bufOriginal);
		fprintf(fp,"\t\tOffsetFlag = %s -> %s    [开平标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOffsetFlag = %s    [开平标志]\n",buf);
	}
	HedgeFlag.getString(buf);
	if (compare(HedgeFlag.getValue(),pOriginal->HedgeFlag.getValue())!=0)
	{
		pOriginal->HedgeFlag.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeFlag = %s -> %s    [投机套保标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeFlag = %s    [投机套保标志]\n",buf);
	}
	Price.getString(buf);
	if (compare(Price.getValue(),pOriginal->Price.getValue())!=0)
	{
		pOriginal->Price.getString(bufOriginal);
		fprintf(fp,"\t\tPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPrice = %s    [价格]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	TradeTime.getString(buf);
	if (compare(TradeTime.getValue(),pOriginal->TradeTime.getValue())!=0)
	{
		pOriginal->TradeTime.getString(bufOriginal);
		fprintf(fp,"\t\tTradeTime = %s -> %s    [成交时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeTime = %s    [成交时间]\n",buf);
	}
	TradeType.getString(buf);
	if (compare(TradeType.getValue(),pOriginal->TradeType.getValue())!=0)
	{
		pOriginal->TradeType.getString(bufOriginal);
		fprintf(fp,"\t\tTradeType = %s -> %s    [成交类型]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradeType = %s    [成交类型]\n",buf);
	}
	PriceSource.getString(buf);
	if (compare(PriceSource.getValue(),pOriginal->PriceSource.getValue())!=0)
	{
		pOriginal->PriceSource.getString(bufOriginal);
		fprintf(fp,"\t\tPriceSource = %s -> %s    [成交价来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPriceSource = %s    [成交价来源]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	TID.getString(buf);
	if (compare(TID.getValue(),pOriginal->TID.getValue())!=0)
	{
		pOriginal->TID.getString(bufOriginal);
		fprintf(fp,"\t\tTID = %s -> %s    [序列号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTID = %s    [序列号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableTrade::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	TradeID.getString(buf);
	fprintf(fp,",TradeID,%s",buf);	
	Direction.getString(buf);
	fprintf(fp,",Direction,%s",buf);	
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	TradingRole.getString(buf);
	fprintf(fp,",TradingRole,%s",buf);	
	AccountID.getString(buf);
	fprintf(fp,",AccountID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	OffsetFlag.getString(buf);
	fprintf(fp,",OffsetFlag,%s",buf);	
	HedgeFlag.getString(buf);
	fprintf(fp,",HedgeFlag,%s",buf);	
	Price.getString(buf);
	fprintf(fp,",Price,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	TradeTime.getString(buf);
	fprintf(fp,",TradeTime,%s",buf);	
	TradeType.getString(buf);
	fprintf(fp,",TradeType,%s",buf);	
	PriceSource.getString(buf);
	fprintf(fp,",PriceSource,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	TID.getString(buf);
	fprintf(fp,",TID,%s",buf);	
}

void CWriteableTrade::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	TradeID.getString(buf);
	sprintf(p,"TradeID=%s,",buf);
	p+=strlen(p);
	Direction.getString(buf);
	sprintf(p,"Direction=%s,",buf);
	p+=strlen(p);
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	TradingRole.getString(buf);
	sprintf(p,"TradingRole=%s,",buf);
	p+=strlen(p);
	AccountID.getString(buf);
	sprintf(p,"AccountID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	OffsetFlag.getString(buf);
	sprintf(p,"OffsetFlag=%s,",buf);
	p+=strlen(p);
	HedgeFlag.getString(buf);
	sprintf(p,"HedgeFlag=%s,",buf);
	p+=strlen(p);
	Price.getString(buf);
	sprintf(p,"Price=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	TradeTime.getString(buf);
	sprintf(p,"TradeTime=%s,",buf);
	p+=strlen(p);
	TradeType.getString(buf);
	sprintf(p,"TradeType=%s,",buf);
	p+=strlen(p);
	PriceSource.getString(buf);
	sprintf(p,"PriceSource=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	TID.getString(buf);
	sprintf(p,"TID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableTrade::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CTrade");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	TradeID.getString(buf);
	pLogger->output(indent+1,0,"TradeID=%s 成交编号",buf);
	Direction.getString(buf);
	pLogger->output(indent+1,0,"Direction=%s 买卖方向",buf);
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	TradingRole.getString(buf);
	pLogger->output(indent+1,0,"TradingRole=%s 交易角色",buf);
	AccountID.getString(buf);
	pLogger->output(indent+1,0,"AccountID=%s 资金帐号",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	OffsetFlag.getString(buf);
	pLogger->output(indent+1,0,"OffsetFlag=%s 开平标志",buf);
	HedgeFlag.getString(buf);
	pLogger->output(indent+1,0,"HedgeFlag=%s 投机套保标志",buf);
	Price.getString(buf);
	pLogger->output(indent+1,0,"Price=%s 价格",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	TradeTime.getString(buf);
	pLogger->output(indent+1,0,"TradeTime=%s 成交时间",buf);
	TradeType.getString(buf);
	pLogger->output(indent+1,0,"TradeType=%s 成交类型",buf);
	PriceSource.getString(buf);
	pLogger->output(indent+1,0,"PriceSource=%s 成交价来源",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	TID.getString(buf);
	pLogger->output(indent+1,0,"TID=%s 序列号",buf);
	pLogger->output(indent,0,"}");
}

CTradeIterator::~CTradeIterator(void)
{
}


void CTradeIterator::dump(FILE *output)
{
	CTrade *pTrade;
	
	while ((pTrade=next())!=NULL)
	{
		pTrade->dump(output);
	}
}



void CWriteableFusePhase::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,FuseStatus,EnterTime,ExpectLeaveTime\n");
}
	
void CWriteableFusePhase::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	FuseStatus.clear();
	EnterTime.clear();
	ExpectLeaveTime.clear();
	pInstrument=NULL;
}

int CWriteableFusePhase::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableFusePhase),input)!=sizeof(CWriteableFusePhase))
		return 0;
	else
		return 1;
}
	
int CWriteableFusePhase::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FuseStatus=token;
		}
		else
		{
			FuseStatus="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			EnterTime=token;
		}
		else
		{
			EnterTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExpectLeaveTime=token;
		}
		else
		{
			ExpectLeaveTime="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"FuseStatus"))
			{
				FuseStatus=token;
			}
			else if (!strcmp(fieldName,"EnterTime"))
			{
				EnterTime=token;
			}
			else if (!strcmp(fieldName,"ExpectLeaveTime"))
			{
				ExpectLeaveTime=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableFusePhase::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableFusePhase),output)!=sizeof(CWriteableFusePhase))
		return 0;
	else
		return 1;
}

int CWriteableFusePhase::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FuseStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	EnterTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExpectLeaveTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableFusePhase::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCFusePhase%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	FuseStatus.getString(buf);
	fprintf(fp,"\t\tFuseStatus = %s    [熔断状态]\n",buf);	
	EnterTime.getString(buf);
	fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);	
	ExpectLeaveTime.getString(buf);
	fprintf(fp,"\t\tExpectLeaveTime = %s    [计划离开时间]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableFusePhase::dumpDiff(FILE *fp, const CWriteableFusePhase *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCFusePhase = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	FuseStatus.getString(buf);
	if (compare(FuseStatus.getValue(),pOriginal->FuseStatus.getValue())!=0)
	{
		pOriginal->FuseStatus.getString(bufOriginal);
		fprintf(fp,"\t\tFuseStatus = %s -> %s    [熔断状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFuseStatus = %s    [熔断状态]\n",buf);
	}
	EnterTime.getString(buf);
	if (compare(EnterTime.getValue(),pOriginal->EnterTime.getValue())!=0)
	{
		pOriginal->EnterTime.getString(bufOriginal);
		fprintf(fp,"\t\tEnterTime = %s -> %s    [进入本状态时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tEnterTime = %s    [进入本状态时间]\n",buf);
	}
	ExpectLeaveTime.getString(buf);
	if (compare(ExpectLeaveTime.getValue(),pOriginal->ExpectLeaveTime.getValue())!=0)
	{
		pOriginal->ExpectLeaveTime.getString(bufOriginal);
		fprintf(fp,"\t\tExpectLeaveTime = %s -> %s    [计划离开时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExpectLeaveTime = %s    [计划离开时间]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableFusePhase::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	FuseStatus.getString(buf);
	fprintf(fp,",FuseStatus,%s",buf);	
	EnterTime.getString(buf);
	fprintf(fp,",EnterTime,%s",buf);	
	ExpectLeaveTime.getString(buf);
	fprintf(fp,",ExpectLeaveTime,%s",buf);	
}

void CWriteableFusePhase::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	FuseStatus.getString(buf);
	sprintf(p,"FuseStatus=%s,",buf);
	p+=strlen(p);
	EnterTime.getString(buf);
	sprintf(p,"EnterTime=%s,",buf);
	p+=strlen(p);
	ExpectLeaveTime.getString(buf);
	sprintf(p,"ExpectLeaveTime=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableFusePhase::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CFusePhase");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	FuseStatus.getString(buf);
	pLogger->output(indent+1,0,"FuseStatus=%s 熔断状态",buf);
	EnterTime.getString(buf);
	pLogger->output(indent+1,0,"EnterTime=%s 进入本状态时间",buf);
	ExpectLeaveTime.getString(buf);
	pLogger->output(indent+1,0,"ExpectLeaveTime=%s 计划离开时间",buf);
	pLogger->output(indent,0,"}");
}

CFusePhaseIterator::~CFusePhaseIterator(void)
{
}


void CFusePhaseIterator::dump(FILE *output)
{
	CFusePhase *pFusePhase;
	
	while ((pFusePhase=next())!=NULL)
	{
		pFusePhase->dump(output);
	}
}



void CWriteableExecOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,InstrumentID,ParticipantID,ClientID,UserID,ExecOrderLocalID,Volume,BusinessUnit,ExecOrderSysID,InsertDate,InsertTime,CancelTime,ExecResult,ClearingPartID\n");
}
	
void CWriteableExecOrder::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	InstrumentID.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	ExecOrderLocalID.clear();
	Volume.clear();
	BusinessUnit.clear();
	ExecOrderSysID.clear();
	InsertDate.clear();
	InsertTime.clear();
	CancelTime.clear();
	ExecResult.clear();
	ClearingPartID.clear();
	pPartClient=NULL;
	pInstrument=NULL;
}

int CWriteableExecOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableExecOrder),input)!=sizeof(CWriteableExecOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableExecOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExecOrderLocalID=token;
		}
		else
		{
			ExecOrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Volume=token;
		}
		else
		{
			Volume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExecOrderSysID=token;
		}
		else
		{
			ExecOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertDate=token;
		}
		else
		{
			InsertDate="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InsertTime=token;
		}
		else
		{
			InsertTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CancelTime=token;
		}
		else
		{
			CancelTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExecResult=token;
		}
		else
		{
			ExecResult="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ExecOrderLocalID"))
			{
				ExecOrderLocalID=token;
			}
			else if (!strcmp(fieldName,"Volume"))
			{
				Volume=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"ExecOrderSysID"))
			{
				ExecOrderSysID=token;
			}
			else if (!strcmp(fieldName,"InsertDate"))
			{
				InsertDate=token;
			}
			else if (!strcmp(fieldName,"InsertTime"))
			{
				InsertTime=token;
			}
			else if (!strcmp(fieldName,"CancelTime"))
			{
				CancelTime=token;
			}
			else if (!strcmp(fieldName,"ExecResult"))
			{
				ExecResult=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableExecOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableExecOrder),output)!=sizeof(CWriteableExecOrder))
		return 0;
	else
		return 1;
}

int CWriteableExecOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExecOrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Volume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExecOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertDate.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InsertTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CancelTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExecResult.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableExecOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCExecOrder%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ExecOrderLocalID.getString(buf);
	fprintf(fp,"\t\tExecOrderLocalID = %s    [本地执行宣告编号]\n",buf);	
	Volume.getString(buf);
	fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	ExecOrderSysID.getString(buf);
	fprintf(fp,"\t\tExecOrderSysID = %s    [执行宣告编号]\n",buf);	
	InsertDate.getString(buf);
	fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);	
	InsertTime.getString(buf);
	fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);	
	CancelTime.getString(buf);
	fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);	
	ExecResult.getString(buf);
	fprintf(fp,"\t\tExecResult = %s    [执行结果]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableExecOrder::dumpDiff(FILE *fp, const CWriteableExecOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCExecOrder = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ExecOrderLocalID.getString(buf);
	if (compare(ExecOrderLocalID.getValue(),pOriginal->ExecOrderLocalID.getValue())!=0)
	{
		pOriginal->ExecOrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tExecOrderLocalID = %s -> %s    [本地执行宣告编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExecOrderLocalID = %s    [本地执行宣告编号]\n",buf);
	}
	Volume.getString(buf);
	if (compare(Volume.getValue(),pOriginal->Volume.getValue())!=0)
	{
		pOriginal->Volume.getString(bufOriginal);
		fprintf(fp,"\t\tVolume = %s -> %s    [数量]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolume = %s    [数量]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	ExecOrderSysID.getString(buf);
	if (compare(ExecOrderSysID.getValue(),pOriginal->ExecOrderSysID.getValue())!=0)
	{
		pOriginal->ExecOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tExecOrderSysID = %s -> %s    [执行宣告编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExecOrderSysID = %s    [执行宣告编号]\n",buf);
	}
	InsertDate.getString(buf);
	if (compare(InsertDate.getValue(),pOriginal->InsertDate.getValue())!=0)
	{
		pOriginal->InsertDate.getString(bufOriginal);
		fprintf(fp,"\t\tInsertDate = %s -> %s    [报单日期]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertDate = %s    [报单日期]\n",buf);
	}
	InsertTime.getString(buf);
	if (compare(InsertTime.getValue(),pOriginal->InsertTime.getValue())!=0)
	{
		pOriginal->InsertTime.getString(bufOriginal);
		fprintf(fp,"\t\tInsertTime = %s -> %s    [插入时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInsertTime = %s    [插入时间]\n",buf);
	}
	CancelTime.getString(buf);
	if (compare(CancelTime.getValue(),pOriginal->CancelTime.getValue())!=0)
	{
		pOriginal->CancelTime.getString(bufOriginal);
		fprintf(fp,"\t\tCancelTime = %s -> %s    [撤销时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCancelTime = %s    [撤销时间]\n",buf);
	}
	ExecResult.getString(buf);
	if (compare(ExecResult.getValue(),pOriginal->ExecResult.getValue())!=0)
	{
		pOriginal->ExecResult.getString(bufOriginal);
		fprintf(fp,"\t\tExecResult = %s -> %s    [执行结果]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExecResult = %s    [执行结果]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableExecOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ExecOrderLocalID.getString(buf);
	fprintf(fp,",ExecOrderLocalID,%s",buf);	
	Volume.getString(buf);
	fprintf(fp,",Volume,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	ExecOrderSysID.getString(buf);
	fprintf(fp,",ExecOrderSysID,%s",buf);	
	InsertDate.getString(buf);
	fprintf(fp,",InsertDate,%s",buf);	
	InsertTime.getString(buf);
	fprintf(fp,",InsertTime,%s",buf);	
	CancelTime.getString(buf);
	fprintf(fp,",CancelTime,%s",buf);	
	ExecResult.getString(buf);
	fprintf(fp,",ExecResult,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
}

void CWriteableExecOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ExecOrderLocalID.getString(buf);
	sprintf(p,"ExecOrderLocalID=%s,",buf);
	p+=strlen(p);
	Volume.getString(buf);
	sprintf(p,"Volume=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	ExecOrderSysID.getString(buf);
	sprintf(p,"ExecOrderSysID=%s,",buf);
	p+=strlen(p);
	InsertDate.getString(buf);
	sprintf(p,"InsertDate=%s,",buf);
	p+=strlen(p);
	InsertTime.getString(buf);
	sprintf(p,"InsertTime=%s,",buf);
	p+=strlen(p);
	CancelTime.getString(buf);
	sprintf(p,"CancelTime=%s,",buf);
	p+=strlen(p);
	ExecResult.getString(buf);
	sprintf(p,"ExecResult=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableExecOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CExecOrder");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ExecOrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"ExecOrderLocalID=%s 本地执行宣告编号",buf);
	Volume.getString(buf);
	pLogger->output(indent+1,0,"Volume=%s 数量",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	ExecOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"ExecOrderSysID=%s 执行宣告编号",buf);
	InsertDate.getString(buf);
	pLogger->output(indent+1,0,"InsertDate=%s 报单日期",buf);
	InsertTime.getString(buf);
	pLogger->output(indent+1,0,"InsertTime=%s 插入时间",buf);
	CancelTime.getString(buf);
	pLogger->output(indent+1,0,"CancelTime=%s 撤销时间",buf);
	ExecResult.getString(buf);
	pLogger->output(indent+1,0,"ExecResult=%s 执行结果",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	pLogger->output(indent,0,"}");
}

CExecOrderIterator::~CExecOrderIterator(void)
{
}


void CExecOrderIterator::dump(FILE *output)
{
	CExecOrder *pExecOrder;
	
	while ((pExecOrder=next())!=NULL)
	{
		pExecOrder->dump(output);
	}
}



void CWriteableUniPressure::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,InstrumentID,UpperPressureStartTime,LowerPressureStartTime\n");
}
	
void CWriteableUniPressure::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	InstrumentID.clear();
	UpperPressureStartTime.clear();
	LowerPressureStartTime.clear();
}

int CWriteableUniPressure::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUniPressure),input)!=sizeof(CWriteableUniPressure))
		return 0;
	else
		return 1;
}
	
int CWriteableUniPressure::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperPressureStartTime=token;
		}
		else
		{
			UpperPressureStartTime="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerPressureStartTime=token;
		}
		else
		{
			LowerPressureStartTime="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"UpperPressureStartTime"))
			{
				UpperPressureStartTime=token;
			}
			else if (!strcmp(fieldName,"LowerPressureStartTime"))
			{
				LowerPressureStartTime=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUniPressure::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUniPressure),output)!=sizeof(CWriteableUniPressure))
		return 0;
	else
		return 1;
}

int CWriteableUniPressure::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperPressureStartTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerPressureStartTime.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUniPressure::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUniPressure%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	UpperPressureStartTime.getString(buf);
	fprintf(fp,"\t\tUpperPressureStartTime = %s    [涨压力开始时间]\n",buf);	
	LowerPressureStartTime.getString(buf);
	fprintf(fp,"\t\tLowerPressureStartTime = %s    [跌压力开始时间]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUniPressure::dumpDiff(FILE *fp, const CWriteableUniPressure *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUniPressure = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	UpperPressureStartTime.getString(buf);
	if (compare(UpperPressureStartTime.getValue(),pOriginal->UpperPressureStartTime.getValue())!=0)
	{
		pOriginal->UpperPressureStartTime.getString(bufOriginal);
		fprintf(fp,"\t\tUpperPressureStartTime = %s -> %s    [涨压力开始时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperPressureStartTime = %s    [涨压力开始时间]\n",buf);
	}
	LowerPressureStartTime.getString(buf);
	if (compare(LowerPressureStartTime.getValue(),pOriginal->LowerPressureStartTime.getValue())!=0)
	{
		pOriginal->LowerPressureStartTime.getString(bufOriginal);
		fprintf(fp,"\t\tLowerPressureStartTime = %s -> %s    [跌压力开始时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerPressureStartTime = %s    [跌压力开始时间]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUniPressure::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	UpperPressureStartTime.getString(buf);
	fprintf(fp,",UpperPressureStartTime,%s",buf);	
	LowerPressureStartTime.getString(buf);
	fprintf(fp,",LowerPressureStartTime,%s",buf);	
}

void CWriteableUniPressure::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	UpperPressureStartTime.getString(buf);
	sprintf(p,"UpperPressureStartTime=%s,",buf);
	p+=strlen(p);
	LowerPressureStartTime.getString(buf);
	sprintf(p,"LowerPressureStartTime=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUniPressure::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUniPressure");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	UpperPressureStartTime.getString(buf);
	pLogger->output(indent+1,0,"UpperPressureStartTime=%s 涨压力开始时间",buf);
	LowerPressureStartTime.getString(buf);
	pLogger->output(indent+1,0,"LowerPressureStartTime=%s 跌压力开始时间",buf);
	pLogger->output(indent,0,"}");
}

CUniPressureIterator::~CUniPressureIterator(void)
{
}


void CUniPressureIterator::dump(FILE *output)
{
	CUniPressure *pUniPressure;
	
	while ((pUniPressure=next())!=NULL)
	{
		pUniPressure->dump(output);
	}
}



void CWriteableBasePriceLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,UpperLimitPrice,LowerLimitPrice\n");
}
	
void CWriteableBasePriceLimit::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	UpperLimitPrice.clear();
	LowerLimitPrice.clear();
}

int CWriteableBasePriceLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableBasePriceLimit),input)!=sizeof(CWriteableBasePriceLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableBasePriceLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UpperLimitPrice=token;
		}
		else
		{
			UpperLimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LowerLimitPrice=token;
		}
		else
		{
			LowerLimitPrice="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"UpperLimitPrice"))
			{
				UpperLimitPrice=token;
			}
			else if (!strcmp(fieldName,"LowerLimitPrice"))
			{
				LowerLimitPrice=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableBasePriceLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableBasePriceLimit),output)!=sizeof(CWriteableBasePriceLimit))
		return 0;
	else
		return 1;
}

int CWriteableBasePriceLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UpperLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LowerLimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableBasePriceLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCBasePriceLimit%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableBasePriceLimit::dumpDiff(FILE *fp, const CWriteableBasePriceLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCBasePriceLimit = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	UpperLimitPrice.getString(buf);
	if (compare(UpperLimitPrice.getValue(),pOriginal->UpperLimitPrice.getValue())!=0)
	{
		pOriginal->UpperLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tUpperLimitPrice = %s -> %s    [涨停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUpperLimitPrice = %s    [涨停板价]\n",buf);
	}
	LowerLimitPrice.getString(buf);
	if (compare(LowerLimitPrice.getValue(),pOriginal->LowerLimitPrice.getValue())!=0)
	{
		pOriginal->LowerLimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLowerLimitPrice = %s -> %s    [跌停板价]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLowerLimitPrice = %s    [跌停板价]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableBasePriceLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	UpperLimitPrice.getString(buf);
	fprintf(fp,",UpperLimitPrice,%s",buf);	
	LowerLimitPrice.getString(buf);
	fprintf(fp,",LowerLimitPrice,%s",buf);	
}

void CWriteableBasePriceLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	UpperLimitPrice.getString(buf);
	sprintf(p,"UpperLimitPrice=%s,",buf);
	p+=strlen(p);
	LowerLimitPrice.getString(buf);
	sprintf(p,"LowerLimitPrice=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableBasePriceLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CBasePriceLimit");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	UpperLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"UpperLimitPrice=%s 涨停板价",buf);
	LowerLimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LowerLimitPrice=%s 跌停板价",buf);
	pLogger->output(indent,0,"}");
}

CBasePriceLimitIterator::~CBasePriceLimitIterator(void)
{
}


void CBasePriceLimitIterator::dump(FILE *output)
{
	CBasePriceLimit *pBasePriceLimit;
	
	while ((pBasePriceLimit=next())!=NULL)
	{
		pBasePriceLimit->dump(output);
	}
}



void CWriteableCreditLimit::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,PreBalance,CurrMargin,CloseProfit,Premium,Deposit,Withdraw,Balance,Available,ParticipantID,ClearingPartID,FrozenMargin,FrozenPremium\n");
}
	
void CWriteableCreditLimit::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	PreBalance.clear();
	CurrMargin.clear();
	CloseProfit.clear();
	Premium.clear();
	Deposit.clear();
	Withdraw.clear();
	Balance.clear();
	Available.clear();
	ParticipantID.clear();
	ClearingPartID.clear();
	FrozenMargin.clear();
	FrozenPremium.clear();
}

int CWriteableCreditLimit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCreditLimit),input)!=sizeof(CWriteableCreditLimit))
		return 0;
	else
		return 1;
}
	
int CWriteableCreditLimit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PreBalance=token;
		}
		else
		{
			PreBalance="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrMargin=token;
		}
		else
		{
			CurrMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CloseProfit=token;
		}
		else
		{
			CloseProfit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Premium=token;
		}
		else
		{
			Premium="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Deposit=token;
		}
		else
		{
			Deposit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Withdraw=token;
		}
		else
		{
			Withdraw="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Balance=token;
		}
		else
		{
			Balance="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Available=token;
		}
		else
		{
			Available="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenMargin=token;
		}
		else
		{
			FrozenMargin="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			FrozenPremium=token;
		}
		else
		{
			FrozenPremium="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"PreBalance"))
			{
				PreBalance=token;
			}
			else if (!strcmp(fieldName,"CurrMargin"))
			{
				CurrMargin=token;
			}
			else if (!strcmp(fieldName,"CloseProfit"))
			{
				CloseProfit=token;
			}
			else if (!strcmp(fieldName,"Premium"))
			{
				Premium=token;
			}
			else if (!strcmp(fieldName,"Deposit"))
			{
				Deposit=token;
			}
			else if (!strcmp(fieldName,"Withdraw"))
			{
				Withdraw=token;
			}
			else if (!strcmp(fieldName,"Balance"))
			{
				Balance=token;
			}
			else if (!strcmp(fieldName,"Available"))
			{
				Available=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"FrozenMargin"))
			{
				FrozenMargin=token;
			}
			else if (!strcmp(fieldName,"FrozenPremium"))
			{
				FrozenPremium=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCreditLimit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCreditLimit),output)!=sizeof(CWriteableCreditLimit))
		return 0;
	else
		return 1;
}

int CWriteableCreditLimit::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PreBalance.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CloseProfit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Premium.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Deposit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Withdraw.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Balance.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Available.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	FrozenPremium.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCreditLimit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCreditLimit%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	PreBalance.getString(buf);
	fprintf(fp,"\t\tPreBalance = %s    [上次结算准备金]\n",buf);	
	CurrMargin.getString(buf);
	fprintf(fp,"\t\tCurrMargin = %s    [当前保证金总额]\n",buf);	
	CloseProfit.getString(buf);
	fprintf(fp,"\t\tCloseProfit = %s    [平仓盈亏]\n",buf);	
	Premium.getString(buf);
	fprintf(fp,"\t\tPremium = %s    [期权权利金收支]\n",buf);	
	Deposit.getString(buf);
	fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);	
	Withdraw.getString(buf);
	fprintf(fp,"\t\tWithdraw = %s    [出金金额]\n",buf);	
	Balance.getString(buf);
	fprintf(fp,"\t\tBalance = %s    [期货结算准备金]\n",buf);	
	Available.getString(buf);
	fprintf(fp,"\t\tAvailable = %s    [可提资金]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [交易会员编号]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCreditLimit::dumpDiff(FILE *fp, const CWriteableCreditLimit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCreditLimit = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	PreBalance.getString(buf);
	if (compare(PreBalance.getValue(),pOriginal->PreBalance.getValue())!=0)
	{
		pOriginal->PreBalance.getString(bufOriginal);
		fprintf(fp,"\t\tPreBalance = %s -> %s    [上次结算准备金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPreBalance = %s    [上次结算准备金]\n",buf);
	}
	CurrMargin.getString(buf);
	if (compare(CurrMargin.getValue(),pOriginal->CurrMargin.getValue())!=0)
	{
		pOriginal->CurrMargin.getString(bufOriginal);
		fprintf(fp,"\t\tCurrMargin = %s -> %s    [当前保证金总额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrMargin = %s    [当前保证金总额]\n",buf);
	}
	CloseProfit.getString(buf);
	if (compare(CloseProfit.getValue(),pOriginal->CloseProfit.getValue())!=0)
	{
		pOriginal->CloseProfit.getString(bufOriginal);
		fprintf(fp,"\t\tCloseProfit = %s -> %s    [平仓盈亏]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCloseProfit = %s    [平仓盈亏]\n",buf);
	}
	Premium.getString(buf);
	if (compare(Premium.getValue(),pOriginal->Premium.getValue())!=0)
	{
		pOriginal->Premium.getString(bufOriginal);
		fprintf(fp,"\t\tPremium = %s -> %s    [期权权利金收支]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPremium = %s    [期权权利金收支]\n",buf);
	}
	Deposit.getString(buf);
	if (compare(Deposit.getValue(),pOriginal->Deposit.getValue())!=0)
	{
		pOriginal->Deposit.getString(bufOriginal);
		fprintf(fp,"\t\tDeposit = %s -> %s    [入金金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);
	}
	Withdraw.getString(buf);
	if (compare(Withdraw.getValue(),pOriginal->Withdraw.getValue())!=0)
	{
		pOriginal->Withdraw.getString(bufOriginal);
		fprintf(fp,"\t\tWithdraw = %s -> %s    [出金金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tWithdraw = %s    [出金金额]\n",buf);
	}
	Balance.getString(buf);
	if (compare(Balance.getValue(),pOriginal->Balance.getValue())!=0)
	{
		pOriginal->Balance.getString(bufOriginal);
		fprintf(fp,"\t\tBalance = %s -> %s    [期货结算准备金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBalance = %s    [期货结算准备金]\n",buf);
	}
	Available.getString(buf);
	if (compare(Available.getValue(),pOriginal->Available.getValue())!=0)
	{
		pOriginal->Available.getString(bufOriginal);
		fprintf(fp,"\t\tAvailable = %s -> %s    [可提资金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAvailable = %s    [可提资金]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [交易会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [交易会员编号]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	FrozenMargin.getString(buf);
	if (compare(FrozenMargin.getValue(),pOriginal->FrozenMargin.getValue())!=0)
	{
		pOriginal->FrozenMargin.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenMargin = %s -> %s    [冻结的保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenMargin = %s    [冻结的保证金]\n",buf);
	}
	FrozenPremium.getString(buf);
	if (compare(FrozenPremium.getValue(),pOriginal->FrozenPremium.getValue())!=0)
	{
		pOriginal->FrozenPremium.getString(bufOriginal);
		fprintf(fp,"\t\tFrozenPremium = %s -> %s    [冻结的权利金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tFrozenPremium = %s    [冻结的权利金]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCreditLimit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	PreBalance.getString(buf);
	fprintf(fp,",PreBalance,%s",buf);	
	CurrMargin.getString(buf);
	fprintf(fp,",CurrMargin,%s",buf);	
	CloseProfit.getString(buf);
	fprintf(fp,",CloseProfit,%s",buf);	
	Premium.getString(buf);
	fprintf(fp,",Premium,%s",buf);	
	Deposit.getString(buf);
	fprintf(fp,",Deposit,%s",buf);	
	Withdraw.getString(buf);
	fprintf(fp,",Withdraw,%s",buf);	
	Balance.getString(buf);
	fprintf(fp,",Balance,%s",buf);	
	Available.getString(buf);
	fprintf(fp,",Available,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	FrozenMargin.getString(buf);
	fprintf(fp,",FrozenMargin,%s",buf);	
	FrozenPremium.getString(buf);
	fprintf(fp,",FrozenPremium,%s",buf);	
}

void CWriteableCreditLimit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	PreBalance.getString(buf);
	sprintf(p,"PreBalance=%s,",buf);
	p+=strlen(p);
	CurrMargin.getString(buf);
	sprintf(p,"CurrMargin=%s,",buf);
	p+=strlen(p);
	CloseProfit.getString(buf);
	sprintf(p,"CloseProfit=%s,",buf);
	p+=strlen(p);
	Premium.getString(buf);
	sprintf(p,"Premium=%s,",buf);
	p+=strlen(p);
	Deposit.getString(buf);
	sprintf(p,"Deposit=%s,",buf);
	p+=strlen(p);
	Withdraw.getString(buf);
	sprintf(p,"Withdraw=%s,",buf);
	p+=strlen(p);
	Balance.getString(buf);
	sprintf(p,"Balance=%s,",buf);
	p+=strlen(p);
	Available.getString(buf);
	sprintf(p,"Available=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	FrozenMargin.getString(buf);
	sprintf(p,"FrozenMargin=%s,",buf);
	p+=strlen(p);
	FrozenPremium.getString(buf);
	sprintf(p,"FrozenPremium=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCreditLimit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCreditLimit");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	PreBalance.getString(buf);
	pLogger->output(indent+1,0,"PreBalance=%s 上次结算准备金",buf);
	CurrMargin.getString(buf);
	pLogger->output(indent+1,0,"CurrMargin=%s 当前保证金总额",buf);
	CloseProfit.getString(buf);
	pLogger->output(indent+1,0,"CloseProfit=%s 平仓盈亏",buf);
	Premium.getString(buf);
	pLogger->output(indent+1,0,"Premium=%s 期权权利金收支",buf);
	Deposit.getString(buf);
	pLogger->output(indent+1,0,"Deposit=%s 入金金额",buf);
	Withdraw.getString(buf);
	pLogger->output(indent+1,0,"Withdraw=%s 出金金额",buf);
	Balance.getString(buf);
	pLogger->output(indent+1,0,"Balance=%s 期货结算准备金",buf);
	Available.getString(buf);
	pLogger->output(indent+1,0,"Available=%s 可提资金",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 交易会员编号",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	FrozenMargin.getString(buf);
	pLogger->output(indent+1,0,"FrozenMargin=%s 冻结的保证金",buf);
	FrozenPremium.getString(buf);
	pLogger->output(indent+1,0,"FrozenPremium=%s 冻结的权利金",buf);
	pLogger->output(indent,0,"}");
}

CCreditLimitIterator::~CCreditLimitIterator(void)
{
}


void CCreditLimitIterator::dump(FILE *output)
{
	CCreditLimit *pCreditLimit;
	
	while ((pCreditLimit=next())!=NULL)
	{
		pCreditLimit->dump(output);
	}
}



void CWriteableHedgeDetail::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeQuotaSN,OperatorID,Time,InstrumentID,PosiDirection,TradingVolume,HedgeQuota,ParticipantID,ClientID\n");
}
	
void CWriteableHedgeDetail::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeQuotaSN.clear();
	OperatorID.clear();
	Time.clear();
	InstrumentID.clear();
	PosiDirection.clear();
	TradingVolume.clear();
	HedgeQuota.clear();
	ParticipantID.clear();
	ClientID.clear();
}

int CWriteableHedgeDetail::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableHedgeDetail),input)!=sizeof(CWriteableHedgeDetail))
		return 0;
	else
		return 1;
}
	
int CWriteableHedgeDetail::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeQuotaSN=token;
		}
		else
		{
			HedgeQuotaSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperatorID=token;
		}
		else
		{
			OperatorID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Time=token;
		}
		else
		{
			Time="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			TradingVolume=token;
		}
		else
		{
			TradingVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeQuota=token;
		}
		else
		{
			HedgeQuota="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeQuotaSN"))
			{
				HedgeQuotaSN=token;
			}
			else if (!strcmp(fieldName,"OperatorID"))
			{
				OperatorID=token;
			}
			else if (!strcmp(fieldName,"Time"))
			{
				Time=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"TradingVolume"))
			{
				TradingVolume=token;
			}
			else if (!strcmp(fieldName,"HedgeQuota"))
			{
				HedgeQuota=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableHedgeDetail::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableHedgeDetail),output)!=sizeof(CWriteableHedgeDetail))
		return 0;
	else
		return 1;
}

int CWriteableHedgeDetail::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeQuotaSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperatorID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Time.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	TradingVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeQuota.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableHedgeDetail::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCHedgeDetail%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeQuotaSN.getString(buf);
	fprintf(fp,"\t\tHedgeQuotaSN = %s    [流水号]\n",buf);	
	OperatorID.getString(buf);
	fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);	
	Time.getString(buf);
	fprintf(fp,"\t\tTime = %s    [时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	TradingVolume.getString(buf);
	fprintf(fp,"\t\tTradingVolume = %s    [发生额]\n",buf);	
	HedgeQuota.getString(buf);
	fprintf(fp,"\t\tHedgeQuota = %s    [保值额度]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableHedgeDetail::dumpDiff(FILE *fp, const CWriteableHedgeDetail *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCHedgeDetail = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeQuotaSN.getString(buf);
	if (compare(HedgeQuotaSN.getValue(),pOriginal->HedgeQuotaSN.getValue())!=0)
	{
		pOriginal->HedgeQuotaSN.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeQuotaSN = %s -> %s    [流水号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeQuotaSN = %s    [流水号]\n",buf);
	}
	OperatorID.getString(buf);
	if (compare(OperatorID.getValue(),pOriginal->OperatorID.getValue())!=0)
	{
		pOriginal->OperatorID.getString(bufOriginal);
		fprintf(fp,"\t\tOperatorID = %s -> %s    [用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);
	}
	Time.getString(buf);
	if (compare(Time.getValue(),pOriginal->Time.getValue())!=0)
	{
		pOriginal->Time.getString(bufOriginal);
		fprintf(fp,"\t\tTime = %s -> %s    [时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTime = %s    [时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	TradingVolume.getString(buf);
	if (compare(TradingVolume.getValue(),pOriginal->TradingVolume.getValue())!=0)
	{
		pOriginal->TradingVolume.getString(bufOriginal);
		fprintf(fp,"\t\tTradingVolume = %s -> %s    [发生额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingVolume = %s    [发生额]\n",buf);
	}
	HedgeQuota.getString(buf);
	if (compare(HedgeQuota.getValue(),pOriginal->HedgeQuota.getValue())!=0)
	{
		pOriginal->HedgeQuota.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeQuota = %s -> %s    [保值额度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeQuota = %s    [保值额度]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableHedgeDetail::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeQuotaSN.getString(buf);
	fprintf(fp,",HedgeQuotaSN,%s",buf);	
	OperatorID.getString(buf);
	fprintf(fp,",OperatorID,%s",buf);	
	Time.getString(buf);
	fprintf(fp,",Time,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	TradingVolume.getString(buf);
	fprintf(fp,",TradingVolume,%s",buf);	
	HedgeQuota.getString(buf);
	fprintf(fp,",HedgeQuota,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableHedgeDetail::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeQuotaSN.getString(buf);
	sprintf(p,"HedgeQuotaSN=%s,",buf);
	p+=strlen(p);
	OperatorID.getString(buf);
	sprintf(p,"OperatorID=%s,",buf);
	p+=strlen(p);
	Time.getString(buf);
	sprintf(p,"Time=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	TradingVolume.getString(buf);
	sprintf(p,"TradingVolume=%s,",buf);
	p+=strlen(p);
	HedgeQuota.getString(buf);
	sprintf(p,"HedgeQuota=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableHedgeDetail::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CHedgeDetail");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeQuotaSN.getString(buf);
	pLogger->output(indent+1,0,"HedgeQuotaSN=%s 流水号",buf);
	OperatorID.getString(buf);
	pLogger->output(indent+1,0,"OperatorID=%s 用户代码",buf);
	Time.getString(buf);
	pLogger->output(indent+1,0,"Time=%s 时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	TradingVolume.getString(buf);
	pLogger->output(indent+1,0,"TradingVolume=%s 发生额",buf);
	HedgeQuota.getString(buf);
	pLogger->output(indent+1,0,"HedgeQuota=%s 保值额度",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableOrderAction::writeCSVHead(FILE *output)
{
	fprintf(output,"OrderSysID,OrderLocalID,ActionFlag,ParticipantID,ClientID,UserID,LimitPrice,VolumeChange,ActionLocalID,BusinessUnit,ActionSource,Tradable\n");
}
	
void CWriteableOrderAction::init(void)
{
	OrderSysID.clear();
	OrderLocalID.clear();
	ActionFlag.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	LimitPrice.clear();
	VolumeChange.clear();
	ActionLocalID.clear();
	BusinessUnit.clear();
	ActionSource.clear();
	Tradable.clear();
	pOrder=NULL;
}

int CWriteableOrderAction::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableOrderAction),input)!=sizeof(CWriteableOrderAction))
		return 0;
	else
		return 1;
}
	
int CWriteableOrderAction::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			OrderSysID=token;
		}
		else
		{
			OrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OrderLocalID=token;
		}
		else
		{
			OrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionFlag=token;
		}
		else
		{
			ActionFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			LimitPrice=token;
		}
		else
		{
			LimitPrice="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			VolumeChange=token;
		}
		else
		{
			VolumeChange="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionLocalID=token;
		}
		else
		{
			ActionLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionSource=token;
		}
		else
		{
			ActionSource="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Tradable=token;
		}
		else
		{
			Tradable="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"OrderSysID"))
			{
				OrderSysID=token;
			}
			else if (!strcmp(fieldName,"OrderLocalID"))
			{
				OrderLocalID=token;
			}
			else if (!strcmp(fieldName,"ActionFlag"))
			{
				ActionFlag=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"LimitPrice"))
			{
				LimitPrice=token;
			}
			else if (!strcmp(fieldName,"VolumeChange"))
			{
				VolumeChange=token;
			}
			else if (!strcmp(fieldName,"ActionLocalID"))
			{
				ActionLocalID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"ActionSource"))
			{
				ActionSource=token;
			}
			else if (!strcmp(fieldName,"Tradable"))
			{
				Tradable=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableOrderAction::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableOrderAction),output)!=sizeof(CWriteableOrderAction))
		return 0;
	else
		return 1;
}

int CWriteableOrderAction::writeCSV(FILE *output) const
{
	char buffer[1025];
	OrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	LimitPrice.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	VolumeChange.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Tradable.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableOrderAction::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCOrderAction%s = {\n", index_buf);
	OrderSysID.getString(buf);
	fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);	
	VolumeChange.getString(buf);
	fprintf(fp,"\t\tVolumeChange = %s    [数量变化]\n",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	ActionSource.getString(buf);
	fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);	
	Tradable.getString(buf);
	fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableOrderAction::dumpDiff(FILE *fp, const CWriteableOrderAction *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCOrderAction = {\n");
	OrderSysID.getString(buf);
	if (compare(OrderSysID.getValue(),pOriginal->OrderSysID.getValue())!=0)
	{
		pOriginal->OrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderSysID = %s -> %s    [报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderSysID = %s    [报单编号]\n",buf);
	}
	OrderLocalID.getString(buf);
	if (compare(OrderLocalID.getValue(),pOriginal->OrderLocalID.getValue())!=0)
	{
		pOriginal->OrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tOrderLocalID = %s -> %s    [本地报单编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOrderLocalID = %s    [本地报单编号]\n",buf);
	}
	ActionFlag.getString(buf);
	if (compare(ActionFlag.getValue(),pOriginal->ActionFlag.getValue())!=0)
	{
		pOriginal->ActionFlag.getString(bufOriginal);
		fprintf(fp,"\t\tActionFlag = %s -> %s    [报单操作标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	LimitPrice.getString(buf);
	if (compare(LimitPrice.getValue(),pOriginal->LimitPrice.getValue())!=0)
	{
		pOriginal->LimitPrice.getString(bufOriginal);
		fprintf(fp,"\t\tLimitPrice = %s -> %s    [价格]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tLimitPrice = %s    [价格]\n",buf);
	}
	VolumeChange.getString(buf);
	if (compare(VolumeChange.getValue(),pOriginal->VolumeChange.getValue())!=0)
	{
		pOriginal->VolumeChange.getString(bufOriginal);
		fprintf(fp,"\t\tVolumeChange = %s -> %s    [数量变化]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tVolumeChange = %s    [数量变化]\n",buf);
	}
	ActionLocalID.getString(buf);
	if (compare(ActionLocalID.getValue(),pOriginal->ActionLocalID.getValue())!=0)
	{
		pOriginal->ActionLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tActionLocalID = %s -> %s    [操作本地编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	ActionSource.getString(buf);
	if (compare(ActionSource.getValue(),pOriginal->ActionSource.getValue())!=0)
	{
		pOriginal->ActionSource.getString(bufOriginal);
		fprintf(fp,"\t\tActionSource = %s -> %s    [操作来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);
	}
	Tradable.getString(buf);
	if (compare(Tradable.getValue(),pOriginal->Tradable.getValue())!=0)
	{
		pOriginal->Tradable.getString(bufOriginal);
		fprintf(fp,"\t\tTradable = %s -> %s    [是否可以参加交易]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradable = %s    [是否可以参加交易]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableOrderAction::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	OrderSysID.getString(buf);
	fprintf(fp,",OrderSysID,%s",buf);	
	OrderLocalID.getString(buf);
	fprintf(fp,",OrderLocalID,%s",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,",ActionFlag,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	LimitPrice.getString(buf);
	fprintf(fp,",LimitPrice,%s",buf);	
	VolumeChange.getString(buf);
	fprintf(fp,",VolumeChange,%s",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,",ActionLocalID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	ActionSource.getString(buf);
	fprintf(fp,",ActionSource,%s",buf);	
	Tradable.getString(buf);
	fprintf(fp,",Tradable,%s",buf);	
}

void CWriteableOrderAction::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	OrderSysID.getString(buf);
	sprintf(p,"OrderSysID=%s,",buf);
	p+=strlen(p);
	OrderLocalID.getString(buf);
	sprintf(p,"OrderLocalID=%s,",buf);
	p+=strlen(p);
	ActionFlag.getString(buf);
	sprintf(p,"ActionFlag=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	LimitPrice.getString(buf);
	sprintf(p,"LimitPrice=%s,",buf);
	p+=strlen(p);
	VolumeChange.getString(buf);
	sprintf(p,"VolumeChange=%s,",buf);
	p+=strlen(p);
	ActionLocalID.getString(buf);
	sprintf(p,"ActionLocalID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	ActionSource.getString(buf);
	sprintf(p,"ActionSource=%s,",buf);
	p+=strlen(p);
	Tradable.getString(buf);
	sprintf(p,"Tradable=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableOrderAction::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"COrderAction");
	pLogger->output(indent,0,"{");
	OrderSysID.getString(buf);
	pLogger->output(indent+1,0,"OrderSysID=%s 报单编号",buf);
	OrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"OrderLocalID=%s 本地报单编号",buf);
	ActionFlag.getString(buf);
	pLogger->output(indent+1,0,"ActionFlag=%s 报单操作标志",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	LimitPrice.getString(buf);
	pLogger->output(indent+1,0,"LimitPrice=%s 价格",buf);
	VolumeChange.getString(buf);
	pLogger->output(indent+1,0,"VolumeChange=%s 数量变化",buf);
	ActionLocalID.getString(buf);
	pLogger->output(indent+1,0,"ActionLocalID=%s 操作本地编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	ActionSource.getString(buf);
	pLogger->output(indent+1,0,"ActionSource=%s 操作来源",buf);
	Tradable.getString(buf);
	pLogger->output(indent+1,0,"Tradable=%s 是否可以参加交易",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableQuoteAction::writeCSVHead(FILE *output)
{
	fprintf(output,"QuoteSysID,QuoteLocalID,ActionFlag,ParticipantID,ClientID,UserID,ActionLocalID,BusinessUnit,ActionSource\n");
}
	
void CWriteableQuoteAction::init(void)
{
	QuoteSysID.clear();
	QuoteLocalID.clear();
	ActionFlag.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	ActionLocalID.clear();
	BusinessUnit.clear();
	ActionSource.clear();
	pQuote=NULL;
}

int CWriteableQuoteAction::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableQuoteAction),input)!=sizeof(CWriteableQuoteAction))
		return 0;
	else
		return 1;
}
	
int CWriteableQuoteAction::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			QuoteSysID=token;
		}
		else
		{
			QuoteSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			QuoteLocalID=token;
		}
		else
		{
			QuoteLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionFlag=token;
		}
		else
		{
			ActionFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionLocalID=token;
		}
		else
		{
			ActionLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionSource=token;
		}
		else
		{
			ActionSource="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"QuoteSysID"))
			{
				QuoteSysID=token;
			}
			else if (!strcmp(fieldName,"QuoteLocalID"))
			{
				QuoteLocalID=token;
			}
			else if (!strcmp(fieldName,"ActionFlag"))
			{
				ActionFlag=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ActionLocalID"))
			{
				ActionLocalID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"ActionSource"))
			{
				ActionSource=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableQuoteAction::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableQuoteAction),output)!=sizeof(CWriteableQuoteAction))
		return 0;
	else
		return 1;
}

int CWriteableQuoteAction::writeCSV(FILE *output) const
{
	char buffer[1025];
	QuoteSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	QuoteLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableQuoteAction::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCQuoteAction%s = {\n", index_buf);
	QuoteSysID.getString(buf);
	fprintf(fp,"\t\tQuoteSysID = %s    [报价编号]\n",buf);	
	QuoteLocalID.getString(buf);
	fprintf(fp,"\t\tQuoteLocalID = %s    [本地报价编号]\n",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	ActionSource.getString(buf);
	fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableQuoteAction::dumpDiff(FILE *fp, const CWriteableQuoteAction *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCQuoteAction = {\n");
	QuoteSysID.getString(buf);
	if (compare(QuoteSysID.getValue(),pOriginal->QuoteSysID.getValue())!=0)
	{
		pOriginal->QuoteSysID.getString(bufOriginal);
		fprintf(fp,"\t\tQuoteSysID = %s -> %s    [报价编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQuoteSysID = %s    [报价编号]\n",buf);
	}
	QuoteLocalID.getString(buf);
	if (compare(QuoteLocalID.getValue(),pOriginal->QuoteLocalID.getValue())!=0)
	{
		pOriginal->QuoteLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tQuoteLocalID = %s -> %s    [本地报价编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tQuoteLocalID = %s    [本地报价编号]\n",buf);
	}
	ActionFlag.getString(buf);
	if (compare(ActionFlag.getValue(),pOriginal->ActionFlag.getValue())!=0)
	{
		pOriginal->ActionFlag.getString(bufOriginal);
		fprintf(fp,"\t\tActionFlag = %s -> %s    [报单操作标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ActionLocalID.getString(buf);
	if (compare(ActionLocalID.getValue(),pOriginal->ActionLocalID.getValue())!=0)
	{
		pOriginal->ActionLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tActionLocalID = %s -> %s    [操作本地编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	ActionSource.getString(buf);
	if (compare(ActionSource.getValue(),pOriginal->ActionSource.getValue())!=0)
	{
		pOriginal->ActionSource.getString(bufOriginal);
		fprintf(fp,"\t\tActionSource = %s -> %s    [操作来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableQuoteAction::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	QuoteSysID.getString(buf);
	fprintf(fp,",QuoteSysID,%s",buf);	
	QuoteLocalID.getString(buf);
	fprintf(fp,",QuoteLocalID,%s",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,",ActionFlag,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,",ActionLocalID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	ActionSource.getString(buf);
	fprintf(fp,",ActionSource,%s",buf);	
}

void CWriteableQuoteAction::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	QuoteSysID.getString(buf);
	sprintf(p,"QuoteSysID=%s,",buf);
	p+=strlen(p);
	QuoteLocalID.getString(buf);
	sprintf(p,"QuoteLocalID=%s,",buf);
	p+=strlen(p);
	ActionFlag.getString(buf);
	sprintf(p,"ActionFlag=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ActionLocalID.getString(buf);
	sprintf(p,"ActionLocalID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	ActionSource.getString(buf);
	sprintf(p,"ActionSource=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableQuoteAction::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CQuoteAction");
	pLogger->output(indent,0,"{");
	QuoteSysID.getString(buf);
	pLogger->output(indent+1,0,"QuoteSysID=%s 报价编号",buf);
	QuoteLocalID.getString(buf);
	pLogger->output(indent+1,0,"QuoteLocalID=%s 本地报价编号",buf);
	ActionFlag.getString(buf);
	pLogger->output(indent+1,0,"ActionFlag=%s 报单操作标志",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ActionLocalID.getString(buf);
	pLogger->output(indent+1,0,"ActionLocalID=%s 操作本地编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	ActionSource.getString(buf);
	pLogger->output(indent+1,0,"ActionSource=%s 操作来源",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableExecOrderAction::writeCSVHead(FILE *output)
{
	fprintf(output,"ExecOrderSysID,ExecOrderLocalID,ActionFlag,ParticipantID,ClientID,UserID,ActionLocalID,BusinessUnit,ActionSource\n");
}
	
void CWriteableExecOrderAction::init(void)
{
	ExecOrderSysID.clear();
	ExecOrderLocalID.clear();
	ActionFlag.clear();
	ParticipantID.clear();
	ClientID.clear();
	UserID.clear();
	ActionLocalID.clear();
	BusinessUnit.clear();
	ActionSource.clear();
	pExecOrder=NULL;
}

int CWriteableExecOrderAction::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableExecOrderAction),input)!=sizeof(CWriteableExecOrderAction))
		return 0;
	else
		return 1;
}
	
int CWriteableExecOrderAction::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			ExecOrderSysID=token;
		}
		else
		{
			ExecOrderSysID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ExecOrderLocalID=token;
		}
		else
		{
			ExecOrderLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionFlag=token;
		}
		else
		{
			ActionFlag="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UserID=token;
		}
		else
		{
			UserID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionLocalID=token;
		}
		else
		{
			ActionLocalID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			BusinessUnit=token;
		}
		else
		{
			BusinessUnit="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ActionSource=token;
		}
		else
		{
			ActionSource="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"ExecOrderSysID"))
			{
				ExecOrderSysID=token;
			}
			else if (!strcmp(fieldName,"ExecOrderLocalID"))
			{
				ExecOrderLocalID=token;
			}
			else if (!strcmp(fieldName,"ActionFlag"))
			{
				ActionFlag=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			else if (!strcmp(fieldName,"UserID"))
			{
				UserID=token;
			}
			else if (!strcmp(fieldName,"ActionLocalID"))
			{
				ActionLocalID=token;
			}
			else if (!strcmp(fieldName,"BusinessUnit"))
			{
				BusinessUnit=token;
			}
			else if (!strcmp(fieldName,"ActionSource"))
			{
				ActionSource=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableExecOrderAction::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableExecOrderAction),output)!=sizeof(CWriteableExecOrderAction))
		return 0;
	else
		return 1;
}

int CWriteableExecOrderAction::writeCSV(FILE *output) const
{
	char buffer[1025];
	ExecOrderSysID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ExecOrderLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionFlag.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UserID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionLocalID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	BusinessUnit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ActionSource.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableExecOrderAction::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCExecOrderAction%s = {\n", index_buf);
	ExecOrderSysID.getString(buf);
	fprintf(fp,"\t\tExecOrderSysID = %s    [执行宣告编号]\n",buf);	
	ExecOrderLocalID.getString(buf);
	fprintf(fp,"\t\tExecOrderLocalID = %s    [本地执行宣告编号]\n",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	UserID.getString(buf);
	fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);	
	ActionSource.getString(buf);
	fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableExecOrderAction::dumpDiff(FILE *fp, const CWriteableExecOrderAction *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCExecOrderAction = {\n");
	ExecOrderSysID.getString(buf);
	if (compare(ExecOrderSysID.getValue(),pOriginal->ExecOrderSysID.getValue())!=0)
	{
		pOriginal->ExecOrderSysID.getString(bufOriginal);
		fprintf(fp,"\t\tExecOrderSysID = %s -> %s    [执行宣告编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExecOrderSysID = %s    [执行宣告编号]\n",buf);
	}
	ExecOrderLocalID.getString(buf);
	if (compare(ExecOrderLocalID.getValue(),pOriginal->ExecOrderLocalID.getValue())!=0)
	{
		pOriginal->ExecOrderLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tExecOrderLocalID = %s -> %s    [本地执行宣告编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tExecOrderLocalID = %s    [本地执行宣告编号]\n",buf);
	}
	ActionFlag.getString(buf);
	if (compare(ActionFlag.getValue(),pOriginal->ActionFlag.getValue())!=0)
	{
		pOriginal->ActionFlag.getString(bufOriginal);
		fprintf(fp,"\t\tActionFlag = %s -> %s    [报单操作标志]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionFlag = %s    [报单操作标志]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	UserID.getString(buf);
	if (compare(UserID.getValue(),pOriginal->UserID.getValue())!=0)
	{
		pOriginal->UserID.getString(bufOriginal);
		fprintf(fp,"\t\tUserID = %s -> %s    [交易用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUserID = %s    [交易用户代码]\n",buf);
	}
	ActionLocalID.getString(buf);
	if (compare(ActionLocalID.getValue(),pOriginal->ActionLocalID.getValue())!=0)
	{
		pOriginal->ActionLocalID.getString(bufOriginal);
		fprintf(fp,"\t\tActionLocalID = %s -> %s    [操作本地编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionLocalID = %s    [操作本地编号]\n",buf);
	}
	BusinessUnit.getString(buf);
	if (compare(BusinessUnit.getValue(),pOriginal->BusinessUnit.getValue())!=0)
	{
		pOriginal->BusinessUnit.getString(bufOriginal);
		fprintf(fp,"\t\tBusinessUnit = %s -> %s    [业务单元]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tBusinessUnit = %s    [业务单元]\n",buf);
	}
	ActionSource.getString(buf);
	if (compare(ActionSource.getValue(),pOriginal->ActionSource.getValue())!=0)
	{
		pOriginal->ActionSource.getString(bufOriginal);
		fprintf(fp,"\t\tActionSource = %s -> %s    [操作来源]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tActionSource = %s    [操作来源]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableExecOrderAction::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	ExecOrderSysID.getString(buf);
	fprintf(fp,",ExecOrderSysID,%s",buf);	
	ExecOrderLocalID.getString(buf);
	fprintf(fp,",ExecOrderLocalID,%s",buf);	
	ActionFlag.getString(buf);
	fprintf(fp,",ActionFlag,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
	UserID.getString(buf);
	fprintf(fp,",UserID,%s",buf);	
	ActionLocalID.getString(buf);
	fprintf(fp,",ActionLocalID,%s",buf);	
	BusinessUnit.getString(buf);
	fprintf(fp,",BusinessUnit,%s",buf);	
	ActionSource.getString(buf);
	fprintf(fp,",ActionSource,%s",buf);	
}

void CWriteableExecOrderAction::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	ExecOrderSysID.getString(buf);
	sprintf(p,"ExecOrderSysID=%s,",buf);
	p+=strlen(p);
	ExecOrderLocalID.getString(buf);
	sprintf(p,"ExecOrderLocalID=%s,",buf);
	p+=strlen(p);
	ActionFlag.getString(buf);
	sprintf(p,"ActionFlag=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	UserID.getString(buf);
	sprintf(p,"UserID=%s,",buf);
	p+=strlen(p);
	ActionLocalID.getString(buf);
	sprintf(p,"ActionLocalID=%s,",buf);
	p+=strlen(p);
	BusinessUnit.getString(buf);
	sprintf(p,"BusinessUnit=%s,",buf);
	p+=strlen(p);
	ActionSource.getString(buf);
	sprintf(p,"ActionSource=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableExecOrderAction::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CExecOrderAction");
	pLogger->output(indent,0,"{");
	ExecOrderSysID.getString(buf);
	pLogger->output(indent+1,0,"ExecOrderSysID=%s 执行宣告编号",buf);
	ExecOrderLocalID.getString(buf);
	pLogger->output(indent+1,0,"ExecOrderLocalID=%s 本地执行宣告编号",buf);
	ActionFlag.getString(buf);
	pLogger->output(indent+1,0,"ActionFlag=%s 报单操作标志",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	UserID.getString(buf);
	pLogger->output(indent+1,0,"UserID=%s 交易用户代码",buf);
	ActionLocalID.getString(buf);
	pLogger->output(indent+1,0,"ActionLocalID=%s 操作本地编号",buf);
	BusinessUnit.getString(buf);
	pLogger->output(indent+1,0,"BusinessUnit=%s 业务单元",buf);
	ActionSource.getString(buf);
	pLogger->output(indent+1,0,"ActionSource=%s 操作来源",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableAccountDeposit::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,Account,Deposit\n");
}
	
void CWriteableAccountDeposit::init(void)
{
	SettlementGroupID.clear();
	Account.clear();
	Deposit.clear();
}

int CWriteableAccountDeposit::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableAccountDeposit),input)!=sizeof(CWriteableAccountDeposit))
		return 0;
	else
		return 1;
}
	
int CWriteableAccountDeposit::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Account=token;
		}
		else
		{
			Account="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Deposit=token;
		}
		else
		{
			Deposit="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"Account"))
			{
				Account=token;
			}
			else if (!strcmp(fieldName,"Deposit"))
			{
				Deposit=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableAccountDeposit::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableAccountDeposit),output)!=sizeof(CWriteableAccountDeposit))
		return 0;
	else
		return 1;
}

int CWriteableAccountDeposit::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Account.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Deposit.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableAccountDeposit::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCAccountDeposit%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	Account.getString(buf);
	fprintf(fp,"\t\tAccount = %s    [资金账号]\n",buf);	
	Deposit.getString(buf);
	fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableAccountDeposit::dumpDiff(FILE *fp, const CWriteableAccountDeposit *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCAccountDeposit = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	Account.getString(buf);
	if (compare(Account.getValue(),pOriginal->Account.getValue())!=0)
	{
		pOriginal->Account.getString(bufOriginal);
		fprintf(fp,"\t\tAccount = %s -> %s    [资金账号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAccount = %s    [资金账号]\n",buf);
	}
	Deposit.getString(buf);
	if (compare(Deposit.getValue(),pOriginal->Deposit.getValue())!=0)
	{
		pOriginal->Deposit.getString(bufOriginal);
		fprintf(fp,"\t\tDeposit = %s -> %s    [入金金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tDeposit = %s    [入金金额]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableAccountDeposit::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	Account.getString(buf);
	fprintf(fp,",Account,%s",buf);	
	Deposit.getString(buf);
	fprintf(fp,",Deposit,%s",buf);	
}

void CWriteableAccountDeposit::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	Account.getString(buf);
	sprintf(p,"Account=%s,",buf);
	p+=strlen(p);
	Deposit.getString(buf);
	sprintf(p,"Deposit=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableAccountDeposit::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CAccountDeposit");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	Account.getString(buf);
	pLogger->output(indent+1,0,"Account=%s 资金账号",buf);
	Deposit.getString(buf);
	pLogger->output(indent+1,0,"Deposit=%s 入金金额",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableUpdateAllInstrumentStatus::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentStatus\n");
}
	
void CWriteableUpdateAllInstrumentStatus::init(void)
{
	SettlementGroupID.clear();
	InstrumentStatus.clear();
}

int CWriteableUpdateAllInstrumentStatus::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableUpdateAllInstrumentStatus),input)!=sizeof(CWriteableUpdateAllInstrumentStatus))
		return 0;
	else
		return 1;
}
	
int CWriteableUpdateAllInstrumentStatus::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentStatus=token;
		}
		else
		{
			InstrumentStatus="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentStatus"))
			{
				InstrumentStatus=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableUpdateAllInstrumentStatus::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableUpdateAllInstrumentStatus),output)!=sizeof(CWriteableUpdateAllInstrumentStatus))
		return 0;
	else
		return 1;
}

int CWriteableUpdateAllInstrumentStatus::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentStatus.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableUpdateAllInstrumentStatus::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCUpdateAllInstrumentStatus%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,"\t\tInstrumentStatus = %s    [合约状态]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableUpdateAllInstrumentStatus::dumpDiff(FILE *fp, const CWriteableUpdateAllInstrumentStatus *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCUpdateAllInstrumentStatus = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentStatus.getString(buf);
	if (compare(InstrumentStatus.getValue(),pOriginal->InstrumentStatus.getValue())!=0)
	{
		pOriginal->InstrumentStatus.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentStatus = %s -> %s    [合约状态]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentStatus = %s    [合约状态]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableUpdateAllInstrumentStatus::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentStatus.getString(buf);
	fprintf(fp,",InstrumentStatus,%s",buf);	
}

void CWriteableUpdateAllInstrumentStatus::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentStatus.getString(buf);
	sprintf(p,"InstrumentStatus=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableUpdateAllInstrumentStatus::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CUpdateAllInstrumentStatus");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentStatus.getString(buf);
	pLogger->output(indent+1,0,"InstrumentStatus=%s 合约状态",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableAdminOrder::writeCSVHead(FILE *output)
{
	fprintf(output,"InstrumentID,AdminOrderCommand,ClearingPartID,ParticipantID,Amount,SettlementGroupID\n");
}
	
void CWriteableAdminOrder::init(void)
{
	InstrumentID.clear();
	AdminOrderCommand.clear();
	ClearingPartID.clear();
	ParticipantID.clear();
	Amount.clear();
	SettlementGroupID.clear();
}

int CWriteableAdminOrder::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableAdminOrder),input)!=sizeof(CWriteableAdminOrder))
		return 0;
	else
		return 1;
}
	
int CWriteableAdminOrder::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			AdminOrderCommand=token;
		}
		else
		{
			AdminOrderCommand="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClearingPartID=token;
		}
		else
		{
			ClearingPartID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Amount=token;
		}
		else
		{
			Amount="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"AdminOrderCommand"))
			{
				AdminOrderCommand=token;
			}
			else if (!strcmp(fieldName,"ClearingPartID"))
			{
				ClearingPartID=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"Amount"))
			{
				Amount=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableAdminOrder::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableAdminOrder),output)!=sizeof(CWriteableAdminOrder))
		return 0;
	else
		return 1;
}

int CWriteableAdminOrder::writeCSV(FILE *output) const
{
	char buffer[1025];
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	AdminOrderCommand.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClearingPartID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Amount.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableAdminOrder::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCAdminOrder%s = {\n", index_buf);
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	AdminOrderCommand.getString(buf);
	fprintf(fp,"\t\tAdminOrderCommand = %s    [管理报单命令]\n",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [交易会员编号]\n",buf);	
	Amount.getString(buf);
	fprintf(fp,"\t\tAmount = %s    [金额]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableAdminOrder::dumpDiff(FILE *fp, const CWriteableAdminOrder *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCAdminOrder = {\n");
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	AdminOrderCommand.getString(buf);
	if (compare(AdminOrderCommand.getValue(),pOriginal->AdminOrderCommand.getValue())!=0)
	{
		pOriginal->AdminOrderCommand.getString(bufOriginal);
		fprintf(fp,"\t\tAdminOrderCommand = %s -> %s    [管理报单命令]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAdminOrderCommand = %s    [管理报单命令]\n",buf);
	}
	ClearingPartID.getString(buf);
	if (compare(ClearingPartID.getValue(),pOriginal->ClearingPartID.getValue())!=0)
	{
		pOriginal->ClearingPartID.getString(bufOriginal);
		fprintf(fp,"\t\tClearingPartID = %s -> %s    [结算会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClearingPartID = %s    [结算会员编号]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [交易会员编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [交易会员编号]\n",buf);
	}
	Amount.getString(buf);
	if (compare(Amount.getValue(),pOriginal->Amount.getValue())!=0)
	{
		pOriginal->Amount.getString(bufOriginal);
		fprintf(fp,"\t\tAmount = %s -> %s    [金额]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tAmount = %s    [金额]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableAdminOrder::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	AdminOrderCommand.getString(buf);
	fprintf(fp,",AdminOrderCommand,%s",buf);	
	ClearingPartID.getString(buf);
	fprintf(fp,",ClearingPartID,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	Amount.getString(buf);
	fprintf(fp,",Amount,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
}

void CWriteableAdminOrder::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	AdminOrderCommand.getString(buf);
	sprintf(p,"AdminOrderCommand=%s,",buf);
	p+=strlen(p);
	ClearingPartID.getString(buf);
	sprintf(p,"ClearingPartID=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	Amount.getString(buf);
	sprintf(p,"Amount=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableAdminOrder::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CAdminOrder");
	pLogger->output(indent,0,"{");
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	AdminOrderCommand.getString(buf);
	pLogger->output(indent+1,0,"AdminOrderCommand=%s 管理报单命令",buf);
	ClearingPartID.getString(buf);
	pLogger->output(indent+1,0,"ClearingPartID=%s 结算会员编号",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 交易会员编号",buf);
	Amount.getString(buf);
	pLogger->output(indent+1,0,"Amount=%s 金额",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableCommPhase::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,CommPhaseNo\n");
}
	
void CWriteableCommPhase::init(void)
{
	TradingDay.clear();
	CommPhaseNo.clear();
}

int CWriteableCommPhase::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCommPhase),input)!=sizeof(CWriteableCommPhase))
		return 0;
	else
		return 1;
}
	
int CWriteableCommPhase::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CommPhaseNo=token;
		}
		else
		{
			CommPhaseNo="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"CommPhaseNo"))
			{
				CommPhaseNo=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCommPhase::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCommPhase),output)!=sizeof(CWriteableCommPhase))
		return 0;
	else
		return 1;
}

int CWriteableCommPhase::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CommPhaseNo.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCommPhase::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCommPhase%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	CommPhaseNo.getString(buf);
	fprintf(fp,"\t\tCommPhaseNo = %s    [通讯时段号]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCommPhase::dumpDiff(FILE *fp, const CWriteableCommPhase *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCommPhase = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	CommPhaseNo.getString(buf);
	if (compare(CommPhaseNo.getValue(),pOriginal->CommPhaseNo.getValue())!=0)
	{
		pOriginal->CommPhaseNo.getString(bufOriginal);
		fprintf(fp,"\t\tCommPhaseNo = %s -> %s    [通讯时段号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCommPhaseNo = %s    [通讯时段号]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCommPhase::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	CommPhaseNo.getString(buf);
	fprintf(fp,",CommPhaseNo,%s",buf);	
}

void CWriteableCommPhase::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	CommPhaseNo.getString(buf);
	sprintf(p,"CommPhaseNo=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCommPhase::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCommPhase");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	CommPhaseNo.getString(buf);
	pLogger->output(indent+1,0,"CommPhaseNo=%s 通讯时段号",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableCurrHedge::writeCSVHead(FILE *output)
{
	fprintf(output,"TradingDay,SettlementGroupID,SettlementID,HedgeQuotaSN,OperatorID,Time,InstrumentID,PosiDirection,CurrVolume,ParticipantID,ClientID\n");
}
	
void CWriteableCurrHedge::init(void)
{
	TradingDay.clear();
	SettlementGroupID.clear();
	SettlementID.clear();
	HedgeQuotaSN.clear();
	OperatorID.clear();
	Time.clear();
	InstrumentID.clear();
	PosiDirection.clear();
	CurrVolume.clear();
	ParticipantID.clear();
	ClientID.clear();
}

int CWriteableCurrHedge::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrHedge),input)!=sizeof(CWriteableCurrHedge))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrHedge::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			TradingDay=token;
		}
		else
		{
			TradingDay="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			SettlementID=token;
		}
		else
		{
			SettlementID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			HedgeQuotaSN=token;
		}
		else
		{
			HedgeQuotaSN="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OperatorID=token;
		}
		else
		{
			OperatorID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			Time=token;
		}
		else
		{
			Time="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			PosiDirection=token;
		}
		else
		{
			PosiDirection="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			CurrVolume=token;
		}
		else
		{
			CurrVolume="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ParticipantID=token;
		}
		else
		{
			ParticipantID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			ClientID=token;
		}
		else
		{
			ClientID="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"TradingDay"))
			{
				TradingDay=token;
			}
			else if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"SettlementID"))
			{
				SettlementID=token;
			}
			else if (!strcmp(fieldName,"HedgeQuotaSN"))
			{
				HedgeQuotaSN=token;
			}
			else if (!strcmp(fieldName,"OperatorID"))
			{
				OperatorID=token;
			}
			else if (!strcmp(fieldName,"Time"))
			{
				Time=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"PosiDirection"))
			{
				PosiDirection=token;
			}
			else if (!strcmp(fieldName,"CurrVolume"))
			{
				CurrVolume=token;
			}
			else if (!strcmp(fieldName,"ParticipantID"))
			{
				ParticipantID=token;
			}
			else if (!strcmp(fieldName,"ClientID"))
			{
				ClientID=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrHedge::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrHedge),output)!=sizeof(CWriteableCurrHedge))
		return 0;
	else
		return 1;
}

int CWriteableCurrHedge::writeCSV(FILE *output) const
{
	char buffer[1025];
	TradingDay.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	SettlementID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	HedgeQuotaSN.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OperatorID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	Time.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	PosiDirection.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	CurrVolume.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ParticipantID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	ClientID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrHedge::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrHedge%s = {\n", index_buf);
	TradingDay.getString(buf);
	fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	SettlementID.getString(buf);
	fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);	
	HedgeQuotaSN.getString(buf);
	fprintf(fp,"\t\tHedgeQuotaSN = %s    [流水号]\n",buf);	
	OperatorID.getString(buf);
	fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);	
	Time.getString(buf);
	fprintf(fp,"\t\tTime = %s    [时间]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);	
	CurrVolume.getString(buf);
	fprintf(fp,"\t\tCurrVolume = %s    [当前保值额度]\n",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);	
	ClientID.getString(buf);
	fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrHedge::dumpDiff(FILE *fp, const CWriteableCurrHedge *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrHedge = {\n");
	TradingDay.getString(buf);
	if (compare(TradingDay.getValue(),pOriginal->TradingDay.getValue())!=0)
	{
		pOriginal->TradingDay.getString(bufOriginal);
		fprintf(fp,"\t\tTradingDay = %s -> %s    [交易日]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTradingDay = %s    [交易日]\n",buf);
	}
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	SettlementID.getString(buf);
	if (compare(SettlementID.getValue(),pOriginal->SettlementID.getValue())!=0)
	{
		pOriginal->SettlementID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementID = %s -> %s    [结算编号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementID = %s    [结算编号]\n",buf);
	}
	HedgeQuotaSN.getString(buf);
	if (compare(HedgeQuotaSN.getValue(),pOriginal->HedgeQuotaSN.getValue())!=0)
	{
		pOriginal->HedgeQuotaSN.getString(bufOriginal);
		fprintf(fp,"\t\tHedgeQuotaSN = %s -> %s    [流水号]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tHedgeQuotaSN = %s    [流水号]\n",buf);
	}
	OperatorID.getString(buf);
	if (compare(OperatorID.getValue(),pOriginal->OperatorID.getValue())!=0)
	{
		pOriginal->OperatorID.getString(bufOriginal);
		fprintf(fp,"\t\tOperatorID = %s -> %s    [用户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOperatorID = %s    [用户代码]\n",buf);
	}
	Time.getString(buf);
	if (compare(Time.getValue(),pOriginal->Time.getValue())!=0)
	{
		pOriginal->Time.getString(bufOriginal);
		fprintf(fp,"\t\tTime = %s -> %s    [时间]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tTime = %s    [时间]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	PosiDirection.getString(buf);
	if (compare(PosiDirection.getValue(),pOriginal->PosiDirection.getValue())!=0)
	{
		pOriginal->PosiDirection.getString(bufOriginal);
		fprintf(fp,"\t\tPosiDirection = %s -> %s    [持仓多空方向]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tPosiDirection = %s    [持仓多空方向]\n",buf);
	}
	CurrVolume.getString(buf);
	if (compare(CurrVolume.getValue(),pOriginal->CurrVolume.getValue())!=0)
	{
		pOriginal->CurrVolume.getString(bufOriginal);
		fprintf(fp,"\t\tCurrVolume = %s -> %s    [当前保值额度]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tCurrVolume = %s    [当前保值额度]\n",buf);
	}
	ParticipantID.getString(buf);
	if (compare(ParticipantID.getValue(),pOriginal->ParticipantID.getValue())!=0)
	{
		pOriginal->ParticipantID.getString(bufOriginal);
		fprintf(fp,"\t\tParticipantID = %s -> %s    [会员代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tParticipantID = %s    [会员代码]\n",buf);
	}
	ClientID.getString(buf);
	if (compare(ClientID.getValue(),pOriginal->ClientID.getValue())!=0)
	{
		pOriginal->ClientID.getString(bufOriginal);
		fprintf(fp,"\t\tClientID = %s -> %s    [客户代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tClientID = %s    [客户代码]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrHedge::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	TradingDay.getString(buf);
	fprintf(fp,",TradingDay,%s",buf);	
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	SettlementID.getString(buf);
	fprintf(fp,",SettlementID,%s",buf);	
	HedgeQuotaSN.getString(buf);
	fprintf(fp,",HedgeQuotaSN,%s",buf);	
	OperatorID.getString(buf);
	fprintf(fp,",OperatorID,%s",buf);	
	Time.getString(buf);
	fprintf(fp,",Time,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	PosiDirection.getString(buf);
	fprintf(fp,",PosiDirection,%s",buf);	
	CurrVolume.getString(buf);
	fprintf(fp,",CurrVolume,%s",buf);	
	ParticipantID.getString(buf);
	fprintf(fp,",ParticipantID,%s",buf);	
	ClientID.getString(buf);
	fprintf(fp,",ClientID,%s",buf);	
}

void CWriteableCurrHedge::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	TradingDay.getString(buf);
	sprintf(p,"TradingDay=%s,",buf);
	p+=strlen(p);
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	SettlementID.getString(buf);
	sprintf(p,"SettlementID=%s,",buf);
	p+=strlen(p);
	HedgeQuotaSN.getString(buf);
	sprintf(p,"HedgeQuotaSN=%s,",buf);
	p+=strlen(p);
	OperatorID.getString(buf);
	sprintf(p,"OperatorID=%s,",buf);
	p+=strlen(p);
	Time.getString(buf);
	sprintf(p,"Time=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	PosiDirection.getString(buf);
	sprintf(p,"PosiDirection=%s,",buf);
	p+=strlen(p);
	CurrVolume.getString(buf);
	sprintf(p,"CurrVolume=%s,",buf);
	p+=strlen(p);
	ParticipantID.getString(buf);
	sprintf(p,"ParticipantID=%s,",buf);
	p+=strlen(p);
	ClientID.getString(buf);
	sprintf(p,"ClientID=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrHedge::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrHedge");
	pLogger->output(indent,0,"{");
	TradingDay.getString(buf);
	pLogger->output(indent+1,0,"TradingDay=%s 交易日",buf);
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	SettlementID.getString(buf);
	pLogger->output(indent+1,0,"SettlementID=%s 结算编号",buf);
	HedgeQuotaSN.getString(buf);
	pLogger->output(indent+1,0,"HedgeQuotaSN=%s 流水号",buf);
	OperatorID.getString(buf);
	pLogger->output(indent+1,0,"OperatorID=%s 用户代码",buf);
	Time.getString(buf);
	pLogger->output(indent+1,0,"Time=%s 时间",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	PosiDirection.getString(buf);
	pLogger->output(indent+1,0,"PosiDirection=%s 持仓多空方向",buf);
	CurrVolume.getString(buf);
	pLogger->output(indent+1,0,"CurrVolume=%s 当前保值额度",buf);
	ParticipantID.getString(buf);
	pLogger->output(indent+1,0,"ParticipantID=%s 会员代码",buf);
	ClientID.getString(buf);
	pLogger->output(indent+1,0,"ClientID=%s 客户代码",buf);
	pLogger->output(indent,0,"}");
}




void CWriteableCurrInstrumentOption::writeCSVHead(FILE *output)
{
	fprintf(output,"SettlementGroupID,InstrumentID,OptPostLimitRatio,UniPostLimitRatio,MiniMargin\n");
}
	
void CWriteableCurrInstrumentOption::init(void)
{
	SettlementGroupID.clear();
	InstrumentID.clear();
	OptPostLimitRatio.clear();
	UniPostLimitRatio.clear();
	MiniMargin.clear();
}

int CWriteableCurrInstrumentOption::read(FILE *input) 
{
	if (fread(this,1,sizeof(CWriteableCurrInstrumentOption),input)!=sizeof(CWriteableCurrInstrumentOption))
		return 0;
	else
		return 1;
}
	
int CWriteableCurrInstrumentOption::readCSV(FILE *input,vector<char *> *pNames)
{
	char buffer[1025];
	char *token;
	if (fgets(buffer,1024,input)==NULL)
		return 0;
	if (pNames==NULL)
	{
		token=getNextToken(buffer);
		if (token!=NULL)
		{
			SettlementGroupID=token;
		}
		else
		{
			SettlementGroupID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			InstrumentID=token;
		}
		else
		{
			InstrumentID="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			OptPostLimitRatio=token;
		}
		else
		{
			OptPostLimitRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			UniPostLimitRatio=token;
		}
		else
		{
			UniPostLimitRatio="";
		}
		token=getNextToken(NULL);
		if (token!=NULL)
		{
			MiniMargin=token;
		}
		else
		{
			MiniMargin="";
		}
	}
	else
	{
		init();
		token=getNextToken(buffer);
		int i=0;
		while (token!=NULL)
		{
			char *fieldName;
			fieldName=pNames->at(i);
			if (fieldName==NULL)
			{
				break;
			}
			if (!strcmp(fieldName,"SettlementGroupID"))
			{
				SettlementGroupID=token;
			}
			else if (!strcmp(fieldName,"InstrumentID"))
			{
				InstrumentID=token;
			}
			else if (!strcmp(fieldName,"OptPostLimitRatio"))
			{
				OptPostLimitRatio=token;
			}
			else if (!strcmp(fieldName,"UniPostLimitRatio"))
			{
				UniPostLimitRatio=token;
			}
			else if (!strcmp(fieldName,"MiniMargin"))
			{
				MiniMargin=token;
			}
			i++;
			token=getNextToken(NULL);
		}
	}
	return 1;
}
	
int CWriteableCurrInstrumentOption::write(FILE *output) const
{
	if (fwrite(this,1,sizeof(CWriteableCurrInstrumentOption),output)!=sizeof(CWriteableCurrInstrumentOption))
		return 0;
	else
		return 1;
}

int CWriteableCurrInstrumentOption::writeCSV(FILE *output) const
{
	char buffer[1025];
	SettlementGroupID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	InstrumentID.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	OptPostLimitRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	UniPostLimitRatio.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,",");
	MiniMargin.getString(buffer);
	fprintf(output,"%s",buffer);
	fprintf(output,"\n");
	return 1;
}
void CWriteableCurrInstrumentOption::dump(FILE *fp,int index) const
{
	char index_buf[20];
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	if (index>=0)
		sprintf(index_buf,"[%d]",index);
	else
		index_buf[0]='\0';
	fprintf(fp, "\tCCurrInstrumentOption%s = {\n", index_buf);
	SettlementGroupID.getString(buf);
	fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);	
	OptPostLimitRatio.getString(buf);
	fprintf(fp,"\t\tOptPostLimitRatio = %s    [同标的期权的合并持仓倍数]\n",buf);	
	UniPostLimitRatio.getString(buf);
	fprintf(fp,"\t\tUniPostLimitRatio = %s    [期货和同标的期权的合并持仓倍数]\n",buf);	
	MiniMargin.getString(buf);
	fprintf(fp,"\t\tMiniMargin = %s    [单位（手）期权合约最小保证金]\n",buf);	
	fprintf(fp,"\t}\n");
}

void CWriteableCurrInstrumentOption::dumpDiff(FILE *fp, const CWriteableCurrInstrumentOption *pOriginal) const
{
	char buf[4000],bufOriginal[4000];
	if(fp==NULL)
	{
		fp=stdout;
	}
	fprintf(fp, "\tCCurrInstrumentOption = {\n");
	SettlementGroupID.getString(buf);
	if (compare(SettlementGroupID.getValue(),pOriginal->SettlementGroupID.getValue())!=0)
	{
		pOriginal->SettlementGroupID.getString(bufOriginal);
		fprintf(fp,"\t\tSettlementGroupID = %s -> %s    [结算组代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tSettlementGroupID = %s    [结算组代码]\n",buf);
	}
	InstrumentID.getString(buf);
	if (compare(InstrumentID.getValue(),pOriginal->InstrumentID.getValue())!=0)
	{
		pOriginal->InstrumentID.getString(bufOriginal);
		fprintf(fp,"\t\tInstrumentID = %s -> %s    [合约代码]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tInstrumentID = %s    [合约代码]\n",buf);
	}
	OptPostLimitRatio.getString(buf);
	if (compare(OptPostLimitRatio.getValue(),pOriginal->OptPostLimitRatio.getValue())!=0)
	{
		pOriginal->OptPostLimitRatio.getString(bufOriginal);
		fprintf(fp,"\t\tOptPostLimitRatio = %s -> %s    [同标的期权的合并持仓倍数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tOptPostLimitRatio = %s    [同标的期权的合并持仓倍数]\n",buf);
	}
	UniPostLimitRatio.getString(buf);
	if (compare(UniPostLimitRatio.getValue(),pOriginal->UniPostLimitRatio.getValue())!=0)
	{
		pOriginal->UniPostLimitRatio.getString(bufOriginal);
		fprintf(fp,"\t\tUniPostLimitRatio = %s -> %s    [期货和同标的期权的合并持仓倍数]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tUniPostLimitRatio = %s    [期货和同标的期权的合并持仓倍数]\n",buf);
	}
	MiniMargin.getString(buf);
	if (compare(MiniMargin.getValue(),pOriginal->MiniMargin.getValue())!=0)
	{
		pOriginal->MiniMargin.getString(bufOriginal);
		fprintf(fp,"\t\tMiniMargin = %s -> %s    [单位（手）期权合约最小保证金]\n",bufOriginal,buf);
	}
	else
	{
		fprintf(fp,"\t\tMiniMargin = %s    [单位（手）期权合约最小保证金]\n",buf);
	}
	fprintf(fp,"\t}\n");
}

void CWriteableCurrInstrumentOption::dumpInLine(FILE *fp) const
{
	char buf[4000];///存放每个成员的字符串值	
	if(fp==NULL)
	{
		fp=stdout;
	}
	SettlementGroupID.getString(buf);
	fprintf(fp,",SettlementGroupID,%s",buf);	
	InstrumentID.getString(buf);
	fprintf(fp,",InstrumentID,%s",buf);	
	OptPostLimitRatio.getString(buf);
	fprintf(fp,",OptPostLimitRatio,%s",buf);	
	UniPostLimitRatio.getString(buf);
	fprintf(fp,",UniPostLimitRatio,%s",buf);	
	MiniMargin.getString(buf);
	fprintf(fp,",MiniMargin,%s",buf);	
}

void CWriteableCurrInstrumentOption::dumpString(char *target) const
{
	char *p=target;
	char buf[4000];///存放每个成员的字符串值	
	SettlementGroupID.getString(buf);
	sprintf(p,"SettlementGroupID=%s,",buf);
	p+=strlen(p);
	InstrumentID.getString(buf);
	sprintf(p,"InstrumentID=%s,",buf);
	p+=strlen(p);
	OptPostLimitRatio.getString(buf);
	sprintf(p,"OptPostLimitRatio=%s,",buf);
	p+=strlen(p);
	UniPostLimitRatio.getString(buf);
	sprintf(p,"UniPostLimitRatio=%s,",buf);
	p+=strlen(p);
	MiniMargin.getString(buf);
	sprintf(p,"MiniMargin=%s,",buf);
	p+=strlen(p);
	p--;
	*p='\0';
}

void CWriteableCurrInstrumentOption::output(CLogger *pLogger,int indent)
{
	char buf[1024];
	pLogger->output(indent,0,"CCurrInstrumentOption");
	pLogger->output(indent,0,"{");
	SettlementGroupID.getString(buf);
	pLogger->output(indent+1,0,"SettlementGroupID=%s 结算组代码",buf);
	InstrumentID.getString(buf);
	pLogger->output(indent+1,0,"InstrumentID=%s 合约代码",buf);
	OptPostLimitRatio.getString(buf);
	pLogger->output(indent+1,0,"OptPostLimitRatio=%s 同标的期权的合并持仓倍数",buf);
	UniPostLimitRatio.getString(buf);
	pLogger->output(indent+1,0,"UniPostLimitRatio=%s 期货和同标的期权的合并持仓倍数",buf);
	MiniMargin.getString(buf);
	pLogger->output(indent+1,0,"MiniMargin=%s 单位（手）期权合约最小保证金",buf);
	pLogger->output(indent,0,"}");
}

CCurrInstrumentOptionIterator::~CCurrInstrumentOptionIterator(void)
{
}


void CCurrInstrumentOptionIterator::dump(FILE *output)
{
	CCurrInstrumentOption *pCurrInstrumentOption;
	
	while ((pCurrInstrumentOption=next())!=NULL)
	{
		pCurrInstrumentOption->dump(output);
	}
}


